<html>
<!-- ===========================================================
			CollinsPDF.txt
----------------------------------------------------------------

Rename this file to CollinsPDF.htm to run as an all inclusive 
HTML document. It will TEST the CollinsPDF functions.
This file contains about 36,000 lines	

You will need the ECHO.asp file if you want to use IFRAMES
This file bounces the PDF data off the server (its binary)
so the PDF can be viewed in an IFRAME target

All lines in this file AFTER line 44 the <SCRIPT> tag can be moved
to a CollinsPDF.js file, Remove the last 2 lines </SCRIPT> and </HTML>

================================================================ -->
<title>CollinsPDF Example</title>

<body>

Options:
    <select id="option_as">
        <option value="" selected>PDF</option>
        <option value="string">string</option>
        <option value="base64">base64</option>
        <option value="dataurl">dataurl</option>
    </select>
<br /><br />

HTML file to convert to PDF<br>
<input  size=80 id=myFile type="file" value="Select Local Html File" onChange="CollinsPDF('file=myFile as='+ option_as.value)"><br><br>

<input  type="button" style="width:160px" value="Convert This File" onClick="CollinsPDF('url=pdf.htm  as=' + option_as.value)"><br><br>

<input type="button" style="width:160px"  value="HTML text To PDF" onclick="CollinsPDF('id=myData as=' + option_as.value)"><br>

<textarea id=myData style="width:100%" rows=5><center>Hello World</center></textarea>

<br>
<center>
<a href="http://CollinsSoftware.com" title="CollinsPDF.js created by">Collins Software</a>
</center>
</body>
<script>
"use strict";
//==========================================================================================
//						 CollinsPDF.js
//	Author: Clifford L. Collins		Date: Feb 2016
//-----------------------------------------------------------------------------------------
//	Collins Software
//	7710 Janak Drive, Houston Texas 77055
//	http://CollinsSoftwre.com
//
//	Copyright © 2016, Clifford L. Collins
//	All Rights Reserved
//
//=========================================================================================

//=========================================================
//			CollinsPDF
//=========================================================
function CollinsPDF(cmd)
{
	if (! window.$$CollinsPDF) window.$$CollinsPDF = new CollinsPDF$();
	if (arguments.length == 0) return window.$$CollinsPDF;
	return window.$$CollinsPDF.execute(cmd,arguments);
}
//=========================================================
//			CollinsPDF
//=========================================================
function CollinsPDF$()
{
	var agent;

	this.clientPath	= '';
	
	this.execute		= CollinsPDF$execute;
	this.read		= CollinsPDF$read;
	this.readBuffer		= CollinsPDF$readBuffer;
	this.readUrl		= CollinsPDF$readUrl;
	this.readFiles		= CollinsPDF$readFiles;
	this.readFile		= CollinsPDF$readFile;
	this.echo		= CollinsPDF$echo;
	this.serverEcho		= CollinsPDF$serverEcho;
	this.parse		= CollinsPDF$parse;
	this.mapPath		= CollinsPDF$mapPath;
	this.jpegsize		= CollinsPDF$jpegsize;

	this.make		= new make_client_full$(this);
		
	agent = navigator.userAgent.toLowerCase();
	window.IE = (agent.indexOf("msie") != -1) || (agent.indexOf("trident") != -1)

	this.files		= new Array();
	this.bufferFiles	= false;

	this.http = null;

	try { this.http = new XMLHttpRequest(); } catch (e) { }
	if (! this.http) try { this.http = window.createRequest(); } catch (e) {}
}
//=========================================================
//		CollinsPDF$execute
//=========================================================
function CollinsPDF$execute(cmd,args)
{
	var command,self;
	
	self = this;
	command = this.parse(cmd,args);
	
	if (command.fileButton != null) return this.readFile(command.fileButton);
	if (command.url != '') return this.readUrl(command.url,onFileLoaded);
	return this.make.execute(command,args,this);

	function onFileLoaded(data)
	{
		command.data = data;
		self.make.execute(command,args,self);
	}
	
}
//=========================================================
//		CollinsPDF$mapPath
//=========================================================
function CollinsPDF$mapPath(url)
{
	return url;
}
//=========================================================
//		CollinsPDF$parse
//=========================================================
function CollinsPDF$parse(cmd,args)
{
	var command,i,j,list,text,name,value,ele;

	command = new Object();
		
	command.$name		= 'OPEN';
	command.to		= 'client';	// or server
	command.format		= 'html';
	command.target		= '_blank';
	command.id		= '';
	command.data		= '';
	command.file		= '';
	command.as		= 'pdf';	// or string,dataurl,base64;
	command.root		= '';
	command.filename	= '';
	command.button		= null;
	command.url		= '';

	if (args.length > 1) command.data = args[1];

	list = cmd.split(' ');
	for (i=0; i < list.length; ++i)
	{
		text = pdf$trim(list[i]);
		if (text == '') continue;
		j = text.indexOf('=');
		if (j < 0)
		{
			if (text.toLowerCase() ==   'open') command.$name = 'OPEN';
			if (text.toLowerCase() ==  'write') command.$name = 'WRITE';
			if (text.toLowerCase() == 'return') command.$name = 'RETURN';
			continue;
		}
		
		name = pdf$trim(text.substr(0,j)).toLowerCase();
		value = pdf$trim(text.substr(j+1));
		command[name] = value;
	}

	if (command.id != '')
	{
		ele = document.getElementById(command.id);
		if (ele) command.data = ele.value;
	}

	if (command.file != '')	command.fileButton = document.getElementById(command.file);
	
	if (command.url != '') command.data = this.read(command.url);
	return command;
}
//=========================================================
//			CollinsPDF$jpegsize
//=========================================================
function CollinsPDF$jpegsize(url)
{
	var i,file;
	
	url = url.toLowerCase();
	if (this.bufferFiles)
	{
		this.read(url);
		return null;
	}

	file == null;
	for (i=0; i < this.files.length; ++i)
	{
		file = this.files[i];
		if (url == file.url) break;
		file = null;
	}
	
	if (file == null) return null;
	return jpegsize_A(file.buffer);
	
//------------------ jpegsize_A ------------------------

	function jpegsize_A(buffer)
	{
		var i,text;
		var obj,n,a,b;
		var block_length;
		var a1,b1,a2,b2;
  
		obj = new Object();
		obj.height = 0;
		obj.width = 0;
		obj.angle = 0;
		obj.size = buffer.length;
		obj.is3D = false;

		n = buffer[0];
		n = buffer[1];
		n = buffer[2];
		n = buffer[3];
    
		if (! ( buffer[0] == 0xFF && 
			buffer[1] == 0xD8 && 
			buffer[2] == 0xFF)) return null;

	    if (buffer[3] == 0xE0)
	    {
	        if (buffer[6] != 74) return null;
	        if (buffer[7] != 70) return null;
	        if (buffer[8] != 73) return null;
	        if (buffer[9] != 70) return null;
	        if (buffer[10] != 0) return null;
		}
		else
		{
		   if (buffer[3] != 0xE1) return null;	
		}

		i = 4;

	        while (i < buffer.length + 9)
	        {
			a = buffer[i];
			b = buffer[i+1];
			
			block_length =  a * 256 + b;
			i += block_length;
			if (i >= buffer.length) return null;
			if (buffer[i] != 0xFF) return null;
			
			if ((buffer[i+1] == 0xC0) || (buffer[i+1] == 0xC2))
			{
			   a1 = buffer[i+5];
			   b1 = buffer[i+6];
			
			   a2 = buffer[i+7];
			   b2 = buffer[i+8];
			
			   obj.height = (a1 * 256) + b1;
			   obj.width = (a2 * 256) + b2;
			   return obj;
			}

			i += 2;
       
	       }

		return null;	         
	}
}
//=========================================================
//			CollinsPDF$read
//=========================================================
function CollinsPDF$read(url)
{
	var buffer,data,i;
	
	data = '';
	buffer = CollinsPDF().readBuffer(url);
	if (! buffer) return '';

	for (i=0; i < buffer.length; ++i) data += String.fromCharCode(buffer[i]);
	return data;
}
//=========================================================
//			CollinsPDF$readBuffer
//=========================================================
function CollinsPDF$readBuffer(url)
{
	var data,buffer,i,file;

	url =  pdf$trim(url).toLowerCase();
	
	for (i=0; i < this.files.length; ++i)
	{
		file = this.files[i];
		if (file.url == url) break;
		file = null;
	}

	if (! this.bufferFiles) 
	{
		if (file == null) return '';
		if (! file.buffer) return '';
		return file.buffer;
	}
	
	if (file != null) return '';
	file = new Object();
	file.url = url;
	this.files[this.files.length] = file;
	return '';	
}	
//=========================================================
//			CollinsPDF$readUrl
//=========================================================
function CollinsPDF$readUrl(url,onFileLoaded)
{
	var file;
	
	this.http.open('get',url,true);
	this.http.responseType = '';
	this.http.onreadystatechange = waitForFile;
	this.http.send();

	function waitForFile(e)
	{
		var data;
		data = '';
		if (this.readyState !=4) return;
		if (this.status == 200) 
		{
			data = this.responseText;			
		}
		onFileLoaded(data);
	}
}
//=========================================================
//			CollinsPDF$readFiles
//=========================================================
function CollinsPDF$readFiles(pos,onFilesLoaded)
{
	var file,self;
	
	if (pos >= this.files.length) return onFilesLoaded();
	
	file = this.files[pos];
	self = this;
	
	this.http.open('get',file.url,true);
	this.http.responseType = 'arraybuffer';
	this.http.onreadystatechange = waitForFile;
	this.http.send();

	function waitForFile(e)
	{
	    var temp, text, i;
		if (this.readyState !=4) return;

		if (this.status == 200)
		{
			file.buffer = new Uint8Array(this.response); 
		}
		else
		{
//		text = '';
//		temp = new Uint8Array(this.response);
//		for (i = 0; i < temp.length; ++i) text += String.fromCharCode(temp[i]);
		}
		self.readFiles(pos+1,onFilesLoaded);	
	}
}
//=========================================================
//			CollinsPDF$readFile
//=========================================================
function CollinsPDF$readFile(input)
{
	if (input.files && input.files[0])
	{
		var reader = new FileReader();
		reader.onload = function (e) 
		{  
			var output=e.target.result;
			CollinsPDF('',output);
		}

		reader.readAsText(input.files[0]);
	} 
}
//=========================================================
//			CollinsPDF$serverEcho
//=========================================================
function CollinsPDF$serverEcho(filename,data,type,target)
{

}
//=========================================================
//			CollinsPDF$echo
//=========================================================
function CollinsPDF$echo(data,target,type)
{
	var link,contentType,e,blob,buffer,bytes,i,filename;
	var doc,blobUrl,cmd,ext,list,link,win,url;

	ext = 'txt';
	if (type == 'application/pdf') ext = 'pdf';
	filename = 'sample.' + ext;
	
	
	if (target == '_blank') 
	{
	    //---------- chrome open PDF window ----
		if (typeof (window) == 'object' && (!window.IE) && typeof (data) == 'object') 
		{
		    url = 'data:application/pdf;base64,' + pdf$toBase64(data);
		    win = window.open("")
		    win.document.write("<iframe width='100%' height='100%' src='" + url + "'></iframe>")
		    return;
		}
	}
	
    //--------- create Blob -----
	
	if (typeof(data) == 'string' && data == '') data = ' ';
	buffer = new ArrayBuffer(data.length);
	bytes  = new Uint8Array(buffer);

	if (typeof(data) == 'string')
	{
		for (i = 0; i < data.length; i++) bytes[i] = data.charCodeAt(i);
	}
	else
	{
		for (i = 0; i < data.length; i++) bytes[i] = data.buffer[i];
	}
	blob = new Blob([buffer], {type: type, endings: 'native' });

    //--------- IE open PDF window -----

    
	if (target == '_blank')
	{
	    if (window.navigator.msSaveOrOpenBlob)
	    {
	       window.navigator.msSaveOrOpenBlob(blob, filename);
	       return;
	    }
	}
   
//--------------------- echo off server (iframe target) --------------------------

	    if (!this.link) {
	        this.link = document.createElement("form");
	        this.link.style.display = 'none';
	        this.link.method = 'POST';
	        this.link.style.display = 'none';

	        document.body.appendChild(this.link);
	    }

	cmd = 'echo.asp?command=get&type=' + type + '&filename=' + filename;
	contentType = type;
	this.link.target = target;
	this.link.action = cmd;
	link = this.link;

	this.http.open("POST", 'echo.asp?command=keep', true);
	this.http.contentType = '';
	this.http.onreadystatechange = waitForUpload;
	this.http.send(blob);

	function waitForUpload(e)
	{
	if (this.readyState != 4) return;
	if (this.status == 200) link.submit();
	}

}
//=========================================================
//			make (client)
//=========================================================
function make_client_full$()
{
	
	this.execute		= make_client_full$execute;
	this.executeEmail	= make_client_full$executeEmail;
	
	this.newPdf		= make_client_full$newPdf;
	
	this.html		= null;
	this.pdf		= null;

	this.html_pageHeader	= '';
	this.html_pageFooter	= '';

	this.location_echoUrl	= '';
	this.sys		= new client$();
}
//=========================================================
//		make_client_full$execute
//=========================================================
function make_client_full$execute(command,args,c)
{
	var htmlData,skip_second_parse,self,result;

	self = this;
	
	if ((! this.html) || (! (command.$name == 'ADD' || command.$name == 'RETURN'))) 
	{
		this.html = new html$(this.sys);
	}

	if (command.$name == "RETURN")
	{
	    command.as = command.as.toUpperCase();
	    if (command.as == 'OBJECT_PDF') return this.pdf;
	    if (command.as == 'OBJECT_HTML') return this.html;
	    if (command.as == 'ERROR MESSAGES') return this.output.messages;
	}

	c.files = new Array();
	c.bufferFiles = true;
	
	htmlData = command.data;

	this.newPdf(this.sys);
	this.html.parse(htmlData);
	c.bufferFiles = false;

	if (c.files.length == 0)
	{
		skip_second_parse = true;
		result =  execute_command(skip_second_parse);
		return result;
	}

	this.html = new html$(this.sys);
	this.html.pdf	= this.pdf;
	this.pdf.html	= this.html;
	this.output	= this.pdf;

	c.readFiles(0,execute_command);
	return;
	
//-------------------------- execute_command ---------------------------

	function execute_command(skip_second_parse)
	{
		if (! skip_second_parse) self.html.parse(htmlData);

		self.html.writeToPdf(self.pdf);
	
		switch (command.$name)
		{
		case "WRITE": 
				self.output.writeToFile(command.to,command.as);
				break;
		case "OPEN": 
				self.output.open(command.filename,command.target,command.as);
				break;
		case "RETURN": 
				command.as = command.as.toUpperCase();
				if (command.as ==  'BASE64') return self.pdf.toBase64(self.data);
				if (command.as == 'DATAURL') return self.pdf.toDataURL();
				if (command.as == 'OBJECT_PDF')	return self.pdf;
				if (command.as == 'OBJECT_HTML') return self.html;
				if (command.as == 'ERROR MESSAGES') return self.output.messages;
				return self.output.toString();
				break;	
	
		default: throw ("make -- unknown execution statement " + statement.command);

		}
	}
}
//==============================================================================
//			make_client_full$newPdf
//==============================================================================
function make_client_full$newPdf(sys)
{

	this.pdf = new pdf$(sys);
	this.html.pdf	= this.pdf;
	this.pdf.html	= this.html;
	this.output	= this.pdf;

	this.pdf.parent = this;

	if (this.location_echoUrl != '') this.pdf.echoUrl = this.location_echoUrl;

	this.pdf.html_pageHeader	= this.html_pageHeader;
	this.pdf.html_pageFooter	= this.html_pageFooter;
	
	this.pdf.onPageHeader		= make_client_full$onPageHeader;
	this.pdf.onPageFooter		= make_client_full$onPageFooter;

	this.reset					= false;
}
//==============================================================================
//			make_client_full$executeEmail
//==============================================================================
function make_client_full$executeEmail(command)
{
try
{
		if (command.filename == '') command.filename = 'untitled.pdf';
//		CollinsPDF().onEmail(command);
		return;
}
catch (e) {}

	command.server = ''
	if (this.email_server != '')
	{
		command.server = this.pdf.encodeMany(this.email_server,
			this.email.username,
			this.email.password,
			this.email.port);
	}
	
	return this.output.email(command);
}
//==============================================================================
//			make_client_full$onPageHeader
//==============================================================================
function make_client_full$onPageHeader(page,total,pdf)
{
	var text,html,dx,pageWidth;
	var x1,y1,x2,y2;

	if (pdf.html_pageHeader == '') return;
	text = pdf.html_pageHeader;
	text = text.replace(/\{page\}/gi,page);
	text = text.replace(/\{pages\}/gi,total);
	text = pdf.html.resolve(text);

	html = new html$(pdf.sys,'',pdf.html);
	html.pdf = pdf;
	html.imagePath = pdf.imagePath;
	html.parse(text);

	html.writeToPdf(pdf);
}
//==============================================================================
//			make_client_full$onPageFooter
//==============================================================================
function make_client_full$onPageFooter(page,total,pdf)
{
	var text,html,pageWidth,height,pageWidth;

	if (pdf.html_pageFooter == '') return;

	text = pdf.html_pageFooter;
	text = text.replace(/\{page\}/gi,page);
	text = text.replace(/\{pages\}/gi,total);
	text = pdf.html.resolve(text);

	pageWidth = (pdf.xmax - pdf.xmin) / 72 * 110;

	html = new html$(pdf.sys,'',pdf.html);
	html.pdf = pdf;
	html.parse(text);

	html.resize(pageWidth,0);
	height = html.body.offsetHeight + html.body.marginTop + html.body.marginBottom + 0;

	pdf.ymax = height + 2;
	pdf.ypos = height + 2;

	html.writeToPdf(pdf);
}
//==========================================================================================
//			pdf$ (Constructor)
//==========================================================================================
function pdf$(sys)
{
	var name,i,units;

	this.sys				= sys;
	if (this.sys != null) this.sys.pdf	= this;

	this.plot				= new pdfPlot$(this);
	this.graphicCg2				= new graphicCg2$(this.plot,sys);

	this.c					= 'n' + String.fromCharCode(0x65);
	this.data				= new pdfBuffer$();

	this.debug				= false;
	this.hexEncodeImages			= false;
	this.includeSignature			= false;
		
	this.watermark				= '';
	this.server				= new pdfServer$(this);    //
	this.landscape				= false;
	this.subreport				= false;
	this.characterMap			= null;
	this.http				= null;
	this.emailForm				= null;

	this.opacity				= '';
	this.view				= null;

	this.echoUrl				= 'CollinsPDF.asp';
	this.emailUrl				= 'CollinsPDF.asp';

	this.email_server			= '';
	this.email_username			= '';
	this.email_password			= '';
	this.email_port				= 25;

	this.pageBackgroundColor		= '';
	this.pageMarginLeftColor		= '';
	this.pageMarginRightColor		= '';
	this.pageMarginTopColor			= '';
	this.pageMarginBottomColor		= '';
	this.pageRotate				= '';

	this.href_style				= true;
	this.relative				= false;
	this.byteToHex				= pdf$byteToHex;

	this.b					= 'at';
	this.a					= 'D' + this.b;

	this.setUnits				= pdf$setUnits;
	units = 'inch'; 
	this.setUnits(units);
	
	this.setPageSize			= pdf$setPageSize;
		
	this.writeToFile			= pdf$writeToFile;
	this.sendToClient			= pdf$sendToClient;	
	this.downloadToClient			= pdf$downloadToClient;	
	this.sendToServer			= pdf$sendToServer;	//
	this.uploadFile				= pdf$uploadFile;	//
	this.open				= pdf$open;

	this.charWidth				= pdf$charWidth;
	this.charHeight				= pdf$charHeight;
	this.charVisible			= pdf$charVisible;
	this.textWidth				= pdf$textWidth;
	
	this.lineBreak				= pdf$lineBreak;
	this.pageBreak				= pdf$pageBreak;
	
	this.addHeader				= pdf$addHeader;
	
	this.onPageOpen				= pdf$onPageOpen;
	this.onPageClose			= pdf$onPageClose;
	this.onDocumentOpen			= pdf$onDocumentOpen;

	this.onWillClose			= pdf$onWillClose;
	this.onWillSave				= pdf$onWillSave;
	this.onDidSave				= pdf$onDidSave;
	this.onWillPrint			= pdf$onWillPrint;
	this.onDidPrint				= pdf$onDidPrint;

	this.addFormSubmit			= pdf$addFormSubmit;
	this.addFormReset			= pdf$addFormReset;
	this.addFormButton			= pdf$addFormButton;
	this.addFormRadio			= pdf$addFormRadio;
	this.addFormCheckbox			= pdf$addFormCheckbox;
	this.addFormText			= pdf$addFormText;
	this.addFormTextarea			= pdf$addFormText;
	this.addFormPassword			= pdf$addFormPassword;
	this.addFormImage			= pdf$addFormImage;
	this.addFormFile			= pdf$addFormFile;
	this.addFormSelect			= pdf$addFormSelect;
	this.addFormListbox			= pdf$addFormListbox;

	this.drawChar				= pdf$drawChar;
	this.drawArc				= pdf$drawArc;
	this.drawCone				= pdf$drawCone;
	this.drawCircle				= pdf$drawCircle;
	this.drawLine				= pdf$drawLine;
	this.drawPolygon			= pdf$drawPolygon;
	this.drawLinestring			= pdf$drawLinestring;
	this.drawLinestring2			= pdf$drawLinestring2;
	this.drawRectangle			= pdf$drawRectangle;
	this.drawSymbol				= pdf$drawSymbol;
	this.drawMarker				= pdf$drawMarker;
	this.drawTableBox			= pdf$drawTableBox;
	this.drawBox				= pdf$drawBox;
	this.drawFontGrid			= pdf$drawFontGrid;

	this.addFormHidden			= pdf$addFormHidden;

	this.placeFormSubmit			= pdf$placeFormSubmit;
	this.placeFormReset			= pdf$placeFormReset;
	this.placeFormButton			= pdf$placeFormButton;
	this.placeFormImage			= pdf$placeFormImage;
	this.placeFormRadio			= pdf$placeFormRadio;
	this.placeFormCheckbox			= pdf$placeFormCheckbox;
	this.placeFormText			= pdf$placeFormText;
	this.placeFormTextarea			= pdf$placeFormText;
	this.placeFormPassword			= pdf$placeFormPassword;
	this.placeFormFile			= pdf$placeFormFile;
	this.placeFormSelect			= pdf$placeFormSelect;
	this.placeFormListbox			= pdf$placeFormListbox;
	this.placeFormInput			= pdf$placeFormInput;

	this.formButtonSize			= pdf$formButtonSize;

	this.addText				= pdf$addText;
	this.placeText				= pdf$placeText;
	this.placeText_A			= pdf$placeText_A;
	this.justify_				= pdf$justify_;
	this.textSplit				= pdf$textSplit;
	this.textSplit_A			= pdf$textSplit_A;

	this.centerText				= pdf$centerText;
	this.leftText				= pdf$leftText;
	this.rightText				= pdf$rightText;

	this.toString				= pdf$toString;
	this.toBase64				= pdf$toBase64;
	this.toDataURL				= pdf$toDataURL;

	this.addImage				= pdf$addImage;	//
	this.placeImage				= pdf$placeImage;	//
	this.placeImage_A			= pdf$placeImage_A;	//
	this.placeMissingImage			= pdf$placeMissingImage;	//
	this.imageSize				= pdf$imageSize;	//
	this.imageSize_A			= pdf$imageSize_A;	
	this.jpegSize				= pdf$jpegSize;	
	this.findImage				= pdf$findImage;	
	this.findU3d				= pdf$findU3d;	
	this.findFontfile			= pdf$findFontfile;

	this.addGraphic				= pdf$addGraphic;
	this.placeGraphic			= pdf$placeGraphic;

	this.placeHotspot			= pdf$placeHotspot;
	this.hexSize				= pdf$hexSize;
	
	this.setFont				= pdf$setFont;
	this.setFontColor			= pdf$setFontColor;
	this.setFontSize			= pdf$setFontSize;
	this.setBold				= pdf$setBold;
	this.setItalic				= pdf$setItalic;
	this.setUnderline			= pdf$setUnderline;
	this.setFontName			= pdf$setFontName;
	this.setFontName_A			= pdf$setFontName_A;
	this.fontMode_				= pdf$fontMode_;

	this.setSubscript			= pdf$setSubscript;
	this.setSuperscript			= pdf$setSuperscript;
	this.setLetterSpacing			= pdf$setLetterSpacing;
	this.setWordSpacing			= pdf$setWordSpacing;
	this.setFontRender			= pdf$setFontRender;
	this.setFontSkew			= pdf$setFontSkew;
	this.setFontScale			= pdf$setFontScale;
	
	this.setPageBackgroundColor		= pdf$setPageBackgroundColor;
	this.setPageMarginColor			= pdf$setPageMarginColor;
	this.setPageRotate			= pdf$setPageRotate;

	this.makeFontCID			= pdf$makeFontCID;
	this.makeFontTruetype			= pdf$makeFontTruetype;
	this.makeFontType1			= pdf$makeFontType1;
	this.makeFontClone			= pdf$makeFontClone;
	
	this.setMargins				= pdf$setMargins;
	this.setMargin				= pdf$setMargin;
	this.setMarginTop			= pdf$setMarginTop;
	this.setMarginLeft			= pdf$setMarginLeft;
	this.setMarginRight			= pdf$setMarginRight;
	this.setMarginBottom			= pdf$setMarginBottom;

	this.linesRemaining			= pdf$linesRemaining;
	this.setBorderWidth			= pdf$setBorderWidth;
	this.setRulerAlign			= pdf$setRulerAlign;	//

	this.setWatermark			= pdf$setWatermark;
	this.setLandscape			= pdf$setLandscape;			

	this.setOpacity				= pdf$setOpacity;
	this.setGraphic				= pdf$setGraphic;
	this.setGraphic_A			= pdf$setGraphic_A;

	this.setClipRegion			= pdf$setClipRegion;
	this.tileImage				= pdf$tileImage;
	this.resolve_text			= pdf$resolve_text;

	this.reportInit				= pdf$reportInit;	//
	this.reportCreateGroup			= pdf$reportCreateGroup;	//
	this.reportAddDetail			= pdf$reportAddDetail;		//
	this.reportAddText			= pdf$reportAddText;		//
	this.reportColumns			= pdf$reportColumns;		//

	this.setRuler				= pdf$setRuler;		//
	this.read				= pdf$read;

	this.addOutline				= pdf$addOutline;
	
	this.setGraphicColor			= pdf$setGraphicColor;
	this.setGraphicLineWeight		= pdf$setGraphicLineWeight;
	this.setGraphicFillColor		= pdf$setGraphicFillColor;
	this.setGraphicLineStyle		= pdf$setGraphicLineStyle;
	this.setGraphicTransparent		= pdf$setGraphicTransparent;

//------------- private --------------

	this.drawBorder				= pdf$drawBorder;
	this.drawBorder_A			= pdf$drawBorder_A;
	this.drawBottomLine			= pdf$drawBottomLine;
	this.drawCalendar			= pdf$drawCalendar;
	this.drawCalendarSimple			= pdf$drawCalendarSimple;
	this.drawGrid				= pdf$drawGrid;
	
	this.drawTimeline			= pdf$drawTimeline;

	this.trim				= pdf$trim;

	this.setSize_				= pdf$setSize_;

	this.putLine_				= pdf$putLine_;
	this.put_				= pdf$put_;
	this.putWord_				= pdf$putWord_;
	this.width_				= pdf$width_;
	this.escape_				= pdf$escape_;
	this.isUrl_				= pdf$isUrl_;

	this.clipText_				= pdf$clipText_;
	this.toPoint_				= pdf$toPoint_;
	this.toPoints_				= pdf$toPoints_;
	this.base64ToAscii85_			= pdf$base64ToAscii85_;
	this.base64ToHex_			= pdf$base64ToHex_;
	this.hexToHex_				= pdf$hexToHex_;
	this.hexToAscii85_			= pdf$hexToAscii85_;
	this.ascii85_				= pdf$ascii85_;
	this.ord_				= pdf$ord_;

	this.drawMargin_			= pdf$drawMargin_;
	this.addText_A				= pdf$addText_A;
	this.addText_B				= pdf$addText_B;
	this.addText_C				= pdf$addText_C;
	this.addText_D				= pdf$addText_D;
	this.addText_E				= pdf$addText_E;
	this.addText_F				= pdf$addText_F;
	this.addText_octal			= pdf$addText_octal;

	this.flush_				= pdf$flush_;
	this.write_				= pdf$write_;
	this.index_				= pdf$index_;
	this.properties_			= pdf$properties_;
	
	this.addObject_				= pdf$addObject_;
	this.addObjectImage_			= pdf$addObjectImage_;	//
	this.addObjectFontfile_			= pdf$addObjectFontfile_;	//
	this.addObjectU3d_			= pdf$addObjectU3d_;	//
	this.addObjectSignature_		= pdf$addObjectSignature_;	//
	this.refText_				= pdf$refText_;
	this.trailer_				= pdf$trailer_;
	this.underline_				= pdf$underline_;
	this.overline_				= pdf$overline_;

	this.parseColor_			= pdf$parseColor_;
	this.colorText_				= pdf$colorText_;
	this.colorRGBText_			= pdf$colorRGBText_;
	this.scriptText_			= pdf$scriptText_;
	this.fontName_				= pdf$fontName_;

	this.setHeader_				= pdf$setHeader_;
	this.setFooter_				= pdf$setFooter_;
	
	this.getPos_				= pdf$getPos_;
	this.setPos_				= pdf$setPos_;
	
	this.setView				= pdf$setView;	
	this.setClip				= pdf$setClip;	
	this.restoreView			= pdf$restoreView;	
	this.setPosition			= pdf$setPosition;	
	this.getPosition			= pdf$getPosition;
	this.filename_size			= pdf$filename_size;

	this.reportBeginGroup_			= pdf$reportBeginGroup_;	//
	this.reportEndGroup_			= pdf$reportEndGroup_;		//
	this.reportEnd_				= pdf$reportEnd_;		//
	this.reportKeepTogether_		= pdf$reportKeepTogether_;	//
	this.reportKeepTogether_A		= pdf$reportKeepTogether_A;	//
	this.setReportGroup_			= pdf$setReportGroup_;		//
	this.reportGroupKeys_			= pdf$reportGroupKeys_;		//
	this.reportHeader_			= pdf$reportHeader_;		//
	
	this.headerSize_			= pdf$headerSize_;		//
	this.footerSize_			= pdf$footerSize_;		//
	
	this.copyArray_				= pdf$copyArray_;
	this.cid_				= pdf$cid_;
	this.utf8				= pdf$utf8;

	this.findFont_				= pdf$findFont_;
	this.type1FontTemplate			= pdf$type1FontTemplate;

	this.get3dLightingScheme		= pdf$get3dLightingScheme;
	this.get3dRenderMode			= pdf$get3dRenderMode;
	this.get3dMatrix			= pdf$get3dMatrix;

	this.u3dCopy				= pdf$u3dCopy;
	
//---------------- event ----------------------------

	this.onPageHeader	= null;		// page header / footer events
	this.onPageFooter	= null;
	this.onPagebreak	= null;
	this.onBeforePagebreak	= null;

//---------------- font encodings ------------------

	this.encodingFonts = new Array();
	this.encodingFonts[0] = 'MS-Mincyo';
	this.encodingFonts[1] = 'MS-PMincyo';
	this.encodingFonts[2] = 'MS-Gothic';
	this.encodingFonts[3] = 'MS-PGothic';
	
	this.encodings = new Array();
	this.encodings[this.encodings.length] = 'GB-EUC-H,Adobe-GB1-0';
	this.encodings[this.encodings.length] = 'GB-EUC-V,Adobe-GB1-0';
	this.encodings[this.encodings.length] = 'GBpc-EUC-H,Adobe-GB1-0';
	this.encodings[this.encodings.length] = 'GBpc-EUC-V,Adobe-GB1-0';
	this.encodings[this.encodings.length] = 'GBK-EUC-H,Adobe-GB1-2';
	this.encodings[this.encodings.length] = 'GBK-EUC-V,Adobe-GB1-2';
	this.encodings[this.encodings.length] = 'GBKp-EUC-H,Adobe-GB1-2';
	this.encodings[this.encodings.length] = 'GBKp-EUC-V,Adobe-GB1-2';
	this.encodings[this.encodings.length] = 'GBK2K-H,Adobe-GB1-4';
	this.encodings[this.encodings.length] = 'GBK2K-V,Adobe-GB1-4';
	this.encodings[this.encodings.length] = 'UniGB-UCS2-H,Adobe-GB1-4';
	this.encodings[this.encodings.length] = 'UniGB-UCS2-V,Adobe-GB1-4';
	this.encodings[this.encodings.length] = 'UniGB-UTF16-H,Adobe-GB1-4';
	this.encodings[this.encodings.length] = 'UniGB-UTF16-V,Adobe-GB1-4';
	this.encodings[this.encodings.length] = 'B5pc-H,Adobe-CNS1-0';
	this.encodings[this.encodings.length] = 'B5pc-V,Adobe-CNS1-0';
	this.encodings[this.encodings.length] = 'HKscs-B5-H,Adobe-CNS1-3';
	this.encodings[this.encodings.length] = 'HKscs-B5-V,Adobe-CNS1-3';
	this.encodings[this.encodings.length] = 'ETen-B5-H,Adobe-CNS1-0';
	this.encodings[this.encodings.length] = 'ETen-B5-V,Adobe-CNS1-0';
	this.encodings[this.encodings.length] = 'ETenms-B5-H,Adobe-CNS1-0';
	this.encodings[this.encodings.length] = 'ETenms-B5-V,Adobe-CNS1-0';
	this.encodings[this.encodings.length] = 'CNS-EUC-H,Adobe-CNS1-0';
	this.encodings[this.encodings.length] = 'CNS-EUC-V,Adobe-CNS1-0';
	this.encodings[this.encodings.length] = 'UniCNS-UCS2-H,Adobe-CNS1-3';
	this.encodings[this.encodings.length] = 'UniCNS-UCS2-V,Adobe-CNS1-3';
	this.encodings[this.encodings.length] = 'UniCNS-UTF16-H,Adobe-CNS1-4';
	this.encodings[this.encodings.length] = 'UniCNS-UTF16-V,Adobe-CNS1-4';
	this.encodings[this.encodings.length] = '83pv-RKSJ-H,Adobe-Japan1-1';
	this.encodings[this.encodings.length] = '90ms-RKSJ-H,Adobe-Japan1-2';
	this.encodings[this.encodings.length] = '90ms-RKSJ-V,Adobe-Japan1-2';
	this.encodings[this.encodings.length] = '90msp-RKSJ-H,Adobe-Japan1-2';
	this.encodings[this.encodings.length] = '90msp-RKSJ-V,Adobe-Japan1-2';
	this.encodings[this.encodings.length] = '90pv-RKSJ-H,Adobe-Japan1-1';
	this.encodings[this.encodings.length] = 'Add-RKSJ-H,Adobe-Japan1-1';
	this.encodings[this.encodings.length] = 'Add-RKSJ-V,Adobe-Japan1-1';
	this.encodings[this.encodings.length] = 'EUC-H,Adobe-Japan1-1';
	this.encodings[this.encodings.length] = 'EUC-V,Adobe-Japan1-1';
	this.encodings[this.encodings.length] = 'Ext-RKSJ-H,Adobe-Japan1-2';
	this.encodings[this.encodings.length] = 'Ext-RKSJ-V,Adobe-Japan1-2';
	this.encodings[this.encodings.length] = 'H,Adobe-Japan1-1';
	this.encodings[this.encodings.length] = 'V,Adobe-Japan1-1';
	this.encodings[this.encodings.length] = 'UniJIS-UCS2-H,Adobe-Japan1-4';
	this.encodings[this.encodings.length] = 'UniJIS-UCS2-V,Adobe-Japan1-4';
	this.encodings[this.encodings.length] = 'UniJIS-UCS2-HW-H,Adobe-Japan1-4';
	this.encodings[this.encodings.length] = 'UniJIS-UCS2-HW-V,Adobe-Japan1-4';
	this.encodings[this.encodings.length] = 'UniJIS-UTF16-H,Adobe-Japan1-5';
	this.encodings[this.encodings.length] = 'UniJIS-UTF16-V,Adobe-Japan1-5';
	this.encodings[this.encodings.length] = 'KSC-EUC-H,Adobe-Korea1-0';
	this.encodings[this.encodings.length] = 'KSC-EUC-V,Adobe-Korea1-0';
	this.encodings[this.encodings.length] = 'KSCms-UHC-H,Adobe-Korea1-1';
	this.encodings[this.encodings.length] = 'KSCms-UHC-V,Adobe-Korea1-1';
	this.encodings[this.encodings.length] = 'KSCms-UHC-HW-H,Adobe-Korea1-1';
	this.encodings[this.encodings.length] = 'KSCms-UHC-HW-V,Adobe-Korea1-1';
	this.encodings[this.encodings.length] = 'KSCpc-EUC-H,Adobe-Korea1-0';
	this.encodings[this.encodings.length] = 'UniKS-UCS2-H,Adobe-Korea1-1';
	this.encodings[this.encodings.length] = 'UniKS-UCS2-V,Adobe-Korea1-1';
	this.encodings[this.encodings.length] = 'UniKS-UTF16-H,Adobe-Korea1-2';
	this.encodings[this.encodings.length] = 'UniKS-UTF16-V,Adobe-Korea1-2';
	this.encodings[this.encodings.length] = 'Identity-H,Adobe-Identity-0';
	this.encodings[this.encodings.length] = 'Identity-V,Adobe-Identity-0';

	this.echo				= null;
	this.ruler				= null;
	this.tabCharacter			= "\t";
	this.isTextbox				= false;
	this.columns				= 1;
	this.gutterSize				= 0.0;
	this.columnAlign			= 'left';
	this.urlColor				= 'blue';

	this.ref				= new Array();
	this.fonts				= new Array();
	this.images				= new Array();
	this.u3ds				= new Array();
	this.groups				= new Array();
	this.textboxes				= new Array();
	this.includes				= new Array();
	this.fontfiles				= new Array();
		
//	this.fonts[0]				= new pdfFont$(0,'Helvetica','');
//	this.fonts[1]				= new pdfFont$(1,'Helvetica','bold');
//	this.fonts[2]				= new pdfFont$(2,'Helvetica','italic');
//	this.fonts[3]				= new pdfFont$(3,'Helvetica','bolditalic');

//	this.fonts[4]				= new pdfFont$(4,'Times','');
//	this.fonts[5]				= new pdfFont$(5,'Times','bold');
//	this.fonts[6]				= new pdfFont$(6,'Times','italic');
//	this.fonts[7]				= new pdfFont$(7,'Times','bolditalic');

//	this.fonts[8]				= new pdfFont$(8,'Courier','');
//	this.fonts[9]				= new pdfFont$(9,'Courier','bold');
//	this.fonts[10]				= new pdfFont$(10,'Courier','italic');
//	this.fonts[11]				= new pdfFont$(11,'Courier','bolditalic');

//	this.fonts[12]				= new pdfFont$(12,'ZapfDingbats','');
//	this.fonts[13]				= new pdfFont$(13,'Symbol','');

	this.default_fontName = 'helvetica';
	this.default_fontSize = 10;

	this.setFontName(this.default_fontName);
	this.fontSize				= this.default_fontSize;
	
	this.fontColor				= 0;
	this.letterSpacing			= 0;
	this.wordSpacing			= 0;
	this.fontRender				= 0;	// 0 = fill, 1 = stoke, 2 = stroke and Fill
	this.fontSkew				= 0;
	this.fontScaleX				= 1;
	this.fontScaleY				= 1;
	this.textAngle				= 0;
	this.rowHeight				= 0;

	this.graphicScale			= 1;

	this.bold				= false;
	this.underline				= false;
	this.overline				= false;
	this.italic				= false;
	this.url				= '';
	this.drawMargin				= false;
	this.subscript				= false;
	this.superscript			= false;

	this.pageWidth				= this.paperWidth;
	this.pageLength				= this.paperHeight;
	if (this.landscape) this.pageWidth = this.paperHeight;
	if (this.landscape) this.pageLength = this.paperWidth;

	this.xmin				= 0;			// left margin
	this.ymin				= 0;			// bottom Margin
	this.ymax				= this.pageLength * 72;	// top margin;
	this.xmax				= this.pageWidth * 72;	// right margin;
	this.maxWidth				= this.pageWidth * 72;

	this.marginTop				= 0;
	this.marginBottom			= 0;
	this.marginLeft				= 0;
	this.marginRight			= 0;

	this.xpos				= this.xmin;
	this.ypos				= this.ymax;
	this.xsize				= this.xmin;
	this.ysize				= this.ymax;

	this.line				= 1;
	
	this.html_pageHeader			= '';
	this.html_pageFooter			= '';

	this.margin				= false;
	this.center				= false;
	this.justify				= true;

	this.clipRegion				= null;	
	this.catalog				= null;

	this.report				= new Object();
	this.report.records			= 0;
	this.report.row				= 0;
	this.report.keepTogether		= false;
	this.report.firstEndGroup		= 9999;
	this.report.firstBeginGroup		= 9999;
	this.report.firstRow			= true;
	this.report.keys			= new Array();
	this.report.urls			= new Array();
	this.report.detailSize			= 0;
	this.report.stack			= new Array();
	this.report.keepTogether_row		= false;
	this.report.hsize			= 0;

	this.note				= '';
	this.encoded				= true;
	this.holdPage				= false;

	this.subject				= '';
	this.title				= '';
	this.author				= '';
	this.keywords				= '';

	this.decodeMany				= pdf$decodeMany;
	this.encodeMany				= pdf$encodeMany;
	
//--------------- set page size ------------------

	this.setPageSize('letter');

//----------- Add Space for Header / Footers ----------

	if (this.onPageHeader != null) this.setMarginTop(1.0);
	if (this.onPageFooter != null) this.setMarginBottom(1.0);
	
//----------- Order dependent (keep at bottom) ---------

	this.catalog		= new pdfCatalog$(this);
	this.catalog.addPage();
}
//======================================================================================
//				pdf$get3dMatrix
//=======================================================================================
function pdf$get3dMatrix(camera,cameratilt,obj)
{
	var cx,cy,cz;
	var tx,ty,tz;
	var list,m,len;

	list = camera.split(',');
	cx = 0;
	cy = 0;	
	cy = 0;
	if (list.length > 0) cx = parseFloat(list[0]);
	if (list.length > 1) cy = parseFloat(list[1]);
	if (list.length > 2) cz = parseFloat(list[2]);
	if (isNaN(cx)) cx = 0;
	if (isNaN(cy)) cy = 0;
	if (isNaN(cz)) cz = 0;

	len = Math.sqrt(cx*cx + cy*cy + cz*cz);

	list = cameratilt.split(',');
	tx = 0;
	ty = 0;	
	tz = 0;
	if (list.length > 0) tx = parseFloat(list[0]);
	if (list.length > 1) ty = parseFloat(list[1]);
	if (list.length > 2) tz = parseFloat(list[2]);
	if (isNaN(tx)) tx = 0;
	if (isNaN(ty)) ty = 0;
	if (isNaN(tz)) tz = 0;
	
	m = new pdf_matrix3D$();
	if (tx != 0) m.rotate(tx,'x');
	if (ty != 0) m.rotate(ty,'y');
	if (tz != 0) m.rotate(tz,'z');
	m.move(cx,cy,cz);

	obj.matrix = '-1 0 0 0 0 -1 0 1 0 0 0 -4800';
	obj.matrix = m.toString();
	
	obj.distance = len;
}
//======================================================================================
//				pdf$u3dCopy
//=======================================================================================
function pdf$u3dCopy(ele,obj)
{
	var color,xx;

	color = ele.style.backgroundColor;
	if (color == '') color = 'white';
	xx = this.parseColor_(color);
	color = xx.color;

	obj.u3dView		= ele.u3dView;
	if (obj.u3dView == '') obj.u3dView = 'view_0';

	obj.u3dName		= ele.u3dName;
	if (obj.u3dName == '') obj.u3dName = 'PDF 3D';

	obj.toolbar	= true;
	if (ele.u3dToolbar == 'false') obj.toolbar = false;
	if (ele.u3dToolbar ==    'no') obj.toolbar = false;
	
	obj.bgcolor	= this.colorRGBText_(color);
	obj.lighting	= this.get3dLightingScheme(ele.u3dLightingScheme);
	obj.renderMode	= this.get3dRenderMode(ele.u3dRenderMode);
	
	this.get3dMatrix(ele.u3dCamera,ele.u3dCameraTilt,obj);
}
//======================================================================================
//				pdf$setOpacity
//=======================================================================================
function pdf$setOpacity(value)
{
	this.opacity = this.trim(value);
	this.setGraphicTransparent(this.opacity);
}

//======================================================================================
//				pdf$read
//=======================================================================================
function pdf$read(filename)
{	
	var text,c;

	if (filename == '') return '';
	
	text =  this.sys.readUrl(filename);
	return text;
	
}
//==================================================================================
//				pdf$drawTimeline
//==================================================================================
function pdf$drawTimeline(startDate,endDate,x,y,height,width,ele)
{
	var p;

	p = this.toPoint_(x,y);
	this.graphic.drawTimeline(startDate,endDate,p.x,p.y,height,width,ele);
}
//======================================================================================
//				pdf$decodeMany
//=======================================================================================
function pdf$decodeMany(value)
{
	var list,i,text,c,j;
	var key;
	
	key = new Array(15,56,23,54,82,39,123,33);
	
	text = '';	
	j = 0;
	for (i=0; i < value.length; i = i + 2)
	{
		c = value.substr(i,2);
		c = parseInt(c,16);

		c = c ^ key[j % key.length];
		text += String.fromCharCode(c);	
		j += 1;
	}

	list = text.split(String.fromCharCode(key[0]));
	return list;
}
//=======================================================================================
//				pdf$encodeMany
//=======================================================================================
function pdf$encodeMany()
{
	var c;
	var list,i,text,value;
	var key;
	
	key = new Array(15,56,23,54,82,39,123,33);
	
	value = '';
	for (i=0; i < arguments.length; ++i)
	{
		if (i > 0) value += String.fromCharCode(key[0]);
		value += '' + arguments[i];
	}

	text = '';
	
	for (i=0; i < value.length; ++i)
	{
		c = value.charCodeAt(i);
		c = c ^ key[i % key.length];
		c = c.toString(16);
		if (c.length == 0) c = '00';
		if (c.length == 1) c = '0' + c;	
		text += c;
	}

	return text;
}

//==========================================================================================
//				pdf$setPageBackgroundColor
//==========================================================================================
function pdf$setPageBackgroundColor(backgroundColor)
{

	if (backgroundColor == undefined) backgroundColor = '';
	if (backgroundColor == 'undefined') backgroundColor = '';
	if (backgroundColor.toLowerCase() == 'white') backgroundColor = '';

	this.pageBackgroundColor = backgroundColor;
	this.catalog.activePage.backgroundColor = this.pageBackgroundColor;	
}
//==========================================================================================
//				pdf$setPageMarginColor
//==========================================================================================
function pdf$setPageMarginColor(marginColor)
{
	var list;
	
	if (marginColor== undefined) marginColor= '';
	if (marginColor== 'undefined') marginColor= '';

	list = marginColor.split(',');
	this.pageMarginLeftColor	= list[0];
	this.pageMarginRightColor	= list[0];
	this.pageMarginTopColor		= list[0];
	this.pageMarginBottomColor	= list[0];

	if (list.length > 1) this.pageMarginRightColor	= list[1];
	if (list.length > 2) this.pageMarginTopColor	= list[2];
	if (list.length > 3) this.pageMarginBottomColor	= list[3];

	this.catalog.activePage.marginLeftColor= this.pageMarginLeftColor;	
	this.catalog.activePage.marginRightColor= this.pageMarginRightColor;	
	this.catalog.activePage.marginTopColor= this.pageMarginTopColor;	
	this.catalog.activePage.marginBottomColor= this.pageMarginBottomColor;	

	this.catalog.activePage.marginLeft	= this.marginLeft;
	this.catalog.activePage.marginRight	= this.marginRight;
	this.catalog.activePage.marginTop	= this.marginTop;
	this.catalog.activePage.marginBottom	= this.marginBottom;
	
}
//==========================================================================================
//				pdf$setPageRotate
//==========================================================================================
function pdf$setPageRotate(angle_by_90)
{
	var angle;
	
	angle = '0';
	
	if (angle_by_90 ==  '90') angle = '90';
	if (angle_by_90 == '180') angle = '180';
	if (angle_by_90 == '270') angle = '270';

	this.pageRotate = angle;
	this.catalog.activePage.rotate = this.pageRotate;	
}
//==========================================================================================
//				pdf$drawCalendar
//==========================================================================================
function pdf$drawCalendar(year,month,x,y,height,width,border,events,noref)
{
	var p;
	
	p = this.toPoint_(x,y);
	return this.graphic.drawCalendar(year,month,p.x,p.y,height,width,border,events,noref);
}
//==========================================================================================
//				pdf$drawCalendarSimple
//==========================================================================================
function pdf$drawCalendarSimple(year,month,x,y,height,width)
{
	var p;
	p = this.toPoint_(x,y);	
	return this.graphic.drawCalendarSimple(year,month,p.x,p.y,height,width);
	
}
//======================================================================
//			   pdf$get3dLightingSchenme
//======================================================================
function pdf$get3dLightingScheme(lighting)
{
	var lighting;

	lighting = lighting.toLowerCase();

	if (lighting ==      'cad') return '/CAD';
	if (lighting ==    'white') return '/White';
	if (lighting ==      'red') return '/Red';
	if (lighting ==     'blue') return '/Blue';
	if (lighting ==    'green') return '/Green';
	if (lighting ==     'cube') return '/Cube';
	if (lighting ==  'primary') return '/Primary';
	if (lighting == 'headlamp') return '/Headlamp';
	if (lighting ==     'hard') return '/Hard';
	if (lighting ==      'day') return '/Day';	

	return "/White";
	
}		
//======================================================================
//			   pdf$get3dRenderMode
//======================================================================
function pdf$get3dRenderMode(mode)
{
	var i,mode,m;
	
	var modes = new Array();
	modes[0] = "Solid";
	modes[1] = "SolidWireframe";
	modes[2] = "Transparent";
	modes[3] = "TransparentWireframe";
	modes[4] = "BoundingBox";
	modes[5] = "TransparentBoundingBox";
	modes[6] = "TransparentBoundingBoxOutline";
	modes[7] = "Wireframe";
	modes[8] = "ShadedWireframe";
	modes[9] = "HiddenWireframe";
	modes[10] = "Vertices";
	modes[11] = "ShadedVertices";
	modes[12] = "Illustration";
	modes[13] = "SolidOutline";
	modes[14] = "ShadedIllustration";

	mode = mode.toLowerCase();
    
    for (i=0; i < modes.length; ++i)
    {
	m = modes[i];	
	if (m.toLowerCase() == mode) return '/' + modes[i];

    }
    
	return '/Solid';
    
}
//==================================================================
//				pdf$hexSize
//==================================================================
function pdf$hexSize(size)
{
	var n;
	
	n = Math.floor(size / 128);
	return (size * 2) + n + 1;
}

//==========================================================================
//			pdf$placeHotspot
//==========================================================================
function pdf$placeHotspot(x,y,height,width,command)
{
	var p;

	p		= this.toPoint_(x,y);
	height	= this.toPoint_(height);
	width	= this.toPoint_(width);

	this.catalog.activePage.addHotspot(p.x,p.y,height,width,command);
}
//============================================================================================
//			pdf$drawChar
//============================================================================================
function pdf$drawChar(x,y,height,char)
{
	var size,n,i;
	var midSize,topSize,botSize,filSize;
	var fixed,remain,dy;
	var p,width,fill_dy,nfil;
	
	p = this.toPoint_(x,y);

	if (char == null) return;
	size = this.fontSize;
	if (size < 1) size = 10;
	
	n = height / size;
	if (n <= 4)
	{
		this.setFontSize(height);

		y = y + ((height * 0.75) / 72);
		this.placeText(x,y,char.text);
		this.fontSize = size;
		return;
	}
//-------------------------- complex character draw -----------------------

//	y = y + (height / 72);

	width = 1;

	midSize = size * 0.75;
	topSize = size * 0.75;
	botSize = topSize;
	filSize = size * 0.75;

	fixed = topSize + botSize + midSize;
	remain = height - fixed;

	nfil = Math.floor((remain / 2) / filSize);
	if (nfil > 0) fill_dy = (remain / 2) / nfil;

	dy = topSize;

	p.y -= dy;
	this.ypos = p.y;
	this.xpos = p.x;
	this.put_(String.fromCharCode(char.top),width,0);
	
	for (i=0; i < nfil; ++i)
	{
		p.y -= fill_dy;
		this.ypos = p.y;
		this.xpos = p.x;
		this.put_(String.fromCharCode(char.filler),width,0);
	}

	p.y -= dy;
	this.ypos = p.y;
	this.xpos = p.x;
	this.put_(String.fromCharCode(char.center),width,0);

	for (i=0; i < nfil; ++i)
	{
		p.y -= fill_dy;
		this.ypos = p.y;
		this.xpos = p.x;
		this.put_(String.fromCharCode(char.filler),width,0);
	}

	p.y -= dy;
	this.ypos = p.y;
	this.xpos = p.x;
	this.put_(String.fromCharCode(char.bottom),width,0);

}
//============================================================================================
//			pdf$onPageOpen
//============================================================================================
function pdf$onPageOpen(javascript)
{
	var ref;

	ref = this.catalog.addJavascript(javascript);
	this.catalog.activePage.onPageOpen = ref;
}
//============================================================================================
//			pdf$onPageClose
//============================================================================================
function pdf$onPageClose(javascript)
{
	var ref;

	ref = this.catalog.addJavascript(javascript);
	this.catalog.activePage.onPageClose = ref;
}
//============================================================================================
//			pdf$onDocumentOpen
//============================================================================================
function pdf$onDocumentOpen(javascript)
{
	var ref;

	ref = this.catalog.addJavascript(javascript);
	this.catalog.onDocumentOpen = ref;
}
//============================================================================================
//			pdf$onWillClose
//============================================================================================
function pdf$onWillClose(javascript)
{
	var ref;

	ref = this.catalog.addJavascript(javascript);
	this.catalog.onWillClose = ref;
}
//============================================================================================
//			pdf$onWillSave
//============================================================================================
function pdf$onWillSave(javascript)
{
	var ref;
	
	ref = this.catalog.addJavascript(javascript);
	this.catalog.onWillSave = ref;
}
//============================================================================================
//			pdf$onDidSave
//============================================================================================
function pdf$onDidSave(javascript)
{
	var ref;

	ref = this.catalog.addJavascript(javascript);
	this.catalog.onDidSave= ref;
}
//============================================================================================
//			pdf$onDidPrint
//============================================================================================
function pdf$onDidPrint(javascript)
{
	var ref;

	ref = this.catalog.addJavascript(javascript);
	this.catalog.onDidPrint = ref;
}
//============================================================================================
//			pdf$onWillPrint
//============================================================================================
function pdf$onWillPrint(javascript)
{
	var ref;

	ref = this.catalog.addJavascript(javascript);
	this.catalog.onWillPrint= ref;
}
//============================================================================================
//			pdf$setPageSize
//============================================================================================
function pdf$setPageSize(pageSize,relative)
{
	var list;
	var height,width;
	
	pageSize = '' + pageSize;
	pageSize = pageSize.toLowerCase();

	this.relative = false;
	if (arguments.length > 1) this.relative = relative;

	this.paperHeight = 11;
	this.paperWidth = 8.5;
	
	list = pageSize.split(',');
	if (list.length == 2) 
	{
		width = parseFloat(list[0]);
		height = parseFloat(list[1]);
		if ((height > 0) && (width > 0))
		{
			this.paperHeight = height;
			this.paperWidth = width;
			this.setLandscape(this.landscape);
			return;
		}
	}
		
	switch (pageSize)
	{
	case 'letter':			this.paperHeight = 11;
					this.paperWidth = 8.5;
					break;
	case 'legal':			this.paperHeight = 14;
					this.paperWidth = 8.5;
					break;
	case 'ledger':			this.paperHeight = 17;
					this.paperWidth = 11;
					break;
	case 'tabloid':			this.paperHeight = 11;
					this.paperWidth = 17;
					break;
	case 'executive':		this.paperHeight = 10.55;
					this.paperWidth = 7.25;
					break;
	case 'a':			this.paperHeight = 11;
					this.paperWidth = 8.5;
					break;
	case 'b':			this.paperHeight = 14;
					this.paperWidth = 8.5;
					break;
	case 'c':			this.paperHeight = 17;
					this.paperWidth = 22;
					break;
	case 'd':			this.paperHeight = 22;
					this.paperWidth = 34;
					break;
	case 'e':			this.paperHeight = 34;
					this.paperWidth = 44;
					break;

	case 'foolscap':		this.paperHeight = 16.5;
					this.paperWidth = 13.25;
					break;
	case 'small post':		this.paperHeight = 18.50;
					this.paperWidth = 14.50;
					break;
	case 'sheet and 1/3 cap':	this.paperHeight = 22;
					this.paperWidth = 13.25;
					break;
	case 'sheet and 1/2 cap':	this.paperHeight = 24.75;
					this.paperWidth = 13.25;
					break;
	case 'demy':			this.paperHeight = 20.00;
					this.paperWidth = 15.50;
					break;
	case 'large post':		this.paperHeight = 21.00;
					this.paperWidth = 16.50;
					break;
	case 'small medium':		this.paperHeight = 22.00;
					this.paperWidth = 17.50;
					break;
	case 'medium':			this.paperHeight = 23.00;
					this.paperWidth = 18;
					break;
	case 'small royal':		this.paperHeight = 24.00;
					this.paperWidth = 19;
					break;
	case 'royal':			this.paperHeight = 25;
					this.paperWidth = 20;
					break;
	case 'imperial':		this.paperHeight = 30;
					this.paperWidth = 22;
					break;
	}

	this.setLandscape(this.landscape);
}
//============================================================================================
//									pdf$setLandscape
//============================================================================================
function pdf$setLandscape(landscape)
{
	var t,dy;

	t = this;

	this.landscape = false;
	if (landscape) this.landscape = true;

	this.pageWidth			= this.paperWidth;
	this.pageLength			= this.paperHeight;
	if (this.landscape) this.pageWidth = this.paperHeight;
	if (this.landscape) this.pageLength = this.paperWidth;

	this.xmin			= this.marginLeft;			// left margin
	this.ymin			= this.marginBottom;		// bottom Margin
	this.ymax			= (this.pageLength * 72) - this.marginTop;	// top margin;
	this.xmax			= (this.pageWidth * 72) - this.marginRight;	// right margin;

	this.maxWidth			= this.pageWidth * 72;

	this.xpos			= this.xmin;
	this.ypos			= this.ymax;
	this.xsize			= this.xmin;
	this.ysize			= this.ymax;

	dy = 0;
	if (this.catalog == null) return;

	if (this.relative) dy = this.catalog.activePage.ymax - (this.pageLength * 72);


	this.catalog.activePage.xmin  = 0;
	this.catalog.activePage.ymin  = dy;
	this.catalog.activePage.xmax  = this.pageWidth * 72;			// 8.5 Inches * 72
	this.catalog.activePage.ymax  = (this.pageLength * 72) + dy;	// 11 Inches * 72 

//	this.catalog		= new pdfCatalog$(this);
//	this.catalog.addPage();

}
//============================================================================================
//									trim
//============================================================================================
function pdf$trim(text)
{
     text = '' + text;   
     return text.replace(/^\s+|\s+$/g,'');
} 
//===================================================================================
//				pdf$setFontSkew
//===================================================================================
function pdf$setFontSkew(skew)
{
	this.fontSkew = 0;
	if (isNaN(skew)) return;
	
	this.fontSkew = parseFloat(skew);
}
//===================================================================================
//				pdf$setFontRender
//===================================================================================
function pdf$setFontRender(name)
{

	this.fontRender = 0;
	if (name == '') return;

	name = '' + name;
	name = name.toLowerCase();
	if (name == 'fill') return;
	if (name == 'stroke') this.fontRender = 1;
	if (name == 'stroke,fill') this.fontRender = 2;
	if (name == 'fill,stroke') this.fontRender = 2;

}
//===================================================================================
//				pdf$setFontScale
//===================================================================================
function pdf$setFontScale(x,y)
{
	this.fontScaleX = 1;
	this.fontScaleY = 1;
	if (isNaN(x)) return;
	if (isNaN(y)) return;

	x = parseFloat(x);
	y = parseFloat(y);
	if (x <= 0.01) x = 1;
	if (y <= 0.01) y = 1;
	this.fontScaleX = x;
	this.fontScaleY = y;
}
//===================================================================================
//				pdf$setLetterSpacing
//===================================================================================
function pdf$setLetterSpacing(size)
{
	this.letterSpacing = parseFloat(size);
}
//===================================================================================
//				pdf$setWordSpacing
//===================================================================================
function pdf$setWordSpacing(size)
{
	this.wordSpacing = parseFloat(size);
}
//===================================================================================
//				pdf$addOutline
//===================================================================================
function pdf$addOutline(title, xpos, ypos, zoomFactor)
{
	var outline;

	outline = this.catalog.addOutline(title, xpos, ypos, zoomFactor);
	return outline;
}
//==================================================================================
//				pdf$imageSize
//==================================================================================
function pdf$imageSize(filename)
{
	var obj;

try
{

	obj = this.imageSize_A(filename);
	if (obj == null) return null;
	
	if (obj.height <= 0) { log('image height = 0, ' + filename.substr(0,256)); return null; }
	if (obj.width  <= 0) { log('image width = 0, ' + filename.substr(0,256)); return null; }
	if (obj.size   <= 0) { log('image size = 0, ' + filename.substr(0,256)); return null; }

	return obj;
}
catch (e) { log('image error, ' + filename.substr(0,256) + ' ' + e.message); return null; }

}
//==================================================================================
//				pdf$jpegSize
//==================================================================================
function pdf$jpegSize(filename)
{	
	var data,obj,a, where;
	
	where = 'server';
	if (typeof(window) == 'object') where = 'client';

	obj = CollinsPDF().jpegsize(filename,where);
	if (obj == null) return null;
	
	if (isNaN(obj.width) || isNaN(obj.height) || isNaN(obj.size)) obj = null;
	return obj;
}
//==================================================================================
//				pdf$imageSize_A
//==================================================================================
function pdf$imageSize_A(filename)
{	
	var obj,i,j,list,a,element,data,id;
	var temp,list,height,width,ext,value;
	var text,name;

	obj = null;
	if (filename == '') return null;

	if ((filename.substr(0,7).toUpperCase() == 'BASE64,') || (filename.substr(0,4).toUpperCase() == 'HEX,') || (filename.substr(0,8).toUpperCase() == 'ASCII85,')) 
	{
		i = filename.indexOf(':');
		if (i < 0) return null;
			
		temp = filename.substr(0,i);		
		data = filename.substr(i+1);
		
		filename = temp;
		list = temp.split(',');
		if (list.length < 3) return null;
		
		value = list[0];
		id = this.trim(value.toUpperCase());
		
		width = parseInt(list[1]);
		height = parseInt(list[2]);

		obj = new Object();
		obj.format = 'hex';
		obj.height = height;
		obj.width = width;
		obj.data = '';
		if (id == 'BASE64') obj.data = this.base64ToHex_(data);
		if (id == 'HEX') obj.data = this.hexToHex_(data) ;
		if (id == 'ASCII85') obj.data = data;
		if (id == 'ASCII85') obj.format = 'hex85';
		obj.size = obj.data.length;
		obj.is3D = false;
		obj.ext = '.jpg';
		obj.filename = 1 * new Date();	// Make a unique identifier
		obj.isData = true;
		return obj;		
	}

	name = filename.substr(0,7);
	if (filename.substr(0,7).toUpperCase() == 'CANVAS:')
	{
		id = filename.substr(7);
		element = document.getElementById(id);
		if (element == null) return null;
	
		data = element.toDataURL("image/jpeg");
		i = data.indexOf(',');
		data = data.substr(i+1);
		
		obj = new Object();
		obj.format = 'hex';
		obj.height = element.height;
		obj.width = element.width;
		obj.data  = this.base64ToHex_(data);
		obj.size = obj.data.length;
		obj.is3D = false;
		obj.ext = '.jpg';
		obj.filename = filename;
		obj.isData = true;
		return obj;		
	}

	if ((filename.substr(0,5).toUpperCase() == 'FILE,'))
	{
		i = filename.indexOf(':');
		if (i < 0) return null;
		
		text = filename.substr(0,i);
		list = text.split(',');
		obj = new Object();
		obj.format = '';

		obj.height = 0;
		obj.width = 0;
		obj.size = 0;
		obj.is3D = false;
		obj.ext = '.jpg';
		obj.filename = 'inline' + this.images.length;
		obj.isData = false;

		obj.size  = filename.length - (i+1);
		if (obj.format == 'hex') obj.size += 1;
		if (obj.format == 'hex85') obj.size += 2;		

		for (i=1; i < list.length; ++i)
		{
			value = list[i];
			if (pdf$trim(value) == '') continue;
			a = value.split('=');
			if (a.length != 2) continue;
			
			name = a[0];
			name = pdf$trim(name.toLowerCase());
			value = parseInt(pdf$trim(a[1]));
			if (name == 'name') obj.filename = value;
			if (name == 'format') obj.format = a[1].toLowerCase();

			if (isNaN(value)) continue;
			if (name == 'width') obj.width = value;
			if (name == 'height') obj.height = value;
		}
		return obj;
	}		

//	if (this.isUrl_(filename))
	{
//		ext = '.jpg';
	}
//	else
	{
		i = filename.lastIndexOf('.');
		ext = filename.substr(i);
	}

	ext = ext.toLowerCase();
	if (filename.toLowerCase().indexOf('_jpg8.txt') >= 0) ext = '.jpg8';
	if (filename.toLowerCase().indexOf('_jpgx.txt') >= 0) ext = '.jpgx';
	if (filename.toLowerCase().indexOf('_u3dx.txt') >= 0) ext = '.u3dx';
	if (filename.toLowerCase().indexOf('_u3d8.txt') >= 0) ext = '.u3d8';
	if (filename.toLowerCase().indexOf('_prcx.txt') >= 0) ext = '.prcx';
	if (filename.toLowerCase().indexOf('_prc8.txt') >= 0) ext = '.prc8';
	if (filename.toLowerCase().indexOf('_u3d.txt')  >= 0) ext = '.u3d';
	if (filename.toLowerCase().indexOf('_prc.txt')  >= 0) ext = '.prc';

	if (ext == '.jpg') 
	{	
		obj = this.jpegSize(filename);
		if (obj == null) return null;
		obj.ext = '.jpg';
		obj.is3D = false;
		obj.filename = filename;
		obj.format = '';
		obj.isData = false;

		return obj;
	}
	
	if ((ext == '.jpgx') || (ext == '.jpg8')) 
	{		
		obj = new Object();
		obj.ext = ext;
		obj.format = 'hex';
		obj.filename = filename;
		obj.is3D = false;
		obj.isData = false;

		if (ext == '.jpg8') obj.format = 'hex85';
		
		this.filename_size(filename,obj);		

		return obj;
	}

	if ((ext == '.u3dx') || (ext == '.u3d8') || (ext == '.u3d')) 
	{		
		obj = new Object();
		obj.ext		= ext;
		obj.format	= 'none';
		obj.filename	= filename;
		obj.size	= this.sys.fileSize(filename);
		obj.is3D	= true;
		obj.subtype	= 'U3D';
		obj.isData	= false;

		if (ext == '.u3dx') obj.format = 'hex';
		if (ext == '.u3d8') obj.format = 'hex85';

		if (obj.format != 'none') this.filename_size(filename,obj);		
		obj.height = 8 * 72;
		obj.width  = 8 * 72;
		
		return obj;
	}

	if ((ext == '.prcx') || (ext == '.prc8') || (ext == '.prc')) 
	{		
		obj = new Object();
		obj.ext		= ext;
		obj.format	= 'none';
		obj.filename	= filename;
		obj.size	= this.sys.fileSize(filename);
		obj.isData	= false;

		obj.is3D	= true;
		obj.subtype	= 'PRC';

		if (ext == '.prcx') obj.format = 'hex';
		if (ext == '.prc8') obj.format = 'hex85';

		if (obj.format != 'none') this.filename_size(filename,obj);		
		obj.height	= 8 * 72;
		obj.width	= 8 * 72;
		
		return obj;
	}

	return null;
}
//======================================================================
//			pdf$ord_
//======================================================================
function pdf$ord_(data,pos) 
{
	var i,text;

	i = pos + 2;
	text = data.substr(i,2);
	return parseInt(text,16);
}
//======================================================================
//			pdf$hexToAscii85_
//======================================================================
function pdf$hexToAscii85_(data,noterm) 
{
	var c,nt,pos,n,count,result;
	var b1,b2,b3,b4;
	var text,length;

	result	= '';
    nt		= text.length;
    pos		= 0;
    count	= 0;

    while (pos < nt)
	{
		b1 = 0;
		b2 = 0;
		b3 = 0;
        b4 = 0;
		if (pos+1 < nt) b1 = this.ord_(text,pos);
		if (pos+1 < nt) b2 = this.ord_(text,pos+1);
		if (pos+2 < nt) b3 = this.ord_(text,pos+2);
		if (pos+3 < nt) b4 = this.ord_(text,pos+3);

		n = 4;
		if (pos+3 >= nt) n = (nt - pos) + 1;
		c = this.ascii85_(b1,b2,b3,b4,n);
		count = count + length(c);
		if (count > 128)
		{
			result = result + "\n";
			count = 0;
		}

		result = '' + result + c;
        pos = pos + 4;
	}

    if (noterm) result += '~>';
	return result;
}
//======================================================================
//			pdf$ascii85_
//======================================================================
function pdf$ascii85_(b1,b2,b3,b4,n)
{
	var	value,result;
	var c1,c2,c3,c4,c5;

	result = 'z';
	if ((b1 == 0) && (b2 == 0) && (b3 == 0) && (b4 == 0) && (n == 4)) return result;

	value = (b1 * 256 * 256 * 256) + (b2 * 256 * 256) + (b3 * 256) + b4;

	c1 = value % 85;
	value = Math.floor(value / 85);
	c2 = value % 85;
	value = Math.floor(value / 85);
	c3 = value % 85;
	value = math.floor(value / 85);
	c4 = value % 85;
	value = Math.floor(value / 85);
	c5 = value % 85;

	result = '' + String.fromCharCode(c5 + 33) + String.fromCharCode(c4 + 33);
	if (n > 1) result += String.fromCharCode(c3 + 33);
	if (n > 2) result += String.fromCharCode(c2 + 33);
	if (n > 3) result += String.fromCharCode(c1 + 33);
	return result;
}
//======================================================================
//			pdf$base64ToAscii85_
//======================================================================
function pdf$base64ToAscii85_(data) 
{
	var hex,ascii85;

	hex = this.base64ToHex_(data);
	ascii85 = this.hexToAscii85_(hex) + "~>";
	return ascii85;
}
//======================================================================
//			pdf$base64ToHex_
//======================================================================
function pdf$base64ToHex_(data) 
{
	var key,hex,i,n,a;
	var e1,e2,e3,e4,c1,c2,c3;

	hex  = "";
	key  = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789' + '+/=';
	data = data.replace(/[^A-Za-z0-9\+\/\=]/g, "");

	n = 1;
	for (i = 0; i < data.length; i+=4)
	{
		e1 = key.indexOf(data.charAt(i+0));
		e2 = key.indexOf(data.charAt(i+1));
		e3 = key.indexOf(data.charAt(i+2));
		e4 = key.indexOf(data.charAt(i+3));


		c1 = (e1 << 2) | (e2 >> 4);
		c2 = ((e2 & 15) << 4) | (e3 >> 2);
		c3 = ((e3 & 3) << 6) | e4;

		if ((n % 64) == 0) hex += "\n";

		a = c1.toString(16).toUpperCase();
		if (a.length == 0) a = '00';
		if (a.length == 1) a = '0' + a;			
		hex += a;
		n += 1;
		
		if (e3 != 64)
		{
			if ((n % 64) == 0) hex += "\n";
			a = c2.toString(16).toUpperCase();
			if (a.length == 0) a = '00';
			if (a.length == 1) a = '0' + a;			
			hex += a;
			n += 1;
		}
		
		if (e4 != 64)
		{
			if ((n % 64) == 0) hex += "\n";
			a = c3.toString(16).toUpperCase();
			if (a.length == 0) a = '00';
			if (a.length == 1) a = '0' + a;			
			hex += a;
			n += 1;
		}
	}

	return hex + '>';
}
//======================================================================
//			pdf$hexToHex_
//======================================================================
function pdf$hexToHex_(data) 
{
	var key,hex,i,n,pos,remain;

	hex  = "";
	data = data.replace(/[^A-Fa-f0-9]/g, "");

	n = Math.floor(data.length / 128);
	remain = data.length % 128;
	
	pos = 0;
	
	for (i = 0; i < n; ++i)
	{
		hex += data.substr(pos,128);
		if (i < (n-1)) hex += "\n";
		pos += 128;
	}

	if (remain == 0) return hex + ">";
	hex += "\n";
	hex += data.substr(pos);
	return hex + '>';
}
//===================================================================================
//			pdf$filename_size
//===================================================================================
function pdf$filename_size(filename,obj)
{
		var i,j,text,c,name,value,size;
		
		obj.size = 0;
		obj.height = 0;
		obj.width = 0;

		size = this.sys.fileSize(filename);
		if (size == 0) return;
	
		name = filename;

		i = name.lastIndexOf('/');
		j = name.lastIndexOf('\\');
		if (j > i) i = j;
		if (i >= 0) name = name.substr(i+1);
	
		i = name.indexOf('.');
		text = name.substr(0,i);
		text = text.toLowerCase();

		i = text.lastIndexOf('_');		// strip type
		if ( i < 0) return;
		text = text.substr(0,i);

		i = text.lastIndexOf('_');
		if ( i < 0) return;
		text = text.substr(i+1);
		
		value = '';
		for (i=text.length-1; i >= 0; --i)
		{
			c = text.charAt(i).toLowerCase();
			if (c >= '0' && c <= '9') 
			{
				value = c + value;
				continue;
			}
			if (c == 'w') 
			{
				obj.width = parseInt(value);
				value = '';
				continue;
			}
			if (c == 'h') 
			{
				obj.height = parseInt(value);
				value = '';
				continue;
			}
			if (c == 's') 
			{
				obj.size = parseInt(value);
				value = '';
				continue;
			}
			break;
		} 
}
//===================================================================================
//			pdf$tileImage
//===================================================================================
function pdf$tileImage(x1,y1,x2,y2,filename,repeat,position)
{
	var obj,t;
	var rows,cols;
	var xpos,ypos;
	var c,r,i,ext,scale;
	var xscale,yscale;
	var x,y,h,w;
	var height,width;
	var list,dx,dy;
	var a,b,temp,index;
	var xmin,ymin;
	
	t = this;

	obj = this.imageSize(filename);
	if (obj == null) return;			// can only accept jpeg files (at this time)

	index = this.findImage(obj);

	scale = 1;

	x1 = x1 * scale;
	y1 = y1 * scale;
	x2 = x2 * scale;
	y2 = y2 * scale;
	
	this.setClipRegion(x1,y1,x2,y2);
	xmin = this.clipRegion.x1;

	scale = 0.60;
	scale = 72 / 110;
	
	height = Math.round(obj.height * scale);
	width = Math.round(obj.width * scale);
	if (height < 1) return;
	if (width < 1) return;

	rows = Math.ceil(this.clipRegion.height / height);
	cols = Math.ceil(this.clipRegion.width / width);

	if (repeat == 'no-repeat')
	{
		height = this.clipRegion.height;
		width = this.clipRegion.width;
		yscale = height / obj.height;
		xscale = width / obj.width;
		scale = Math.max(xscale,yscale);
		height = Math.ceil(obj.height * scale);
		width = Math.ceil(obj.width * scale);
		rows = 1;
		cols = 1;
	}
		
	dx = 0;
	dy = 0;

	list = position.split(' ');
	if (list.length >= 2)
	{
		a = list[0];
		b = list[1];
		
//---------- xpos ----------------
		switch (a)
		{
		case "top": break;
		case "center": dx = (this.clipRegion.width - width) / 2; 
				  break;
		case "right": dx = this.clipRegion.width - width; 
				  break;
		default: if (a.length == 0) break;
				  dx = parseInt(a);
				  temp = a.substr(a.length-1);
				  if (temp == '%') dx = (this.clipRegion.width * (dx / 100));
				  break;
		}
 
//---------- ypos ----------------
		switch (b)
		{
		case "top": break;
		case "center": dy = (this.clipRegion.height - height) / 2; 
				  break;
		case "right":  dy = this.clipRegion.height - height; 
				  break;
		default: if (b.length == 0) break;
				 dy = parseInt(b);
				 temp = b.substr(b.length-1);
				 if (temp == '%') dy = (this.clipRegion.height * (dy / 100));
				 break;
		}
	}

	if (( (dx != 0) || (dy != 0)) && (repeat != 'no-repeat'))
	{
	  switch (repeat)
	  {
	  case "repeat-x":
			while (dx > 0) 
			{ 
				dx = dx - width; 
			}
			cols = Math.ceil((this.clipRegion.width - dx) / width);
			break;
	  case "repeat-y":
			while (dy > 0) 
			{
				dy = dy - height;
			}
			rows = Math.ceil((this.clipRegion.height - dy) / height);
			break;
	  default:
			while (dy > 0) 
			{
				dy = dy - height;
			}
			while (dx > 0) 
			{
				 dx = dx - width;
			}
			rows = Math.ceil((this.clipRegion.height - dy) / height);
			cols = Math.ceil((this.clipRegion.width - dx) / width);
			break;
		}
	}
 
	h = height / 72;
	w = width / 72;

	this.catalog.activePage.add(this.clipText_());
	
	ypos = (this.clipRegion.y1 - height) + dy;
	xmin = xmin + dx;
	
	for (r = 0; r < rows; ++r)
	{
		if ((repeat == 'repeat-x') && (r > 0)) break;
		ypos = ypos + height;
		xpos = xmin - width;
		for (c = 0; c < cols; ++c)
		{
			if ((repeat == 'repeat-y') && (c > 0)) break;

			xpos = xpos + width;
			x = (xpos - this.xmin) / 72;
			y = (ypos - this.ymin) / 72;
			this.catalog.activePage.addImage(x,y,h,w,0,index);			
			this.setClipRegion();
			if (repeat == 'no-repeat') break;
		}

		if (repeat == 'no-repeat') break;
	}

	this.catalog.activePage.add("Q\n");

	this.setClipRegion();
}
//===================================================================================
//			pdf$setClipRegion
//===================================================================================
function pdf$setClipRegion(x1,y1,x2,y2)
{
	var t,p1,p2;

	if (arguments.length != 4)
	{
		this.clipRegion = null;
		return;
	}
	
	t = this;

	p1 = this.toPoint_(x1,y1);
	p2 = this.toPoint_(x2,y2);
	
	this.clipRegion = new Object();
	this.clipRegion.x1 = Math.round(p1.x);
	this.clipRegion.y1 = Math.round(p1.y);
	this.clipRegion.x2 = Math.round(p2.x);
	this.clipRegion.y2 = Math.round(p2.y);

	this.clipRegion.width = this.clipRegion.x2 - this.clipRegion.x1;
	this.clipRegion.height = this.clipRegion.y2 - this.clipRegion.y1;
}
//===================================================================================
//			pdf$clipText_
//===================================================================================
function pdf$clipText_()
{
	var y;
	var text;

	if (this.clipRegion == null) return '';

	y = this.ymax - (this.clipRegion.y2 - this.ymin);	
	
	text = "q\n";
	text = text + this.clipRegion.x1 + ' ' + y + ' ' + this.clipRegion.width + ' ' + this.clipRegion.height + " re W n\n";
	return text;
}
//===================================================================================
//			pdf$drawMargin_
//===================================================================================
function pdf$drawMargin_()
{
	var x1,y1,x2,y2;

	x1 = this.xmin;
	y1 = this.ymin;
	x2 = this.xmax;
	y2 = this.ymax;

	this.setGraphicLineStyle('dash');
	this.setGraphicLineWeight(1);
	this.setGraphicColor('silver');
	this.setGraphicFillColor('');
	this.plot.rectangle(x1,y1,x2,y2);

}
//===================================================================================
//			pdf$textSplit
//===================================================================================
function pdf$textSplit(text,maxwidth)
{
	var lines,i,list;

	lines = new Array();
	list = text.split("\r\n");

	for (i=0; i < list.length; ++i)
	{
		this.textSplit_A(list[i],maxwidth,lines);
	}

	return lines;
}
//===================================================================================
//			pdf$textWidth
//===================================================================================
function pdf$textWidth(text)
{
	var i,size,c;

	size = 0;
	for (i=0; i < text.length; ++i)
	{
		c = text.charCodeAt(i);
		size += this.charWidth(c);		
	}
	
	return size;
}
//===================================================================================
//			pdf$textSplit_A
//===================================================================================
function pdf$textSplit_A(text,maxwidth,lines)
{
	var i,size,c;
	var wordLength,wordWidth,width,line,j;

	size = 0;	
	wordLength = 0;
	wordWidth = 0;

	text = this.trim(text);

	for (i = 0; i < text.length; ++i)
	{
		c = text.charCodeAt(i);
		width = this.charWidth(c);		
		if ((size + width) > maxwidth)
		{
			if (wordLength > 0) 
			{
				line = new Object();
				line.width = wordWidth;
				line.text = text.substr(0,wordLength);
				lines[lines.length] = line;
				this.textSplit_A(text.substr(wordLength-1),maxwidth,lines);
				return;
			}
			else
			{
				j = i-1;
				if (j < 0) j = 0;
				line = new Object();
				line.width = wordWidth;
				line.text = text.substr(0,j+1);
				lines[lines.length] = line;
				this.textSplit_A(text.substr(j+1),maxwidth,lines);
				return;
			}
		}

		size += width;
		if ((i == 0) || this.charVisible(c)) continue;
		wordLength = i + 1;
		wordWidth  = size - width;
	}

		line = new Object();
		line.width = size;
		line.text = text;
		lines[lines.length] = line;
}
//===================================================================================
//			pdf$setColumns
//===================================================================================
function pdf$setColumns(columns,gutterSize,align)
{
	this.flushColumns_();
	this.columns = parseInt(columns);
	if (this.columns <= 1) this.columns = 1;
	if (this.columns > 40) this.columns = 1;
	this.gutterSize = 0.0;
	this.columnAlign = 'left';

}
//===================================================================================
//			pdf$setMargins
//===================================================================================
function pdf$setMargins(margins)
{	
	var a,text,l,r,t,b;

	text = this.trim(margins);

	l = 0;
	r = 0;
	t = 0;
	b = 0;

	text = text.replace(/\,/g,' ');
	a = text.split(' ');
	l = parseFloat(a[0]); if (isNaN(l)) l = 0;

	if (a.length == 1) return this.setMargin(l,l,l,l);

	r = parseFloat(a[1]); if (isNaN(r)) r = 0;
	if (a.length == 2) return this.setMargin(l,l,r,r);

	t = parseFloat(a[2]); if (isNaN(t)) t = 0;
	if (a.length == 3) return this.setMargin(l,r,t,t);

	b = parseFloat(a[3]); if (isNaN(b)) b = 0;
	this.setMargin(l,r,t,b);
}
//===================================================================================
//			pdf$setMargin
//===================================================================================
function pdf$setMargin(left,right,top,bottom)
{	
	if (arguments.length == 0)
	{
		 this.setMarginLeft(0);
		 this.setMarginRight(0);
		 this.setMarginTop(0);
		 this.setMarginBottom(0);
		 return;
	}

	if (arguments.length == 1)
	{
		 left = parseFloat(left);
		 if (isNaN(left)) left = 0;
		 this.setMarginLeft(left);
		 this.setMarginRight(left);
		 this.setMarginTop(left);
		 this.setMarginBottom(left);
		return;
	}

	if (! isNaN(left)) this.setMarginLeft(left);
	if (! isNaN(right)) this.setMarginRight(right);
	if (! isNaN(top)) this.setMarginTop(top);
	if (! isNaN(bottom)) this.setMarginBottom(bottom);
}
//===================================================================================
//			copyArray_
//===================================================================================
function pdf$copyArray_(a,low,high)
{
	var b,i;

	b = new Array();
	if (a == null) return b;

	if (typeof(low) != 'number') low = 0;
	if (typeof(high) != 'number') high = a.length-1;
	if (low < 0) low = 0;
	if (high > a.length-1) high = a.length-1;

	for (i=low; i <= high; ++i)
	{
		 b[b.length] = a[i];
	}
	return b;	
}
//=================================================================
//			pdf$headerSize_
//=================================================================
function pdf$headerSize_()
{
	var i,size;
	
	size = 0;
	for (i = this.report.firstBeginGroup; i < this.groups.length; ++i)
	{
		size = size + this.groups[i].headerSize;
	}
	return size;
}
//=================================================================
//			pdf$footerSize_
//=================================================================
function pdf$footerSize_()
{
	var i,size;

	size = 0;	
	for (i = this.report.firstEndGroup; i < this.groups.length; ++i)
		size = size + this.groups[i].footerSize;

	return size;
	
}
//=================================================================
//			pdf$reportKeepTogether_
//=================================================================
function pdf$reportKeepTogether_(columns,maxLines)
{
	var row,rows,n;
	
	n = this.report.firstBeginGroup - 1;

	row = new Object();
	row.columns		= columns;
	row.maxLines		= maxLines;
	row.keys		= this.copyArray_(this.report.keys);
	row.urls		= this.copyArray_(this.report.urls);
	row.firstBeginGroup	= this.report.firstBeginGroup;
	row.firstEndGroup	= this.report.firstEndGroup;
	row.keepTogether	= this.report.keepTogether_row;
	row.size		= this.headerSize_() + this.footerSize_() + (maxLines * this.charHeight());
	row.next		= null;
	row.index		= this.report.records;
	row.pageBreakBefore	= this.report.pageBreakBefore;
	row.pageBreakAfter	= false;
	row.keyIndex		= n;
	
	this.report.records	= this.report.records + 1;

	rows = this.reportKeepTogether_A(row);
	return rows;
}
//=================================================================
//			pdf$reportKeepTogether_A
//=================================================================
function pdf$reportKeepTogether_A(row)
{
	var n,t,a,b,i,hsize,r;

//------------- no need to buffer rows ---------

	if (! this.report.keepTogether)
	{
		n = this.linesRemaining();
		if ( ((this.ypos - row.size) < this.ymin) && (this.line > 1)) this.pageBreak();
		a = new Array();
		a[0] = row;
		return a;
	}

//------------  Pagebreak Before -------------

	if (row.pageBreakBefore && (this.report.stack.length > 0))
	{
		a = this.report.stack;
		this.report.stack = new Array();
		this.report.stack[0] = row;
		this.report.detailSize = row.size;
		a[a.length-1].pageBreakAfter = true;
		return a;			
	}
	
//------------ Buffer Row  ---------

	hsize = this.report.hsize;
	if ( (this.ypos - (this.report.detailSize + row.size + hsize) ) >= this.ymin)
	{
		n = this.report.stack.length;
		this.report.stack[n] = row;
		this.report.detailSize = this.report.detailSize + row.size;
		return null;
	}

//------------ Determine Page Break Location -----------

	this.report.firstBeginGroup = 0;
	if (this.report.stack.length == 0)
	{
		if (this.line > 1) this.pageBreak();
		a = new Array();
		a[0] = row;
		return a;
	}

//---- find break ------

	for (i = this.report.stack.length-1; i >= 0; --i)
	{
		r = this.report.stack[i];
		a = r.keys[row.keyIndex];
		b = row.keys[row.keyIndex];
		if (a != b) break;
	}

	if (i < 0)
	{
		a = this.report.stack;
		this.report.stack = new Array();
		this.report.stack[0] = row;
		this.report.detailSize = row.size;
		a[a.length-1].pageBreakAfter = true;
		return a;
	}

//------- none found ------

	if (i == (this.report.stack.length-1))
	{
		if (this.line > 1) 
		{

			this.pageBreak();		// page break and try again
			a = this.reportKeepTogether_A(row);
			return a;
		}		

		a = this.report.stack;
		this.report.stack = new Array();
		this.report.stack[0] = row;
		this.report.detailSize = row.size;
		a[a.length-1].pageBreakAfter = true;
		return a;
	}

//---------- found ---------

	a = this.copyArray_(this.report.stack,0,i);
	this.report.stack = this.copyArray_(this.report.stack,i+1,this.report.stack.length-1);
	this.report.stack[this.report.stack.length] = row;
	
	this.report.detailSize = 0;
	for (i=0; i < this.report.stack.length; ++i)
		this.report.detailSize = this.report.detailSize + this.report.stack[i].size;

	a[a.length-1].pageBreakAfter = true;
	return a;
}
//=================================================================
//			pdf$reportInit
//=================================================================
function pdf$reportInit()
{
	var i,g;
	
	for (i=0; i < this.groups.length; ++i)
	{
		g = this.groups[i];
	}
	
	this.groups = new Array();

}
//=================================================================
//			pdf$reportCreateGroup
//=================================================================
function pdf$reportCreateGroup(headerLines,footerLines,onGroupHeader,onGroupFooter,keepTogether,skipIfBlank,pageBreakBefore,pageBreakAfter)
{
	var obj;
	
	obj = new Object();

	obj.onGroupHeader	= onGroupHeader;
	obj.onGroupFooter	= onGroupFooter;

	obj.keepTogether	= keepTogether;
	obj.skipIfBlank		= skipIfBlank;
	obj.pageBreakBefore	= pageBreakBefore;
	obj.pageBreakAfter	= pageBreakAfter;

	obj.headerSize		= parseFloat(headerLines) * this.charHeight();
	obj.footerSize		= parseFloat(footerLines) * this.charHeight();
	
	obj.sizeDetail		= 0;

	obj.index		= this.groups.length;
	obj.value		= "<?<<not defined>>?>";
	obj.rowCount		= 0;
	
	this.groups[this.groups.length] = obj;	
	if (keepTogether) this.report.keepTogether = true;
}
//=================================================================
//			pdf$reportEnd_
//=================================================================
function pdf$reportEnd_()
{

	var i,a;

	this.report.detailSize = 0;
	this.report.hsize = 0;
	if (this.ruler == null) return;

	this.ruler.flush_(this.report.stack);
	this.report.stack = new Array();

	a = new Array();

	for (i=this.groups.length-1; i >= 0; i--)
	{
		a[0] = this.groups[i].value;
		this.reportEndGroup_(this.groups[i],a);
	}

}
//=================================================================
//			pdf$reportGroupKeys_
//=================================================================
function pdf$reportGroupKeys_(keys)
{
	var i,j;

	this.report.keys = keys;
	this.report.firstEndGroup	= this.groups.length;
	this.report.firstBeginGroup	= 0;
	this.report.pageBreakBefore	= false;
	this.report.keepTogether_row	= false;

	if (this.report.firstRow) 
	{
		this.report.firstRow = false;
	}
	else
	{
		for (i=0; i < this.groups.length; ++i) 
		{
			if (this.groups[i].value != keys[i]) break;
			this.report.firstBeginGroup = i;
			this.report.firstEndGroup = i;
		}
	}

	for (i=this.report.firstBeginGroup; i < this.groups.length; ++i)
	{
		if (this.groups[i].pageBreakBefore) this.report.pageBreakBefore = true;
		if (this.groups[i].keepTogether) this.report.keepTogether_row = true;
	}

	for (i=0; i < this.groups.length; ++i) 
	{
		this.groups[i].value = keys[i];
	}

//	if (this.groups[0].rowCount > 0) return;

	this.report.hsize = 0;

	for (i=0; i < this.groups.length; ++i) 
	{
		this.report.hsize += this.groups[i].headerSize;
	}
//	this.report.hsize = 55;
}
//=================================================================
//			pdf$setReportGroup_
//=================================================================
function pdf$setReportGroup_(row)
{
	var i,j;

	if (this.groups.length == 0) return;

	if (row.index > 0)
	{
		for (j = this.groups.length-1; j >= row.firstEndGroup; --j) 
		{
			this.reportEndGroup_(this.groups[j],row.keys);
		}
		for (j=0; j < row.firstBeginGroup; ++j) 
		{
			this.groups[j].rowCount = this.groups[j].rowCount + 1;
		}
		if (row.firstBeginGroup >= this.groups.length) return;
	}

	for (j=row.firstBeginGroup; j < this.groups.length; ++j)
	{
		this.groups[j].rowCount = 0;
		this.reportBeginGroup_(this.groups[j], row.keys,false);
	}
}
//==========================================================================================
//				pdf$reportEndGroup
//==========================================================================================
function pdf$reportEndGroup_(group,keys)
{
	var cont;

	this.ruler.end();

	if (group.skipIfBlank && (group.rowCount == 0)) return;

	if (group.rowCount == 0)
	{
		cont = false;
		if (group.onGroupHeader)  group.onGroupHeader(this,group.index,keys,0,cont);
		group.rowCount = 0;
	}

	if (group.onGroupFooter) group.onGroupFooter(this,group.index,keys,group.rowCount);

	if (group.pageBreakAfter) this.pageBreak();

	group.rowCount	= 0;
	group.data	= '';
}
//==========================================================================================
//				pdf$reportHeader_
//==========================================================================================
function pdf$reportHeader_(row)
{
	var i;

	if (this.line > 1) return;

	for (i=0; i < row.firstBeginGroup; ++i)
		this.reportBeginGroup_(this.groups[i],row.keys,true);
}
//==========================================================================================
//				pdf$reportBeginGroup
//==========================================================================================
function pdf$reportBeginGroup_(group,keys,cont)
{

	this.ruler.end();
	if (group.pageBreakBefore) this.pageBreak();
	if (group.onGroupHeader)  group.onGroupHeader(this,group.index,keys,group.rowCount,cont);
	group.rowCount = group.rowCount + 1;

}
//==========================================================================================
//				pdf$setRuler
//==========================================================================================
function pdf$setRuler(ruler,borderWidth)
{
	var width;
	
	if (this.ruler != null) this.ruler.end();	//

	width = 0;
	if (arguments.length > 1) width = parseFloat(borderWidth);
	if (isNaN(width)) width = 0;
	
	this.ruler = new pdfRuler$(this,ruler,width,this.tabCharacter,0);
}
//==========================================================================================
//				pdf$reportColumns
//==========================================================================================
function pdf$reportColumns(columnSpec,leftMargin,borderWidth)
{
	var ruler,width,left;

	if (this.ruler != null) this.ruler.end();	//

	width = 0;
	if (arguments.length > 2) width = parseFloat(borderWidth);
	if (isNaN(width)) width = 0;

	left = 0;
	if (arguments.length > 1) left = parseFloat(leftMargin);
	if (isNaN(left)) left = 0;
		
	this.ruler = new pdfRuler$(this,columnSpec,width,this.tabCharacter,left);
}
//==========================================================================================
//				pdf$setRulerAlign
//==========================================================================================
function pdf$setRulerAlign(valign)
{	
	if (this.ruler == null) return;
	this.ruler.setValign(valign);
}
//==========================================================================================
//				pdf$setBorderWidth
//==========================================================================================
function pdf$setBorderWidth(width)
{
	if (this.ruler == null) return;
	this.ruler.borderWidth = parseFloat(width);
}
//==========================================================================================
//				pdf$linesRemaining
//==========================================================================================
function pdf$linesRemaining()
{
	var n,dy;
	
	dy = this.ypos - this.ymin;
	if (dy <= 0) return 0;
	
	n = Math.floor(dy / this.charHeight());
	return n;
}
//==========================================================================================
//				pdf$setHeader_
//==========================================================================================
function pdf$setHeader_()
{

	this.margin		= true;

	this.xmin		= 0;		// left margin
	this.xmax		= this.pageWidth * 72;	// bottom Margin

	this.ymax		= this.pageLength * 72;	// top margin;
	this.ymin		= this.ymax - this.marginTop;			// Top Margin

	this.xpos		= this.xmin;
	this.ypos		= this.ymax;

	this.line		= 1;
}
//==========================================================================================
//				pdf$setFooter_
//==========================================================================================
function pdf$setFooter_()
{

	this.margin	= true;

	this.xmin	= 0;		// left margin
	this.xmax	= this.pageWidth * 72;	// bottom Margin

	this.ymax	= this.marginBottom;
	this.ymin	= 0;

	this.xpos	= this.xmin;
	this.ypos	= this.ymax;

	this.line	= 1;
}
//==========================================================================================
//			pdf$setFontName
//==========================================================================================
function pdf$setFontName(name,widths)
{
	var i;
	
	this.setFontName_A(name);	
	this.fontName = this.font.id;

	if (arguments.length < 2) return;
	for (i=0; i < widths.length; ++i)
	{
		widths[i] = this.font.font_widths[i];
	}
}
//==========================================================================================
//			pdf$setFontName_A
//==========================================================================================
function pdf$setFontName_A(name)
{
	var i,fname,list,encoding,id,uname,value,ename,index,mode;

	name = '' + name;
	

	mode = this.fontMode_();
	list = name.split(',');
	name = trim(list[0]);

	if (name == '') name = this.default_fontName;
	name = name.toLowerCase();

	if (name == 'arial') name = 'helvetica';
	if (name ==     'h') name = 'helvetica';
	if (name ==     't') name = 'times';
	if (name ==     'c') name = 'courier';
	if (name ==     'z') name = 'zapfdingbats';
	if (name ==     's') name = 'symbol';
	if ((name == 'dingbat') || (name == 'dingbats')) name = 'zapfdingbats';

	encoding = '';
	if (list.length > 1)
	{
		value = list[1];
		encoding = value.toLowerCase();
	}
	
	if ((name == 'zapfdingbats') || (name == 'symbol'))
	{
		mode     = '';
		encoding = '';	
	}

	id = name + ',' + encoding;
	if (this.font && this.font.id == id && this.font.mode == mode) return;

//--------------------------------- find existing font --------------------------------------------

	for (i = 0; i < this.fonts.length; ++i)
	{
		if (! ((this.fonts[i].id == id) && (this.fonts[i].mode == mode))) continue;
		this.font = this.fonts[i];
		return;
	}

	if ((name == 'helvetica') || (name == 'times') || (name == 'courier') || (name == 'zapfdingbats') || (name == 'symbol'))
	{
		index = this.fonts.length;		
		this.fonts[index] = new pdfFont$(index,name,mode,encoding);
		this.font = this.fonts[index];
		return;
	}


//------------------------------- known encodings ----------------------------------------------------

	if (arguments.length > 1) return;			// infinite loop, ignore;

	uname = encoding.toUpperCase() + ',';	

	for (i=0; i < this.encodings.length; ++i)
	{	
		ename = this.encodings[i]; 
		if (uname == ename.substr(0,uname.length).toUpperCase()) 
		{
			this.font = this.makeFontCID(name,this.encodings[i],mode);
			return;
		}
	}		

//---------------------------------- External Fonts --------------------------------------------------

	list = name.split('.');

	if ((list[1] == 'ttf') || (name.indexOf('_ttfx.txt') >= 0) || (name.indexOf('_ttf8.txt') >= 0))
	{
	//	this.font = this.makeFontTruetype(list[0],encoding);
	//    this.fontName = this.font.id;
	//	return;
	}		

	if (list[list.length-1] == 'pfb')
	{

		if (! this.sys.fileExists(name))
		{
			log('Font does not exist: ' + name);
			return;
		}
		else
		{
			if (this.sys.isServer)
			{
				this.font = this.makeFontType1(name,encoding,mode);
				return;
			}
			log('Cannot load Type1 Font on Client: ' + name);
//			return;
		}
	}		

//----------------- not found (mode) --------------------------	

	this.setFontName_A('helvetica',1)
	return;
}
//==========================================================================================
//			pdf$makeFontClone
//==========================================================================================
function pdf$makeFontClone(font,encoding,mode)
{
	var clone,i,index,filename,name,fname;
	

	name = font.name;
	i = name.lastIndexOf('.');
	name = name.substr(0,i);

	fname = name + mode + '.pfb';
	filename = CollinsPDF().clientPath + fname;

	if (this.sys.fileExists(filename))
	{
		font = this.makeFontType1(fname,encoding,mode);
		return font;
	}

	index = this.fonts.length;
	
	clone = new pdfFont$(index,font.name,mode,encoding);
	this.fonts[index] = clone;

	clone.id	= font.id;
	clone.type	= font.type;
	clone.file	= font.file;
	clone.encoding	= font.encoding;
	clone.mapping	= font.mapping;
	clone.mode	= mode;

	for (i=0; i < font.font_widths.length; ++i)
	{
	  clone.font_widths[i] = font.font_widths[i];
	}	

	clone.template_font = font.template_font;
	clone.template_descendantFont = font.template_descendantFont;
	clone.template_fontDescriptor = font.template_fontDescriptor;
	
	return clone;
	
}
//==========================================================================================
//				pdf$makeFontCID
//==========================================================================================
function pdf$makeFontCID(fontname,encodingDefinition,mode)
{
	var index,font,base,text,order,supplement;
	var list,value,i,encoding,name;
	var basefont,registry,ordering,supplement;
	
	index = this.fonts.length;	

	list = encodingDefinition.split(',');
	encoding = list[0];
	value = this.trim(list[1]);
	list = value.split('-');
	
	basefont = this.encodingFonts[0];
	for (i=0; i < this.encodingFonts.length; ++i)
	{
	  name = this.encodingFonts[i];	
	  if (name.toLowerCase() == fontname.toLowerCase()) basefont = this.encodingFonts[i];
	}
		
	registry   = list[0];
	ordering   = list[1];
	supplement = list[2];

	font = new pdfFont$(index,fontname,mode,encoding);
	font.type = 'cid';
	font.file = null;

	this.fonts[index] = font;

	for (i=0; i < font.font_widths.length; ++i)
	{	
	  font.font_widths[i] = 500;
	}	

	text = '';	
	text += '<<' + "\n";
	text += '/Type /Font' + "\n";
	text += '/BaseFont /' + basefont + '{mode}' + "\n";
	text += '/Subtype /Type0' + "\n";
	text += '/Encoding /' + font.encoding + "\n";
	text += '/DescendantFonts [ {ref} 0 R ]' + "\n";
	text += '>>';

	font.template_font = text;

	text = '';	
	text += '<<' + "\n";
	text += '/Type /Font' + "\n";
	text += '/Subtype /CIDFontType0' + "\n";
	text += '/DW 1000' + "\n";
	text += '/W [ 1 [ 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 ] 231 [ 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 ] 327 [ 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 ] 631 [ 500 ] ]' + "\n";
	text += '/DW2 [ 880 -1000 ]' + "\n";
	text += '/BaseFont /' + basefont + '{mode}' + "\n";
	text += '/FontDescriptor {ref} 0 R' + "\n";
	text += '/CIDSystemInfo <<' + "\n";
	text += '/Registry (' + registry + ')' + "\n";
	text += '/Ordering (' + ordering + ')' + "\n";
	text += '/Supplement ' + supplement + '' + "\n";
	text += '>>' + "\n";
	text += '>>';
	
	font.template_descendantFont = text;

	text = '';
	text += '<<' + "\n";
	text += '/Type /FontDescriptor' + "\n";
	text += '/FontName /' + basefont + '{mode}' + "\n";
	text += '/Ascent 859' + "\n";
	text += '/Descent -140' + "\n";
	text += '/CapHeight 769' + "\n";
	text += '/MissingWidth 500' + "\n";
	text += '/Flags 7' + "\n";
	text += '/FontBBox [ 0 -136 1000 859 ]' + "\n";
	text += '/ItalicAngle 0' + "\n";
	text += '/StemV 78' + "\n";
	text += '>>';

	font.template_fontDescriptor = text;

	return font; 
}
//==========================================================================================
//			pdf$makeFontTruetype
//==========================================================================================
function pdf$makeFontTruetype(name,encoding,mode)
{
	var base,i,j,index,filename,font,fst;
	
	index = this.fonts.length;	

	filename = name;
	i = filename.lastIndexOf('.');
	filename = filename.substr(0,i) + mode + '.pfb';
	
	i = name.lastIndexOf('/');
	j = name.lastIndexOf("\\");
	if (j > i) i = j;
	if (i > 0) name = name.substr(i+1);
	if (name.toLowerCase().indexOf('.txt') > 0)
	{
		i = name.lastIndexOf('_');
		if (i > 0) name = name.substr(0,i);
		i = name.lastIndexOf('_');
		if (i > 0) name = name.substr(0,i);
	}

	font = new pdfFont$(index,name,mode,encoding);
	font.type = 'truetype';
	font.file = this.findFontFile(font.type,filename);

	this.fontfile = filename;
	this.fonts[index] = font;
	return font; 
}
//==========================================================================================
//			pdf$makeFontType1
//==========================================================================================
function pdf$makeFontType1(name,encoding,mode)
{
	var base,i,j,index,font,filename,ext;
		
	filename = name;
	
	i = name.lastIndexOf('.');
	if (i < 0) i = name.length;
	ext = name.substr(i).toLowerCase();
	filename = name.substr(0,i) + mode + ext;

	i = name.lastIndexOf('/');
	j = name.lastIndexOf("\\");
	if (j > i) i = j;
	if (i > 0) name = name.substr(i+1);
	if (ext == '.txt')
	{
		i = name.lastIndexOf('_');
		if (i > 0) name = name.substr(0,i);
		i = name.lastIndexOf('_');
		if (i > 0) name = name.substr(0,i);
	}

	if (this.characterMap == null) this.characterMap = new pdfCharacterMap$(this,name);

	this.characterMap.define(filename,mode);

	fst = this.characterMap.firstChar;
	this.characterMap.unicode_widths = this.characterMap.getWidths(encoding,fst);

	index = this.fonts.length;
	font = new pdfFont$(index,filename,mode,encoding);
	font.type = 'type1';
	font.file = this.findFontfile(font.type,filename);

	font.font_widths   = this.characterMap.getWidths(encoding);
	font.mapping	   = this.characterMap.getMapping(encoding);

	font.template_font = this.characterMap.template_font(encoding);

	font.template_fontDescriptor = this.characterMap.template_fontDescriptor(encoding);

	index = this.fonts.length;	
	this.fonts[index] = font;
	return font; 
}
//==========================================================================================
//			pdf$type1FontTemplate
//==========================================================================================
function pdf$type1FontTemplate(filename)
{
	var a,b,c,d,template,i,text,fmt,filter;
	
	fmt = '';
	if (filename.toLowerCase().indexOf('_pfb8.txt') > 0) fmt = '/ASCII85Decode';
	if (filename.toLowerCase().indexOf('_pfbx.txt') > 0) fmt = '/ASCIIHexDecode';
	
	if (fmt != '')
	{
		i = filename.lastIndexOf('_');
		text = filename.substr(0,i);
		text = text.toLowerCase();
		i = text.lastIndexOf('_');
		text = text.substr(i+1);				
		list = text.split('x');
		a = parseInt(list[0]);
		b = parseInt(list[1]);
		c = parseInt(list[2]);
		d = parseInt(list[3]);
		
		filter = '/Filter ' + fmt;
		
		template = '';
		template += '<< ' + filter;
		template += ' /Length '  + d;
		template += ' /Length1 ' + a;
		template += ' /Length2 ' + b; 
		template += ' /Length3 ' + c;
		template += '>>';
		return template;
	}

	template = this.sys.type1FontTemplate(filename);
	return template;
}
//==========================================================================================
//			pdf$findFontfile
//==========================================================================================
function pdf$findFontfile(type,filename)
{
	var index;
	var fontfile,fmt;
	var i,template;


	for (i=0; i < this.fontfiles.length; ++i)
	{
		fontfile = this.fontfiles[i];

		if (type != fontfile.type) continue;
		if (fontfile.filename == filename) return fontfile;	
	}

	template = this.type1FontTemplate(filename);

	i = this.fontfiles.length;
	fontfile		= new Object();
	fontfile.filename	= filename;
	fontfile.type		= type;
	fontfile.template	= template;
	fontfile.format		= '';
	fontfile.ref		= 0;

	this.fontfiles[i] = fontfile;
	return fontfile;	
}
//==========================================================================================
//			pdf$colorText_
//==========================================================================================
function pdf$colorText_(color)
{
	var text;
 
	text = this.colorRGBText_(color) + ' rg % Color = ' + color + "\n";
	return text; 
	
}
//==========================================================================================
//			pdf$colorRGBText_
//==========================================================================================
function pdf$colorRGBText_(color)
{
	var r,g,b,text;

	r = (color / 65536) % 256;
	r = r / 255;
	r = Math.round(r * 100) / 100;

	g = (color / 256) % 256;
	g = g / 255;
	g = Math.round(g * 100) / 100;

	b = color % 256;
	b = b / 255;
	b = Math.round(b * 100) / 100;
 
	text = r + ' ' + g + ' ' + b;
	return text; 
	
}
//==========================================================================================
//			pdf$fontMode_
//==========================================================================================
function pdf$fontMode_()
{
	if (this.bold && (! this.italic)) return 'bold';
	if ((! this.bold) && this.italic) return 'italic';
	if (this.bold && this.italic) return 'bolditalic';
	return ''; 
}
//==========================================================================================
//			pdf$fontName_
//==========================================================================================
function pdf$fontName_()
{
	var n;

	this.font = this.findFont_();
	this.font.used = true;
	return ('F' + this.font.index);
}
//==========================================================================================
//			pdf$findFont_
//==========================================================================================
function pdf$findFont_()
{
	var i,font,mode;

	mode = this.fontMode_();
	if ((this.font.id == this.fontName) && (this.font.mode == mode)) return this.font;
	
	for (i=0; i < this.fonts.length; ++i)
	{
		if ((this.fonts[i].id == this.fontName) && (this.fonts[i].mode == mode)) return this.fonts[i];
	}

	for (i=0; i < this.fonts.length; ++i)
	{
		if (this.fonts[i].id == this.fontName) 
		{
		    font = this.makeFontClone(this.fonts[i],this.fonts[i].encoding,mode)
			font.id = this.fontName;
			return font;
		}
	}

	return this.fonts[0];
}
//==========================================================================================
//			pdf$setFontColor
//==========================================================================================
function pdf$setFontColor(value)
{

    var obj = this.parseColor_(value);
    this.fontColor = obj.color;
    this.transparent = obj.opaque;
}
//==========================================================================================
//			pdf$parseColor_
//==========================================================================================
function pdf$parseColor_(c)
{
	var color,i,name,colorNames,colorValues,lightValues,R,G,B,A;
	var list,t,c, obj;
	
	colorNames = new Array('AliceBlue','AntiqueWhite','Aqua','Aquamarine','Azure','Beige','Bisque','Black','BlanchedAlmond',
	'Blue','BlueViolet','Brown','BurlyWood','CadetBlue','Chartreuse','Chocolate','Coral','CornflowerBlue','Cornsilk','Crimson',
	'Cyan','DarkBlue','DarkCyan','DarkGoldenRod','DarkGray','DarkGrey','DarkGreen','DarkKhaki','DarkMagenta','DarkOliveGreen',
	'Darkorange','DarkOrchid','DarkRed','DarkSalmon','DarkSeaGreen','DarkSlateBlue','DarkSlateGray','DarkSlateGrey','DarkTurquoise',
	'DarkViolet','DeepPink','DeepSkyBlue','DimGray','DimGrey','DodgerBlue','FireBrick','FloralWhite','ForestGreen','Fuchsia','Gainsboro',
	'GhostWhite','Gold','GoldenRod','Gray','Grey','Green','GreenYellow','HoneyDew','HotPink','IndianRed ','Indigo ','Ivory','Khaki',
	'Lavender','LavenderBlush','LawnGreen','LemonChiffon','LightBlue','LightCoral','LightCyan','LightGoldenRodYellow','LightGray',
	'LightGrey','LightGreen','LightPink','LightSalmon','LightSeaGreen','LightSkyBlue','LightSlateGray','LightSlateGrey','LightSteelBlue',
	'LightYellow','Lime','LimeGreen','Linen','Magenta','Maroon','MediumAquaMarine','MediumBlue','MediumOrchid','MediumPurple',
	'MediumSeaGreen','MediumSlateBlue','MediumSpringGreen','MediumTurquoise','MediumVioletRed','MidnightBlue','MintCream','MistyRose',
	'Moccasin','NavajoWhite','Navy','OldLace','Olive','OliveDrab','Orange','OrangeRed','Orchid','PaleGoldenRod','PaleGreen','PaleTurquoise',
	'PaleVioletRed','PapayaWhip','PeachPuff','Peru','Pink','Plum','PowderBlue','Purple','Red','RosyBrown','RoyalBlue','SaddleBrown','Salmon',
	'SandyBrown','SeaGreen','SeaShell','Sienna','Silver','SkyBlue','SlateBlue','SlateGray','SlateGrey','Snow','SpringGreen','SteelBlue','Tan',
	'Teal','Thistle','Tomato','Turquoise','Violet','Wheat','White','WhiteSmoke','Yellow','YellowGreen');
	
	colorValues = new Array(0xF0F8FF,0xFAEBD7,0x00FFFF,0x7FFFD4,0xF0FFFF,0xF5F5DC,0xFFE4C4,0x000001,0xFFEBCD,0x0000FF,0x8A2BE2,0xA52A2A,
	0xDEB887,0x5F9EA0,0x7FFF00,0xD2691E,0xFF7F50,0x6495ED,0xFFF8DC,0xDC143C,0x00FFFF,0x00008B,0x008B8B,0xB8860B,0xA9A9A9,0xA9A9A9,0x006400,
	0xBDB76B,0x8B008B,0x556B2F,0xFF8C00,0x9932CC,0x8B0000,0xE9967A,0x8FBC8F,0x483D8B,0x2F4F4F,0x2F4F4F,0x00CED1,0x9400D3,0xFF1493,0x00BFFF,
	0x696969,0x696969,0x1E90FF,0xB22222,0xFFFAF0,0x228B22,0xFF00FF,0xDCDCDC,0xF8F8FF,0xFFD700,0xDAA520,0x808080,0x808080,0x008000,0xADFF2F,
	0xF0FFF0,0xFF69B4,0xCD5C5C,0x4B0082,0xFFFFF0,0xF0E68C,0xE6E6FA,0xFFF0F5,0x7CFC00,0xFFFACD,0xADD8E6,0xF08080,0xE0FFFF,0xFAFAD2,0xD3D3D3,
	0xD3D3D3,0x90EE90,0xFFB6C1,0xFFA07A,0x20B2AA,0x87CEFA,0x778899,0x778899,0xB0C4DE,0xFFFFE0,0x00FF00,0x32CD32,0xFAF0E6,0xFF00FF,0x800000,
	0x66CDAA,0x0000CD,0xBA55D3,0x9370D8,0x3CB371,0x7B68EE,0x00FA9A,0x48D1CC,0xC71585,0x191970,0xF5FFFA,0xFFE4E1,0xFFE4B5,0xFFDEAD,0x000080,
	0xFDF5E6,0x808000,0x6B8E23,0xFFA500,0xFF4500,0xDA70D6,0xEEE8AA,0x98FB98,0xAFEEEE,0xD87093,0xFFEFD5,0xFFDAB9,0xCD853F,0xFFC0CB,0xDDA0DD,
	0xB0E0E6,0x800080,0xFF0000,0xBC8F8F,0x4169E1,0x8B4513,0xFA8072,0xF4A460,0x2E8B57,0xFFF5EE,0xA0522D,0xC0C0C0,0x87CEEB,0x6A5ACD,0x708090,
	0x708090,0xFFFAFA,0x00FF7F,0x4682B4,0xD2B48C,0x008080,0xD8BFD8,0xFF6347,0x40E0D0,0xEE82EE,0xF5DEB3,0xFFFFFF,0xF5F5F5,0xFFFF00,0x9ACD32);

	lightValues = new Array(0xFAEBD7,0x7FFFD4,0xF5F5DC,0xFFE4C4,0xFFEBCD,
	0x7FFF00,0xFFF8DC,
	0xFFFAF0,0xDCDCDC,
	0xDAA520,0xADFF2F,
	0xF0FFF0,0xFF69B4,0xFFFFF0,0xF0E68C,0xE6E6FA,0xFFF0F5,0xFFFACD,0xADD8E6,0xE0FFFF,0xFAFAD2,
	0x90EE90,0xFFB6C1,0xFFA07A,0x87CEFA,
	0xFFFFE0,0xFAF0E6,
	0xF5FFFA,0xFFE4E1,0xFFE4B5,0xFFDEAD,
	0xFDF5E6,
	0xEEE8AA,0x98FB98,0xAFEEEE,0xFFEFD5,0xFFDAB9,
	0xFFC0CB,
	0xF4A460,0xFFF5EE,0x87CEEB,
	0xFFFAFA,0xD2B48C,0xD8BFD8,0xEE82EE,0xF5DEB3,0xF5F5F5,0x9ACD32);

	c = "" + c;

	obj = new Object();
	obj.color = 0;
	obj.opaque = 1;

	i = c.indexOf('.');
	if (i >= 0)
	{
		t = c.substr(i);
		c = c.substr(0,i);
		t = parseFloat(t);
		if (isNaN(t)) t = 1;
		obj.opaque = t;
	}

//----------- Integer --------

	
	c = c.replace(/^\s+|\s+$/g,'');
	if (c == '') return obj;

	if (!isNaN(c)) {
	    obj.color = parseInt(c);
	    return obj;
	}

	c = "" + c;
	color = c.toLowerCase();
	if (color.length == 0) return obj;

//----------- rgb (r,g,b) ----------

	i = color.indexOf('(');

	if (i > 0)
	{
		name = color.substr(0,i);
		color = color.substr(i+1);
		i = color.indexOf(')');
		if (i < 0) i = color.length;
		color = color.substr(0,i);
		list = color.split(',');
		R = 0;
		G = 0;
		B = 0;
		A = 255;
		R = parseInt(list[0]);
		if (list.length > 1) G = parseInt(list[1]);
		if (list.length > 2) B = parseInt(list[2]);
		if (list.length > 2) A = parseInt(list[3]);
		if (isNaN(R)) R = 0;
		if (isNaN(G)) G = 0;
		if (isNaN(B)) B = 0;
		if (isNaN(A)) A = 0;
				
		if (R > 255) R = 255;
		if (G > 255) G = 255;
		if (B > 255) B = 255;
		if (A > 255) A = 255;

		if (R < 0) R = 255;
		if (G < 0) G = 255;
		if (B < 0) B = 255;
		if (A < 0) A = 255;
				
		color = Math.round((R * 256 * 256) + (G * 256) + B);
		obj.color = color;
		return obj;
		
	}

//----------- #HEX --------

	if (color.substr(0,1) == '#') 
	{
		if (color.length == 4)
		{
		color = '#' + color.substr(1,1) + '0' +color.substr(2,1) + '0' + color.substr(3,1) + '0';
		}
		obj.color = parseInt(color.substr(1), 16);
		return obj;
	}
//---------- Random --------

	if (color == 'random')
	{
		i = Math.floor(Math.random() * colorValues.length);
		obj.color = colorValues[i];
		return obj;
	}

//---------- LightRandom --------

	if (color == 'lightrandom')
	{
		i = Math.floor(Math.random() * lightValues.length);
		obj.color =  lightValues[i];
		return obj;
	}

//---------- Names --------
	for (i=0; i < colorNames.length; ++i)
	{
		name = colorNames[i];
		if (color != name.toLowerCase()) continue;
		obj.color = colorValues[i];
		return obj;
	}
	return obj;
}
//==========================================================================================
//			pdf$setFont
//==========================================================================================
function pdf$setFont(color,size,bold,italic,underline,name,sub,sup)
{
	this.bold = false;
	this.italic = false;
	this.underline = false;
	this.superscript = false;
	this.subscript = false;

	if (arguments.length == 0)
	{
		this.fontSize = this.default_fontSize;
		this.fontColor = 0;
		this.setFontName('Helvetica');
		return;
	}
	if (arguments.length > 0) this.setFontColor(color);
	if (arguments.length > 1) this.setFontSize(size);
	if (arguments.length > 2) this.setBold(bold);
	if (arguments.length > 3) this.setItalic(italic);
	if (arguments.length > 4) this.setUnderline(underline);
	if (arguments.length > 5) this.setFontName(name);
	if (arguments.length > 6) this.setSubscript(sub);
	if (arguments.length > 7) this.setSuperscript(sup);
}
//==========================================================================================
//			pdf$setGraphic
//==========================================================================================
function pdf$setGraphic(color,weight,style,fillcolor)
{
	var grayscale;
	
	if (fillcolor == '')
	{
		this.setGraphic_A(color,weight,style,0);
		return;
	}

	grayscale = parseFloat(fillcolor);
	if (isNaN(grayscale)) grayscale = 0;

	if ((grayscale > 0) && (grayscale <= 1))
		 this.setGraphic_A(color,weight,style,'blue',grayscale);	
	else this.setGraphic_A(color,weight,style,fillcolor,0);	

}
//==========================================================================================
//		pdf$setGraphic_A
//==========================================================================================
function pdf$setGraphic_A(color,weight,style,fillcolor,grayscale)
{
	if (arguments.length == 0)
	{
		this.graphicColor	= 0;
		this.graphicLineWeight	= 0;
		this.graphicLineStyle	= 'solid';
		this.graphicFillColor	= 0;
		this.graphicGrayscale	= 0;
		return;
	}
	
	if (arguments.length > 0) this.setGraphicColor(color);
	if (arguments.length > 1) this.setGraphicLineWeight(weight);
	if (arguments.length > 2) this.setGraphicLineStyle(style);
	if (arguments.length > 3) this.setGraphicFillColor(fillcolor);
	if (arguments.length > 4) this.setGraphicGrayscale(grayscale);
}
//==========================================================================================
//			pdf$setFontSize
//==========================================================================================
function pdf$setFontSize(fontSize)
{
		var s;

try
{	
		s = parseInt(fontSize);
}
catch (e) 
{ 
	s = this.default_fontSize;
}
		
		if (isNaN(s)) s = this.default_fontSize;
		if (s < 2) s = this.default_fontSize;
		if (s > 144) s = this.default_fontSize;

		this.fontSize = s;
	
}
//==========================================================================================
//			pdf$setBold
//==========================================================================================
function pdf$setBold(status)
{
	this.bold = status;
}
//==========================================================================================
//			pdf$setSubscript
//==========================================================================================
function pdf$setSubscript(status)
{
	this.subscript = status;
}
//==========================================================================================
//			pdf$setSuperscript
//==========================================================================================
function pdf$setSuperscript(status)
{
	this.superscript = status;
}
//==========================================================================================
//				pdf$setItalic
//==========================================================================================
function pdf$setItalic(status)
{
	this.italic = status;
}
//==========================================================================================
//				pdf$setUnderline
//==========================================================================================
function pdf$setUnderline(status)
{
	this.underline = status;
}
//==========================================================================================
//				pdf$setMarginLeft
//==========================================================================================
function pdf$setMarginLeft(x)
{
	var dx;
	
	dx = parseFloat(x);
	if (dx < 0) dx = 0;

	dx = Math.round(dx * 72);
	if (dx < 0) dx = 0;

	if (dx >= (this.pageWidth * 72)) dx = 0;
	this.xmin = dx;
	this.xpos = this.xmin;
	this.xsize = this.xpos;
	this.setSize_(); 
	this.marginLeft = dx;
}
//==========================================================================================
//				pdf$setMarginRight
//==========================================================================================
function pdf$setMarginRight(x)
{
	var dx;
	
	dx = parseFloat(x);
	if (dx < 0) dx = 0;

	dx = Math.floor(dx * 72);
	if (dx < 0) dx = 0;
	if (dx >= (this.parseWidth * 72)) dx = 0;

	this.xmax = (this.pageWidth * 72) - dx;
	this.marginRight = dx;
}
//==========================================================================================
//				pdf$setMarginTop
//==========================================================================================
function pdf$setMarginTop(y)
{
	var dy;
	
	dy = parseFloat(y);
	if (isNaN(dy)) dy = 0;

	if (dy < 0) dy = 0;

	dy = Math.round(dy * 72);
	if (dy < 0) dy = 0;

	if (dy >= ((this.pageLength - 2)  * 72)) return;
	this.ymax = (this.pageLength * 72) - dy;

	this.ypos = this.ymax;
	this.ysize = this.ypos;
	this.marginTop		= dy;
}
//==========================================================================================
//				pdf$setMarginBottom
//==========================================================================================
function pdf$setMarginBottom(y)
{
	var dy;
	
	dy = parseFloat(y);
	if (isNaN(dy)) dy = 0;
	if (dy < 0) dy = 0;

	dy = Math.round(dy * 72);
	if (dy < 0) dy = 0;
	if (dy >= (9.0 * 72)) return;
	if (dy < 0) dy = 0;
	this.ymin = dy;

	this.marginBottom	= this.ymin;
}
//===================================================
//                   pdf$isUrl_
//===================================================
function pdf$isUrl_(filename)
{ 
	var temp;

	if (filename.substr(0,7).toUpperCase() == 'BASE64,')	return false;
	if (filename.substr(0,4).toUpperCase() == 'HEX,')	return false;
	if (filename.substr(0,8).toUpperCase() == 'ASCII85,')	return false;
	if (filename.substr(0,7).toUpperCase() == 'CANVAS:')	return false;
	if ((filename.substr(0,5).toUpperCase() == 'FILE,'))	return false;

	if (this.sys.isClient) return true;

	temp = filename.toLowerCase();
	if (temp.substr(0,6) == 'https:') return true;
	if (temp.substr(0,5) == 'http:') return true;
	
	return false;
}
//==========================================================================================
//				pdf$tab
//==========================================================================================
function pdf$tab()
{
	var tx,dx,r;

	dx = Math.floor(this.xpos / 50);
	r = this.xpos % 50;
	if (r > 0) dx = dx + 1;
	dx = dx * 50;
	if (dx >= this.xmax) return;
	this.xpos = dx;
	this.setSize_(); 
}
//==========================================================================================
//				pdf$setSize_
//==========================================================================================
function pdf$setSize_()
{
	var y;
	y = this.ypos - this.charHeight();
	
	if (this.xpos > this.xsize) this.xsize = this.xpos;
	if (y < this.ysize) this.ysize = y;
}
//==========================================================================================
//				pdf$addText
//==========================================================================================
function pdf$addText(text, url, angle, just)
{
	var list,i,temp,xpos;

	text = '' + text;

	this.center = false;
	if (text == '') return;

	this.fontName_();

	this.textAngle = 0;
	if (arguments.length > 2) this.textAngle = parseFloat(angle);
	if (isNaN(this.textAngle)) this.textAngle = 0;

	this.url = '';
	this.urlList = null;
	if (arguments.length > 1) this.url = url;

	list = text.split("\r\n");
	
	if (list.length == 1)
	{ 
		this.addText_A(text);
		this.textAngle = 0;
		return;
	}	
	
	xpos = this.xpos;
	for (i=0; i < list.length; ++i)
	{
		this.addText_A(list[i]);
		if (i < list.length) 
		{
			this.xpos = xpos;
			this.ypos = this.ypos - this.charHeight();
		}
	}

	this.setSize_(); 
	this.url = '';
	this.textAngle = 0;
}
//==========================================================================================
//				pdf$reportAddDetail
//==========================================================================================
function pdf$reportAddDetail(values,keys,urlList)
{

	this.center = false;
	if (typeof(keys) == 'object') this.reportGroupKeys_(keys); 

	this.url = '';
	this.urlList = null;
//	if (typeof(urlList) == 'object') this.urlList = urlList; 

	if (this.ruler == null)
		this.addText_A(values.join(' '));
	else	this.ruler.addRow(values);

}
//==========================================================================================
//				pdf$reportAddText
//==========================================================================================
function pdf$reportAddText(text)
{

	if (this.ruler == null) 
		this.addText_A(text);
	else	this.ruler.addText(text);
}
//==========================================================================================
//				pdf$addHeader
//==========================================================================================
function pdf$addHeader(values,url)
{
	var list,i,temp;

	this.center = false;

	this.url = '';
	this.urlList = null;

	this.bold = true;
	if (this.ruler == null)
		this.addText_A(values.join(' '));
	else
	{
		this.ruler.addHeader(values);
	}

	this.bold = false;

	this.url = '';
	this.urlList = null;

}
//==========================================================================================
//				pdf$width_
//==========================================================================================
function pdf$width_(text)
{
	var width,i,c;

	width = 0;	
	if (text == '') return width;
		
	for (i = 0; i < text.length; ++i)
	{
		c = text.charCodeAt(i);
		width = width + this.charWidth(c);
	}
	
	return width;
}
//==========================================================================================
//				pdf$cid_
//==========================================================================================
function pdf$cid_(code)
{
	var i,c;
	
	if (this.font.mapping == null) return code;	

	for (i=0; i < this.font.mapping.length; ++i)
	{
		if (this.font.mapping[i].toChar == code)
		{
			c = this.font.mapping[i].fromChar;
			return c;			
		} 
	}

	return code;
}
//==========================================================================================
//				pdf$addText_A
//==========================================================================================
function pdf$addText_A(text)
{
	var image,tx,wordLength, wordWidth,pre,xchr,a;
	var i,j,remain,nt,part,height,width,n,parta,partb,c;

//	if (pdf$trim(text) == '') return;

	tx = 0;

	if (this.encoded && (text.length > 2))
	{
		i = text.indexOf('|');
		if (i >= 0)
		{
			a = text;

			pre = text.substr(0,i);
			text = text.substr(i+1);
			i = text.indexOf('|');
			if (i < 0) i = text.length;
			xchr = text.substr(0,i);
			text = text.substr(i+1);
			pre = pre + ' ';
			if (pre != '') this.addText_A(pre);
			for (j = 0; j < pre.length; ++j) {
			    c = this.cid_(pre.charCodeAt(i));
			    height = this.charHeight(c);
			    width = this.charWidth(c);
			    this.xpos += width;
			}
			this.addText_B(xchr);
			this.addText_A(text);
			return;	
		}
	}

	tx = 0;
	this.put_(text,tx,this.textAngle);
	return;

	wordLength = 0;	
	wordWidth = 0;	
	tx = 0;
	remain = this.xmax - this.xpos;

	nt = 0;
	for (i = 0; i < text.length; ++i)
	{
		c = this.cid_(text.charCodeAt(i));
		height = this.charHeight(c);
		width = this.charWidth(c);		
		if ((tx + width) > remain)
		{
			if (wordLength > 0) 
			{
				nt = wordLength;
				tx = wordWidth;
			}
			else
			{
				if (this.xpos > this.xmax) 
				{
					nt = 0;   // force a line Break
				}
			}
			break;
		}

		tx += width;
		nt = i + 1;
		if ((i == 0) || this.charVisible(c)) continue;
		wordLength = i + 1;
		wordWidth  = tx - width;
	}


	if ((nt == 0) && (this.xpos > this.xmin))
	{
		this.lineBreak();
		this.xpos = this.xmin;
		this.addText_A(text);
		return;
	} 

	if (nt == 0)
	{
		parta = text.substr(0,1);
		c = parta.charCodeAt(0);
		width = this.charWidth(c);		
		this.putLine_(parta,width);

		part = text.substr(1);
		if (part.length == 0) return;
		c = part.charCodeAt(0);
		if ((c == 32) || (c == 9)) part = part.substr(1);	// remove leading blank or tab on next line
		this.addText_A(part);
		return;
	}

	if (nt < text.length)
	{
		parta = text.substr(0,nt);
		partb = text.substr(nt);
		c = partb.charCodeAt(0);
		if ((c == 32) || (c == 9)) partb = partb.substr(1);	// remove leading blank or tab on next line
		this.putLine_(parta,tx);

		if (partb.length == 0) return;
		this.addText_A(partb);
		return;
	}

	this.put_(text,tx,this.textAngle);
}
//==========================================================================================
//				pdf$addText_B
//==========================================================================================
function pdf$addText_B(data)
{
	var saveFont,c,value,xchr,v,i,root,text,n;
	var list,symbol,w,save;
	
	if (data == '') return;
	if (data.length < 1) return;
	
	text = data.toLowerCase();


//---------------- fraction -------------

	if ((text.length > 2) && (text.substr(0,1) == 'f')) 
	{
		value = data.substr(1);
		this.addText_D(value);
		return;
	}

//---------------- u:z145:text (union)----------

	if ((text.length > 2) && (text.substr(0,1) == 'u')) 
	{
		value = data.substr(1);
		this.addText_F(value);
		return;
	}

//---------------- space -------------

	if (text.length > 2)
	if (text.substr(0,1) ==  '+') 
	{
		value = data.substr(2);
		n = data.substr(1,1);
		this.setLetterSpacing(n);
		this.addText_A(value);
		this.setLetterSpacing(0);
		return;
	}

//---------------- superscript -------------

	if (text.substr(0,1) ==  '^') 
	{
		value = data.substr(1);
		this.superscript = true;
		save = this.fontSize;
		this.fontSize = this.fontSize * 0.70;
		this.addText_A(value);
		this.fontSize = size;
		this.superscript = false;
		return;
	}

//---------------- render stroke -------------

	if (text.substr(0,1) ==  '#') 
	{
		value = data.substr(1);
		this.fontRender = 1;
		this.addText_A(value);
		this.fontRender = 0;
		return;
	}

//---------------- render stroke / fill -------------

	if (text.substr(0,1) ==  '@') 
	{
		value = data.substr(1);
		this.fontRender = 2;
		this.addText_A(value);
//		this.setFontColor('');
		this.fontRender = 0;
		return;
	}

//---------------- skew forewrd -------------

	if (text.length > 1)
	if (text.substr(0,1) ==  '/') 
	{
		value = data.substr(1);
		this.fontSkew = 25;
		this.addText_A(value);
		this.fontSkew = 0;
		return;
	}

//---------------- skew backward -------------

	if (text.substr(0,1) ==  "\\") 
	{
		value = data.substr(1);
		this.fontSkew = -25;
		this.addText_A(value);
		this.fontSkew = 0;
		return;
	}

//---------------- underline -------------

	if (text.substr(0,1) ==  '_') 
	{
		value = data.substr(1);
		this.underline = true;
		this.addText_A(value);
		this.underline = false;
		return;
	}

//---------------- overline -------------

	if (text.substr(0,1) ==  '!') 
	{
		value = data.substr(1);
		this.overline = true;
		this.addText_A(value);
		this.overline = false;
		return;
	}

//---------------- subscript -------------

	if (text.substr(0,1) ==  'v') 
	{
		value = data.substr(1);
		this.subscript = true;
		this.addText_A(value);
		this.subscript = false;
		return;
	}

//---------------- super / subscript -------------

	if (text.substr(0,2) ==  'ss') 
	{
		value = data.substr(2);
		this.addText_E(value);
		return;
	}

//---------------- square root -------------

	if (text.substr(0,4) ==  'sqrt') 
	{
		value = data.substr(4);
		this.addText_C('',value);
		return;
	}

//---------------- root -------------

	if (text.substr(0,4) ==  'root') 
	{
		value = data.substr(4);
		i = value.indexOf(',');
		root = '';
		if (i >= 0)
		{
			root = value.substr(0,i);
			value = value.substr(i+1);
		}
		this.addText_C(root,value);
		return;
	}
	
	text = this.resolve_text(data);
	
	c = text.substr(0,1);
	c =  c.toUpperCase();
	value = text.substr(1);
	if (isNaN(value)) c = '';
	v = parseInt(value,8);

	if (! ((c == 'H') || (c == 'T') || (c == "C") || (c == 'Z') || (c == 'S')))
	{
		this.addText_A('?' + text );
		return;
	}

	saveFont = this.font.name;
	this.setFontName(c);

	xchr = String.fromCharCode(v);

//	xchr = '&#' + v.toString(16) + ';';
//	if (v == 124) xchr = '|';

	this.addText_A(xchr);
	this.textAngle = 0;

	this.setFontName(saveFont);

//	this.addText_A(value + " ");

}
//==========================================================================================
//			pdf$resolve_text
//==========================================================================================
function pdf$resolve_text(data)
{
	var i,text,lower,upper,name;
	var names;

	names = new Array('alpha','beta','chi','delta','epsilon','','gamma',
				 'eta','iota','phi','kappa','lambda','mn',
				 'nu','omicron','pi','rho','thata','sigma','tau','upsilon','psi','omega','xi','psi','zeta');
	
	name = pdf$trim(data);
	for (i=0; i < names.length; ++i)
	{
		if (name.toLowerCase() == names[i]) 
		{
			lower = 97 + i;
			upper = 65 + i;
			if (name.charCodeAt(0) < 97) return 'S' + upper.toString(8); 
			return 'S' + lower.toString(8); 
		}
	}
	
	text = name.toLowerCase();
	text = text.replace(/\s/g,"");

	if (text ==            'forall') return 'S42';

	if (text ==            'exists') return 'S44';
	if (text ==       'thereexists') return 'S44';

	if (text ==           'implies') return 'S336';

	if (text ==         'bimpliesa') return 'S334';

	if (text ==               'iff') return 'S333';
	if (text ==       'ifandonlyif') return 'S333';

	if (text ==        'notsubset') return 'S313';
	if (text ==           'subset') return 'S314';
	if (text ==    'subsetorequal') return 'S315';

	if (text ==         'superset') return 'S311';
	if (text ==  'supersetorequal') return 'S312';

	if (text ==         'f') return 'S246';

	if (text ==        'union') return 'S310';
	if (text ==        'nabla') return 'S321';
	if (text ==        'angle') return 'S320';
	if (text ==          'qed') return 'S360';

	if (text ==        'not') return 'S330';
	if (text ==        'and') return 'S331';
	if (text ==         'or') return 'S332';
	if (text ==        'xor') return 'S305';
	if (text ==     'tensor') return 'S304';

	if (text ==     'because') 
	{
		this.textAngle = 180;
		this.xpos += this.fontSize * 0.75;
		this.ypos += this.fontSize * 0.25;
		return 'S134';	// 180 deg
	}
	
	if (text ==     'therefore') return 'S134';

	if (text ==  'intersect') return 'S314';
	if (text ==  'intersectequal') return 'S315';
	if (text ==  'intersectorequal') return 'S315';

	if (text ==         'i') return 'S245';
	if (text ==       'inf') return 'S245';
	if (text ==  'infinity') return 'S245';

	if (text ==         'member') return 'S316';
	if (text ==      'notmember') return 'S317';
	if (text ==     'not member') return 'S317';

	if (text ==         'empty') return 'S306';
	if (text ==      'emptyset') return 'S306';

	if (text ==     'congruent') return 'S272';

	if (text ==            'p') return 'S266';
	if (text ==         'part') return 'S266';
	if (text ==      'partial') return 'S266';
    
	if (text ==           'about') return 'S273';
	if (text ==      'aboutequal') return 'S100';

	if (text ==      'product') return 'S325';

	if (text ==      'cross') return 'S264';
	if (text ==      'contradiction') return 'S333';

	if (text ==      'tm') return 'S324';
	if (text ==      'r') return 'S322';
	if (text ==      'c') return 'S323';

	if (text ==      'pi') return 'S160';
	if (text ==   'heart') return 'S251';
	if (text ==    'club') return 'S247';
	if (text ==   'spade') return 'S252';
	if (text == 'diamond') return 'S250';
	if (text ==     'dot') return 'S267';
	if (text ==      'lt') return 'S74';
	if (text ==      'gt') return 'S76';
	if (text ==      'le') return 'S243';
	if (text ==      'ge') return 'S263';
	if (text ==     'div') return 'S270';
	if (text ==      'ne') return 'S271';
	if (text ==     'sum') return 'S345';
	if (text ==       '@') return 'S273';
	if (text ==     'deg') return 'S260';

	if (text ==      '+-') return 'S261';
	if (text ==       'i') return 'S362';
	if (text ==       'f') return 'S246';
	if (text == 'partial') return 'S266';
	if (text ==   'delta') return 'S104';
	if (text ==   'about') return 'S100';
	if (text ==    'sqrt') return 'S326';
	if (text ==    'plus') return 'S053';
	if (text ==       '+') return 'S053';
	if (text ==       '-') return 'H226';
	if (text ==       '*') return 'S264';
	if (text ==       '/') return 'S270';

	if (text ==     'bar') return 'H174';

	return data;

}
//==========================================================================================
//			pdf$addText_octal Z156, H023
//==========================================================================================
function pdf$addText_octal(text)
{
	var c,v,xchr,saveFont,value;

	text = text.toLowerCase();
	if (text == 'circle') text = 'Z155';
	if (text == 'box') text = 'Z157';

	c = text.substr(0,1);
	c =  c.toUpperCase();
	value = text.substr(1);
	if (isNaN(value)) c = '';
	v = parseInt(value,8);

	if (! ((c == 'H') || (c == 'T') || (c == "C") || (c == 'Z') || (c == 'S')))
	{
		this.addText_A('?' + text );
		return;
	}

	saveFont = this.font.name;
	this.setFontName(c);

	xchr = String.fromCharCode(v);

	this.addText_A(xchr);
	this.setFontName(saveFont);
}
//==========================================================================================
//				pdf$addText_F (union)
//==========================================================================================
function pdf$addText_F(value)
{
	var size,i,n,d;
	var wn,wd,ndx,ddx;
	var basey,x1,x2;
	var oldx,oldy,dy;
	var saveSize,dx,size;
	var h,w,text,list;
	
	saveSize = this.fontSize;

	list = value.split(':');
	symbol = list[1];

	text = '';
	if (list.length > 2) text = list[2];
	x = this.xpos;
	y = this.ypos;
	w = this.width_(text);
	h = Math.round(this.charHeight());

	if (w < h) w = h;

	size = w * 1.8;
	dx = Math.round((size - w) / 2) - 1;
	
	this.ypos = y - dx;
	this.xpos = x - dx;
	this.fontSize = size;
	this.addText_octal(symbol);

	this.fontSize = saveSize;

	this.ypos = y;
	this.xpos = x;
	this.addText(text);

	this.xpos = x + (w * 1.8);
	this.ypos = y;

	this.fontSize = saveSize;
	this.setSize_(); 
}
//==========================================================================================
//				pdf$addText_E (super , sub scripts)
//==========================================================================================
function pdf$addText_E(value)
{
	var size,i,n,d;
	var wn,wd,ndx,ddx;
	var basey,x1,x2;
	var oldx,oldy,dy;
	var saveSize,h,w;
	
	saveSize = this.fontSize;

	h = Math.round(this.charHeight() * 0.6);
	basey = this.ypos;
	basey = this.ypos + 4;
//	basey = this.ypos - Math.round(Math.floor(h / 2) + 4);
	
	size = this.fontSize;	
	if (this.fontSize == 8) size = 6;
	if (this.fontSize == 10) size = 8;
	if (this.fontSize == 12) size = 10;
	if (this.fontSize == 14) size = 12;
	if (this.fontSize == 16) size = 12;
	if (this.fontSize == 18) size = 14;

	this.fontSize = size;

	h = Math.round(this.charHeight() * 0.4);

	i = value.indexOf(',');
	if (i < 0) i = value.length;
	
	n = value.substr(0,i);
	d = value.substr(i+1);

	wn = this.width_(n);
	wd = this.width_(d);

	w = Math.max(wn,wd) + 2;

	oldx = this.xpos;
	oldy = this.ypos;
	
	ndx = (w - wn) / 2;
	ddx = (w - wd) / 2;

//	ndx = 2;
//	ddx = 2;

	dy = h + 2;

	this.xpos = oldx + ndx;
	this.ypos = basey + 2;
	this.setSize_(); 
	this.put_(n,wn);

	this.xpos = oldx + ddx;
	this.ypos = basey - dy;
	this.put_(d,wd);
		
	x1 = oldx;
	x2 = x1 + w;

	this.xpos = x2 + 2;
	this.ypos = oldy;

	this.fontSize = saveSize;
	this.setSize_(); 

}

//==========================================================================================
//				pdf$addText_D (fraction)
//==========================================================================================
function pdf$addText_D(value)
{
	var size,i,n,d;
	var wn,wd,ndx,ddx;
	var basey,x1,x2;
	var oldx,oldy,dy;
	var saveSize;
	var h,w;
	
	saveSize = this.fontSize;

	h = Math.round(this.charHeight() * 0.6);
	basey = this.ypos;
	basey = this.ypos + 4;
//	basey = this.ypos - Math.round(Math.floor(h / 2) + 4);
	
	size = this.fontSize;	
	if (this.fontSize == 8) size = 6;
	if (this.fontSize == 10) size = 8;
	if (this.fontSize == 12) size = 10;
	if (this.fontSize == 14) size = 12;
	if (this.fontSize == 16) size = 12;
	if (this.fontSize == 18) size = 14;

	this.fontSize = size;

	h = Math.round(this.charHeight() * 0.6);

	i = value.indexOf('/');
	if (i == 0) 
	{
		value = value  + '/1';
		i = value.indexOf('/');
	}
	
	n = value.substr(0,i);
	d = value.substr(i+1);

	wn = this.width_(n);
	wd = this.width_(d);

	w = Math.max(wn,wd) + 2;

	oldx = this.xpos;
	oldy = this.ypos;
	
	ndx = (w - wn) / 2;
	ddx = (w - wd) / 2;

	dy = h + 2;

	this.xpos = oldx + ndx;
	this.ypos = basey + 2;
	this.setSize_(); 
	this.put_(n,wn);

	this.xpos = oldx + ddx;
	this.ypos = basey - dy;
	this.put_(d,wd);
		
	x1 = oldx;
	x2 = x1 + w;
	this.plot.lineWeight = 1.5;
	if (size > 12) this.plot.lineWeight = 2;
	if (size > 16) this.plot.lineWeight = 3;

	this.plot.line(x1,basey,x2,basey);

	this.xpos = x2 + 2;
	this.ypos = oldy;

	this.fontSize = saveSize;
	this.setSize_(); 

}
//==========================================================================================
//				pdf$addText_C (square root)
//==========================================================================================
function pdf$addText_C(root,value)
{
	var x,y,size,width,dx,bw,n,sq;
	var saveFont,w,x1,y1,x2,y2;
	var mx,my,bar;

	size = this.fontSize;	
	saveFont = this.font;

	dx = Math.round(this.fontSize * 0.2);
	width = this.width_(value);

	x = this.xpos;
	y = this.ypos;

	bw = this.fonts[4].widths(96,this.fontSize);
	n = 1;
	if (bw > 1) n = Math.ceil(width / bw);	

	if (root != '')
	{	
		this.ypos = y;
		this.setFontSize(6);
		w = this.width_(root);
		this.put_(root,w);
		this.xpos = this.xpos - 5;
		this.setFontSize(size);
	}
	
	this.font = this.fonts[4];
	sq = String.fromCharCode(214);
	w = this.width_(sq);
	this.put_(sq,w);
	x = this.xpos;

	w = width + 6;
	x1 = x;
	y1 = this.ypos + (this.fontSize * 0.94);
	x2 = x1 + w;
	this.plot.lineWeight = 1.5;
	if (size > 12) this.plot.lineWeight = 2;
	if (size > 16) this.plot.lineWeight = 3;

	this.plot.line(x1,y1,x2,y1);
//	this.put_(bar,w);

	this.xpos = this.xpos - 6;
	this.setSize_(); 

	mx = this.xpos - 6;
	my = this.ypos;

	this.font = saveFont;
	this.xpos = x + 2;
	w = this.width_(value);
	this.put_(value,w);
	this.setSize_(); 

	this.ypos = my;
	this.xpos = x2;
	this.setFontSize(size);
	this.setSize_(); 
}
//==========================================================================================
//				pdf$putLine_
//==========================================================================================
function pdf$putLine_(text,width)
{
	
	this.put_(text,width,0);
	this.lineBreak();
}
//==========================================================================================
//				pdf$byteToHex
//==========================================================================================
function pdf$byteToHex(n)
{
	var n1,n2,hex,c1,c2;
	
	n1 = (n >> 4) & 15;
	n2 = n % 16;
	c1 = "" + n1;
	c2 = "" + n2;
	if (n1 > 9) c1 = String.fromCharCode(52 + n1);
	if (n2 > 9) c2 = String.fromCharCode(52 + n2);

	return c1 + c2;
}
//==========================================================================================
//				pdf$escape_
//==========================================================================================
function pdf$escape_(word)
{
	var text,i,n,temp;

	text = '';
	for (i=0; i < word.length; ++i)
	{
		n = word.charCodeAt(i);
		n = this.cid_(n);
		
		if ( ((n >= 32) && ( n <= 127)) && (! (( n == 40) || (n == 41)|| (n == 92) || (n == 37) || ( n == 124) || (n == 124) || (n == 60) ) ) ) 
		{
		
			text = text + '' + String.fromCharCode(n);
		}
		else
		{
			 temp = n.toString(8);
			 if (temp.length == 1) temp = '00' + temp;
			 if (temp.length == 2) temp = '0' + temp;
			 text += '\\' + temp;
		}
	}

	return text;
}
//==========================================================================================
//				pdf$put_
//==========================================================================================
function pdf$put_(word,width,angle)
{
	var ty,cx,tx,dx,dy;
	var text,size,obj;
	var color,underline;
	var ls,ws,tran,angle;
	var x1,y1,x2,y2,xline;
	var tanA,tanB,ncolor;
	var angleA,angleB;
	var xsin,xcos,cx,cy,textAngle;
	var ry;

	color = this.fontColor;
	underline = this.underline;

	if (this.url != '') 
	{	
		if (this.href_style) underline = true;
		if (this.href_style) this.setFontColor(this.urlColor);
	}

	if (this.center)
	{
		cx = (this.xmax + this.xmin) / 2.0;
		this.xpos = cx - (width / 2);
		if (this.xpos < this.xmin) this.xpos = this.xmin;
	}
	this.setSize_(); 

	if (word != '')
	{
		tx = this.xpos;
		ty = this.ypos;
		if (this.justify) ty = this.ypos - this.charHeight();
	
		tx = Math.round(tx * 10) / 10;
		ty = Math.round(ty * 10) / 10;

		size = this.fontSize;
		if (this.subscript || this.superscript) size = size - 2;

		if (size <= 0.01) return;

		ls = this.letterSpacing;
		ws = this.wordSpacing;

		dx = width;
		dy = this.charHeight() * 2;

		x1 = tx;
		y1 = ty - (dy / 2);
		x2 = tx + width;
		y2 = y1;

		text = '';
		tran = '1 0 0 1 ' + tx + ' ' + ty + " cm\n";

		if ((this.fontScaleX != 1) || (this.fontScaleY != 1)) tran = tran + this.fontScaleX + ' 0 0 ' + this.fontScaleY + " 0 0 cm\n";
	
		if (Math.abs(this.fontSkew) > 0.01) 
		{
			angleA = 0 / 180.0 * Math.PI;
			angleB = this.fontSkew / 180.0 * Math.PI;
try
{
			tanA = Math.tan(angleA);
			tanB = Math.tan(angleB);		
			ry = ty;
			tran = tran + '1 ' + tanA + ' ' + tanB + " 1 0 0 cm\n";
}
catch (e) { };

		}

		textAngle = '';
		if (Math.abs(angle) > 0.01)
		{
			angle = angle / 180.0 * Math.PI;	
			xcos = Math.cos(angle);
			xcos = Math.round(xcos*1000) / 1000;
			xsin = Math.sin(angle);
			xsin = Math.round(xsin*1000) / 1000;
			textAngle = textAngle + xcos + ' ' + xsin + ' ' + (-xsin) + ' ' + xcos + " 0 0 cm% Rotate\n";
		}
	
		text = text + "q\n";
		text = text + "BT\n";
	
		text = text + '/' + this.fontName_() + ' ' + size + " Tf\n";
		if (ls > 0) text = text + ls + " Tc\n";		// letter Spacing
		if (ws > 0) text = text + ws + " Tw\n";		// word Spacing
		text = text + tran + '';
		text = text + textAngle + '';
	
		text = text + this.scriptText_() + '';
	
		obj = this.parseColor_(this.fontColor);
		ncolor = obj.color;
		text = text + this.colorText_(ncolor) + '';
		if (this.fontRender > 0) text = text + this.fontRender + " Tr\n";

		text = text +  '(' + this.escape_(word) + ") Tj\n";

		text = text + "ET\n";
		text = text + "Q\n";

		this.catalog.activePage.add(text);
		if (underline) this.underline_(this.xpos,ty,width);
		if (this.overline) this.overline_(this.xpos,ty,width);
	}

	this.fontColor = color;
//	if (this.url != '') this.catalog.activePage.addHyperlink(this.xpos,this.ypos,this.charHeight(),width,this.url);

	if (this.url != '') this.catalog.activePage.addHyperlink(tx,ty,this.charHeight(),width,this.url);
	this.url = '';
	this.xpos = this.xpos + width;
	this.setSize_(); 
}
//==========================================================================================
//				pdf$putWord_
//==========================================================================================
function pdf$putWord_(x,y,word,width)
{
	var text,tran;
	
	if (word == '') return;
	
	text = '';
	tran = '1 0 0 1 ' + x + ' ' + y + " cm\n";	
	text = text + "q\n";
	text = text + "BT\n";
	
	text = text + '/' + this.fontName_() + ' ' + this.fontSize + " Tf\n";
	text = text + tran + '';		
	text = text + this.colorText_(this.fontColor) + '';
	text = text +  '(' + this.escape_(word) + ") Tj\n";
	text = text + "ET\n";
	text = text + "Q\n";

	this.catalog.activePage.add(text);
}
//==========================================================================================
//				pdf$scriptText
//==========================================================================================
function pdf$scriptText_()
{
	var dy;

	if (! (this.subscript || this.superscript)) return "";

	dy = Math.round(this.charHeight() * 0.35);
	if (this.superscript) 
	{
		 return dy + " Ts\n";
	}
	else
	{
		return '-' + dy + " Ts\n";	
	}
}
//==========================================================================================
//				pdf$placeText
//==========================================================================================
function pdf$placeText(x,y,word,url,angle,just)
{
	var px,py,sj,p;

	sj = this.justify;
	this.fontName_();

	p = this.toPoint_(x,y);

	this.justify = false;
	if (arguments.length < 4) url = '';
	if (arguments.length < 5) angle = 0;
	if (arguments.length < 6) just = '';
	this.placeText_A(p.x,p.y,word,url,angle,just);

	this.justify = sj;

}
//==========================================================================================
//				pdf$placeText_A
//==========================================================================================
function pdf$placeText_A(x,y,word,url,angle,just)
{
	var ty,tx,sx,sy,dir;
	var text,p,width,height;

	this.justify = false;

	sx = this.xpos;
	sy = this.ypos;

	word = "" + word;
	
	if (word == '') return;

	dir = 0;
	dir = parseFloat(angle);
	if (isNaN(dir)) dir = 0;
	if (dir != 0) url = '';
	
	this.url = '';
	this.urlList = null;
	if (typeof(url)   != 'undefined') this.url = url;
	if (typeof(angle) == 'undefined') angle = 0;
	if (typeof(just)  == 'undefined') just = 'LL';

	width = this.width_(word);
	height = this.fontSize * 0.75;	

	p = this.justify_(x,y,width,height,dir,just);
	this.xpos = p.x;
	this.ypos = p.y;
	
	this.addText(word,url,dir);

	this.setSize_();

	this.xpos = sx;
	this.ypos = sy;
	
	this.url = '';
	this.urlList = null;
}
//==========================================================================================
//				pdf$justify_
//==========================================================================================
function pdf$justify_(x,y,width,height,angle,just)
{
	var p,dir,dx,dy,tx,ty;
	
	p = new Object();
	p.x = x;
	p.y = y;
	
	just = '' + just;
	just = just.toUpperCase();

	if (just == '') return p;
	if (just == 'LL') return p;

	dx = 0;
	dy = 0;
	if (just.substr(0,1) == 'L') dy = 0;
	if (just.substr(0,1) == 'C') dy = height / 2;
	if (just.substr(0,1) == 'U') dy = height;

	if (just.substr(1,1) == 'L') dx = 0;
	if (just.substr(1,1) == 'C') dx = width / 2;
	if (just.substr(1,1) == 'R') dx = width;

	dir = angle / 180 * Math.PI;
	tx = (Math.cos(dir) * dx) - (Math.sin(dir) * dy);
	ty = (Math.sin(dir) * dx) + (Math.cos(dir) * dy);
	
	p.x = x - tx;
	p.y = y - ty;
	return p;
}
//==========================================================================================
//				pdf$centerText
//==========================================================================================
function pdf$centerText(word,url)
{
	this.url = '';
	this.urlList = null;
	if (arguments.length > 1) this.url = url;

	this.center = true;	
	this.addText_A(word);
	this.center = false;

	this.url = '';
	this.urlList = null;

}
//==========================================================================================
//				pdf$rightText
//==========================================================================================
function pdf$rightText(word,url)
{
	var xpos,i,j,list,text;
	
	this.url = '';
	this.urlList = null;
	if (arguments.length > 1) this.url = url;

	list = word.split("\r\n");
	xpos = this.xpos;

	for (i=0; i < list.length; ++i)
	{
		text = list[i];
		this.xpos = (this.xmax - this.width_(text)) - 4 ;
		this.addText_A(text);
		if (i < (list.length-1)) this.ypos = this.ypos - this.charHeight();	
	}

	this.url = '';
	this.urlList = null;
}
//==========================================================================================
//				pdf$leftText
//==========================================================================================
function pdf$leftText(word,url)
{

	word = '' + word;
	if (word == '') return;

	this.url = '';
	this.urlList = null;
	if (arguments.length > 1) this.url = url;

	this.xpos = this.xmin;
	this.addText_A(word);

	this.url = '';
	this.urlList = null;

}
//==========================================================================================
//				pdf$underline_
//==========================================================================================
function pdf$underline_(x1,y1,length)
{
	var weight;
	var text,dy,dx,color;

	if (length <= 0) return;
	
	dy = (this.fontSize / 72) * 8;
	y1 = y1 - dy;

	x1 = Math.round(x1 * 1000) / 1000;
	y1 = Math.round(y1 * 1000) / 1000;

	length = Math.round(length * 1000) / 1000;
	weight = (this.fontSize / 72) * 2;
	
	text =	"/LEP BMC \n" +
		"0 G\n" + 
		this.colorText_(this.fontColor).toUpperCase() +			
		weight + " w\n" +
		'q 1 0 0 1 ' + x1 + ' ' + y1 + " cm\n" +
		"0 0 m\n" +
		length + " 0 l\n" +
		"S\n" +
		"Q\n" +
		"EMC \n";

	this.catalog.activePage.add(text);
}
//==========================================================================================
//				pdf$overline_
//==========================================================================================
function pdf$overline_(x1,y1,length)
{
	var weight;
	var text,dy,dx,color;

	if (length <= 0) return;
	
	dy = this.fontSize;
	y1 = y1 + dy;

	x1 = Math.round(x1 * 1000) / 1000;
	y1 = Math.round(y1 * 1000) / 1000;

	length = Math.round(length * 1000) / 1000;
	weight = (this.fontSize / 72) * 2;
	
	text =	"/LEP BMC \n" +
		"0 G\n" + 
		this.colorText_(this.fontColor).toUpperCase() +			
		weight + " w\n" +
		'q 1 0 0 1 ' + x1 + ' ' + y1 + " cm\n" +
		"0 0 m\n" +
		length + " 0 l\n" +
		"S\n" +
		"Q\n" +
		"EMC \n";

	this.catalog.activePage.add(text);
}

//==========================================================================================
//				pdf$drawBorder
//==========================================================================================
function pdf$drawBorder(x1,y1,x2,y2,borderLeft,borderRight,borderTop,borderBottom)
{	
	var p1,p2,width,height;
	
	p1 = this.toPoint_(x1,y1);
	p2 = this.toPoint_(x2,y2);

	x1 = p1.x;
	y1 = p1.y;
	x2 = p2.x;
	y2 = p2.y;

	height = p2.y - p1.y;
	width = p2.x - p1.x;

	this.drawBorder_A(x1,y1,x1,y2,borderLeft);
	this.drawBorder_A(x2,y2,x2,y1,borderRight);
	this.drawBorder_A(x1,y2,x2,y2,borderBottom);
	this.drawBorder_A(x2,y1,x1,y1,borderTop);	
}
//==========================================================================================
//				pdf$drawBorder_A
//==========================================================================================
function pdf$drawBorder_A(x1,y1,x2,y2,border)
{
	var color,weight,style,list;

	if (border == '') return;
	if (border == 'none') return;	
	if (border == undefined) return;

	list = border.split(' ');
	color = 'black';
	weight = 1;
	style = 'solid';

	if (list.length == 1)
	{
		color = 'black';
		weight = parseInt(list[0]);
		style = 'solid';
	}
	else
	{
		if (list.length > 0) weight = parseInt(list[0]);
		if (list.length > 1) style = list[1];
		if (list.length > 2) color = list[2];
	}

	if (isNaN(weight)) weight = 1;

	weight = Math.round((weight / 96) * 72);
	
	if (weight > 2) weight = Math.round(weight / 2);

	this.setGraphicLineStyle(style);
	this.setGraphicColor(color);
	this.setGraphicLineWeight(weight);
	this.plot.line(x1,y1,x2,y2);
}
//==========================================================================================
//				pdf$drawRectangle
//==========================================================================================
function pdf$drawRectangle(x1,y1,x2,y2)
{
	var p1,p2;

	p1 = this.toPoint_(x1,y1);
	p2 = this.toPoint_(x2,y2);

	this.plot.rectangle(p1.x,p1.y,p2.x,p2.y);
}
//==========================================================================================
//				pdf$drawLine
//==========================================================================================
function pdf$drawLine(x1,y1,x2,y2)
{
	var p1,p2;

	p1 = this.toPoint_(x1,y1);
	p2 = this.toPoint_(x2,y2);

	this.plot.line(p1.x,p1.y,p2.x,p2.y);
}
//==========================================================================================
//				pdf$drawArc
//==========================================================================================
function pdf$drawArc(cx,cy,radius,start,sweep)
{
	var p;

	p = this.toPoint_(cx,cy);
	radius = this.toPoint_(radius);

	this.plot.arc(p.x,p.y,radius,start,sweep);
}
//=========================================================================================
//				pdf$drawCone
//==========================================================================================
function pdf$drawCone(cx,cy,radius,start,sweep)
{
	var p;

	p = this.toPoint_(cx,cy);
	radius = this.toPoint_(radius);

	this.plot.cone(p.x,p.y,radius,start,sweep);
}
//==========================================================================================
//				pdf$drawCircle
//==========================================================================================
function pdf$drawCircle(cx,cy,radius)
{
	var p;

	p = this.toPoint_(cx,cy);
	radius = this.toPoint_(radius);

	this.plot.circle(p.x,p.y,radius);
}
//==========================================================================================
//				pdf$drawPolygon
//==========================================================================================
function pdf$drawPolygon(points)
{
	var p;

	p = this.toPoints_(points);
	this.plot.polygon(p);
}
//==========================================================================================
//				pdf$drawLinestring
//==========================================================================================
function pdf$drawLinestring(points)
{
	var p;

	p = this.toPoints_(points);
	this.plot.linestring(p);
}
//==========================================================================================
//				pdf$drawLinestring2
//==========================================================================================
function pdf$drawLinestring2(x,y,pnts)
{
	var x1,y1,x2,y2,i,p;

	p = this.toPoint_(x,y);
	
	for (i=0; i < pnts.length-1; ++i)
	{
		x1 = pnts[i].x + p.x;
		y1 = p.y - pnts[i].y;
		x2 = pnts[i+1].x + p.x
		y2 = p.y - pnts[i+1].y;

		this.plot.line(x1,y1,x2,y2);
	}
}
//===================================================================
//					pdf$drawFontGrid
//===================================================================
function pdf$drawFontGrid(fontname,fieldname)
{
	var cmap,color,name,encoding;
	var row,col,x,y,dx,dy,c,k,hex,width;
	var i,tx,ty,xoffset,yoffset,x1,y1,x2,y2,rx,ry;
	var rows,cols;

	if (! fieldname) fieldname = 'unicode';
	fieldname = fieldname.toLowerCase();

	i = fontname.indexOf(',');
	if (i < 0) i = fontname.length;
	
	name = fontname.substr(0,i);
	encoding = fontname.substr(i+1);

	x = 0;
	y = 680 / 72 ;

	x1 = 0;
	y1 = 0;
	x2 = 480 / 72;
	y2 = 680 / 72;
	rows = 23;
	cols = 10;

	this.drawGrid(x1,y1,x2,y2,rows,cols,true)

	this.setFontName(fontname);

	if (this.characterMap == null) this.characterMap = new pdfCharacterMap$(this,name);
	cmap = this.characterMap;

	k = cmap.find(encoding);

	tx = 0.04;
	ty = 0.15;

	dx = 48 / 72;
	dy = (680 / 23) / 72;
		
	x1 = 0.15;
	y1 = 0.15;

	xoffset = tx;
	yoffset = ty;
		
	for (i=32; i < 256; ++i)
	{
		row = Math.floor((i-32) / 10);
		col = (i-32) % 10;
	
		x = (col * dx) + xoffset;
		y = (row * dy) + yoffset;
		
		rx = x + tx;
		ry = y + ty;

//		width = cmap.unicode_widths[i-32];

		hex = parseInt(cmap.values[k][i]);
		if (cmap.mapping == null) hex = i;
		hex = hex.toString(16);
//		hex = i.toString(16) + '-' +  hex;

		this.setFontSize(6);
		this.setFontName('arial');

		this.setFontColor('red');
		this.placeText(rx,ry - y1,hex);

		this.setFontColor('blue');
		if (fieldname == 'width') this.placeText(rx+0.35,ry - y1,width);

		if (cmap.mapping != null)
		{
			c = String.fromCharCode(cmap.values[k][i]);
		}
		else 
		{
			c = String.fromCharCode(i);
		}

		this.setFontSize(18);
		this.setFontColor('black');
		this.setFontName(fontname);
		this.placeText(rx+x1,ry,c);
	}
}
//==========================================================================================
//				pdf$drawGrid
//==========================================================================================
function pdf$drawGrid(x1,y1,x2,y2,rows,cols,absolute)
{
	var p1,p2;

	p1 = this.toPoint_(x1,y1);
	p2 = this.toPoint_(x2,y2);
	this.plot.grid(p1.x,p1.y,p2.x,p2.y,rows,cols);
}
//==========================================================================================
//				pdf$clipBegin
//==========================================================================================
function pdf$clipBegin(x1, y1, x2, y2)
{
	var p1,p2;

	p1 = this.toPoint_(x1,y1);
	p2 = this.toPoint_(x2,y2);
	this.plot.clipBegin(p1.x, p1.y, p2.x, p2.y);
}
//==========================================================================================
//				pdf$drawSymbol
//==========================================================================================
function pdf$drawSymbol(x,y,char,angle)
{
	var p;	

	p = this.toPoint_(x,y);
	this.plot.symbol(p.x,p.y,char,angle);
}
//==========================================================================================
//				pdf$drawarker
//==========================================================================================
function pdf$drawMarker(x,y,name,angle)
{
	var p;	

	p = this.toPoint_(x,y);
	this.plot.marker(p.x,p.y,name,angle);
}

//==========================================================================================
//				lineBreak
//==========================================================================================
function pdf$lineBreak()
{
	var text,dy;

	dy = this.charHeight();
	if (this.rowHeight > dy) dy = (this.rowHeight + 4);
	
	this.xpos = this.xmin;
	this.ypos = this.ypos - dy;
	this.line = this.line + 1;

	this.rowHeight = 0;

	if ((this.ypos - this.charHeight()) < this.ymin) this.pageBreak();

}
//==========================================================================================
//				pdf$pageBreak
//==========================================================================================
function pdf$pageBreak(force)
{
	if (! force)
	{
		if (this.line == 1) return;	// cannot pagebreak an empty page;
		if (this.holdPage) return;
		if (this.margin) return;		// cannot create during header/footer
	}

	if (this.ruler != null) this.ruler.end();	//
	if (this.onBeforePagebreak != null) this.onBeforePagebreak(); 

	this.catalog.addPage();
	this.xpos = this.xmin;
	this.ypos = this.ymax;

	this.line = 1;
	if (this.onPagebreak != null) this.onPagebreak(); 
}
//==========================================================================================
//				pdf$charHeight
//==========================================================================================
function pdf$charHeight()
{
	var height;
	
	height = this.fontSize * 1.2;	
	return height;
}
//==========================================================================================
//				pdf$charWidth
//==========================================================================================
function pdf$charWidth(c)
{
	var width,n;
	
	n = this.cid_(c);

	if (isNaN(this.fontSize)) this.fontSize = 12;

	width = this.font.widths(n,this.fontSize);
	if (isNaN(width)) width = 0;

	return width;
}
//==========================================================================================
//				pdf$charVisible
//==========================================================================================
function pdf$charVisible(c)
{

	if (c < 33) return false;
	return true;

}
//==========================================================================================
//				pdf$toString
//==========================================================================================
function pdf$toString()
{
    var text, i;

    text = '';
    for (i = 0; i < this.data.length; ++i)
    {
        text += String.fromCharCode(this.data.buffer[i]);
    }
    return text;
}
//=======================================================================================
//				pdf$writeToFile
//=======================================================================================
function pdf$writeToFile(filename)
{

	this.stream = null;
	this.send = false;

	this.f = this.sys.createTextFile(filename);
	this.flush_();	
	this.f.Close();	
}
//======================================================================================
//				pdf$sendToClient
//=======================================================================================
function pdf$sendToClient(filename,as,download)
{

	if (arguments.length == 0) filename = 'untitled.pdf';

	as = as.toUpperCase();


//	as = 'STRING';

	this.sys.startSend(filename,as,download);

	if (as == 'STRING')
	{
		this.sys.send(this.toString());
		return;
	}

	if (as == 'BASE64')
	{
		this.sys.send(this.toBase64(this.data));
		return;
	}

	if (as == 'DATAURL')
	{
		this.sys.send(this.toDataURL());
		return;
	}

	this.send = true;
	this.stream = null;
	this.f = null;
	this.flush_();
	this.sys.endSend();
}
//======================================================================================
//				pdf$downloadToClient
//=======================================================================================
function pdf$downloadToClient(filename,as)
{
	if (arguments.length == 0) filename = '';

	this.sys.startSend(filename,as,true);

	this.send = true;
	this.stream = null;
	this.f = null;
	this.flush_();

	this.sys.endSend(filename);
	
}
//=================================================================
//			pdf$sendToServer
//=================================================================
function pdf$sendToServer(filename)
{
	this.server.uploadStream(this.sys.writeToStream(),filename);
	this.stream = null;
}
//=================================================================
//			pdf$sendFileToServer
//=================================================================
function pdf$uploadFile(filename)
{
	this.server.uploadFile(filename);
}
//=================================================================
//			pdf$open
//=================================================================
function pdf$open(filename,target,as)
{
	var form,file,text,type;	

	if (arguments.length < 2) target = '_blank';
	if (arguments.length < 3) as = 'PDF';

	if (target == '') target= '_blank';

	type = "application/pdf";

	this.send = false;
	this.stream = null;
	this.f = null;
	this.flush_();

    as = as.toLowerCase();
	
	switch (as.toLowerCase())
	{
	case "string": text = '<pre>' + this.toString() + '</pre>';
				type = "text/plain";
				break;

	case "base64": text = this.toBase64(this.data);
				type = "text/plain";
				break;

	case "dataurl": text = this.toDataURL();
				type = "text/plain";
				break;

	    default: text = this.data;
				type = "application/pdf";
				break;
	}
	
	CollinsPDF().echo(text,target,type);
}
//==========================================================================================
//				pdf$properties_
//==========================================================================================
function pdf$properties_()
{
	var text,xdate;

	xdate = this.sys.date_();

	text = '<<' + "\n";
	text = text + '/CreationDate (D:' + xdate + ')' + "\n";
	text = text + '/Producer (http://CollinsSoftware.com)' + "\n";
	text = text + '/Creator (Collins Software)' + "\n";
	text = text + '/ModDate (D:' + xdate + ')' + "\n";

	if (this.author		!= '') text = text + '/Author (' + this.author + ')' + "\n";
	if (this.title		!= '') text = text + '/Title (' + this.title + ')' + "\n";
	if (this.subject	!= '') text = text + '/Subject (' + this.subject + ')' + "\n";
	if (this.keywords	!= '') text = text + '/Keywords (' + this.keywords + ')' + "\n";
	text = text + '>>' + "\n";

	return text;
}
//==========================================================================================
//				pdf$flush_
//==========================================================================================
function pdf$flush_()
{
	var xref;
	var timeup;	

	this.reportEnd_();				//

	if (this.ruler != null) this.ruler.end();	//

	this.data.clear();
	this.cpos = 0;
	
	this.write_('%PDF-1.6' + "\n");

	this.catalog.write();

	xref = this.cpos;
	this.write_(this.refText_());
	this.write_(this.trailer_(xref));
}
//==========================================================================================
//				pdf$refText
//==========================================================================================
function pdf$refText_()
{
	var text,n,j,i,filler;
	
	filler = '0000000000000000000';
	
	n = this.ref.length + 1;
	
	text = 'xref' + "\n";
	text = text + '0 ' + n + '' + "\n";
	
	text = text + '0000000000 65535 f ' + "\n";
	
	for (i = 0; i < this.ref.length; ++i)
	{
		n = "" + this.ref[i];
		j = 10 - n.length;
		text = text + '' + filler.substr(0,j) + n + ' 00000 n ' + "\n";
	}
	
	return text;
}
//==========================================================================================
//				pdf$trailer
//==========================================================================================
function pdf$trailer_(xref)
{
	var text,b,n;

	n = this.ref.length + 1;
	text = 'trailer' + "\n";
	text = text + '<< /Size ' + n + '' + "\n";
	text = text + '/Root ' + this.catalogIndex + ' 0 R' + "\n";
	text = text + '/Info ' + this.propertyIndex + ' 0 R' + "\n";
	text = text + '>>' + "\n";
	text = text + 'startxref' + "\n";
	text = text + xref + '' + "\n";
	text = text + '%%EOF';
	
	return text;
}
//==========================================================================================
//				pdf$write_
//==========================================================================================
function pdf$write_(text)
{
	var nt,rs,b,t;

	nt = text.length;
	if (nt == 0) return;

	this.cpos = this.cpos + nt;

	if (this.stream != null)
	{
		this.stream.WriteText(text);
		return;
	}

	if (this.send)
	{
		this.sys.send(text);
		return;
	}

	if (this.f)
	{
	     this.f.write(text);
	     return;
	}
	
	t = typeof(text);
	if (t == 'number') text = '' + text;
	if (t == 'string') return this.data.addText(text);
	
	this.data.addBuffer(text);
	
}
//==========================================================================================
//				pdf$index_
//==========================================================================================
function pdf$index_()
{
	return this.ref.length + 1;
}
//==========================================================================================
//				pdf$addObject_
//==========================================================================================
function pdf$addObject_(text)
{
	var n;

	n = this.ref.length + 1;
	this.ref[this.ref.length] = this.cpos;
	
	this.write_(n + " 0 obj" + "\n");
	this.write_(text + "\n" + "endobj" + "\n");
	
	return n;
}
//==========================================================================================
//				pdf$addObjectSignature_
//==========================================================================================
function pdf$addObjectSignature_()
{
	var n,text;
	
	n = this.ref.length + 1;
	this.ref[this.ref.length] = this.cpos;
	
	this.write_(n + " 0 obj" + "\n");
	
	text = this.catalog.signatureObject_();
	this.write_(text);
	this.write_("\n" + "endobj" + "\n");
	
	return n;
}
//==========================================================================================
//				pdf$addObjectU3d_
//==========================================================================================
function pdf$addObjectU3d_(index)
{
	var obj,n,text;

	n = this.ref.length + 1;
	this.ref[this.ref.length] = this.cpos;
	
	this.write_(n + ' 0 obj' + "\n");
	text = this.catalog.u3dObject_(index);
	this.write_(text + "\n" + 'endobj' + "\n");

	return n;
}
//==========================================================================================
//				pdf$addObjectFontfile_
//==========================================================================================
function pdf$addObjectFontfile_(index)
{
	var obj,n,text;

	n = this.ref.length + 1;
	this.ref[this.ref.length] = this.cpos;
	
	this.write_(n + ' 0 obj' + "\n");
	text = this.catalog.fontfileObject_(index);
	this.write_(text + "\n" + 'endobj' + "\n");

	return n;
}
//==========================================================================================
//				pdf$addObjectImage_
//==========================================================================================
function pdf$addObjectImage_(index)
{
	var obj,n,text;

	n = this.ref.length + 1;
	this.ref[this.ref.length] = this.cpos;
	
	this.write_(n + ' 0 obj' + "\n");
	this.catalog.imageObject_(index);
	this.write_("\n" + 'endobj' + "\n");

	return n;
}
//==========================================================================================
//				pdf$addGraphic
//==========================================================================================
function pdf$addGraphic(data,width,height)
{
	var ele,p,style;
	
	style = new Object();

	p = this.getPosition();

	ele = new Object();
	ele.clip = false;
	ele.range = '';
	ele.backgroundColor = '';
	ele.dynamic = false;
	ele.animateEvery = 0;
	ele.animateFunction = ''; // 'rotateText';
	ele.origin = '';
	ele.style = style;
	ele.lookat = '';
	ele.lookfrom = '';
	ele.is3D = false;
	
	ele.width = width;
	ele.height = height;
		
	this.placeGraphic(x,y,data,ele);

	this.xpos = this.xpos + w;
	this.ypos = this.ypos - h;
}
//==========================================================================================
//				pdf$placeGraphic
//==========================================================================================
function pdf$placeGraphic(x,y,data,ele)
{
	var viewdef,p,graphic;
	var height,width;

	p = this.toPoint_(x,y);

	ele.absolute = true;
	height = ele.offsetHeight / 110 * 72; 
	width = ele.offsetWidth / 110 * 72; 

	viewdef = new viewdef$(0,p.x,p.y,width,height,ele);
	graphic = new graphicView$(0,viewdef,this.plot,this.graphicCg2);

	this.holdPage = true;

	graphic.draw(data);
	this.holdPage = false;	
}
//==========================================================================================
//				pdf$placeFormInput
//==========================================================================================
function pdf$placeFormInput(x,y,ele)
{

	var h,w,field;
	
	h = ele.offsetHeight / 110 * 72;
	w = ele.offsetWidth / 110 * 72;
 
	field == null;

	switch (ele.type)
	{
	case     'button': field = this.placeFormButton(x,y,ele.value,ele.onClick,h,w);
					   break;	
	case      'image': field = this.placeFormImage(x,y,ele.imageFile,ele.onClick,h,w);
					   break;	
	case      'radio': field = this.placeFormRadio(x,y,ele.name,ele.name,'',ele.checked,ele.onClick);
					   break;	
	case   'checkbox': field = this.placeFormCheckbox(x,y,ele.name,'',ele.checked,ele.onClick);
					   break;	
	case       'file': field = this.placeFormText(x,y,ele.name,ele.value,ele.onChange,h,w);
					   break;	
	case   'password': field = this.placeFormPassword(x,y,ele.name,ele.value,ele.onChange,h,w);
					   break;	
	case     'submit': field = this.placeFormSubmit(x,y,ele.value,ele.action,h,w);
					   break;	
	case      'reset': field = this.placeFormReset(x,y,ele.value,h,w);	
					   break;	
	case     'hidden': field = this.addFormHidden(ele.name,ele.value); 
					   break;	
	          default: field = this.placeFormText(x,y,ele.name,ele.value,ele.onChange,h,w); 
			   break;	
	}
		
	return field;
}
//==========================================================================================
//				pdf$getPos_
//==========================================================================================
function pdf$getPos_(height,width)
{
	var p;

	p = new Object();
	p.height = height;
	p.width  = width;

	if (this.xpos > this.xmin)
	{
		if ((this.xpos + width) > this.xmax)
		{
			if (this.rowHeight <= 0) this.rowHeight = 12;
			this.xpos = this.xmin;
			this.ypos = this.ypos - this.rowHeight;
			if (this.ypos < this.ymin) this.pageBreak();
			this.rowHeight = 0;
		}
	}					
		
	p.xpos = this.xpos;
	p.ypos = this.ypos;

	if (this.xpos < this.xmin) this.xpos = this.xmin;
	p.x = (this.xpos - this.xmin) / 72;
	p.y = (this.ymax - this.ypos) / 72;

	return p;
}
//==========================================================================================
//				pdf$setPos_
//==========================================================================================
function pdf$setPos_(p)
{
	if (p.height > this.rowHeight) this.rowHeight = p.height;
	this.xpos = p.xpos + p.width + 1;
	this.setSize_();
}
//==========================================================================================
//				pdf$placeFormReset
//==========================================================================================
function pdf$placeFormReset(x,y,caption,height,width)
{
	var h,w;
	
	h = 0;
	w = 0;
	if (arguments.length > 3) h = parseFloat(height);
	if (arguments.length > 4) w = parseFloat(width);

	if (caption == '') caption = 'Reset';

	return this.placeFormButton(x,y,caption,'',h,w,'reset');		
}
//==========================================================================================
//				pdf$addFormReset
//==========================================================================================
function pdf$addFormReset(caption,height,width)
{
	var h,w,p,field,obj;

	h = 0;
	w = 0;
	if (arguments.length > 1) h = parseFloat(height);
	if (arguments.length > 2) w = parseFloat(width);

	obj = this.formButtonSize(caption,h,w);

	p = this.getPos_(obj.height,obj.width);

	if (caption == '') caption = 'Reset';

	field = this.placeFormButton(p.x,p.y,caption,'',obj.height,obj.width,'reset');

	this.setPos_(p);

	return field;
}
//==========================================================================================
//				pdf$formButtonSize
//==========================================================================================
function pdf$formButtonSize(caption,height,width)
{
	var h,w,obj;

	obj = new Object();	
	obj.height = Math.floor(this.charHeight() * 1.2);
	obj.width = Math.floor(this.textWidth(caption) * 1.2);

	if (height > 0) obj.height = height;
	if (width  > 0) obj.width = width;

	if (obj.width < 10) obj.width = 10;
	if (obj.height < 12) obj.height = 12;


	return obj;
}
//==========================================================================================
//				pdf$addFormSubmit
//==========================================================================================
function pdf$addFormSubmit(caption,action,height,width)
{
	var h,w,p,obj;
	var field;

	h = 0;
	w = 0;
	if (arguments.length > 2) h = parseFloat(height);
	if (arguments.length > 3) w = parseFloat(width);

	obj = this.formButtonSize(caption,h,w);

	p = this.getPos_(obj.height,obj.width);

	if (caption == '') caption = 'Submit Query';

	field = this.placeFormButton(p.x,p.y,caption,action,obj.height,obj.width,'submit');
	
	this.setPos_(p);
	return field;
}
//==========================================================================================
//				pdf$placeFormSubmit
//==========================================================================================
function pdf$placeFormSubmit(x,y,caption,action,height,width)
{
	var h,w,field,obj;

	h = 0;
	w = 0;
	if (arguments.length > 4) h = parseFloat(height);
	if (arguments.length > 5) w = parseFloat(width);

	obj = this.formButtonSize(caption,h,w);
	
	if (caption == '') caption = 'Submit';

	field = this.placeFormButton(x,y,caption,'',obj.height,obj.width,'submit');		
	field.action = action;
	
	return field;
}
//==========================================================================================
//				pdf$addFormButton
//==========================================================================================
function pdf$addFormButton(caption,onclick,height,width,type)
{
	var i,obj,x,y;
	var h,w,t,p;
	var field,onClick;

	h = 0;
	w = 0;
	t = 'button';
	onClick = '';
	if (arguments.length > 1) onClick = onclick;
	if (arguments.length > 2) h = parseFloat(height);
	if (arguments.length > 3) w = parseFloat(width);
	if (arguments.length > 4) t = type;

	obj = this.formButtonSize(caption,h,w);
	p = this.getPos_(obj.height,obj.width);

	field = this.placeFormButton(p.x,p.y,caption,onClick,obj.height,obj.width,t);
	this.setPos_(p);
	return field;

}
//==========================================================================================
//				pdf$addFormImage
//==========================================================================================
function pdf$addFormImage(url,onclick,height,width)
{
	var i,obj,x,y,t,type;
	var h,w,p;
	var field,onClick;

	h = 32;
	w = 32;
	onClick = '';
	if (arguments.length > 1) onClick = onclick;
	if (arguments.length > 2) h = parseFloat(height);
	if (arguments.length > 3) w = parseFloat(width);
	if (arguments.length > 4) t = type;

	p = this.getPos_(h,w);

	field = this.placeFormImage(p.x,p.y,url,onClick,h,w);

	this.setPos_(p);
	return field;

}
//==========================================================================================
//				pdf$placeFormButton
//==========================================================================================
function pdf$placeFormButton(x,y,caption,onclick,height,width,type)
{
	var i,field,p,dy;
	var h,w,onClick,obj,p,t;

	p = this.toPoint_(x,y);
	h = Math.round(this.charHeight() * 1.2);
	w = Math.round(this.width_(caption) * 1.2);

	onClick = '';
	t = '';
	if (arguments.length > 3) onClick = onclick;
	if (arguments.length > 4) h = Math.round(parseFloat(height));
	if (arguments.length > 5) w = Math.round(parseFloat(width));
	if (arguments.length > 6) t = '' + type;

	if (onClick == '') onClick = "app.ale" + "rt('No Click Event specified example: app.4(message)')";

	obj = this.formButtonSize(caption,h,w);
	h = obj.height;
	w = obj.width;

	dy = 0;
	dy = this.charHeight();
	if (dy < 0) dy = 0;

	field = new pdfField$(this,'button_' + t,'button');

	field.caption		= caption;
	field.x		= p.x;
	field.y		= p.y - h;
	field.height		= h;
	field.width		= w;
	field.onClick		= onClick;
	field.noExport		= true;
	field.fontSize		= this.fontSize;
	field.action		= '';
	field.method		= '';

	field.kind		= 'button';
	if (type == 'submit') 
	{
		field.kind	= 'submit';
		field.action	= onClick;
		field.onClick	= '';
	}

	if (type == 'reset')  field.kind = 'reset';
	
	this.catalog.addField(field);

	return field;
}
//==========================================================================================
//				pdf$findImage
//==========================================================================================
function pdf$findImage(obj)
{	
	var index;
	
	for (index = 0; index < this.images.length; ++index)
	{
		if (obj.filename == this.images[index].filename) return index;
	}

	index = this.images.length;
	this.images[index] = obj;
	
	return  index;
	
}
//==========================================================================================
//				pdf$findU3d
//==========================================================================================
function pdf$findU3d(obj)
{	
	var index;
	
	for (index = 0; index < this.u3ds.length; ++index)
	{
		if (obj.filename == this.u3ds[index].filename) return index;
	}

	index = this.u3ds.length;
	this.u3ds[index] = obj;
	
	return  index;
}
//==========================================================================================
//				pdf$placeFormImage
//==========================================================================================
function pdf$placeFormImage(x,y,src,onclick,height,width)
{
	var i,field,p,obj,a;
	var h,w,onClick,index,ext,t;

	a = 0;
	p = this.toPoint_(x,y);

	obj = this.imageSize(src);
	if (obj == null) return;			// can only accept jpeg files (at this time)

	h = obj.height;
	w = obj.width;

	index = this.findImage(obj);
	
	onClick = '';
	t = '';
	if (arguments.length > 3) onClick = onclick;
	if (arguments.length > 4) h = parseFloat(height);
	if (arguments.length > 5) w = parseFloat(width);

	if (isNaN(h)) h = 0;
	if (isNaN(w)) w = 0;

	if (h <= 0) h = obj.height;
	if (w <= 0) w = obj.width;
	
	field = new pdfField$(this,'image_' + t,'image');

	field.imageIndex	= index;
	field.x		= p.x;
	field.y		= p.y - h;
	field.height		= h;
	field.width		= w;
	field.onClick		= onClick;
	field.noExport		= true;
	field.kind		= 'image';
	
	this.catalog.addField(field);
	this.catalog.activePage.addImage(x,y,h,w,a,index);

	return field;
}
//==========================================================================================
//				pdf$addFormCheckbox
//==========================================================================================
function pdf$addFormCheckbox(name,caption,checked,onclick)
{
	var h,w,p,size;
	var field,onClick,i,c;
	
	h = 12;
	w = 12;
	onClick = '';
	if (arguments.length > 3) onClick = onclick;
	
	size = 0;
	for (i=0; i < caption.length; ++i)
	{
		if (i == 0) size = 6;
		c = caption.charCodeAt(i);
		size += this.charWidth(c);		
	}

	p = this.getPos_(h+3,w+size);
	
	field = this.placeFormCheckbox(p.x,p.y,name,caption,checked,onClick);
	
	this.setPos_(p);
	return field;

}
//==========================================================================================
//				pdf$placeFormCheckbox
//==========================================================================================
function pdf$placeFormCheckbox(x,y,name,caption,checked,onclick)
{
	var i,field,tx,ty;
	var h,w,onClick,dy,p;

	p = this.toPoint_(x,y);
	h = 10;
	w = 10;
	onClick = '';
	if (arguments.length > 5) onClick = onclick;

	dy = this.charHeight() - h;
	if (dy < 0) dy = 0;
	if (dy > 4) dy = dy - 2;

	field = new pdfField$(this,name,'checkbox');
	
	field.x		= p.x - 2;
	field.y		= p.y - (h + dy);
	field.height		= h;
	field.width		= w;
	field.onClick		= onClick;
	field.checked		= checked;
	field.caption		= caption;
	
	this.catalog.addField(field);

	tx = x + (14 / 72);
	ty = y + (this.charHeight() / 72);

	if (caption != '') this.placeText(tx,ty,caption);

	return field;
}
//==========================================================================================
//				pdf$addFormRadio
//==========================================================================================
function pdf$addFormRadio(name,group,caption,checked,onclick)
{
	var h,w,p,size;
	var field,onClick;
	
	h = 10;
	w = 10;
	onClick = '';
	if (arguments.length > 4) onClick = onclick;

	size = this.textWidth(caption);

	p = this.getPos_(h+6,w+4+size);
	
	field = this.placeFormRadio(p.x,p.y,name,group,caption,checked,onClick);
	
	this.setPos_(p);
	return field;

}
//==========================================================================================
//				pdf$placeFormCheckbox
//==========================================================================================
function pdf$placeFormRadio(x,y,name,group,caption,_checked,onclick)
{
	var i,field,tx,ty;
	var p,h,w,ch,onClick,dy,checked;

	p = this.toPoint_(x,y);
	h = this.charHeight() - 2;
	w = 10;

	dy = this.charHeight() - h;
	if (dy < 0) dy = 0;
	if (dy > 4) dy = dy - 2;

	onClick = '';
	checked = false;
	if (arguments.length > 5) checked = _checked;
	if (arguments.length > 6) onClick = onclick;

	field = new pdfField$(this,name,'radio');
	
	field.x		= p.x;
	field.y		= p.y - (h + dy);
	field.height		= h;
	field.width		= w;
	field.onClick		= onClick;
	field.checked		= checked;
	field.caption		= caption;
	field.groupName	= group;
	
	this.catalog.addField(field);

	tx = x + (12 / 72);
	ty = y + (this.charHeight() / 72);

	this.placeText(tx,ty,caption);
	return field;
}
//==========================================================================================
//				pdf$addFormSelect
//==========================================================================================
function pdf$addFormSelect(name,options,values,selected,onchange,height,width)
{
	var h,w,p;
	var field,onChange;

	h = 16;
	w = 64;
	onChange = '';
	if (arguments.length > 4) onChange = onchange;
	if (arguments.length > 5) h = parseFloat(height);
	if (arguments.length > 6) w = parseFloat(width);

	p = this.getPos_(h,w);

	field = this.placeFormSelect(p.x,p.y,name,options,values,selected,onChange,h,w);

	this.setPos_(p);
	return field;
	
}
//==========================================================================================
//				pdf$placeFormSelect
//==========================================================================================
function pdf$placeFormSelect(x,y,name,options,values,selected,onchange,height,width)
{
	var i,field,size,p;
	var h,w,onClick;
	var onChange,s;

	p = this.toPoint_(x,y);

	h = 14;
	w = 64;
	onChange = '';
	s = '';
	
	if (arguments.length > 5) s = selected;
	if (arguments.length > 6) onChange = onchange;
	if (arguments.length > 7) h = parseFloat(height) - 6;
	if (arguments.length > 8) w = parseFloat(width) - 6;

	field = new pdfField$(this,name,'select');
	field.selected		= s;
	field.options		= new Array();
	field.values		= new Array();
	
	for (i=0; i < options.length; ++i)
	{
		size = this.width_(options[i]);
		if (size > w) w = size;
		
		field.options[i] = options[i];
		field.values[i] = '';
		if ((values != null) && (values.length < i)) field.values[i] = values[i];
	}
	
	field.x	= p.x + 1;
	field.y	= p.y - h;
	field.height	= h;
	field.width	= w;
	field.onChange	= onChange;
	
	this.catalog.addField(field);
	return field;
}
//==========================================================================================
//				pdf$addFormListbox
//==========================================================================================
function pdf$addFormListbox(name,options,selected,onchange,height,width)
{
	var h,w,s,p;
	var field;
	var onChange;
	
	h = 64;
	w =128;
	s = '';
	onChange = '';
	if (arguments.length < 3) s = selected;
	if (arguments.length > 4) onChange = onchange;
	if (arguments.length > 5) h = parseFloat(height);
	if (arguments.length > 6) w = parseFloat(width);

	p = this.getPos_(h,w);
	
	field = this.placeFormListbox(p.x,p.y,name,options,s,onChange,h,w);

	this.setPos_(p);
	return field;
	
}
//==========================================================================================
//				pdf$placeFormListbox
//==========================================================================================
function pdf$placeFormListbox(x,y,name,options,selected,onchange,height,width)
{
	var i,field;
	var h,w,p;
	var onChange;

	p = this.toPoint_(x,y);
	
	h = 64;
	w = 64;
	onChange = '';
	if (arguments.length > 5) onChange = onchange;
	if (arguments.length > 6) h = parseFloat(height);
	if (arguments.length > 7) w = parseFloat(width);

	field = new pdfField$(this,name,'listbox');
	field.selected		= selected;
	field.options		= new Array();
	
	for (i=0; i < options.length; ++i) field.options[i] = options[i];
	
	field.x	= p.x;
	field.y	= p.y - h;
	field.height	= h;
	field.width	= w;
	field.onChange	= onChange;
	
	this.catalog.addField(field);
	return field;
}
//==========================================================================================
//			pdf$addFormPassword
//==========================================================================================
function pdf$addFormPassword(name,value,onchange,height,width)
{
	var h,w,field;
	var onChange;
	
	h = 16;
	w = 120;
	onChange = '';

	if (arguments.length > 2) onChange = onchange;
	if (arguments.length > 3) h = parseFloat(height);
	if (arguments.length > 4) w = parseFloat(width);

	field = this.addFormText(name,value,onChange,h,w,'password');
	return field;	

}
//==========================================================================================
//			pdf$addFormFile
//==========================================================================================
function pdf$addFormFile(name,value,onchange,height,width)
{
	var h,w,field;
	var onChange;
	
	h = 16;
	w = 120;
	onChange = '';

	if (arguments.length > 2) onChange = onchange;
	if (arguments.length > 3) h = parseFloat(height);
	if (arguments.length > 4) w = parseFloat(width);

	field = this.addFormText(name,value,onChange,h,w,'file');
	return field;	

}
//==========================================================================================
//			pdf$addFormHidden
//==========================================================================================
function pdf$addFormHidden(name,value)
{
	var field;
	
	field = this.addFormText(name,value,'',12,120,'hidden');
	return field;	

}
//==========================================================================================
//			pdf$addFormText
//==========================================================================================
function pdf$addFormText(name,value,onchange,height,width,type)
{
	var h,w,p,t,field;
	var onChange;
	
	h = 16;
	w = 120;
	t = 'text';
	onChange = '';
	if (arguments.length > 2) onChange = onchange;
	if (arguments.length > 3) h = parseFloat(height);
	if (arguments.length > 4) w = parseFloat(width);
	if (arguments.length > 5) t = '' + type;

	p = this.getPos_(h,w);

	field = this.placeFormText(p.x,p.y,name,value,onChange,h,w,t);

	if (type != 'hidden') this.setPos_(p);
	return field;	

}
//==========================================================================================
//			pdf$placeFormPassword
//==========================================================================================
function pdf$placeFormPassword(x,y,name,value,onchange,height,width)
{
	var i,field;
	var h,w,p,t;
	var onChange;

	p = this.toPoint_(x,y);
	
	h = 16;
	w = 120;
	onChange = '';
	if (arguments.length > 4) onChange = onchange;
	if (arguments.length > 5) h = parseFloat(height);
	if (arguments.length > 6) w = parseFloat(width);

	field = this.placeFormText(x,y,name,value,onChange,h,w,'password');
	return field;
}
//==========================================================================================
//			pdf$placeFormFile
//==========================================================================================
function pdf$placeFormFile(x,y,name,value,onchange,height,width)
{
	var i,field;
	var h,w,p,t;
	var onChange;

	p = this.toPoint_(x,y);
	
	h = 16;
	w = 120;
	onChange = '';
	if (arguments.length > 4) onChange = onchange;
	if (arguments.length > 5) h = parseFloat(height);
	if (arguments.length > 6) w = parseFloat(width);

	field = this.placeFormText(x,y,name,value,onChange,h,w,'file');
	return field;
}
//==========================================================================================
//			pdf$placeFormText
//==========================================================================================
function pdf$placeFormText(x,y,name,value,onchange,height,width,type)
{
	var i,field;
	var h,w,p,t;
	var onChange;

	p = this.toPoint_(x,y);
	
	h = 16;
	w = 120;
	t = 'text';
	onChange = '';
	if (arguments.length > 4) onChange = onchange;
	if (arguments.length > 5) h = parseFloat(height);
	if (arguments.length > 6) w = parseFloat(width) - 2;
	if (arguments.length > 7) t = '' + type;

	if (h <= 0) h = 16;
	if (w <= 0) w = 120;

	field = new pdfField$(this,name,'text');
	field.value	= value;
	
	field.x	= p.x - 2;
	field.y	= p.y - h;
	field.height	= h;
	field.width	= w;
	field.onChange	= onChange;
	field.password	= false;
	field.file	= false;
	field.hidden	= false;
	field.rows	= 1;
	
	t = t.toLowerCase();
	if (t == 'password') field.password = true;
	if (t == 'file') field.file = true;
	if (t == 'hidden') field.hidden = true;
		
	field.rows = Math.floor(h / 12);

	if (field.rows < 1) field.rows = 1;
	if (field.file)     field.rows = 1;
	if (field.password) field.rows = 1;
	if (field.hidden)   field.rows = 1;
	
	this.catalog.addField(field);
	return field;
}
//==========================================================================================
//				pdf$addImage
//==========================================================================================
function pdf$addImage(filename,  height,width,angle,alt)
{
	var i,obj,x,y,dx,dy;
	var h,w,a,p;

	h = 0;
	w = 0;
	a = 0;

	if (arguments.length > 1) h = parseFloat(height);
	if (arguments.length > 2) w = parseFloat(width);
	if (arguments.length > 3) a = parseFloat(angle);

	p = this.getPos_(h,w);
	
	this.placeImage(p.x,p.y,filename,h,w,a,alt);
	
	this.setPos_(p);
}
//==========================================================================================
//				pdf$placeImage
//==========================================================================================
function pdf$placeImage(x,y,filename, height,width,angle,alt,ele)
{
	var p;

	p = this.toPoint_(x,y);
	
	height = this.toPoint_(height);
	width  = this.toPoint_(width);

	this.placeImage_A(p.x,p.y,filename, height,width,angle,alt,ele);
}
//==========================================================================================
//			pdf$placeImage_A
//==========================================================================================
function pdf$placeImage_A(x,y,filename, height,width,angle,alt,ele)
{
	var i,obj;
	var h,w,a,p,fname;
	var ext,index;

	fname = filename;

	x = Math.round(parseFloat(x));
	y = Math.round(parseFloat(y));
	height = Math.round(parseFloat(height));
	width  = Math.round(parseFloat(width));
	
	if (filename.toLowerCase() == 'about:blank') return;
	
	h = 0;
	w = 0;
	a = 0;
	if (arguments.length > 3) h = parseFloat(height) ;
	if (arguments.length > 4) w = parseFloat(width);
	if (arguments.length > 5) a = parseFloat(angle);

	obj = this.imageSize(filename);

	if (obj == null)
	{
		log('missing image: ' + filename);
		this.placeMissingImage(x,y,h,w,alt);	
		return;
	}

	if (isNaN(h)) h = obj.height / 110 * 72;
	if (isNaN(w)) w = obj.width / 110 * 72;

	if (obj.is3D)
	{
		index = this.findU3d(obj);
		this.catalog.activePage.addU3d(x,y,h,w,index,ele);	
	}
	else
	{
		index = this.findImage(obj);
		this.catalog.activePage.addImage(x,y,h,w,a,index);
	}
}
//==========================================================================================
//			pdf$placeMissingImage
//==========================================================================================
function pdf$placeMissingImage(x,y,height,width,alt)
{
	var x1,y1,x2,y2,scale;
	var size,h,w;
	var px,py;
	
	var maindarkborder = '#ACA899';
	var mainlightborder = '#F1EFE2';
	var crossColor = '#F12000';
	var boxBorder = '#C0C0C0';
			
	if (height <= 0) height = 30 / 110 * 72;
	if (width <= 0) width = 24 / 110 * 72;
	if (! alt) alt = '';

	this.setFontName('arial');
	this.setFontSize(6);
	
	scale = 1;
	size = this.textWidth(alt);
	
	height = Math.round(height);

	x1 = x;
	y1 = y;
	x2 = x1 + width;
	y2 = y1 - height;

	w = 16;
	h = 12;

	px = x1 + w + 6;
	py = y1 - h;
	if (alt != '') this.putWord_(px,py,alt,size);

	this.setGraphicLineWeight(1);
	this.setGraphicColor(maindarkborder);
	this.setGraphicLineStyle('solid');
	this.setGraphicFillColor('white');
	this.plot.line(x1,y1,x1,y2);
	this.plot.line(x1,y1,x2,y1);
	this.setGraphicColor(mainlightborder);
	this.plot.line(x1,y2,x2,y2);
	this.plot.line(x2,y2,x2,y1);
	
	x1 = x1 + (7 * scale);
	y1 = y1 - (7 * scale);
	x2 = x1 + (14 * scale);
	y2 = y1 - (14 * scale);
	this.setGraphicColor(boxBorder);
	this.plot.rectangle(x1,y1,x2,y2);	

	x1 = x1 + (4 * scale);
	y1 = y1 - (4 * scale);
	x2 = x1 + (7 * scale);
	y2 = y1 - (7 * scale);
	this.setGraphicLineWeight(2);
	this.setGraphicColor(crossColor);
	this.plot.line(x1,y1,x2,y2);
	this.plot.line(x1,y2,x2,y1);

//	x1 = x1 + (2 * scale);
//	y1 = y1 - (2 * scale);
//	x2 = x1 + (5 * scale);
//	y2 = y1 - (5 * scale);
//	this.setGraphicLineWeight(2);
//	this.setGraphicColor(crossColor);
//	this.setGraphicFillColor(crossColor);
//	this.drawRectangle_A(x1,y1,x2,y2);	

	
//zz	

}
//================================================================
//			pdfBuffer$
//================================================================
function pdfBuffer$() 
{
	this.allocated	= 0;
	this.buffer	= null;
	this.length	= 0;
	this.pos	= 0;

	this.addText	= pdfBuffer$addText;
	this.addByte	= pdfBuffer$addByte;
	this.addBuffer	= pdfBuffer$addBuffer;

	this.clear	= pdfBuffer$clear;	
}
//================================================================
//			pdfBuffer$clear
//================================================================
function pdfBuffer$clear() 
{	
	delete this.buffer;
	this.allocated	= 0;
	this.buffer	= null;
	this.length	= 0;
	this.pos	= 0;
}
//================================================================
//			pdfBuffer$addText
//================================================================
function pdfBuffer$addText(text) 
{
	var c,i;


	for (i=0; i < text.length; ++i)
	{
		c = text.charCodeAt(i);
		this.addByte(c);
	}
}
//================================================================
//			pdfBuffer$addBuffer
//================================================================
function pdfBuffer$addBuffer(buf) 
{
	var i,size,temp;

	if (this.length + buf.length >= this.allocated)
	{
		size = this.allocated  + 1024 + buf.length;
		temp = new Uint8Array(size);
		for (i=0; i < this.length; ++i) temp[i] = this.buffer[i];
		delete this.buffer;
		this.buffer = temp;
		this.allocated = size;
	}

	for (i=0; i < buf.length; ++i)
	{
		this.buffer[this.length] = buf[i];
		this.length += 1;
	}
}
//================================================================
//			pdfBuffer$addByte
//================================================================
function pdfBuffer$addByte(value) 
{
	var buf,i,size;

	if (this.length + 1 >= this.allocated)
	{
		size = this.allocated  + 1024;
		buf = new Uint8Array(size);
		for (i=0; i < this.length; ++i) buf[i] = this.buffer[i];
		delete this.buffer;
		this.buffer = buf;
		this.allocated = size;
	}

	this.buffer[this.length] = value & 0xFF;
	this.length += 1;
}
//==========================================================================================
//			pdfPage$ (Constructor)
//==========================================================================================
function pdfPage$(catalog,index)
{
	this.catalog			= catalog;
	this.index			= index;

	this.images			= new Array();			// Image Indexes
	this.hyperlinks			= new Array();			// Hyperlinks
	this.u3ds			= new Array();			// U3D Images
	
	this.xmin			= 0;
	this.ymin			= 0;
	this.xmax			= this.catalog.pdf.pageWidth * 72;		// 8.5 Inches * 72
	this.ymax			= this.catalog.pdf.pageLength * 72;		// 11 Inches * 72 

	this.write			= pdfPage$write;
	this.stream			= pdfPage$stream;
	this.add			= pdfPage$add;
	this.addImage			= pdfPage$addImage;
	this.addU3d			= pdfPage$addU3d;
	this.addHyperlink		= pdfPage$addHyperlink;
	this.addHotspot			= pdfPage$addHotspot;

	this.contents_			= pdfPage$contents_;
	this.annots_			= pdfPage$annots_;
	this.imageRef_			= pdfPage$imageRef_;
	this.fonts_			= pdfPage$fonts_;
	this.extGStates_		= pdfPage$extGStates_;
	
	this.addHyperlinkObjects_	= pdfPage$addHyperlinkObjects_;
	this.addWatermarkObjects_	= pdfPage$addWatermarkObjects_;
	this.addU3dObjects_		= pdfPage$addU3dObjects_;

	this.backgroundColorText	= pdfPage$backgroundColorText;
	this.backgroundColorText_A	= pdfPage$backgroundColorText_A;

	this.objectCount		= pdfPage$objectCount;
	
	this.onPageOpen			= -1;
	this.onPageClose		= -1;
	
	this.watermark			= this.catalog.pdf.watermark;
	this.watermarkRef		= -1;
	
	this.backgroundColor		= this.catalog.pdf.pageBackgroundColor;

	this.marginLeftColor		= this.catalog.pdf.pageMarginLeftColor;
	this.marginRightColor		= this.catalog.pdf.pageMarginRightColor;
	this.marginTopColor		= this.catalog.pdf.pageMarginTopColor;
	this.marginBottomColor		= this.catalog.pdf.pageMarginBottomColor;

	this.marginLeft			= this.catalog.pdf.marginLeft;
	this.marginRight		= this.catalog.pdf.marginRight;
	this.marginTop			= this.catalog.pdf.marginTop;
	this.marginBottom		= this.catalog.pdf.marginBottom;
	
	this.rotate			= this.catalog.pdf.pageRotate;
	
	this.image			= '';
}
//==========================================================================================
//				pdfPage$objectCount
//==========================================================================================
function pdfPage$objectCount()
{
	var count;

	count = 1;		// "stream"
//	if (this.watermark != '') count = count + 2;
	
	count = count + (this.hyperlinks.length);
	return count;
}
//==========================================================================================
//				pdfPage$addHyperlink
//==========================================================================================
function pdfPage$addHyperlink(x,y,height,width,href)
{
	var obj,n,dx,dy,top,bot;

	top = this.catalog.pdf.fontSize * 0.25;
	bot = this.catalog.pdf.fontSize * 0.75;

	obj = new Object();
	obj.href = href;
	obj.x1 = Math.round(x * 100) / 100;
	obj.y1 = Math.round((y - top) * 100) / 100;
	obj.x2 = Math.round((x + width) * 100) / 100;
	obj.y2 = Math.round((y + bot) * 100) / 100;

//	this.catalog.pdf.drawRectangle_A(obj.x1,obj.y1,obj.x2,obj.y2);

	n = this.hyperlinks.length;
	this.hyperlinks[n] = obj;
}
//==========================================================================================
//				pdfPage$addU3d
//==========================================================================================
function pdfPage$addU3d(x,y,height,width,uref,ele)
{
	var n,x1,y1,x2,y2,obj,h,w;

	obj = new Object();
	obj.uref = uref;
	
	x = parseFloat(x);
	if (isNaN(x)) x = 0;

	y = parseFloat(y);
	if (isNaN(y)) y = 0;

//	y = this.catalog.pdf.ymax - y;

	h =  Math.round(parseFloat(height));
	w  = Math.round(parseFloat(width));

	if (isNaN(h)) h = 400;
	if (isNaN(w)) w = 400;
	if (h < 10) h = 400;
	if (w < 10) w = 400;
	
//	x = x + this.catalog.pdf.xmin;
	
	obj.x1 = Math.round(x * 100) / 100;
	obj.y1 = Math.round((y) * 100) / 100;
	obj.x2 = Math.round((x + w) * 100) / 100;
	obj.y2 = Math.round((y - h) * 100) / 100;

	this.catalog.pdf.u3dCopy(ele,obj);

	n = this.u3ds.length;
	this.u3ds[n] = obj;	
	
}
//==========================================================================================
//				pdfPage$addHotspot
//==========================================================================================
function pdfPage$addHotspot(x,y,height,width,href)
{
	var obj,n,dx,dy,top,bot;

	obj = new Object();
	obj.href = href;
	obj.x1 = Math.round(x * 100) / 100;
	obj.y1 = Math.round((y) * 100) / 100;
	obj.x2 = Math.round((x + width) * 100) / 100;
	obj.y2 = Math.round((y - height) * 100) / 100;

//	this.catalog.pdf.drawRectangle_A(obj.x1,obj.y1,obj.x2,obj.y2);

	n = this.hyperlinks.length;
	this.hyperlinks[n] = obj;
}
//==========================================================================================
//				pdfPage$addWatermarkObjects_
//==========================================================================================
function pdfPage$addWatermarkObjects_()
{
	var i,index,text,data;
	var Aref,ref;
	var FPref;

	this.watermarkRef = -1;
	return;

	if (this.watermark == '') return -1;

//---------------------- 
	data = '';
	data = data +  'BT' + "\n";
	data = data +  '/F1 36 Tf' + "\n";
	data = data +  '1 0 0 1 288 572 cm' + "\n";
	data = data +  '(' + this.watermark + ') Tx' + "\n";
	data = data +  'ET';

	text = '<< ';
	text = text + '/Length ' + data.length;
	text = text + '/Subtype/Form' + "\n";
	text = text + '/BBox [0 0 600 800]' + "\n";
	text = text + '>>' + "\n";
	text = text + 'stream' + "\n";
	text = text + data;
	text = text + "\n" + 'endstream';

	Aref = this.catalog.pdf.addObject_(text);

//---------------------- 

	text = '<< ';
	text = text + '/Type /FixedPrint';
	text = text + '/Matrix [1 0 0 1 0 0]';
	text = text + '/H 1';
	text = text + '/V 2.0';
	text = text + '>>';

//	FPref = this.catalog.pdf.addObject_(text);

//---------------------- 

	text = '<< ' ;
	text = text + '/Rect [0 0 700 900]';
	text = text + '/Type/Annot';
	text = text + '/Subtype/Watermark';
//	text = text + '/FixedPrint ' + FPref + ' 0 R';
	text = text + '/AP << /N ' + Aref + ' 0 R>>';
	text = text + '>>';
	
	ref = this.catalog.pdf.addObject_(text);
	this.watermarkRef = ref;
	return ref;
}
//==========================================================================================
//				pdfPage$addHyperlinkObjects_
//==========================================================================================
function pdfPage$addHyperlinkObjects_()
{
	var i,index,text;

	index = this.catalog.pdf.index_();
	for (i=0; i < this.hyperlinks.length; ++i)
	{
		text = '<< ';
		text += '/Type /Annot /Subtype /Link';
		text += '/A << /S/URI/URI(' + this.hyperlinks[i].href + ')>>';
		text += '/BS<< /S/S/Type/Border/W 0>>';
		text += '/Border [0 0 1]';
		text += '/H/I';
		text += '/Rect[' +
			      this.hyperlinks[i].x1 + ' ' + this.hyperlinks[i].y1 + ' ' +
			      this.hyperlinks[i].x2 + ' ' + this.hyperlinks[i].y2 + ']';
		text += '>>';
		
		this.catalog.pdf.addObject_(text);
	
		index = index + 1;
	}
}
//==========================================================================================
//				pdfPage$addU3dObjects_
//==========================================================================================
function pdfPage$addU3dObjects_()
{
	var text,i,ref, bgcolor, color;
	var toolbar,lightingScheme,lighting;
	var renderMode,u,sin;
	var xsin,xcos,dir,axis,z;
		
	for (i=0; i < this.u3ds.length; ++i)
	{
		u = this.u3ds[i];
		
		toolbar = 'false';
		if (u.toolbar) toolbar = 'true';
					
		ref = this.catalog.pdf.u3dIndex + u.uref;
	
		text = '<< /Type /Annot /Subtype /3D /Rect [' + u.x1 + ' ' + u.y2 + ' ' + u.x2 + ' ' + u.y1 + '] /Contents (' + u.u3dName + ')';
		text += '/P ' + this.ref + ' 0 R ';
		text += '/C [1 1 1]'; // 132 or 68
		text += '/3DA<< /A /PO /D /PC /AIS /L /DIS /U /TB ' + toolbar + ' /NP false >>';
		text += '/3DD ' + ref + ' 0 R ';
//		text += '/3DV << /Type /3DView';
		text += '/3DV << /Type /3DView /XN (' + u.u3dView + ')';
		text += '/BG << /Subtype /SC /C [' + u.bgcolor + ']>>';

//		text += '/MS /U3D ';
				
		text += '/MS /M /CO ' + u.distance  + ' ';
		text += '/C2W ['  + u.matrix + ']' ;

		text += '/U3DPath [(' + u.u3dName + ')(' + u.u3dView + ')]';
		text += '/RM << /Type /3DRenderMode /Subtype ' + u.renderMode + '>>';
		text += '/LS << /Type /3DLightingScheme /Subtype ' + u.lighting + ' >>';
		text += '>>';
	//	text += '/AP << /N 7 0 R>>';
		text += '>>';

		u.ref = this.catalog.pdf.addObject_(text);
	}
}
//==========================================================================================
//				pdfPage$addImage
//==========================================================================================
function pdfPage$addImage(x,y,height,width,angle,index)
{
	var n,h,w,ih,iw,dx,dy,cx,cy;
	var textAngle,xpos,ypos;
	var x1,y1,x2,y2,n;
	var text,clip;
	var xsin,xcos;
	var scale,sx,sy;

	angle = (parseFloat(angle) / 180.0) * Math.PI;

	dx = 0;
	dy = 0;

	x = parseFloat(x);
	x = x + dx;

	y = parseFloat(y);
	y = y + dy;
//	y = this.catalog.pdf.ymax - y;

	h =  Math.round(parseFloat(height));
	w  = Math.round(parseFloat(width));

	ih = this.catalog.pdf.images[index].height;
	iw = this.catalog.pdf.images[index].width;
	if ((ih <= 0) || (iw <= 0)) return;

	if ((h <= 0) && (w > 0))
	{
		h = w * (ih / iw);
	}
	if ((h > 0) && (w <= 0))
	{
		w = h * (iw / ih);
	}

	y = y - h;	// lower left to top left
	this.images[this.images.length] = index;

	textAngle = '';
	cx = 0;
	cy = 0;
	if (Math.abs(angle) > 0.01)
	{
	  xcos = Math.cos(angle);
	  xcos = Math.round(xcos*1000) / 1000;
	  xsin = Math.sin(angle);
	  xsin = Math.round(xsin*1000) / 1000;
	  cx = x + (w / 2);	// rotate about center
	  cy = y + (h / 2);
	  textAngle  = '1 0 0 1 ' +  cx + ' ' + cy + ' cm% Translate' + "\n";
	  textAngle  = textAngle + xcos + ' ' + (-xsin) + ' ' + xsin + ' ' + xcos + ' 0 0 cm% Rotate' + "\n";
	}

	n = index + 1;

//	x = this.catalog.pdf.xmin + x;
	xpos = x + w;
	ypos = this.catalog.pdf.ypos;

	if (xpos > this.catalog.pdf.xmax) 
	{
		xpos = this.catalog.pdf.xmin;
		ypos = xpos - this.catalog.pdf.charHeight();
	}

	this.catalog.pdf.new_xpos = xpos;
	this.catalog.pdf.new_ypos = ypos;

	x = x - cx;
	y = y - cy;

	text = '';
	text = text + 'q' + "\n";
	text = text + textAngle;
	
	text += this.catalog.pdf.plot.transparentText_();

//xx
	text = text + '1 0 0 1 ' +  Math.round(x) + ' ' + Math.round(y) + ' cm% Translate' + "\n";
	text = text + Math.round(w) + ' 0 0 ' + Math.round(h) + ' 0 0 cm% Scale' + "\n";
	text = text + '/Im' + n + ' Do Q'; 

	this.add(text);
}
//==========================================================================================
//				pdfPage$imageRef_
//==========================================================================================
function pdfPage$imageRef_()
{
	var i,text,n,m;

	text = '';
	if (this.images.length == 0) return text;

	text = '/XObject <<';
	for (i=0; i < this.images.length; ++i)
	{
		n = this.catalog.pdf.imageIndex + this.images[i];
		m = this.images[i] + 1;
		text = text + '/Im' + m + ' ' + n + ' 0 R ';
	}
	text = text + '>>';
	return text;
}
//==========================================================================================
//				pdfPage$add
//==========================================================================================
function pdfPage$add(text)
{	
	if (this.image != '') this.image += "\n";
	this.image = this.image + text + '';
}
//==========================================================================================
//				pdfPage$stream
//==========================================================================================
function pdfPage$stream()
{
	var text;

	text = '<< /Length ' + this.image.length + ' >>' + "\n";
	text = text + 'stream' + "\n" + this.image + "\n" + 'endstream';

	return text;
}
//==========================================================================================
//				pdfPage$fonts_
//==========================================================================================
function pdfPage$fonts_()
{
	var text,i,font;

	text = '';
	for (i=0; i < this.catalog.pdf.fonts.length; ++i)
	{
		font = this.catalog.pdf.fonts[i];
		if (! font.used) continue;		
		text = text + '/F' + font.index + ' ' + font.ref + ' 0 R ';
	}
	
	return text;
}
//==========================================================================================
//				pdfPage$extGStates_
//==========================================================================================
function pdfPage$extGStates_()
{
	var text,i,gs;

	text = '';
	for (i=0; i < this.catalog.extGStates.length; ++i)
	{
		gs = this.catalog.extGStates[i];
		if (gs.used) text = text + '/GS' + i + ' ' + gs.ref + ' 0 R ';
		gs.used = false;
	}
	
	return text;
}
//==========================================================================================
//				pdfPage$contents_
//==========================================================================================
function pdfPage$contents_(index)
{
	var text;
	text = ' [ ' + index + ' 0 R ]';
	return text;
}
//==========================================================================================
//				pdfPage$annots_
//==========================================================================================
function pdfPage$annots_(index)
{
	var text,i,j,n,f,water;
	
	text = '';
	n = index;
	
	water = '';

//	if (this.watermark != '')
//	{
//		water = (n) + ' 0 R ';
//		n = n + 2;	
//	}

	for (i = 0; i < this.hyperlinks.length; ++i)
	{
		text = text + n + ' 0 R ';
		n = n + 1;
	}

	for (i = 0; i < this.u3ds.length; ++i)
	{
		text = text + n + ' 0 R ';
		n = n + 1;
	}

	for (i = 0; i < this.catalog.fields.length; ++i)
	{
		f = this.catalog.fields[i];
		if (f.pageIndex != this.index) continue;
		
		if (f.type != 'radiogroup')
		{
			text = text + f.ref + ' 0 R ';
			continue;
		}
			
		for (j = 0; j < f.fields.length; ++j)
		{
			text = text + f.fields[j].ref + ' 0 R ';
		}
	}

	text = text + water;

	if (text == '') return '';	
	text = '/Annots [' + text;
	text = text + ']';
	return text;
}
//==========================================================================================
//				pdfPage$write
//==========================================================================================
function pdfPage$write(parentIndex,n)
{
	var text,i,j,k;
	var k1,k2,k3,k4,k5,k6,k7,k8;
	var k9,k10,k11,k12,k13,k14;
	var ref,color,grayscale,g;

	this.ref = this.catalog.pdf.index_();
	
	text = '<< /Type /Page' + "\n";
	text = text + '/Parent ' + parentIndex + ' 0 R' + "\n";
	text = text + '/MediaBox [ ' + this.xmin + ' ' + this.ymin + ' ' + this.xmax + ' ' + this.ymax + ' ]' + "\n";
//	text = text + '/Group << /CS /DeviceRGB /Type /Group /S /Transparency /I true >>';

	if (this.rotate != '') text = text + '/Rotate ' + this.rotate;

	if ((this.onPageOpen >= 0) || (this.onPageClose >= 0))
	{
		text = text + '/AA <<';
		ref = this.catalog.javascriptIndex + this.onPageOpen;
		if (this.onPageOpen >= 0) text = text + '/O ' + ref + ' 0 R'; 
		ref = this.catalog.javascriptIndex + this.onPageClose;
		if (this.onPageClose >= 0) text = text + '/C ' + ref + ' 0 R'; 
		text = text + '>>' + "\n";
	}

//	text += '/Dur 5' + "\n";
//	text += '/Trans << /Type /Trans' + "\n";
//	text += '/D 3.5' + "\n";
//	text += '/S /Split' + "\n";
//	text += '/Dm /V' + "\n";
//	text += '/M /O' + "\n";
//	text += '>>' + "\n";

	i = this.catalog.pdf.index_() + 1;
	j = this.catalog.pdf.index_() + 2;
	
	text = text + '' + this.annots_(j) + '/Contents ' + this.contents_(i) + "\n";
	text = text + '/Resources << /ProcSet 1 0 R' + "\n";
	text = text + '/Font << ' + this.fonts_() + '>>' + "\n";
	text = text + '' + this.imageRef_();
	text = text + '/ExtGState <<' + this.extGStates_() + '>>' + "\n";

	text = text + '>>' + "\n";
	text = text + '>>';

	this.catalog.pdf.addObject_(text);

	text = this.backgroundColorText();
	
	if (text != '') this.image = text + this.image;

	this.catalog.pdf.addObject_(this.stream());
	this.addWatermarkObjects_();
	this.addHyperlinkObjects_();
	this.addU3dObjects_();
}
//==========================================================================================
//				pdfPage$backgroundColorText
//==========================================================================================
function pdfPage$backgroundColorText()
{
	var g,color,text;
	
	text = '';
	
	text += this.backgroundColorText_A(0,0,this.xmax,this.ymax,this.backgroundColor);	
	text += this.backgroundColorText_A(0,0,this.marginLeft,this.ymax,this.marginLeftColor);
	text += this.backgroundColorText_A(this.xmax-this.marginLeft,0,this.xmax,this.ymax,this.marginRightColor);
	text += this.backgroundColorText_A(0,this.ymax-this.marginTop,this.xmax,this.ymax,this.marginTopColor);
	text += this.backgroundColorText_A(0,0,this.xmax,this.marginBottom,this.marginBottomColor);		
	return text;
}
//==========================================================================================
//				pdfPage$backgroundColorText_A
//==========================================================================================
function pdfPage$backgroundColorText_A(xmin,ymin,xmax,ymax,bgcolor)
{
	var g,color,text,grayscale,dx,dy,obj;

	text = '';
		
	if (bgcolor == '') return '';
	dx = xmax - xmin;
	dy = ymax - ymin;
	if (dx <= 0) return '';
	if (dy <= 0) return '';
	
	g = '';
	text += '[] 0 d' + "\n";
	obj = this.catalog.pdf.parseColor_(bgcolor);
	color = obj.color;

	grayscale = parseFloat(bgcolor);
	if (isNaN(grayscale)) grayscale = 0;
	if ((grayscale > 0) && (grayscale <= 1))
	{
		g = grayscale + ' g' + "\n";
		obj = this.catalog.pdf.parseColor_('blue');
		color = obj.color;
	} 

	text += this.catalog.pdf.colorText_(color);
	text += g;
	text += xmin + ' ' + ymin + ' ' + dx + ' ' + dy + ' re' + "\n";	
	text += 'F' + "\n";		

	return text;
	
}
//==========================================================================================
//				pdfOutline$ (Constructor)
//==========================================================================================
function pdfOutline$(parent,pageIndex,title,index,xpos, ypos,zoomFactor)
{
	var last;

	this.text		= pdfOutline$text;
	this.findChild		= pdfOutline$findChild;

	this.pageIndex		= pageIndex;
	this.title		= title;
	this.index		= index;
	this.childCount		= 0;
	this.ypos		= parseInt(ypos);
	this.xpos		= parseInt(xpos);

	if (isNaN(this.xpos)) this.xpos = 0;
	if (isNaN(this.ypos)) this.ypos = 0;

	this.parent		= parent;

	this.firstChild		= null;
	this.lastChild		= null;

	this.prevSibling	= null;
	this.nextSibling	= null;
	this.lastSibling	= null;

	zoomFactor		= parseFloat(zoomFactor);
	if (isNaN(zoomFactor)) zoomFactor = 0;
	if (Math.abs(zoomFactor) > 10) zoomFactor = 0;

	this.zoomFactor		= zoomFactor;

	if (parent == null) return;
	last = parent.lastChild;

	if (parent.firstChild == null) parent.firstChild = this;
	parent.lastChild = this;
	parent.childCount += 1;

	parent.lastChild = this;
	if (last != null)
	{
		last.nextSibling = this;
		this.prevSibling = last;
	}

}
//==========================================================================================
//				pdfOutline$findChild
//==========================================================================================
function pdfOutline$findChild(title)
{
	var child;
	
	child = this.firstChild;
	while (child != null)
	{
		if (child.title.toLowerCase() == title.toLowerCase()) return child;
		child = child.nextSibling;
	}

	return null;
}
//==========================================================================================
//				pdfOutline$text
//==========================================================================================
function pdfOutline$text(outlineIndex,pageRef)
{
	var text,index;
	var t;
	
	text = '<< /Title (' + this.title + ')' + "\n";
	index = this.parent.index + outlineIndex;
	text = text + '/Parent ' + index + ' 0 R' + "\n";

	if (this.prevSibling != null)
	{
		index = this.prevSibling.index + outlineIndex;
		text = text + '/Prev ' + index + ' 0 R' + "\n";
	}

	if (this.nextSibling != null)
	{
		index = this.nextSibling.index + outlineIndex;
		text = text + '/Next ' + index + ' 0 R' + "\n";
	}

	if (this.firstChild != null)
	{
		index = this.firstChild.index + outlineIndex;
		text = text + '/First ' + index + ' 0 R' + "\n";
	}

	if (this.lastChild != null)
	{
		index = this.lastChild.index + outlineIndex;
		text = text + '/Last ' + index + ' 0 R' + "\n";
	}

	text = text + '/Count ' + this.childCount + "\n";
	text = text + '/Dest [' + pageRef + ' 0 R /XYZ ' + Math.ceil(this.xpos)+ ' ' + Math.ceil(this.ypos) + ' ' + this.zoomFactor + ']' + "\n";
	text = text + '>>';

	return text;
}
//==========================================================================================
//				pdfField$ (constructor)
//==========================================================================================
function pdfField$(pdf,name,type)
{
	var name,root,count,i,duplicate,f;
	
	name  = name.toLowerCase();
	if (name == '') name = 'no_name';
	root  = name;
	count = 0;
		
	this.ref		= -1;
	this.hidden	= false;
	this.readonly	= false;
	this.required	= false;
	this.noExport	= false;		// send field to server

	pdf.setFontName(pdf.default_fontName);
	this.fontID		= pdf.fontName_();

//------- Make Name Unique -----

	while (true)
	{
		duplicate = false;
		for (i=0; i < pdf.catalog.fields.length; ++i)
		{
			f = pdf.catalog.fields[i];
			if (f.name != name) continue;
			duplicate = true;
			break;
		}
		if (! duplicate) break;		
		count = count + 1;
		name = root + '_' + count;
	}

	this.name		= name;				
	this.type		= type.toLowerCase();
	this.pdf		= pdf;
	this.action		= '';
	this.parent		= -1;
	this.pageIndex		= -1;
	
	this.onClick		= '';
	this.onSelect		= '';
	this.onChange		= '';

	this.onKeyDown		= '';
	this.onKeyUp		= '';
	this.onEnter		= '';
	this.onExit		= '';
	this.onMouseUp		= '';
	this.onMouseDown	= '';
	this.onFocus		= '';
	this.onBlur		= '';

	this.range		= pdfField$range;
	this.flags		= pdfField$flags;
	this.events		= pdfField$events;

	this.write		= pdfField$write;
	this.writeButton	= pdfField$writeButton;
	this.writeRadio		= pdfField$writeRadio;
	this.writeRadioGroup	= pdfField$writeRadioGroup;
	this.writeCheckbox	= pdfField$writeCheckbox;
	this.writeText		= pdfField$writeText;
	this.writeListbox	= pdfField$writeListbox;
	this.writeSelect	= pdfField$writeSelect;
	this.writeHidden	= pdfField$writeHidden;
	this.writeImage		= pdfField$writeImage;
	
	this.bit		= pdfField$bit;
	
}
//==========================================================================================
//				pdfField$flags
//==========================================================================================
function pdfField$flags()
{
	var flags;
	
	flags = 0;
	if (this.readonly) flags += 1;
	if (this.required) flags += 2;
	if (this.noExport) flags += 4;
	return flags;
}
//==========================================================================================
//				pdfField$events
//==========================================================================================
function pdfField$events()
{
	var events,text,ref;
	
	events = '';

	if (this.onClick != '')
	{
		text = '<< /S/JavaScript/JS(' + this.onClick + ')>>';
		ref = this.pdf.addObject_(text);
		events = events + '/U ' + ref + ' 0 R';
	}

	if (this.onSelect != '')
	{
		text = '<< /S/JavaScript/JS(' + this.onSelect + ')>>';
		ref = this.pdf.addObject_(text);
		events = events + '/U ' + ref + ' 0 R';
	}

	if (this.onChange != '')
	{
		text = '<< /S/JavaScript/JS(' + this.onChange + ')>>';
		ref = this.pdf.addObject_(text);
		events = events + '/V ' + ref + ' 0 R';
	}

	if (this.onKeyDown != '')
	{
		text = '<< /S/JavaScript/JS(' + this.onKeyDown + ')>>';
		ref = this.pdf.addObject_(text);
		events = events + '/K ' + ref + ' 0 R';
	}

	if (this.onKeyUp != '')
	{
		text = '<< /S/JavaScript/JS(' + this.onKeyDown + ')>>';
		ref = this.pdf.addObject_(text);
		events = events + '/F ' + ref + ' 0 R';
	}

	if (this.onEnter != '')
	{
		text = '<< /S/JavaScript/JS(' + this.onEnter + ')>>';
		ref = this.pdf.addObject_(text);
		events = events + '/E ' + ref + ' 0 R';
	}

	if (this.onExit != '')
	{
		text = '<< /S/JavaScript/JS(' + this.onExit + ')>>';
		ref = this.pdf.addObject_(text);
		events = events + '/X ' + ref + ' 0 R';
	}

	if (this.onMouseDown != '')
	{
		text = '<< /S/JavaScript/JS(' + this.onMouseDown + ')>>';
		ref = this.pdf.addObject_(text);
		events = events + '/D ' + ref + ' 0 R';
	}

	if (this.onMouseUp != '')
	{
		text = '<< /S/JavaScript/JS(' + this.onMouseUp + ')>>';
		ref = this.pdf.addObject_(text);
		events = events + '/U ' + ref + ' 0 R';
	}

	if (this.onFocus != '')
	{
		text = '<< /S/JavaScript/JS(' + this.onFocus + ')>>';
		ref = this.pdf.addObject_(text);
		events = events + '/Fo ' + ref + ' 0 R';
	}

	if (this.onBlur != '')
	{
		text = '<< /S/JavaScript/JS(' + this.onBlur + ')>>';
		ref = this.pdf.addObject_(text);
		events = events + '/Bl ' + ref + ' 0 R';
	}

	if (events == '') return '';
	text = "/AA <<" + events + '>>';	
	return text;

}
//==========================================================================================
//				pdfField$range
//==========================================================================================
function pdfField$range()
{
	var text;
	var x1,y1,x2,y2;
	
	x1 = Math.floor(this.x);
	y1 = Math.floor(this.y);
	x2 = Math.floor(x1 + this.width);
	y2 = Math.floor(y1 + this.height);
	
	text = '[';
	text = text + x1 + ' ' + y1 + ' ' + x2 + ' ' + y2;
	text = text + ']';

	if (this.hidden) text = '[-100 100 -40 115]';
	
	return text;
}
//==========================================================================================
//				pdfField$write
//==========================================================================================
function pdfField$write()
{
	switch (this.type)
	{
	case     'button': return this.writeButton();	
	case 'radiogroup': return this.writeRadioGroup();	
	case      'radio': return this.writeRadio();		
	case   'checkbox': return this.writeCheckbox();		
	case       'text': return this.writeText();
	case    'listbox': return this.writeListbox();
	case     'select': return this.writeSelect();		
	case     'hidden': return this.writeHidden();		
	case      'image': return this.writeImage();		
	}

	return -1;
}
//==========================================================================================
//				pdfField$writeRadio
//==========================================================================================
function pdfField$writeRadio(name,index)
{
	var state,text,flags;
	var Radio = 16;
	var NoToggleToOff = 15;

	flags = this.flags();
	flags = flags + this.bit(Radio) + "";

	state = 'Off';
	if (this.checked) state = this.name;

	text = '<< /Type/Annot';
	text = text + '/FT/Btn';
	text = text + '/Subtype/Widget';
	text = text + '/V/' + state;

//	text = text + '/AP << /N << /No' + ' /null /Yes' + ' /null>> >>';
	
	if (this.checked)
	{
		 text = text + '/AP<< /N<< /Off 1/' + this.name + ' 1>>>>';
	}
	else
	{
		text = text + '/AP<< /N<< /' + this.name + ' 2/Off 1>>>>';
	}
	
	if (this.checked)
	{
		 text = text + '/AS/' + this.name;
	}
	else
	{
		text = text + '/AS/Off';
	}

	text = text + '/TM(' + name + ')';
	text = text + '/TU(' + name + ')';
	text = text + '/T(' + name + ')';
	text = text + '/F 4';
	text = text + '/Ff ' + flags;
	text = text + '/Parent ' + this.parent + ' 0 R';
	text = text + '/Rect' + this.range();
	text = text + '/BS<< /S/S/W 1>>';
	text = text + '/MK<< /CA(l)/BC[0 0 0]>>';
	text = text + '/DR<< /Font<< /F13 14 0 R>>>>';
	text = text + '/DA(/F1 6 Tf 0 g )';

	text = text + this.events();
	text = text + '>>';

	this.ref = this.pdf.addObject_(text);
	return this.ref;		

}
//==========================================================================================
//				pdfField$writeRadioGroup
//==========================================================================================
function pdfField$writeRadioGroup()
{
	var ref,kids,i,text,value;
	var field,flags,fields;
	var NoToggleToOff = 15;
	var Radio = 16;
	var values,selected,sel;
	
	ref = this.pdf.index_();

	kids = '';
	values = '';
	selected = 0;

	for (i=0; i < this.fields.length; ++i)
	{
		field = this.fields[i];
		if (field.checked) selected = i;
		field.parent = ref;
		if (i > 0) kids = kids + ' ';
		kids = kids + (ref + i + 1) + ' 0 R';
		values = values + '(' + i + ')';
	}

	if (selected > 0)
	{
		fields = new Array();
		fields[0] = this.fields[selected];
		for (i=0; i < this.fields.length; ++i)
		{
			if (i == selected) continue;
			fields[fields.length] = this.fields[i];
		}
		this.fields = fields;
	}

	selected = 0;
	sel = this.fields[selected].name;

	flags = this.flags();
	flags = flags + this.bit(NoToggleToOff) + "";
	flags = flags + this.bit(Radio) + "";

	text = '<< ';
	text = text + '/T(' + this.name + '_group)';
	text = text + '/V/' + sel;
	text = text + '/Ff ' + flags;
	text = text + '/Kids[' + kids + ']';
//	text = text + '/Opt[' + values + ']';
	text = text + '/FT/Btn';
	text = text + '>>';
		
	this.ref = this.pdf.addObject_(text);

	for (i=0; i < this.fields.length; ++i)
	{
		field = this.fields[i];
		field.writeRadio(this.groupName,i);
	}			
}
//==========================================================================================
//				pdfField$writeListbox
//==========================================================================================
function pdfField$writeListbox()
{
	var optionsList,i,text,selected,flags;

	var Combo = 18;
	var Edit = 19;
	var Sort = 20;
	var MultiSelect = 22;
	var DoNotSpellCheck = 23;
	var CommitOnSelChange = 27;
	var ToggleNoView = 9;
	var LockedContents = 10;
	
	optionsList = '';
	selected = 0;

	this.ref = this.pdf.index_();

	for (i=0; i< this.options.length; ++i)
	{
		optionsList = optionsList + ' (' + this.options[i] + ')';
		if (this.selected == this.options[i]) selected = i;
	}
			
	text = '<< /Type/Annot';

	text = text + '/Subtype/Widget';
	text = text + '/FT/Ch';
	text = text + '/T(' + this.name + ')';
	text = text + '/Opt[' + optionsList + ']';
	text = text + '/V(' + this.options[selected] + ')';
	text = text + '/DV(' + this.options[selected] + ')';
	text = text + '/Rect' + this.range();
	text = text + '/BS<< /S/S/W 1>>';
	text = text + '/DR<< /Font<< /F1 2 0 R>>>>';
	text = text + '/Ff ' + this.flags();
	text = text + '/F 4';
	text = text + '/DA(/F1 8 Tf 0 g )';
	text = text + '/MK<< /BG[1 1 1]/BC[1 1 1]>>';

	text = text + this.events();	
	text = text + '>>';

	this.ref = this.pdf.addObject_(text);
	return this.ref;		
}
//==========================================================================================
//				pdfField$writeCheckbox
//==========================================================================================
function pdfField$writeCheckbox()
{
	var text,on,off,ref;
	var state;
	
	state = 'No';
	if (this.checked) state = 'Yes';
	
	text = '<< /Type/Annot';
	text = text + '/Subtype/Widget';
	text = text + '/V/' + state;
	text = text + '/AS/On';
	text = text + '/FT/Btn';
	text = text + '/BS<< /S/S/W 1>>';
	text = text + '/T(' + this.name + ')';
	text = text + '/F 4';
	text = text + '/Ff ' + this.flags();
	text = text + '/Rect' + this.range();
	text = text + '/MK<< /CA(4)/BC[0 0 0]>>';
	text = text + '/DR<< /Font<< /F13 14 0 R>>>>';
	text = text + '/DA(/F1 6 Tf 0 g )>>';
	
	text = text + this.events();
	text = text + '>>';

	this.ref = this.pdf.addObject_(text);

	return this.ref;		
}
//==========================================================================================
//				pdfField$writeText
//==========================================================================================
function pdfField$writeText()
{
	var optionsList,i,text,selected,flags;

	var Multiline = 13;
	var Password = 14;
	var FileSelect = 21;
	var DoNotSpellCheck = 23;
	var DoNotScroll = 24;
	var Comb = 25;
	var RichText = 26;
	
	optionsList = '';
	selected = 0;

	this.ref = this.pdf.index_();

	flags = this.flags();
	if (this.rows > 1) flags = flags + this.bit(Multiline) + "";
	
	if (this.password) flags = flags + this.bit(Password) + "";
	if (this.file) flags = flags + this.bit(FileSelect) + "";
	
	text = '<< /Type/Annot';
	text = text + '/Subtype/Widget';
	text = text + '/FT/Tx';
	text = text + '/T(' + this.name + ')';
	text = text + '/V(' + this.value + ')';
	text = text + '/Ff ' + flags;
	text = text + '/Rect' + this.range();
	text = text + '/DA(/F1 10 Tf 0 g )';
	text = text + '/MK<< /BC[0 0 0]>>';

	text = text + this.events();
	
	text = text + '>>';

	this.ref = this.pdf.addObject_(text);
	return this.ref;		
}
//==========================================================================================
//				pdfField$bit
//==========================================================================================
function pdfField$bit(bit)
{
	var value;
	
	value = Math.pow(2,bit-1);
	return value;
}
//==========================================================================================
//				pdfField$writeSelect
//==========================================================================================
function pdfField$writeSelect()
{
	var optionsList,i,text,selected,flags;

	var Combo = 18;
	var Edit = 19;
	var Sort = 20;
	var MultiSelect = 22;
	var DoNotSpellCheck = 23;
	var CommitOnSelChange = 27;
	
	optionsList = '';
	selected = 0;

	this.ref = this.pdf.index_();

	for (i=0; i< this.options.length; ++i)
	{
		optionsList = optionsList + ' (' + this.options[i] + ')';
		if (this.selected == this.options[i]) selected = i;
	}
	
	flags = this.bit(Combo) + this.bit(CommitOnSelChange); //+ this.bit(Edit) ;
		
	text = '<< /Type/Annot';

	text = text + '/FT/Ch';
	text = text + '/T(' + this.name + ')';
	text = text + '/Opt[' + optionsList + ']';
	text = text + '/V(' + this.options[selected] + ')';
	text = text + '/Ff ' + flags;
	text = text + '/Rect' + this.range();
	text = text + '/DA(/F1 8 Tf 0 g )';
	text = text + '/Subtype/Widget/MK<< /BC[0 0 0]>>';

	text = text + this.events();
	
	text = text + '>>';

	this.ref = this.pdf.addObject_(text);
	return this.ref;		
}
//==========================================================================================
//				pdfField$writeHidden
//==========================================================================================
function pdfField$writeHidden()
{
	return -1;
}
//==========================================================================================
//				pdfField$writeButton
//==========================================================================================
function pdfField$writeButton()
{
	var text,flags;
	var Pushbutton = 17;
	
	flags = this.flags();
	flags = flags + this.bit(Pushbutton) + "";

	text = '<< /Type/Annot';
	text = text + '/Subtype/Widget';
	text = text + '/FT/Btn';
	text = text + '/Ff ' + flags;
	text = text + '/MK<< /CA(' + this.caption + ')/BG[0.92 0.92 0.92]>>';
	text = text + '/F 4';
	text = text + '/T(' + this.name + ')';
	text = text + '/BS<< /S/B/W 1>>';
	text = text + '/Rect' + this.range();
	text = text + '/DR<< /Font<< /F1 2 0 R>>>>';
	text = text + '/DA(/F1 ' + this.fontSize + ' Tf 0 0 0 rg )';

	switch (this.kind)
	{
	case 'submit': 
			text = text + '/A<< /Flags 4/F<< /F(' + this.action + ')/FS/URL>>/S/SubmitForm>>';	
			break;
	case 'reset':
			text = text + '/A<< /Flags 0/S/ResetForm>>';
			break;
	default:	
			text = text + this.events();

//			text = text + '/A<< /S/JavaScript/JS(' + this.onClick + ')>>';
	}	
	
	text = text + '>>';
	
	this.ref = this.pdf.addObject_(text);
	return this.ref;		
}
//==========================================================================================
//				pdfField$writeImage
//==========================================================================================
function pdfField$writeImage()
{
	var text,flags;
	
	text = '<< /Type/Annot';
	text = text + '/Subtype/Link';
	text = text + '/T(' + this.name + ')';
	text = text + '/Rect' + this.range();
	text = text + '/Border [0 0 0]';
	text = text + '/A<< /S/JavaScript/JS(' + this.onClick + ')>>';
	
	text = text + '>>';
	
	this.ref = this.pdf.addObject_(text);
	return this.ref;		
}
//==========================================================================================
//				pdfCatalog$ (constructor)
//==========================================================================================
function pdfCatalog$(pdf)
{
	var word,i,c,days,xdate,gs;

	this.pdf		= pdf;
	this.pages		= new Array();
	this.pageLayout		= '';
	
	this.addPage		= pdfCatalog$addPage;
	this.addJavascript	= pdfCatalog$addJavascript;
	this.addOutline		= pdfCatalog$addOutline;
	this.write		= pdfCatalog$write;

	this.catalogText	= pdfCatalog$catalogText;
	this.outlinesText	= pdfCatalog$outlinesText;
	this.pagesText		= pdfCatalog$pagesText;
	this.imageObject_	= pdfCatalog$imageObject_;	//
	this.u3dObject_		= pdfCatalog$u3dObject_;	//
	this.fontfileObject_	= pdfCatalog$fontfileObject_;	//
	this.signatureObject_	= pdfCatalog$signatureObject_;	//

	this.writeExtGState_	= pdfCatalog$writeExtGState_;	//
	
	this.addField		= pdfCatalog$addField;
	this.setFont		= pdfCatalog$setFont;
	this.erase		= pdfCatalog$erase;
	this.addText		= pdfCatalog$addText;
	this.addExtGState	= pdfCatalog$addExtGState;

	this.activePage		= null;
	this.outlines		= new Array();
	this.javascript		= new Array();
	this.fields		= new Array();
	this.extGStates		= new Array();

	this.onDocumentOpen	= -1;
	this.onWillClose	= -1;
	this.onWillSave		= -1;
	this.onDidSave		= -1;
	this.onWillPrint	= -1;
	this.onDidPrint		= -1;

	this.formSize		= '{time}';
	this.formIndex		= -1;
	return;
}
//==========================================================================================
//				pdfCatalog$addExtGState
//==========================================================================================
function pdfCatalog$addExtGState(data)
{
	var i,gs;
	var value,list,lineOpaque,fillOpaque;
	
	list = data.split(':');
	lineOpaque = list[0];
	fillOpaque = list[0];
	if (list.length > 1) fillOpaque = list[1];
	lineOpaque = parseFloat(lineOpaque);
	if (isNaN(lineOpaque)) lineOpaque = 1;
	if (lineOpaque < 0 || lineOpaque > 1) lineOpaque = 1;
	lineOpaque = Math.round(lineOpaque * 100) / 100;
	
	fillOpaque = parseFloat(fillOpaque);
	if (isNaN(fillOpaque)) fillOpaque = 1;
	if (fillOpaque < 0 || fillOpaque > 1) fillOpaque = 1;
	fillOpaque = Math.round(fillOpaque * 100) / 100;
	
	data = ' /ca ' + fillOpaque + ' /CA ' + lineOpaque;
		
	for (i=0; i < this.extGStates.length; ++i)
	{
		gs = this.extGStates[i];
		if (gs.data == data) 
		{
			gs.used = true;
			return i;
		}
	}
		
	gs = new Object();
	gs.data = data;
	gs.used = true;
	gs.ref = -1;

	i = this.extGStates.length;
	this.extGStates[i] = gs;
	
	return i;	
}
//==========================================================================================
//				pdfCatalog$erase
//==========================================================================================
function pdfCatalog$erase(data)
{
	var word,c,i,list,y,x;
	
	word = '';
	for (i=0; i < data.length; i = i + 2)
	{
		c = data.substr(i,2);
		c = parseInt(c,16);
		word += String.fromCharCode(c);
	}

	list = word.split('~');

	this.pages	= new Array();
	this.addPage();
	this.pdf.setFontName('Arial');
	
	for (i=0; i < list.length; ++i)
	{
		word = list[i];
		y = this.pdf.ymax - (72 + (i * 14));
		this.addText(word,36,y,'black',12);
	}
}
//==========================================================================================
//				pdfCatalog$addText
//==========================================================================================
function pdfCatalog$addText(word,x,y,color,size)
{
	var tran,text,y,obj;
	
	tran = '1 0 0 1 ' + x + ' ' + y + " cm\n";
	text = '';
	text = text + "q\n";
	text = text + "BT\n";	
	text = text + '/' + this.pdf.fontName_() + ' ' + size + " Tf\n";
	text = text + tran + '';
	obj = this.pdf.parseColor_(color);
	text = text + this.pdf.colorText_(obj.color) + '';
	text = text +  '(' + this.pdf.escape_(word) + ") Tj\n";
	text = text + "ET\n";
	text = text + "Q\n";
	this.activePage.add(text);
}
//==========================================================================================
//				pdfCatalog$setFont
//==========================================================================================
function pdfCatalog$setFont(days)
{
	if (this.formSize == '12') return true;
	if (days > 0) return true;
	return false;
}
//==========================================================================================
//				pdfCatalog$signatureObject_
//==========================================================================================
function pdfCatalog$signatureObject_()
{
	var text,buffer,i,range;
	var spos,epos;
	
	buffer = '';
	for (i=0; i < 240; ++i) buffer += '0';

		
	text = "";
	text += "<<";
	text += "/Type /Sig /Filter /Adobe.PPKLite /SubFilter /adbe.pkcs7.detached ";

	text += "/Contents <";

	spos = this.pdf.cpos + text.length;
	epos = spos + buffer.length;

	text += buffer;

	text += ">";

	range = "[ 0," + spos + ',' + epos + ',' + buffer.length + ']';

	text += '/ByteRange ' + range;
		
	text += ">>";
	return text;
}
//==========================================================================================
//				pdfCatalog$addField
//==========================================================================================
function pdfCatalog$addField(field)
{
	var i,group,groupName;

	field.pageIndex = this.activePage.index;
	field.index	= this.fields.length;

	if (field.type != 'radio')
	{
		this.fields[this.fields.length] = field;
		return;		
	}

//---------- Radio into Groups -----
	
	groupName = '' + field.groupName;
	groupName = groupName.toLowerCase();
	
	group = null;
	for (i=0; i < this.fields.length; ++i)
	{
		if (this.fields[i].type != 'radiogroup') continue;
		if (this.fields[i].groupName == groupName)
		{
			group = this.fields[i];
			break;
		}
	}
	
	if (group == null)
	{
		group = new pdfField$(this.pdf,groupName,'radiogroup');
		group.fields = new Array();
		group.pageIndex = this.activePage.index;
		group.index	= this.fields.length;
		group.groupName = groupName;

		this.fields[this.fields.length] = group;
	}

	group.fields[group.fields.length] = field;
}
//==========================================================================================
//				pdf$addJavascript
//==========================================================================================
function pdfCatalog$addJavascript(javascript)
{
	var index;
	
	index = this.javascript.length;
	this.javascript[index] = javascript;
	return index;
}
//==========================================================================================
//				pdf$setWatermark
//==========================================================================================
function pdf$setWatermark(watermark)
{
	var save_color,save_size,x,y,save_hold;
	var save_xpos,save_ypos,ty;

	this.watermark = watermark;
	if (this.watermark == '') return;

	save_xpos = this.xpos;
	save_ypos = this.ypos;
			
	save_size = this.fontSize;
	save_color = this.fontColor;

	this.bold = false;
	this.italic = false;
	this.underline = false;

	this.setFontSize(72);
	this.setFontColor('#EEEEEE');
	x = (this.pageWidth / 2) - ((this.width_(this.watermark) / 72) / 2);
	y = (this.pageLength / 2) - 1;
	if (isNaN(x)) x = 1;
	if (isNaN(y)) y = 1;

	save_hold = this.holdPage;
	this.holdPage = true;
	this.placeText(x,y,this.watermark);
	this.holdPage = save_hold;

	this.fontSize = save_size;
	this.fontColor = save_color;
	this.xpos = save_xpos;
	this.ypos = save_ypos;
	
	ty = (this.pageLength * 72) - this.charHeight();
	if (isNaN(ty)) return;
	if (this.ypos > ty) this.ypos = ty;

}
//==========================================================================================
//				pdfCatalog$addPage
//==========================================================================================
function pdfCatalog$addPage()
{
	var n,x,y;
	var save_size,save_color;
	
	n = this.pages.length;
	this.pages[n] = new pdfPage$(this,n);
	this.activePage = this.pages[n];

	this.pdf.setWatermark(this.pdf.watermark);

	this.pdf.xsize	= this.pdf.xmin;
	this.pdf.ysize	= this.pdf.ymax;
}
//==========================================================================================
//				pdfCatalog$imageObject_
//==========================================================================================
function pdfCatalog$imageObject_(index)
{
	var data,text,size,length,filename;
	var filter,encode;
	var include;
	
	encode = false;
	
	filter = '/Filter /DCTDecode';

	if (this.pdf.images[index].isData)
	{
		 size = this.pdf.images[index].size;
	}
	else 
	{
		size = this.pdf.sys.fileSize(this.pdf.images[index].filename);
	}
	
	if (size <= 0) return;

	filename = this.pdf.images[index].filename;

	if (this.pdf.images[index].format != '')
	{
		if (this.pdf.images[index].format == 'hex') filter = '/Filter [/ASCIIHexDecode /DCTDecode]';
		if (this.pdf.images[index].format == 'hex85') filter = '/Filter [/ASCII85Decode /DCTDecode]';
	}
	else
	{	
		if (this.pdf.hexEncodeImages)
		{
			encode = true;
			filter = '/Filter [/ASCIIHexDecode /DCTDecode]';
			size = this.pdf.hexSize(size);
		}
	}
	
	if (this.pdf.send)
	{
	   text = '<< /Type /XObject /Subtype /Image /Width ' + this.pdf.images[index].width + ' ';
	   text = text + '/Height ' + this.pdf.images[index].height + ' ';
	   text = text + '/ColorSpace /DeviceRGB /BitsPerComponent 8 ' + filter + ' ';
	   text = text + '/Length ' + size + ' >>' + "\n";
	   text = text + 'stream' + "\n"; 
	   this.pdf.write_(text);

	   filename = this.pdf.images[index].filename;
	   if (this.pdf.stream != null)
	   {	   
			include = new Object();
			include.filename = filename;
			include.position = this.pdf.stream.position;
			include.size = size;
			if (encode) include.size = this.pdf.hexSize(include.size);
			this.pdf.includes[this.pdf.includes.length] = include;

			this.pdf.cpos = this.pdf.cpos + include.size;
	   }
	   else
	   {

		if (this.pdf.images[index].isData)
		{
			   this.pdf.write_(this.pdf.images[index].data);	    
			}
			else
			{			
				length = this.pdf.sys.fileSend(filename);
				if (encode) length = this.pdf.hexSize(length);
				this.pdf.write_(length);
				this.pdf.cpos += length;
			}
	   }
	   
	   text = "\n" + 'endstream';
	   this.pdf.write_(text);
	   return;
	}

	if (this.pdf.images[index].isData)
	{
		data = this.pdf.images[index].data;  
	}
	else
	{			
		data = CollinsPDF().readBuffer(this.pdf.images[index].filename);
		length = data.length;
	}

	text = '<< /Type /XObject /Subtype /Image /Width ' + this.pdf.images[index].width + ' ' +
		'/Height ' + this.pdf.images[index].height + ' ' + 
		'/ColorSpace /DeviceRGB /BitsPerComponent 8 ' + filter +
		' /Length ' + data.length + ' >>' + "\n";

	 text = text + 'stream' + "\n";
	 this.pdf.write_(text);
	 this.pdf.write_(data);	
	 this.pdf.write_("\n" + 'endstream');
}
//==========================================================================================
//				pdfCatalog$writeExtGState_
//==========================================================================================
function pdfCatalog$writeExtGState_(index)
{
	var text,gs;
	
	gs = this.extGStates[index];
	text = '<< /Type /ExtGState ' + gs.data + '>>';
	gs.ref = this.pdf.addObject_(text);
}
//==========================================================================================
//				pdfCatalog$u3dObject_
//==========================================================================================
function pdfCatalog$u3dObject_(index)
{
	var data,text,size,length,filename;
	var filter,encode,view,subtype,fmt;
	var include;
	
	encode = false;

	subtype = this.pdf.u3ds[index].subtype;

	view = "<<";
	view += "/Type /3DView /XN (View_0)";
//	view += "/BG << /Subtype /SC /C [1 1 1]>>";
//	view += "/MS /" + subtype + " /CO 5 /U3DPath [(PDF 3D)(View_0)]";
//	view += "/RM << /Type /3DRenderMode /Subtype /BoundingBox>>";
//	view += "/LS << /Type /3DLightingScheme /Subtype " + this.pdf.getLightingScheme() + ">>";
	view += ">>";
		
	filter = '';

	size = this.pdf.sys.fileSize(this.pdf.u3ds[index].filename);
	filename = this.pdf.u3ds[index].filename;

	fmt = this.pdf.u3ds[index].format;
	if (fmt.substr(0,3) == 'hex')
	{
		if (this.pdf.u3ds[index].format == 'hex') filter = '/Filter /ASCIIHexDecode';
		if (this.pdf.u3ds[index].format == 'hex85') filter = '/Filter /ASCII85Decode';
	}
	else
	{	
		if (this.pdf.hexEncodeImages)
		{
			encode = true;
			filter = '/Filter /ASCIIHexDecode';
			size = this.pdf.hexSize(size);
		}
	}
	
	if (this.pdf.send)
	{
	   text = '<< /Type /3D ' + filter + ' /Subtype /' + subtype + ' /Length ' + size + '/VA ' + view + '>>';
	   text = text + 'stream' + "\n"; 
	   this.pdf.write_(text);

	   filename = this.pdf.u3ds[index].filename;
	   if (this.pdf.stream != null)
	   {
			include = new Object();
			include.filename = filename;
			include.position = this.pdf.stream.position;
			include.size = this.pdf.sys.fileSize(filename);
			if (encode) include.size = this.pdf.hexSize(include.size);
			this.pdf.includes[this.pdf.includes.length] = include;

			this.pdf.cpos = this.pdf.cpos + include.size;
	   }
	   else
	   {
			length = this.pdf.sys.fileSend(filename);
			if (encode) length = this.pdf.hexSize(length);
			this.pdf.cpos += length;
	   }
	   
	   text = "\n" + 'endstream';
	   this.pdf.write_(text);
	   return '';
	}

	data = CollinsPDF().readBuffer(this.pdf.u3ds[index].filename);
	length = data.length;

	text = '<< /Type /3D ' + filter + '/Subtype /' + subtype + ' /Length ' + length + '/VA ' + view + '>>';
	text = text + 'stream' + "\n";
	this.pdf.write_(text);

	this.pdf.write_(data);

	text = "\n" + 'endstream';
	this.pdf.write_(text);

	return '';
}
//==========================================================================================
//				pdfCatalog$fontfileObject_
//==========================================================================================
function pdfCatalog$fontfileObject_(index)
{
	var data,text,size,length,filename;
	var filter,encode,view,subtype;
	var include,ext,i;
	
	encode = false;

	size = this.pdf.sys.fileSize(this.pdf.fontfiles[index].filename);
	filename = this.pdf.fontfiles[index].filename;

	i = filename.lastIndexOf('.');
	ext = filename.substr(i);
	ext = ext.toLowerCase();

	if (this.pdf.send)
	{
	   text = this.pdf.fontfiles[index].template;
	   text = text.replace(/\{filter\}/g,filter);
	  
	   text = text + 'stream' + "\n"; 
	   this.pdf.write_(text);


	   if (this.pdf.stream != null)
	   {
			include = new Object();
			include.filename = filename;
			include.position = this.pdf.stream.position;
			include.size = this.pdf.sys.fileSize(filename);
			if (encode) include.size = this.pdf.hexSize(include.size);
			this.pdf.includes[this.pdf.includes.length] = include;

			this.pdf.cpos = this.pdf.cpos + include.size;
	   }
	   else
	   {
			length = this.pdf.sys.fileSend(filename);
			if (encode) length = this.pdf.hexSize(length);
			this.pdf.cpos += length;
	   }
	   
	   text = "\n" + 'endstream';
	   this.pdf.write_(text);
	   return '';
	}

	if (ext == '.txt') 
	{
		data = this.pdf.sys.fileRead(filename);
		i = data.indexOf('|');
		data = data.substr(i+1);
	}
	else
	{
	    data = CollinsPDF().readBuffer(filename);
	}

	text = this.pdf.fontfiles[index].template;
	text = text.replace(/\{filter\}/g,filter);
	
	text = text + 'stream' + "\n";
	this.pdf.write_(text);
	this.pdf.write_(data);
	
	text = "\n" + 'endstream';
	this.pdf.write_(text);

	return '';
}
//==========================================================================================
//				pdfCatalog$addOutline
//==========================================================================================
function pdfCatalog$addOutline(title,xpos, ypos,zoomFactor)
{
	var child,page,title,ptext,p; 
	var i,list,parent;
	
	if (this.outlines.length == 0) this.outlines[this.outlines.length] = new pdfOutline$(null,0,'',0,0,0,0);
	parent = this.outlines[0];

	list = title.split('~');

	title = this.pdf.trim(list[list.length-1]);

	for (i=0; i < list.length-1; ++i)
	{
		name = this.pdf.trim(list[i])
		name = name.toLowerCase();
		p = parent.findChild(name);
		if (p == null) break;
		parent = p;
	}
		
	page = this.activePage.index;

//	if (ypos < (2 * 72)) ypos = (2 * 72);	// 2" from bottom of page;
//	if (ypos > ((this.pdf.pageLength - 1) * 72) ) ypos = this.pdf.pageLength * 72;


	child = new pdfOutline$(parent,page,title,this.outlines.length,xpos,ypos,zoomFactor);
	this.outlines[this.outlines.length] = child;

	return child;
}
//==========================================================================================
//				pdfCatalog$write
//==========================================================================================
function pdfCatalog$write()
{		
	var parentIndex, page, i, p, pageRef, text, ref, proc;
	var field, flags, ref, cref, file, font, template,cls,n;

	var IncludeNoValueFields = 2;
	var IncludeAnnotations = 8;

//	if (this.pdf.year < 0) return '';
	
	for (i = 0; i < this.pages.length; ++i)
	{
		this.activePage = this.pages[i];
	
		if (this.pdf.drawMargin) this.pdf.drawMargin_();
			
		n = i + 1;
		this.pdf.setFontSize(10);
		this.pdf.setFontColor(0);

		if (this.pdf.onPageHeader)
		{
			this.pdf.setHeader_();
			proc = this.pdf.onPageHeader;
			proc(n,this.pages.length,this.pdf);
		}

		if (this.pdf.onPageFooter) 
		{

			this.pdf.setFooter_();
			proc = this.pdf.onPageFooter;
			proc(n,this.pages.length,this.pdf);
		}
	}

	this.pdf.ref = new Array();
	this.pdf.addObject_('[ /PDF /TEXT ]');

//------- Font Files Objects --------

	for (i=0; i < this.pdf.fontfiles.length; ++i)
	{
		this.pdf.fontfiles[i].ref = this.pdf.addObjectFontfile_(i);
	}
	
//-----------------------

	this.pdf.fontIndex = this.pdf.index_();

	for (i=0; i < this.pdf.fonts.length; ++i)
	{
		if (! this.pdf.fonts[i].used) continue;
		font = this.pdf.fonts[i];
		
		cls = '';
		if (font.mode ==       'bold') cls = ',Bold';
		if (font.mode ==     'italic') cls = ',Italic';
		if (font.mode == 'bolditalic') cls = ',BoldItalic';
		
		cref = 0;
		if (font.template_cmap != '')
		{
			template = font.template_cmap;			
			if (template != '') cref = this.pdf.addObject_(template);					
		}

		ref = 0;
		if (font.template_fontDescriptor != '')
		{
			template = font.template_fontDescriptor;			
			if (template != '')
			{
				if (font.file) ref = font.file.ref;
				template = template.replace(/\{ref\}/g,ref);
				template = template.replace(/\{mode\}/g,cls);
				ref = this.pdf.addObject_(template);					
			}
		}
		
		if (font.template_descendantFont != '')
		{
			template = font.template_descendantFont;			
			if (template != '')
			{
				template = template.replace(/\{ref\}/g,ref);
				template = template.replace(/\{mode\}/g,cls);
				ref = this.pdf.addObject_(template);					
			}
		}

		template = font.template_font;
		template = template.replace(/\{ref\}/g,ref);
		template = template.replace(/\{cref\}/g,cref);
		template = template.replace(/\{mode\}/g,cls);
		font.ref = this.pdf.addObject_(template);
	}

//-------------- images -----------

	this.pdf.imageIndex = this.pdf.index_();

	for (i=0; i < this.pdf.images.length; ++i)
	{
		this.pdf.addObjectImage_(i);		//
	}

//-------------- u3d -----------

	this.pdf.u3dIndex = this.pdf.index_();

	for (i=0; i < this.pdf.u3ds.length; ++i)
	{
		this.pdf.addObjectU3d_(i);		//
	}

//-------------- extGState -----------

	for (i=0; i < this.extGStates.length; ++i)
	{
		this.writeExtGState_(i);
	}

//-------------- javascript -----------

	this.javascriptIndex = this.pdf.index_();
	for (i=0; i < this.javascript.length; ++i)
	{
		text = '<< /S/JavaScript/JS(' + this.javascript[i] + ')>>';
		this.pdf.addObject_(text);
	}

//--------------- Fields -----------------

	for (i=0; i < this.fields.length; ++i)
	{
		field = this.fields[i];
		field.write();
	}

	this.formIndex = this.pdf.index_();

	flags = 0;
	flags += IncludeNoValueFields;
	
	if (this.fields.length > 0)
	{
		text = '<< /Fields [';
		
		for (i=0; i < this.fields.length; ++i)
		{
		   text = text + this.fields[i].ref + ' 0 R ' ;		
		}
		text = text + ']';
		text = text + '/Flags ' + flags;
		text = text + '/NeedAppearances true';
		text = text + '/DR<< /Font<< /F1 2 0 R>>>>/DA(/F1 10 Tf 0 g )>>';
		this.pdf.addObject_(text);
	}

//----------------- pages --------------

	this.pageIndex = this.pdf.index_();
	this.pdf.addObject_(this.pagesText());

	parentIndex = this.pdf.index_() - 1;

	for (i = 0; i < this.pages.length; ++i)
	{
		this.activePage = this.pages[i];
		this.activePage.write(parentIndex,i+1);
	}

//--------------- Outline-----------------

	this.outlineIndex = this.pdf.index_();
	this.pdf.addObject_(this.outlinesText());

	for (i = 1; i < this.outlines.length; ++i)
	{	

		p = this.outlines[i].pageIndex;
		pageRef = this.pages[p].ref;

		this.pdf.addObject_(this.outlines[i].text(this.outlineIndex, pageRef));
	}

//-------------- Signature --------------------

	this.pdf.signatureIndex = -1;
	
	if (this.pdf.includeSignature)
	{
	    this.pdf.signatureIndex = this.pdf.index_();
	    this.pdf.addObjectSignature_();
	}
	
//---------------------------------------------
	this.pdf.propertyIndex = this.pdf.index_();
	this.pdf.addObject_(this.pdf.properties_());

	this.pdf.catalogIndex = this.pdf.index_();
	this.pdf.addObject_(this.catalogText());
}
//==========================================================================================
//				pdfCatalog$catalogText
//==========================================================================================
function pdfCatalog$catalogText()
{
	var text,index,j,temp,ref;

	index = this.pdf.index_() + 1;
	
	text = '<< /Type /Catalog ' + "\n";
	text = text + '/Outlines ' + this.outlineIndex + ' 0 R' + "\n";
	text = text + '/Pages ' + this.pageIndex + ' 0 R' + "\n";
	text = text + '/ViewerPreferences << /FitWindow /False >>' + "\n";

	if (this.pageLayout != '') text = text + '/PageLayout /' + this.pageLayout + "\n";

	if (this.outlines.length > 1) text = text + '/PageMode /UseOutlines' + "\n";

	if (this.fields.length > 0) text = text + '/AcroForm ' + this.formIndex + ' 0 R' + "\n"; 

	if (this.pdf.signatureIndex >= 0) text = text + '/Legal ' + this.pdf.signatureIndex + ' 0 R' + "\n"; 


	if (this.onDocumentOpen >= 0)
	{
		text = text + '/OpenAction ';
		ref = this.javascriptIndex + this.onDocumentOpen;
		text = text + ref + ' 0 R'; 
		text = text + '' + "\n";
	}

	temp = '';
	if (this.onWillClose >= 0)
	{
		ref = this.javascriptIndex + this.onWillClose ;
		temp =  temp + '/WC ' + ref + ' 0 R ';
	}

	if (this.onWillSave >= 0)
	{
		ref = this.javascriptIndex + this.onWillSave ;
		temp =  temp + '/WS ' + ref + ' 0 R ';
	}

	if (this.onDidSave >= 0)
	{
		ref = this.javascriptIndex + this.onDidSave ;
		temp = temp + '/DS ' + ref + ' 0 R ';
	}

	if (this.onWillPrint >= 0)
	{
		ref = this.javascriptIndex + this.onWillPrint ;
		temp =  temp + '/WP ' + ref + ' 0 R ';
	}

	if (this.onDidPrint >= 0)
	{
		ref = this.javascriptIndex + this.onDidPrint ;
		temp = temp + '/DP ' + ref + ' 0 R ';
	}

	if (temp != '') text = text + 'AA<<' + temp + '>>';

	text = text + '>>';

	return text;
}
//==========================================================================================
//				pdfCatalog$outlinesText
//==========================================================================================
function pdfCatalog$outlinesText()
{
	var text,index,n,baseIndex;

	baseIndex = this.pdf.index_();
	
	text = '<< /Type /Outlines ' + "\n";

	if (this.outlines.length > 0)
	{
		index = baseIndex;
		n = index + this.outlines[0].firstChild.index;
		text = text + '/First ' + n + ' 0 R' + "\n";
		n = index + this.outlines[0].lastChild.index;
		text = text + '/Last ' + n + ' 0 R' + "\n";
	}

	n = this.outlines.length-1;
	text = text + ' /Count ' + n + "\n" + '>>';
	return text;
}
//==========================================================================================
//				pdfCatalog$pagesText
//==========================================================================================
function pdfCatalog$pagesText()
{
	var text,index,i,j;

	index = this.pdf.index_() + 1;
	
	text = '<< /Type /Pages ' + "\n";

	j = index;
	text = text + '/Kids [ ';

	for (i = 0; i < this.pages.length; ++i)
	{
			text = text + j + ' 0 R ';
			this.pdf.lastPage = j;
			this.pages[i].ref = j;
			j = j + 1 + (this.pages[i].objectCount());
	}
	text = text + ' ]' + "\n";

	text = text + '/Count ' + this.pages.length + "\n" + '>>';
	return text;
}
//==========================================================================================
//				pdfFont$ (Constructor)
//==========================================================================================
function pdfFont$(index,name,mode,encoding)
{
	var i,text,C,B,fname,dx,encode,cname,fontname;

	name = name.toLowerCase();
	if (arguments.length < 4) encoding = '';
	encoding = encoding.toLowerCase();
	
	encode = 'WinAnsiEncoding';
	if (encoding ==  'standard') encode = 'StandardEncoding';
	if (encoding ==  'macroman') encode = 'MacRomanEncoding';
	if (encoding == 'macexpert') encode = 'MacExpertEncoding';
	if (encoding ==    'pdfdoc') encode = 'PDFDocEncoding';
	if (encoding ==   'winansi') encode = 'WinAnsiEncoding';

	this.index	= parseInt(index);
	this.name	= name;
	this.encoding	= encoding;
	this.mode	= mode;
	this.type	= 'adobe';
	this.mode	= mode.toLowerCase();
	this.id		= this.name + ',' + this.encoding.toLowerCase();
	this.mapping	= null;

	this.font_widths = new Array();

	if (this.name == 'times')
	{
	
	this.font_widths = new Array(531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,
		531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,253,
		335,409,503,503,835,2,179,333,333,501,565,251,338,250,280,501,501,
		501,501,501,501,501,501,501,501,276,276,0,566,566,444,927,726,669,
		669,727,612,559,727,727,333,389,726,614,896,729,727,558,727,671,559,
		614,727,727,952,726,726,614,331,276,331,464,512,333,444,501,444,501,
		446,335,503,503,278,278,503,278,784,503,503,503,503,333,391,278,503,
		503,747,504,504,446,0,0,483,545,350,503,350,333,503,446,1009,503,
		503,335,995,561,335,897,350,616,350,350,333,333,446,446,350,503,1011,
		335,989,389,335,727,352,446,727,242,335,503,503,503,503,198,503,335,
		766,276,503,568,335,766,333,402,568,301,301,317,513,455,250,333,299,
		312,503,756,756,756,446,727,727,727,727,727,727,897,673,616,616,616,
		616,335,335,335,335,727,727,727,727,727,727,727,568,727,727,727,727,
		727,727,559,503,448,448,448,448,448,673,444,444,0,1227,444,444,278,
		278,278,278,503,503,503,503,503,503,503,570,503,503,503,503,503,503,
		503,503);
	}
	

	 if (this.name == 'helvetica')
	 {
	 this.font_widths = new Array(750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,
			750,750,750,750,750,750,750,750,750,750,750,750,
			750,750,278,278,355,556,556,889,667,191,333,333,
			389,584,278,333,278,278,556,556,556,556,556,556,556,556,556,556,278,278,584,584,584,556,
			1015,667,667,722,722,667,611,778,722,278,500,667,556,833,722,778,667,778,722,667,611,722,
			667,944,667,667,611,278,278,278,469,556,333,556,556,500,556,556,278,556,556,222,222,500,
			222,833,556,556,556,556,333,500,278,556,500,722,500,500,500,334,260,334,584,750,556,750,
			222,556,333,1000,556,556,333,1000,667,333,1000,750,611,750,750,222,222,333,333,350,556,
			1000,333,1000,500,333,944,750,500,667,278,333,556,556,556,556,260,556,333,737,370,556,
			584,333,737,552,400,549,333,333,333,576,537,278,333,333,365,556,834,834,834,611,667,667,
			667,667,667,667,1000,722,667,667,667,667,278,278,278,278,722,722,778,778,778,778,778,584,
			778,722,722,722,722,667,667,611,556,556,556,556,556,556,889,500,556,556,556,556,278,278,
			278,278,556,556,556,556,556,556,556,549,611,556,556,556,556,500,556,500);
	}

	fontname = this.name;

	if (this.name == 'courier')
	{
		this.font_widths = new Array();
		for (i=0; i < 256; ++i) this.font_widths[i] = 600;
	}

	if (this.name == 'zapfdingbats')
	{
		fontname = 'ZapfDingbats';
		this.font_widths = new Array();
		for (i=0; i < 256; ++i) this.font_widths[i] = 900;
	}

	if (this.name == 'symbol')
	this.font_widths = new Array(
		255,255,255,255,255,255,255,255,255,255,
		255,255,255,255,255,255,255,255,255,255,
		255,255,255,255,255,255,255,255,255,255,
		600,600,250,333,713,500,549,833,778,439,333,333,500,549,250,549,
		250,278,500,500,500,500,500,500,500,500,500,500,278,278,549,549,549,444,
		549,722,667,722,612,611,763,603,722,333,631,722,686,889,722,722,768,741,
		556,592,611,690,439,768,645,795,611,333,863,333,658,500,500,631,549,549,
		494,439,521,411,603,329,603,549,549,576,521,549,549,521,549,603,439,576,
		713,686,493,686,494,480,200,480,549,600,600,600,600,600,600,600,600,600,
		600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,
		600,600,600,600,600,600,600,620,247,549,167,713,500,753,753,753,753,1042,
		987,603,987,603,400,549,411,549,549,713,494,460,549,549,549,549,1000,603,
		1000,658,823,686,795,987,768,768,823,768,768,713,713,713,713,713,713,713,
		768,713,790,790,890,823,549,250,713,603,603,1042,987,603,987,603,494,329,
		790,790,786,713,384,384,384,384,384,384,494,494,494,494,600,329,274,686,
		686,686,384,384,384,384,384,384,494,494,494,600);

	cname = this.mode;
	if (cname.indexOf('bold') >= 0)
	{
		dx = 0;
		if (this.name == 'times') dx = 23;
		if (this.name == 'courier') dx = 0;
		if (this.name == 'helvetica') dx = 36;
		for (i=0; i < this.font_widths.length; ++i)
		{
			this.font_widths[i] += dx;		// bold / bold Italic spacing
		}
	}

//--------------------- Template --------------------------

	C = '';
	B = 'Italic';
	if (this.name != 'times') B = 'Oblique';
	
	if (this.mode == 'bold') C = '-Bold'; 
	if (this.mode == 'italic') C = '-' + B; 
	if (this.mode == 'bolditalic') C = '-Bold' + B; 

	text = '<< /Type /Font' + "\n";
	text = text + '/Subtype /TrueType' + "\n";
	text = text + '/Name /F' + this.index + '' + "\n";

	fname = fontname.substr(0,1).toUpperCase() + fontname.substr(1) + C;
	if (fname == 'Times') fname = 'Times-Roman';
	text = text + '/BaseFont /' + fname + "\n";
	
	text = text + '/Encoding /' + encode + "\n";
	text = text + '/FirstChar  0' + "\n";
	text = text + '/LastChar 255' + "\n";
//	text = text + '/Widths [ ' + this.font_widths.join(' ') + ' ]' + "\n";
	text = text + '>>';

	this.template_font	= text;
	
	this.template_fontDescriptor = '';
	this.template_descendantFont = '';
	this.template_cmap  = '';
	
	this.used		= false;
	this.widths		= pdfFont$widths;
}
//==========================================================================================
//				pdfFont$widths
//==========================================================================================
function pdfFont$widths(c,size)
{
	var width;

	if (isNaN(size)) size = 12;

	if (c < 0 || c >= this.font_widths.length ) return size;

	width = this.font_widths[c];
	if (isNaN(width)) return size;
	
	width = width / 1000;
	width = width * size;
	return width;
}
//==========================================================================================
//				pdfRuler$
//  (see also: Collins Software HTML Ruler component)
//------------------------------------------------------------------------------------------
//
//   a ruler sets the left and right margins and 0 or more tab stops.
//   positions are in inches. 
//
//	   first value = left margin
//	   last value = right margin
//	   values (2 .. n-1) = tab stops
//
//	    no prefix = left justify (same as "L")  
//	   "L" prefix = left justified at the tab position
//	   "C" prefix = center              "
//	   "P" prefix = period              "
//	   "R" prefix = right               "
//	   "B" prefix = Column Break Buffered (row ordered)
//	   "N" prefix = Column Break Not-Buffered (column Ordered)
//	 
//	    no suffix = truncate (same as "T")
//	   "W" suffix = wrap text within tab box, forces a pageBreak to keep together (not valid for "P" prefix)
//	   "T" suffix = truncate text within tab box
//	   "D" suffix = truncate text and adds 3 dots "..." within tab box
//
//	example: "1,3,5,7.5"
//		left margin = 1", right margin = 7.5", tab stops at 3" and 5"
//
//	example: "1,C5,P7,7.5"
//		first tab centers text at 5", second tab justifies text at a decimal place at 7"
//				
//	example: "1W,C3W,6T,7.5"
//		wrap text up to first tab, first tab center wraps text at 3" to 6", second tab truncates text 6 to 7.5"
//
//	example: "1,B3,B5,7.5"
//		3 row ordered columns of text at 1-3, 3-5, and 5-7.5
//				
//==========================================================================================
function pdfRuler$(pdf,ruler,borderWidth,tabCharacter,leftMargin)
{
	var width;
	this.pdf = pdf;

	width = 1;
	if (arguments.length > 2) width = parseFloat(borderWidth);
	if (isNaN(width)) width = 0;
	this.borderWidth = width;	

	this.tabCharacter = "\t";
	if (arguments.length > 3) this.tabCharacter = tabCharacter;
 
	this.marginLeft     = parseFloat(leftMargin);
	if (arguments.length > 4) this.marginLeft = parseFloat(leftMargin) * 72;
	this.marginRight	= this.pdf.pageWidth;

	this.xpad		= 0.05 * 72;
	this.ypad		= 0;
	this.rows		= 0;
	this.valign		= 'top';
	this.curColumn		= 0;
	this.columns		= 1;
	this.buffered		= false;

//------------------ public ----------

	this.addRow		= pdfRuler$addRow;
	this.addText		= pdfRuler$addText;
	this.addHeader		= pdfRuler$addHeader;
	this.end		= pdfRuler$end;
	this.setValign		= pdfRuler$setValign;

//---------------- private ----------

	this.getColumnText_	= pdfRuler$getColumnText_;
	this.getColumnText_A	= pdfRuler$getColumnText_A;
	this.parse_		= pdfRuler$parse_;
	this.parse_A		= pdfRuler$parse_A;
	this.fit_		= pdfRuler$fit_;
	this.xpos_		= pdfRuler$xpos_;
	this.ypos_		= pdfRuler$ypos_;
	this.addRow_A		= pdfRuler$addRow_A;
	this.flush_		= pdfRuler$flush_;
	this.addHeaderRow_	= pdfRuler$addHeaderRow_;
	this.end_A		= pdfRuler$end_A;
	
	this.parse_(ruler);
}
//==========================================================================================
//				pdfRuler$setVailgn
//==========================================================================================
function pdfRuler$setValign(valign)
{
	valign = valign.toLowerCase();
	if (valign ==    'top') this.valign = 'top';
	if (valign ==      't') this.valign = 'top';
	if (valign ==      'm') this.valign = 'middle';
	if (valign == 'middle') this.valign = 'middle';
	if (valign ==      'b') this.valign = 'bottom';
	if (valign == 'bottom') this.valign = 'bottom';
}
//==========================================================================================
//				pdfRuler$addHeader
//==========================================================================================
function pdfRuler$addHeader(values)
{
	this.header = true;
	this.addHeaderRow_(values);
	this.header = false;
}
//==========================================================================================
//				pdfRuler$ypos_
//==========================================================================================
function pdfRuler$ypos_(ypos,lines,maxLines)
{
	var dy;

	if (lines >= maxLines) return ypos;
	dy = maxLines - lines;
	dy = dy * this.pdf.charHeight();

	switch (this.valign)
	{
	case "middle": return (ypos - (dy / 2));		
	case "bottom": return (ypos - dy);
	      default: return ypos;
	}

	return ypos;
}
//==========================================================================================
//				pdfRuler$flush_(row)
//==========================================================================================
function pdfRuler$flush_(rows)
{
	var i,row,cont;

	if (rows.length == 0) return;

	this.pdf.reportHeader_(rows[0]);		// continuation headers;

	for (i=0; i < rows.length; ++i)
	{
		this.pdf.setReportGroup_(rows[i]);
		this.addRow_A(rows[i].columns,rows[i].maxLines,rows[i].index);
	}
}
//==========================================================================================
//				pdfRuler$addText
//==========================================================================================
function pdfRuler$addText(text)
{
	var list,maxLines,obj,temp;
	var columns,i,rows,col;

	list = text.split(this.tabCharacter);
	
	columns = new Array();
	maxLines = 1;

//--------- wrap / truncate text at all columns ------

	for (i=0; i < this.tabs.length-1; ++i)
	{
		temp = '';
		if (i < list.length) temp = '' + list[i];
		columns[i] = this.getColumnText_(i,temp);
		col = columns[i];
		if (col.length > maxLines) maxLines = col.length;
	}
	
	this.addRow_A(columns,maxLines,0);
}
//==========================================================================================
//				pdfRuler$addRow
//==========================================================================================
function pdfRuler$addRow(list)
{
	var maxLines,obj,temp;
	var columns,i,rows,ymin,n,col;
	
	columns = new Array();
	maxLines = 1;

try
{
//--------- wrap / truncate text at all columns ------

	for (i=0; i < this.tabs.length-1; ++i)
	{
		temp = '';
		if (i < list.length) temp = '' + list[i];
		columns[i] = this.getColumnText_(i,temp);
		col = columns[i];
		if (col.length > maxLines) maxLines = col.length;
	}

//----------- Keep together on Page -------------

	rows = this.pdf.reportKeepTogether_(columns,maxLines);

	if (rows == null) return;
	if (rows.length == 0) return;
	
	this.pdf.reportHeader_(rows[0]);		// continuation headers;

	for (i=0; i < rows.length; ++i)
	{
		this.pdf.setReportGroup_(rows[i]);
		ymin = this.pdf.ypos - this.pdf.charHeight();
		if (ymin < this.pdf.ymin) this.pdf.pageBreak();
		
		this.addRow_A(rows[i].columns,rows[i].maxLines,rows[i].index);
	}

	n = rows.length;
	if (! rows[n-1].pageBreakAfter)  return;
	this.pdf.pageBreak();
}
catch (e) { }
		
}
//==========================================================================================
//				pdfRuler$addHeaderRow_
//==========================================================================================
function pdfRuler$addHeaderRow_(list)
{
	var maxLines,obj,temp;
	var columns,i,rows,n,col;
	
	columns = new Array();
	maxLines = 1;

//--------- wrap / truncate text at all columns ------

	for (i=0; i < this.tabs.length-1; ++i)
	{
		temp = '';
		if (i < list.length) temp = '' + list[i];
		columns[i] = this.getColumnText_(i,temp);
		col = columns[i];
		if (col.length > maxLines) maxLines = col.length;
	}

	this.addRow_A(columns,1,0);
	
}
//==========================================================================================
//				pdfRuler$addRow_A
//==========================================================================================
function pdfRuler$addRow_A(columns,maxLines,idx)
{
	var list,maxLines,obj,temp;
	var columns,i,j,n,cell,first,ypos;
	var save_xpos,save_ypos,ymax,ymin;
	var dx,dy,x1,y1,x2,y2,charHeight;
	
	save_ypos = this.pdf.ypos;
	charHeight = this.pdf.charHeight();

	ypos = save_ypos - ((maxLines-0) * charHeight);
	if (ypos < this.pdf.ymin) this.pdf.pageBreak();

	save_ypos = this.pdf.ypos;

//------------------------ header Background ------------------------

	if (this.header)
	{
		this.pdf.setGraphicFillColor('PowderBlue');
		x1 = this.marginLeft;
		y1 = save_ypos - ((this.pdf.charHeight() / 72) * 10);
		x2 = this.marginRight;
		y2 = y1 - (maxLines * charHeight);
	 
		this.pdf.drawRectangle_A(x1,y1,x2,y2,0.9);
		this.pdf.setGraphicColor('black');
	}

//------------ output Columns -------------

	ymin = save_ypos - this.pdf.charHeight();
	
	for (i=0; i < columns.length; ++i)	
	{

		cell = columns[i];
		ypos = this.ypos_(save_ypos,cell.length,maxLines);
		for (j = 0; j < cell.length; ++j)
		{
			obj = cell[j];
			this.pdf.xpos = obj.xpos;
			this.pdf.ypos = ypos - (j * charHeight);
			if (this.pdf.ypos < this.pdf.ymin) continue;  // ran out of page...

			this.pdf.fontColor	= obj.fontColor;
			this.pdf.fontSize	= obj.fontSize;
			this.pdf.bold		= obj.bold;
			this.pdf.italic		= obj.italic;
			this.pdf.underline	= obj.underline;

			this.pdf.put_(obj.text,obj.width,0);
		}
	}

	this.rows = this.rows + 1;
	this.pdf.line = this.pdf.line + maxLines;
	this.pdf.xpos = this.pdf.xmin;

	this.pdf.ypos = save_ypos - (maxLines * charHeight);

//------------------------- Border -------------------

	if (this.borderWidth <= 0) return;

	dy = this.pdf.fontSize / 72 * 15;
	x1 = this.marginLeft;
	y1 = save_ypos - dy;
	x2 = this.marginRight;
	y2 = y1;
	this.pdf.setGraphicLineWeight(this.borderWidth);
	this.pdf.plot.line(x1,y1,x2,y2);

	for (i=0; i < this.tabs.length; ++i)
	{
		x1 = this.tabs[i].position;
		x2 = x1;

		y1 = save_ypos - ((this.pdf.charHeight() / 72) * 10);
		y2 = y1 - ((maxLines * this.pdf.charHeight()) + dy);

		this.pdf.plot.line(x1,y1,x2,y2);
	}
}
//==========================================================================================
//				pdfRuler$end
//==========================================================================================
function pdfRuler$end()
{
	this.end_A();
	this.pdf.xmin = this.pdf.marginLeft;
	this.pdf.xmax = this.pdf.marginRight;
}
//==========================================================================================
//				pdfRuler$end_A
//==========================================================================================
function pdfRuler$end_A()
{
	var x1,y1,x2,y2;
	var dy;

	if (this.rows <= 0) return;
	this.rows = 0;

	if (this.borderWidth <= 0) return;
	
	dy = this.pdf.fontSize / 72 * 15;
	x1 = this.marginLeft;
	y1 = this.pdf.ypos - (dy + 2);
	x2 = this.marginRight;
	y2 = y1;
	this.pdf.setGraphicLineWeight(this.borderWidth);
	this.pdf.plot.line(x1,y1,x2,y2);
	
	this.pdf.ypos -= 2;

}
//==========================================================================================
//				pdfRuler$getColumnText_
//==========================================================================================
function pdfRuler$getColumnText_(index,text)
{
	var a,x,width,offset,i,j;
	var tab,index,list,obj,lines,n;
	
	list = new Array();

	n = this.tabs.length;
	if (index > (n-2))
	{
		 return list;
	}

	lines = text.split("\r\n");
	for (i=0; i < lines.length; ++i)
	{
		a = this.getColumnText_A(index,lines[i]);
		for (j=0; j < a.length; ++j)
		{
			list[list.length] = a[j];
		}
	}

	return list;
}
//==========================================================================================
//				pdfRuler$getColumnText_A
//==========================================================================================
function pdfRuler$getColumnText_A(index,text)
{
	var a,x,width,offset;
	var tab,index,list,obj,n;
	
	list = new Array();
	
	n = this.tabs.length-2;
	if (index > n) return list;
	tab = this.tabs[index];

	this.pdf.fontColor	= tab.fontColor;
	this.pdf.fontSize	= tab.fontSize;
	this.pdf.bold		= tab.bold;
	this.pdf.italic		= tab.italic;
	this.pdf.underline	= tab.underline;

	if ((! this.header) && (tab.prefix == 'P'))
	{
		i = text.lastIndexOf('.');
		if (i < 0) i = text.length;
		a = text.substr(0,i);
		width = this.pdf.width_(a);
		obj = new Object();
		obj.text = text;
		obj.xpos = tab.position - width;
		obj.width = this.pdf.width_(text);

		obj.fontColor  = tab.fontColor;	
		obj.fontSize   = tab.fontSize;	
		obj.bold	   = tab.bold;	
		obj.italic     = tab.italic;
		obj.underline  = tab.underline;

		if (obj.xpos < this.pdf.xpos) obj.xpos = this.pdf.xpos;

		list[0] = obj;
		return list;
	}

	list = this.fit_(list,tab,text);
	return list;

}
//==========================================================================================
//				pdfRuler$xpos_
//==========================================================================================
function pdfRuler$xpos_(tab,width)
{
	var x,prefix;
	
	prefix = tab.prefix;
	if (this.header) prefix = 'C';

	x = tab.position + this.xpad;
	if (prefix == 'R') x = ((tab.position + tab.size) - width) - this.xpad;
	if (prefix == 'C') x = (tab.position + (tab.size / 2)) - (width / 2);
	return x;
}
//==========================================================================================
//				pdfRuler$fit_
//==========================================================================================
function pdfRuler$fit_(list,tab,text)
{
	var obj,list,width,dots,dotSize;
	var word_nt,word_width,twidth,i,j,k;

//	if (text.length == 0) return list;
	width = this.pdf.width_(text);

	if (width <= tab.size)
	{
		obj = new Object();
		obj.xpos	= this.xpos_(tab,width);
		obj.width	= width;
		obj.text	= text;

		obj.fontColor	= tab.fontColor;	
		obj.fontSize	= tab.fontSize;	
		obj.bold	= tab.bold;	
		obj.italic	= tab.italic;
		obj.underline	= tab.underline;

		list[list.length] = obj;
		return list;
	}

	dotSize = 0;
	dots = '';

	switch (tab.suffix)
	{
	case 'D':
		dotSize = this.pdf.charWidth(46) * 3;
		dots = '...';

	case 'T':
		width = 0;
		for (i =0; i < text.length; ++i)
		{
			c = text.charCodeAt(i);
			twidth = width + this.pdf.charWidth(c);
			if (twidth > (tab.size - dotSize))
			{
				obj = new Object();
				obj.xpos = this.xpos_(tab,width + dotSize);
				obj.text = text.substr(0,i-1) + dots;
				obj.width = width + dotSize;
				obj.fontColor	= tab.fontColor;	
				obj.fontSize	= tab.fontSize;	
				obj.bold	= tab.bold;	
				obj.italic	= tab.italic;
				obj.underline	= tab.underline;

				list[list.length] = obj;
				return list;
			}
			width = twidth;
		}	

		return list;  // should never get here...
		
	case 'W':
		width = 0;
		word_nt = 0;
		word_width = 0;
		for (i = 0; i < text.length; ++i)
		{
			c = text.charCodeAt(i);
			twidth = width + this.pdf.charWidth(c);
			if (twidth > tab.size)
			{
				j = i;
				k = j;
				if (word_nt > 0)
				{
					 j = word_nt;
					 k = j + 1;
					 width = word_width;
				}
				if (j == 0) return list; // must have 1 char;	
				
				obj = new Object();
				obj.xpos	= this.xpos_(tab,width);
				obj.text	= text.substr(0,j);
				obj.width	= width;
				obj.fontColor	= tab.fontColor;	
				obj.fontSize	= tab.fontSize;	
				obj.bold	= tab.bold;	
				obj.italic	= tab.italic;
				obj.underline	= tab.underline;

				list[list.length] = obj;
				list = this.fit_(list,tab,text.substr(k));
				return list;
			}	
			
			width = twidth;
			if (! this.pdf.charVisible(c)) 
			{
				word_nt = i;
				word_width = width;
			}
		}	

		return list;  // should never get here...	
	}
	
	return list;
}
//==========================================================================================
//				pdfRuler$parse_
//==========================================================================================
function pdfRuler$parse_(ruler)
{

	this.marginLeft = 0;
	this.marginRight = this.pdf.pageWidth * 72;	// right margin;

	this.parse_A(ruler);

	this.pdf.setMarginRight(this.marginRight / 72);
	this.pdf.setMarginLeft(this.marginLeft / 72);
}
//==========================================================================================
//				pdfRuler$parse_Column
//==========================================================================================
function pdfRuler$parse_Column(columns)
{
	var list,x;
	var prefix,suffix,tab,i,text,c;

	this.tabs = new Array();
	if (ruler == '') return;

	list = columns.split(',');

//----------- Tab Stops ----------------
	
	pos = this.marginLeft;

	tab = new Object();
	tab.width	= pos;
	tab.size	= tab.width;
	tab.pos		= pos;

	tab.fontColor	= this.pdf.fontColor;
	tab.fontSize	= this.pdf.fontSize;
	tab.bold	= false;
	tab.italic	= false;
	tab.underline	= false;
	this.tabs[this.tabs.length] = tab;	

	for (i=0; i < list.length; ++i)
	{	
		prefix = '';
		suffix = 'T';
		text = list[i];
		if (text == '') continue;
		c = text.substr(text.length-1);
		c = c.toUpperCase();
		if (isNaN(c))
		{
			if (c == 'T') suffix = 'T';	// truncate
			if (c == 'W') suffix = 'W';	// wrap
			if (c == 'D') suffix = 'D';	// truncate (with dots...)
			text = text.substr(0,text.length-1);
		}	
		if (isNaN(text))
		{
			prefix = text.substr(0,1);
			prefix = prefix.toUpperCase();
			text = text.substr(1);
		}
		if (isNaN(text)) continue;
		x = parseFloat(text);
		if (x < this.marginLeft) continue;
		if (x > this.marginRight) continue;

		tab = new Object();
		tab.position = pos + this.xpad;
		tab.prefix = prefix;
		tab.suffix = suffix;
		
		tab.width	= x * 72;
		tab.size	= tab.width - (this.xpad * 2);
		pos += tab.width;

		tab.fontColor	= this.pdf.fontColor;
		tab.fontSize	= this.pdf.fontSize;
		tab.bold	= false;
		tab.italic	= false;
		tab.underline	= false;

		this.tabs[this.tabs.length] = tab;		
	}

//----------- Left / Right Margins ----------------
	
	this.marginRight = pos;

	tab = new Object();
	tab.width	= 0;
	tab.size	= 0;
	tab.position	= pos;

	tab.fontColor	= this.pdf.fontColor;
	tab.fontSize	= this.pdf.fontSize;
	tab.bold	= false;
	tab.italic	= false;
	tab.underline	= false;
	this.tabs[this.tabs.length] = tab;	

}
//==========================================================================================
//			pdfRuler$parse_A
//==========================================================================================
function pdfRuler$parse_A(ruler)
{
	var list,x,tab;
	var prefix,suffix,tab,i,text,c;

	this.tabs = new Array();
	if (ruler == '') return;

	list = ruler.split(',');
	if (list.length < 2) return;

//----------- Tab Stops ----------------
	
	for (i=0; i < list.length; ++i)
	{	
		prefix = '';
		suffix = 'T';
		text = list[i];
		if (text == '') continue;
		c = text.substr(text.length-1);
		c = c.toUpperCase();
		if (isNaN(c))
		{
			if (c == 'T') suffix = 'T';	// truncate
			if (c == 'W') suffix = 'W';	// wrap
			if (c == 'D') suffix = 'D';	// truncate (with dots...)
			text = text.substr(0,text.length-1);
		}	
		if (isNaN(text))
		{
			prefix = text.substr(0,1);
			prefix = prefix.toUpperCase();
			text = text.substr(1);
		}
		if (isNaN(text)) continue;
		x = parseFloat(text);
		if (x < this.marginLeft) continue;
		if (x > this.marginRight) continue;

		tab = new Object();
		tab.position = x * 72;
		tab.prefix = prefix;
		tab.suffix = suffix;
		if (prefix == 'B') this.columns = this.columns + 1;

		tab.size   = 0;

		tab.fontColor	= this.pdf.fontColor;
		tab.fontSize	= this.pdf.fontSize;
		tab.bold	= false;
		tab.italic	= false;
		tab.underline	= false;

		this.tabs[i] = tab;		
	}	

//----------- Left / Right Margins ----------------
	
	this.marginLeft = this.tabs[0].position;
	this.marginRight = this.tabs[this.tabs.length-1].position;

	for (i=0; i < (list.length-1); ++i)
		this.tabs[i].size = (this.tabs[i+1].position - this.tabs[i].position) - (this.xpad * 2);

	text = '';
	for (i=0; i < this.tabs.length; ++i)
	{
		text = text + i + ') tab size: ' + this.tabs[i].size + ' prefix: ' + this.tabs[i].prefix + ' suffix: ' + this.tabs[i].suffix +
			' pos: ' + this.tabs[i].position + "<br>\r" + "\n";
	}
}
//====================================================================================
//				pdfServer$
//====================================================================================
function pdfServer$(pdf)
{

	this.receiver = './CollinsPdf.asp';			// Define Location of Receiver ASP
	this.bufferSize = 10 * 1024;				// send file in blocks of this buffer size
	this.uploadSizeLimit = 80 * 1024 * 1024;	// 80MB Size Limitation
	this.pdf = pdf;

	this.uploadStream	= pdfServer$uploadStream;
	this.uploadStream_A	= pdfServer$uploadStream_A;
	this.uploadFile	= pdfServer$uploadFile;
	this.extractFileName	= pdfServer$extractFileName;
}
//====================================================================================
//				pdfServer$extractFileName
//====================================================================================
function pdfServer$extractFileName(filename)
{
	var j,i;
	
	if (filename == '') return '';
	i = filename.lastIndexOf('\\');
	j = filename.lastIndexOf('/');
	if (j > i) i = j;
	if (i < 0) return filename;
	return filename.substr(i+1);
}
//====================================================================================
//				pdfServer$uploadStream
//====================================================================================
function pdfServer$uploadStream(stream,filename)
{
	return this.pdf.sys.updateStream(this,stream,filename);
}
//====================================================================================
//				pdfServer$uploadStream_A
//====================================================================================
function pdfServer$uploadStream_A(stream,first,size,filename,baseOffset)
{
	var remain,i,records,offset;
	var length,need,xml_dom,node,root;
	var xmldom_init;
	
	this.pdf.httpInit_();
	
	if (size <= 0) return true;
	
	records = Math.floor(size / this.bufferSize);
	remain = size - (records * this.bufferSize);
	if (remain > 0) records = records + 1;
	need = size;

	for (i = 0; i < records; ++i)
	{
		offset = baseOffset + (i * this.bufferSize);
		length = this.bufferSize;
		if (need < this.bufferSize) length = need;
		need = need - length;
	
		xml_dom = xmldom_init();
		xml_dom.loadXML('<?xml version="1.0" ?> <root/>');
		xml_dom.documentElement.setAttribute("xmlns:dt", "urn:schemas-microsoft-com:datatypes");

		root = xml_dom.documentElement;

		node = xml_dom.createElement("filename");
		node.dataType = "string";
		node.text = this.extractFileName(filename);
		root.appendChild(node);
	
		node = xml_dom.createElement("filesize");
		node.dataType = "string";
		node.text = stream.size;
		root.appendChild(node);
	
		node = xml_dom.createElement("length");
		node.dataType = "string";
		node.text = length;
		root.appendChild(node);
	
		node = xml_dom.createElement("part");
		node.dataType = "string";
		node.text = records - i;
		root.appendChild(node);
		
		node = xml_dom.createElement("offset");
		node.dataType = "string";
		node.text = offset;
		root.appendChild(node);
	
		node = xml_dom.createElement("records");
		node.dataType = "string";
		node.text = records;
		root.appendChild(node);

		node = xml_dom.createElement("file");
		node.dataType = "bin.hex";
//		stream.position = offset;	
		node.nodeTypedValue = stream.Read(length);
		root.appendChild(node);

		this.pdf.http.open("POST",this.receiver,false);
		this.pdf.http.setRequestHeader("Content-length", xml_dom.length); 
		this.pdf.http.send(xml_dom);

		if (this.pdf.http.responseText.indexOf('status=ok') < 0)
		{
			throw new Error(this.pdf.http.responseText);
			return false;
		}

	}

	return true;
}
//====================================================================================
//				pdfServer$uploadFile
//====================================================================================
function pdfServer$uploadFile(filename)
{
	return this.pdf.sys.uploadFile(this,filename);
}
//=======================================================================
//						pdf$toDataURL
//=======================================================================
function pdf$toDataURL()
{

	return 'data:application/pdf;base64,' + this.toBase64(this.data);

}
//=======================================================================
//						pdf$toBase64
//=======================================================================
function pdf$toBase64(data)
{
		var i,text;
		var c1, c2, c3;
		var e1, e2, e3, e4;
		var key;
		
		if (! data) data = this.data;
		
		key = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" + "abcdefghijklmnopqrstuvwxyz0123456789+/=";
		
		i = 0;
		text = '';
 
		while (i < data.length) 
		{

			c1 = data.buffer[i++];
			c2 = data.buffer[i++];
			c3 = data.buffer[i++];
 
			e1 = c1 >> 2;
			e2 = ((c1 & 3) << 4) | (c2 >> 4);
			e3 = ((c2 & 15) << 2) | (c3 >> 6);
			e4 = c3 & 63;
 
			if (isNaN(c2)) 
			{
				e3 = 64;
				e4 = 64;
			} 
			else 
			{
				if (isNaN(c3)) e4 = 64;
			}
 
			text += key.charAt(e1) + key.charAt(e2) +	key.charAt(e3) + key.charAt(e4);
		}
 
		return text;
}
//=======================================================================
//						pdf$utf8
//=======================================================================
function pdf$utf8(text)
{
		var data, i, c;

		text = text.replace(/\r\n/g,"\n");
		data = "";
 
		for (i = 0; i < this.data.length; ++i) 
		{
			c = text.charCodeAt(i);
 
			if (c < 128) 
			{			
				data += String.fromCharCode(c);
			}
			else 
			{
				if ((c > 127) && (c < 2048)) 
				{
					data += String.fromCharCode((c >> 6) | 192);
					data += String.fromCharCode((c & 63) | 128);
				}
				else 
				{
					data += String.fromCharCode((c >> 12) | 224);
					data += String.fromCharCode(((c >> 6) & 63) | 128);
					data += String.fromCharCode((c & 63) | 128);
				}
			}
		}
		return data;
}

//==========================================================================
//							pdfCharacterMap$ (constructor)
//==========================================================================
function pdfCharacterMap$(pdf,fontName)
{
	var name,i,j,ext,text;
	var defaultRange = '-115,-240,1151,1009';
	var defaultAscent = 739;
	var defaultDescent = -192;

	this.names = new Array();
	this.values = new Array();
	this.diff = new Array();

	this.pdf		= pdf;
	this.fontName	= fontName;

	name = fontName;
	i = name.lastIndexOf('/');
	j = name.lastIndexOf('\\');
	if (j > i) i = j;
	if (i > 0) name = name.substr(0,i);
	i = name.indexOf('.')
	
	text = '';
	if (i > 0)
	{
		 ext  = name.substr(i);
		 ext  = ext.toLowerCase();
		 name = name.substr(0,i);
		 if (ext == '.txt')
		 {
			i = lastIndexOf('_');
			name = name.substr(0,i);
			i = lastIndexOf('_');
			name = name.substr(0,i);
		 }
	}
	
	 this.fontName = name;
	 
//-------------- initialize --------------------------

	this.names[this.names.length] = 'STANDARD';
	this.diff[this.diff.length] = '';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x2019,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x2018,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x00D1,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x00A1,0x00A2,0x00A3,0x2044,0x00A5,0x0192,0x00A7,
    0x00A4,0x0027,0x201C,0x00AB,0x2039,0x203A,0xFB01,0xFB02,
    0x0000,0x2013,0x2020,0x2021,0x00B7,0x0000,0x00B6,0x2022,
    0x201A,0x201E,0x201D,0x00BB,0x2026,0x2030,0x0000,0x00BF,
    0x0000,0x0060,0x00B4,0x02C6,0x02DC,0x00AF,0x02D8,0x02D9,
    0x00A8,0x0000,0x02DA,0x00B8,0x0000,0x02DD,0x02DB,0x02C7,
    0x2014,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x00C6,0x0000,0x00AA,0x0000,0x0000,0x0000,0x0000,
    0x0141,0x00D8,0x0152,0x00BA,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x00E6,0x0000,0x0000,0x0000,0x0131,0x0000,0x0000,
    0x0142,0x00F8,0x0153,0x00DF,0x0000,0x0000,0x0000,0x0000);

	this.names[this.names.length] = 'WINANSI';
	this.diff[this.diff.length] = '';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
    0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x0000,
    0x20AC,0x0000,0x201A,0x0192,0x201E,0x2026,0x2020,0x2021,
    0x02C6,0x2030,0x0160,0x2039,0x0152,0x0000,0x017D,0x0000,
    0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,
    0x02DC,0x2122,0x0161,0x203A,0x0153,0x0000,0x017E,0x0178,
    0x0000,0x00A1,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,
    0x00A8,0x00A9,0x00AA,0x00AB,0x00AC,0x0000,0x00AE,0x00AF,
    0x02DA,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,
    0x00B8,0x00B9,0x00BA,0x00BB,0x00BC,0x00BD,0x00BE,0x00BF,
    0x00C0,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x00C7,
    0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF,
    0x00D0,0x00D1,0x00D2,0x00D3,0x00D4,0x00D5,0x00D6,0x00D7,
    0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x00DD,0x00DE,0x00DF,
    0x00E0,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x00E7,
    0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF,
    0x00F0,0x00F1,0x00F2,0x00F3,0x00F4,0x00F5,0x00F6,0x00F7,
    0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x00FD,0x00FE,0x00FF);

	this.names[this.names.length] = 'MACROMAN';
	this.diff[this.diff.length] = '';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
    0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x0000,
    0x00C4,0x00C5,0x00C7,0x00C9,0x0000,0x00D6,0x00DC,0x00E1,
    0x00E0,0x00E2,0x00E4,0x00E3,0x00E5,0x00E7,0x00E9,0x00E8,
    0x00EA,0x00EB,0x00ED,0x00EC,0x00EE,0x00EF,0x00F1,0x00F3,
    0x00F2,0x00F4,0x00F6,0x00F5,0x00FA,0x00F9,0x00FB,0x00FC,
    0x2020,0x00B0,0x00A2,0x00A3,0x00A7,0x2022,0x00B6,0x00DF,
    0x00AE,0x00A9,0x2122,0x00B4,0x00A8,0x0000,0x00C6,0x00D8,
    0x0000,0x00B1,0x0000,0x0000,0x00A5,0x00B5,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x00AA,0x00BA,0x0000,0x00E6,0x00F8,
    0x00BF,0x00A1,0x00AC,0x0000,0x0192,0x0000,0x0000,0x00AB,
    0x00BB,0x2026,0x0020,0x00C0,0x00C3,0x00D5,0x0152,0x0153,
    0x2013,0x2014,0x201C,0x201D,0x2018,0x2019,0x00F7,0x0000,
    0x00FF,0x0178,0x2044,0x00A4,0x2039,0x203A,0xFB01,0xFB02,
    0x2021,0x00B7,0x201A,0x201E,0x2030,0x00C2,0x00CA,0x00C1,
    0x00CB,0x00C8,0x00CD,0x00CE,0x00CF,0x00CC,0x00D3,0x00D4,
    0x0000,0x00D2,0x00DA,0x00DB,0x00D9,0x0131,0x02C6,0x02DC,
    0x00AF,0x02D8,0x02D9,0x02DA,0x00B8,0x02DD,0x02DB,0x02C7);

	this.names[this.names.length] = 'ISO8859-2';
	this.diff[this.diff.length] = '127 /.notdef 128 /.notdef 130 /.notdef 131 /.notdef 132 /.notdef 133 /.notdef 134 /.notdef 135 /.notdef 136 /.notdef 137 /.notdef 138 /.notdef 139 /.notdef 140 /.notdef 142 /.notdef 145 /.notdef 146 /.notdef 147 /.notdef 148 /.notdef 149 /.notdef 150 /.notdef 151 /.notdef 152 /.notdef 153 /.notdef 154 /.notdef 155 /.notdef 156 /.notdef 158 /.notdef 159 /.notdef 160 /space 161 /Aogonek 162 /breve 163 /Lslash 165 /Lcaron 166 /Sacute 169 /Scaron 170 /Scedilla 171 /Tcaron 172 /Zacute 173 /hyphen 174 /Zcaron 175 /Zdotaccent 176 /degree 177 /aogonek 178 /ogonek 179 /lslash 181 /lcaron 182 /sacute 183 /caron 185 /scaron 186 /scedilla 187 /tcaron 188 /zacute 189 /hungarumlaut 190 /zcaron 191 /zdotaccent 192 /Racute 195 /Abreve 197 /Lacute 198 /Cacute 200 /Ccaron 202 /Eogonek 204 /Ecaron 207 /Dcaron 208 /Dcroat 209 /Nacute 210 /Ncaron 213 /Ohungarumlaut 216 /Rcaron 217 /Uring 219 /Uhungarumlaut 222 /Tcommaaccent 224 /racute 227 /abreve 229 /lacute 230 /cacute 232 /ccaron 234 /eogonek 236 /ecaron 239 /dcaron 240 /dcroat 241 /nacute 242 /ncaron 245 /ohungarumlaut 248 /rcaron 249 /uring 251 /uhungarumlaut 254 /tcommaaccent 255 /dotaccent';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
    0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x00A0,0x0104,0x02D8,0x0141,0x00A4,0x013D,0x015A,0x00A7,
    0x00A8,0x0160,0x015E,0x0164,0x0179,0x00AD,0x017D,0x017B,
    0x00B0,0x0105,0x02DB,0x0142,0x00B4,0x013E,0x015B,0x02C7,
    0x00B8,0x0161,0x015F,0x0165,0x017A,0x02DD,0x017E,0x017C,
    0x0154,0x00C1,0x00C2,0x0102,0x00C4,0x0139,0x0106,0x00C7,
    0x010C,0x00C9,0x0118,0x00CB,0x011A,0x00CD,0x00CE,0x010E,
    0x0110,0x0143,0x0147,0x00D3,0x00D4,0x0150,0x00D6,0x00D7,
    0x0158,0x016E,0x00DA,0x0170,0x00DC,0x00DD,0x0162,0x00DF,
    0x0155,0x00E1,0x00E2,0x0103,0x00E4,0x013A,0x0107,0x00E7,
    0x010D,0x00E9,0x0119,0x00EB,0x011B,0x00ED,0x00EE,0x010F,
    0x0111,0x0144,0x0148,0x00F3,0x00F4,0x0151,0x00F6,0x00F7,
    0x0159,0x016F,0x00FA,0x0171,0x00FC,0x00FD,0x0163,0x02D9);

	this.names[this.names.length] = 'ISO8859-3';
	this.diff[this.diff.length] = '127 /.notdef 128 /.notdef 130 /.notdef 131 /.notdef 132 /.notdef 133 /.notdef 134 /.notdef 135 /.notdef 136 /.notdef 137 /.notdef 138 /.notdef 139 /.notdef 140 /.notdef 142 /.notdef 145 /.notdef 146 /.notdef 147 /.notdef 148 /.notdef 149 /.notdef 150 /.notdef 151 /.notdef 152 /.notdef 153 /.notdef 154 /.notdef 155 /.notdef 156 /.notdef 158 /.notdef 159 /.notdef 160 /space 161 /Hbar 162 /breve 165 /.notdef 166 /Hcircumflex 169 /Idotaccent 170 /Scedilla 171 /Gbreve 172 /Jcircumflex 173 /hyphen 174 /.notdef 175 /Zdotaccent 176 /degree 177 /hbar 182 /hcircumflex 185 /dotlessi 186 /scedilla 187 /gbreve 188 /jcircumflex 190 /.notdef 191 /zdotaccent 195 /.notdef 197 /Cdotaccent 198 /Ccircumflex 208 /.notdef 213 /Gdotaccent 216 /Gcircumflex 221 /Ubreve 222 /Scircumflex 227 /.notdef 229 /cdotaccent 230 /ccircumflex 240 /.notdef 245 /gdotaccent 248 /gcircumflex 253 /ubreve 254 /scircumflex 255 /dotaccent';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
    0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x00A0,0x0126,0x02D8,0x00A3,0x00A4,0x0000,0x0124,0x00A7,
    0x00A8,0x0130,0x015E,0x011E,0x0134,0x00AD,0x0000,0x017B,
    0x00B0,0x0127,0x00B2,0x00B3,0x00B4,0x00B5,0x0125,0x00B7,
    0x00B8,0x0131,0x015F,0x011F,0x0135,0x00BD,0x0000,0x017C,
    0x00C0,0x00C1,0x00C2,0x0000,0x00C4,0x010A,0x0108,0x00C7,
    0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF,
    0x0000,0x00D1,0x00D2,0x00D3,0x00D4,0x0120,0x00D6,0x00D7,
    0x011C,0x00D9,0x00DA,0x00DB,0x00DC,0x016C,0x015C,0x00DF,
    0x00E0,0x00E1,0x00E2,0x0000,0x00E4,0x010B,0x0109,0x00E7,
    0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF,
    0x0000,0x00F1,0x00F2,0x00F3,0x00F4,0x0121,0x00F6,0x00F7,
    0x011D,0x00F9,0x00FA,0x00FB,0x00FC,0x016D,0x015D,0x02D9);

	this.names[this.names.length] = 'ISO8859-4';
	this.diff[this.diff.length] = '127 /.notdef 128 /.notdef 130 /.notdef 131 /.notdef 132 /.notdef 133 /.notdef 134 /.notdef 135 /.notdef 136 /.notdef 137 /.notdef 138 /.notdef 139 /.notdef 140 /.notdef 142 /.notdef 145 /.notdef 146 /.notdef 147 /.notdef 148 /.notdef 149 /.notdef 150 /.notdef 151 /.notdef 152 /.notdef 153 /.notdef 154 /.notdef 155 /.notdef 156 /.notdef 158 /.notdef 159 /.notdef 160 /space 161 /Aogonek 162 /kgreenlandic 163 /Rcommaaccent 165 /Itilde 166 /Lcommaaccent 169 /Scaron 170 /Emacron 171 /Gcommaaccent 172 /Tbar 173 /hyphen 174 /Zcaron 176 /degree 177 /aogonek 178 /ogonek 179 /rcommaaccent 181 /itilde 182 /lcommaaccent 183 /caron 185 /scaron 186 /emacron 187 /gcommaaccent 188 /tbar 189 /Eng 190 /zcaron 191 /eng 192 /Amacron 199 /Iogonek 200 /Ccaron 202 /Eogonek 204 /Edotaccent 207 /Imacron 208 /Dcroat 209 /Ncommaaccent 210 /Omacron 211 /Kcommaaccent 217 /Uogonek 221 /Utilde 222 /Umacron 224 /amacron 231 /iogonek 232 /ccaron 234 /eogonek 236 /edotaccent 239 /imacron 240 /dcroat 241 /ncommaaccent 242 /omacron 243 /kcommaaccent 249 /uogonek 253 /utilde 254 /umacron 255 /dotaccent';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
    0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x00A0,0x0104,0x0138,0x0156,0x00A4,0x0128,0x013B,0x00A7,
    0x00A8,0x0160,0x0112,0x0122,0x0166,0x00AD,0x017D,0x00AF,
    0x00B0,0x0105,0x02DB,0x0157,0x00B4,0x0129,0x013C,0x02C7,
    0x00B8,0x0161,0x0113,0x0123,0x0167,0x014A,0x017E,0x014B,
    0x0100,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x012E,
    0x010C,0x00C9,0x0118,0x00CB,0x0116,0x00CD,0x00CE,0x012A,
    0x0110,0x0145,0x014C,0x0136,0x00D4,0x00D5,0x00D6,0x00D7,
    0x00D8,0x0172,0x00DA,0x00DB,0x00DC,0x0168,0x016A,0x00DF,
    0x0101,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x012F,
    0x010D,0x00E9,0x0119,0x00EB,0x0117,0x00ED,0x00EE,0x012B,
    0x0111,0x0146,0x014D,0x0137,0x00F4,0x00F5,0x00F6,0x00F7,
    0x00F8,0x0173,0x00FA,0x00FB,0x00FC,0x0169,0x016B,0x02D9);

	this.names[this.names.length] = 'ISO8859-5';
	this.diff[this.diff.length] = '127 /.notdef 128 /.notdef 130 /.notdef 131 /.notdef 132 /.notdef 133 /.notdef 134 /.notdef 135 /.notdef 136 /.notdef 137 /.notdef 138 /.notdef 139 /.notdef 140 /.notdef 142 /.notdef 145 /.notdef 146 /.notdef 147 /.notdef 148 /.notdef 149 /.notdef 150 /.notdef 151 /.notdef 152 /.notdef 153 /.notdef 154 /.notdef 155 /.notdef 156 /.notdef 158 /.notdef 159 /.notdef 160 /space 161 /afii10023 162 /afii10051 163 /afii10052 164 /afii10053 165 /afii10054 166 /afii10055 167 /afii10056 168 /afii10057 169 /afii10058 170 /afii10059 171 /afii10060 172 /afii10061 173 /hyphen 174 /afii10062 175 /afii10145 176 /afii10017 177 /afii10018 178 /afii10019 179 /afii10020 180 /afii10021 181 /afii10022 182 /afii10024 183 /afii10025 184 /afii10026 185 /afii10027 186 /afii10028 187 /afii10029 188 /afii10030 189 /afii10031 190 /afii10032 191 /afii10033 192 /afii10034 193 /afii10035 194 /afii10036 195 /afii10037 196 /afii10038 197 /afii10039 198 /afii10040 199 /afii10041 200 /afii10042 201 /afii10043 202 /afii10044 203 /afii10045 204 /afii10046 205 /afii10047 206 /afii10048 207 /afii10049 208 /afii10065 209 /afii10066 210 /afii10067 211 /afii10068 212 /afii10069 213 /afii10070 214 /afii10072 215 /afii10073 216 /afii10074 217 /afii10075 218 /afii10076 219 /afii10077 220 /afii10078 221 /afii10079 222 /afii10080 223 /afii10081 224 /afii10082 225 /afii10083 226 /afii10084 227 /afii10085 228 /afii10086 229 /afii10087 230 /afii10088 231 /afii10089 232 /afii10090 233 /afii10091 234 /afii10092 235 /afii10093 236 /afii10094 237 /afii10095 238 /afii10096 239 /afii10097 240 /afii61352 241 /afii10071 242 /afii10099 243 /afii10100 244 /afii10101 245 /afii10102 246 /afii10103 247 /afii10104 248 /afii10105 249 /afii10106 250 /afii10107 251 /afii10108 252 /afii10109 253 /section 254 /afii10110 255 /afii10193';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
    0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x00A0,0x0401,0x0402,0x0403,0x0404,0x0405,0x0406,0x0407,
    0x0408,0x0409,0x040A,0x040B,0x040C,0x00AD,0x040E,0x040F,
    0x0410,0x0411,0x0412,0x0413,0x0414,0x0415,0x0416,0x0417,
    0x0418,0x0419,0x041A,0x041B,0x041C,0x041D,0x041E,0x041F,
    0x0420,0x0421,0x0422,0x0423,0x0424,0x0425,0x0426,0x0427,
    0x0428,0x0429,0x042A,0x042B,0x042C,0x042D,0x042E,0x042F,
    0x0430,0x0431,0x0432,0x0433,0x0434,0x0435,0x0436,0x0437,
    0x0438,0x0439,0x043A,0x043B,0x043C,0x043D,0x043E,0x043F,
    0x0440,0x0441,0x0442,0x0443,0x0444,0x0445,0x0446,0x0447,
    0x0448,0x0449,0x044A,0x044B,0x044C,0x044D,0x044E,0x044F,
    0x2116,0x0451,0x0452,0x0453,0x0454,0x0455,0x0456,0x0457,
    0x0458,0x0459,0x045A,0x045B,0x045C,0x00A7,0x045E,0x045F);

	this.names[this.names.length] = 'ISO8859-6';
	this.diff[this.diff.length] = '';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
    0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x00A0,0x0000,0x0000,0x0000,0x00A4,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x060C,0x00AD,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x061B,0x0000,0x0000,0x0000,0x061F,
    0x0000,0x0621,0x0622,0x0623,0x0624,0x0625,0x0626,0x0627,
    0x0628,0x0629,0x062A,0x062B,0x062C,0x062D,0x062E,0x062F,
    0x0630,0x0631,0x0632,0x0633,0x0634,0x0635,0x0636,0x0637,
    0x0638,0x0639,0x063A,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0640,0x0641,0x0642,0x0643,0x0644,0x0645,0x0646,0x0647,
    0x0648,0x0649,0x064A,0x064B,0x064C,0x064D,0x064E,0x064F,
    0x0650,0x0651,0x0652,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000);

	this.names[this.names.length] = 'ISO8859-7';
	this.diff[this.diff.length] = '';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
    0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x00A0,0x2018,0x2019,0x00A3,0x20AC,0x20AF,0x00A6,0x00A7,
    0x00A8,0x00A9,0x037A,0x00AB,0x00AC,0x00AD,0x0000,0x2015,
    0x00B0,0x00B1,0x00B2,0x00B3,0x0384,0x0385,0x0386,0x00B7,
    0x0388,0x0389,0x038A,0x00BB,0x038C,0x00BD,0x038E,0x038F,
    0x0390,0x0391,0x0392,0x0393,0x0394,0x0395,0x0396,0x0397,
    0x0398,0x0399,0x039A,0x039B,0x039C,0x039D,0x039E,0x039F,
    0x03A0,0x03A1,0x0000,0x03A3,0x03A4,0x03A5,0x03A6,0x03A7,
    0x03A8,0x03A9,0x03AA,0x03AB,0x03AC,0x03AD,0x03AE,0x03AF,
    0x03B0,0x03B1,0x03B2,0x03B3,0x03B4,0x03B5,0x03B6,0x03B7,
    0x03B8,0x03B9,0x03BA,0x03BB,0x03BC,0x03BD,0x03BE,0x03BF,
    0x03C0,0x03C1,0x03C2,0x03C3,0x03C4,0x03C5,0x03C6,0x03C7,
    0x03C8,0x03C9,0x03CA,0x03CB,0x03CC,0x03CD,0x03CE,0x0000);

	this.names[this.names.length] = 'ISO8859-8';
	this.diff[this.diff.length] = '';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
    0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x00A0,0x0000,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,
    0x00A8,0x00A9,0x00D7,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF,
    0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,
    0x00B8,0x00B9,0x00F7,0x00BB,0x00BC,0x00BD,0x00BE,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2017,
    0x05D0,0x05D1,0x05D2,0x05D3,0x05D4,0x05D5,0x05D6,0x05D7,
    0x05D8,0x05D9,0x05DA,0x05DB,0x05DC,0x05DD,0x05DE,0x05DF,
    0x05E0,0x05E1,0x05E2,0x05E3,0x05E4,0x05E5,0x05E6,0x05E7,
    0x05E8,0x05E9,0x05EA,0x0000,0x0000,0x200E,0x200F,0x0000);

	this.names[this.names.length] = 'ISO8859-9';
	this.diff[this.diff.length] = '127 /.notdef 128 /.notdef 130 /.notdef 131 /.notdef 132 /.notdef 133 /.notdef 134 /.notdef 135 /.notdef 136 /.notdef 137 /.notdef 138 /.notdef 139 /.notdef 140 /.notdef 142 /.notdef 145 /.notdef 146 /.notdef 147 /.notdef 148 /.notdef 149 /.notdef 150 /.notdef 151 /.notdef 152 /.notdef 153 /.notdef 154 /.notdef 155 /.notdef 156 /.notdef 158 /.notdef 159 /.notdef 160 /space 173 /hyphen 176 /degree 208 /Gbreve 221 /Idotaccent 222 /Scedilla 240 /gbreve 253 /dotlessi 254 /scedilla';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
    0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x00A0,0x00A1,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,
    0x00A8,0x00A9,0x00AA,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF,
    0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,
    0x00B8,0x00B9,0x00BA,0x00BB,0x00BC,0x00BD,0x00BE,0x00BF,
    0x00C0,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x00C7,
    0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF,
    0x011E,0x00D1,0x00D2,0x00D3,0x00D4,0x00D5,0x00D6,0x00D7,
    0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x0130,0x015E,0x00DF,
    0x00E0,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x00E7,
    0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF,
    0x011F,0x00F1,0x00F2,0x00F3,0x00F4,0x00F5,0x00F6,0x00F7,
    0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x0131,0x015F,0x00FF);

	this.names[this.names.length] = 'ISO8859-10';
	this.diff[this.diff.length] = '127 /.notdef 128 /.notdef 130 /.notdef 131 /.notdef 132 /.notdef 133 /.notdef 134 /.notdef 135 /.notdef 136 /.notdef 137 /.notdef 138 /.notdef 139 /.notdef 140 /.notdef 142 /.notdef 145 /.notdef 146 /.notdef 147 /.notdef 148 /.notdef 149 /.notdef 150 /.notdef 151 /.notdef 152 /.notdef 153 /.notdef 154 /.notdef 155 /.notdef 156 /.notdef 158 /.notdef 159 /.notdef 160 /space 161 /Aogonek 162 /Emacron 163 /Gcommaaccent 164 /Imacron 165 /Itilde 166 /Kcommaaccent 168 /Lcommaaccent 169 /Dcroat 170 /Scaron 171 /Tbar 172 /Zcaron 173 /hyphen 174 /Umacron 175 /Eng 176 /degree 177 /aogonek 178 /emacron 179 /gcommaaccent 180 /imacron 181 /itilde 182 /kcommaaccent 184 /lcommaaccent 185 /dcroat 186 /scaron 187 /tbar 188 /zcaron 189 /afii00208 190 /umacron 191 /eng 192 /Amacron 199 /Iogonek 200 /Ccaron 202 /Eogonek 204 /Edotaccent 209 /Ncommaaccent 210 /Omacron 215 /Utilde 217 /Uogonek 224 /amacron 231 /iogonek 232 /ccaron 234 /eogonek 236 /edotaccent 241 /ncommaaccent 242 /omacron 247 /utilde 249 /uogonek 255 /kgreenlandic';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
    0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x00A0,0x0104,0x0112,0x0122,0x012A,0x0128,0x0136,0x00A7,
    0x013B,0x0110,0x0160,0x0166,0x017D,0x00AD,0x016A,0x014A,
    0x00B0,0x0105,0x0113,0x0123,0x012B,0x0129,0x0137,0x00B7,
    0x013C,0x0111,0x0161,0x0167,0x017E,0x2015,0x016B,0x014B,
    0x0100,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x012E,
    0x010C,0x00C9,0x0118,0x00CB,0x0116,0x00CD,0x00CE,0x00CF,
    0x00D0,0x0145,0x014C,0x00D3,0x00D4,0x00D5,0x00D6,0x0168,
    0x00D8,0x0172,0x00DA,0x00DB,0x00DC,0x00DD,0x00DE,0x00DF,
    0x0101,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x012F,
    0x010D,0x00E9,0x0119,0x00EB,0x0117,0x00ED,0x00EE,0x00EF,
    0x00F0,0x0146,0x014D,0x00F3,0x00F4,0x00F5,0x00F6,0x0169,
    0x00F8,0x0173,0x00FA,0x00FB,0x00FC,0x00FD,0x00FE,0x0138);

	this.names[this.names.length] = 'ISO8859-11';
	this.diff[this.diff.length] = '';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
    0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x00A0,0x0E01,0x0E02,0x0E03,0x0E04,0x0E05,0x0E06,0x0E07,
    0x0E08,0x0E09,0x0E0A,0x0E0B,0x0E0C,0x0E0D,0x0E0E,0x0E0F,
    0x0E10,0x0E11,0x0E12,0x0E13,0x0E14,0x0E15,0x0E16,0x0E17,
    0x0E18,0x0E19,0x0E1A,0x0E1B,0x0E1C,0x0E1D,0x0E1E,0x0E1F,
    0x0E20,0x0E21,0x0E22,0x0E23,0x0E24,0x0E25,0x0E26,0x0E27,
    0x0E28,0x0E29,0x0E2A,0x0E2B,0x0E2C,0x0E2D,0x0E2E,0x0E2F,
    0x0E30,0x0E31,0x0E32,0x0E33,0x0E34,0x0E35,0x0E36,0x0E37,
    0x0E38,0x0E39,0x0E3A,0x0000,0x0000,0x0000,0x0000,0x0E3F,
    0x0E40,0x0E41,0x0E42,0x0E43,0x0E44,0x0E45,0x0E46,0x0E47,
    0x0E48,0x0E49,0x0E4A,0x0E4B,0x0E4C,0x0E4D,0x0E4E,0x0E4F,
    0x0E50,0x0E51,0x0E52,0x0E53,0x0E54,0x0E55,0x0E56,0x0E57,
    0x0E58,0x0E59,0x0E5A,0x0E5B,0x0000,0x0000,0x0000,0x0000);

	this.names[this.names.length] = 'ISO8859-13';
	this.diff[this.diff.length] = '.notdef 128 /.notdef 130 /.notdef 131 /.notdef 132 /.notdef 133 /.notdef 134 /.notdef 135 /.notdef 136 /.notdef 137 /.notdef 138 /.notdef 139 /.notdef 140 /.notdef 142 /.notdef 145 /.notdef 146 /.notdef 147 /.notdef 148 /.notdef 149 /.notdef 150 /.notdef 151 /.notdef 152 /.notdef 153 /.notdef 154 /.notdef 155 /.notdef 156 /.notdef 158 /.notdef 159 /.notdef 160 /space 161 /quotedblright 165 /quotedblbase 168 /Oslash 170 /Rcommaaccent 173 /hyphen 175 /AE 176 /degree 180 /quotedblleft 184 /oslash 186 /rcommaaccent 191 /ae 192 /Aogonek 193 /Iogonek 194 /Amacron 195 /Cacute 198 /Eogonek 199 /Emacron 200 /Ccaron 202 /Zacute 203 /Edotaccent 204 /Gcommaaccent 205 /Kcommaaccent 206 /Imacron 207 /Lcommaaccent 208 /Scaron 209 /Nacute 210 /Ncommaaccent 212 /Omacron 216 /Uogonek 217 /Lslash 218 /Sacute 219 /Umacron 221 /Zdotaccent 222 /Zcaron 224 /aogonek 225 /iogonek 226 /amacron 227 /cacute 230 /eogonek 231 /emacron 232 /ccaron 234 /zacute 235 /edotaccent 236 /gcommaaccent 237 /kcommaaccent 238 /imacron 239 /lcommaaccent 240 /scaron 241 /nacute 242 /ncommaaccent 244 /omacron 248 /uogonek 249 /lslash 250 /sacute 251 /umacron 253 /zdotaccent 254 /zcaron 255 /quoteright';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x00A0,0x201D,0x00A2,0x00A3,0x00A4,0x201E,0x00A6,0x00A7,
    0x00D8,0x00A9,0x0156,0x00AB,0x00AC,0x00AD,0x00AE,0x00C6,
    0x00B0,0x00B1,0x00B2,0x00B3,0x201C,0x00B5,0x00B6,0x00B7,
    0x00F8,0x00B9,0x0157,0x00BB,0x00BC,0x00BD,0x00BE,0x00E6,
    0x0104,0x012E,0x0100,0x0106,0x00C4,0x00C5,0x0118,0x0112,
    0x010C,0x00C9,0x0179,0x0116,0x0122,0x0136,0x012A,0x013B,
    0x0160,0x0143,0x0145,0x00D3,0x014C,0x00D5,0x00D6,0x00D7,
    0x0172,0x0141,0x015A,0x016A,0x00DC,0x017B,0x017D,0x00DF,
    0x0105,0x012F,0x0101,0x0107,0x00E4,0x00E5,0x0119,0x0113,
    0x010D,0x00E9,0x017A,0x0117,0x0123,0x0137,0x012B,0x013C,
    0x0161,0x0144,0x0146,0x00F3,0x014D,0x00F5,0x00F6,0x00F7,
    0x0173,0x0142,0x015B,0x016B,0x00FC,0x017C,0x017E,0x2019);

	this.names[this.names.length] = 'ISO8859-14';
	this.diff[this.diff.length] = '.notdef 128 /.notdef 130 /.notdef 131 /.notdef 132 /.notdef 133 /.notdef 134 /.notdef 135 /.notdef 136 /.notdef 137 /.notdef 138 /.notdef 139 /.notdef 140 /.notdef 142 /.notdef 145 /.notdef 146 /.notdef 147 /.notdef 148 /.notdef 149 /.notdef 150 /.notdef 151 /.notdef 152 /.notdef 153 /.notdef 154 /.notdef 155 /.notdef 156 /.notdef 158 /.notdef 159 /.notdef 160 /space 161 /.notdef 162 /.notdef 164 /Cdotaccent 165 /cdotaccent 166 /.notdef 168 /Wgrave 170 /Wacute 171 /.notdef 172 /Ygrave 173 /hyphen 175 /Ydieresis 176 /.notdef 177 /.notdef 178 /Gdotaccent 179 /gdotaccent 180 /.notdef 181 /.notdef 183 /.notdef 184 /wgrave 185 /.notdef 186 /wacute 187 /.notdef 188 /ygrave 189 /Wdieresis 190 /wdieresis 191 /.notdef 208 /Wcircumflex 215 /.notdef 222 /Ycircumflex 240 /wcircumflex 247 /.notdef 254 /ycircumflex ';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x00A0,0x1E02,0x1E03,0x00A3,0x010A,0x010B,0x1E0A,0x00A7,
    0x1E80,0x00A9,0x1E82,0x1E0B,0x1EF2,0x00AD,0x00AE,0x0178,
    0x1E1E,0x1E1F,0x0120,0x0121,0x1E40,0x1E41,0x00B6,0x1E56,
    0x1E81,0x1E57,0x1E83,0x1E60,0x1EF3,0x1E84,0x1E85,0x1E61,
    0x00C0,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x00C7,
    0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF,
    0x0174,0x00D1,0x00D2,0x00D3,0x00D4,0x00D5,0x00D6,0x1E6A,
    0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x00DD,0x0176,0x00DF,
    0x00E0,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x00E7,
    0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF,
    0x0175,0x00F1,0x00F2,0x00F3,0x00F4,0x00F5,0x00F6,0x1E6B,
    0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x00FD,0x0177,0x00FF);

	this.names[this.names.length] = 'ISO8859-15';
	this.diff[this.diff.length] = '.notdef 128 /.notdef 130 /.notdef 131 /.notdef 132 /.notdef 133 /.notdef 134 /.notdef 135 /.notdef 136 /.notdef 137 /.notdef 138 /.notdef 139 /.notdef 140 /.notdef 142 /.notdef 145 /.notdef 146 /.notdef 147 /.notdef 148 /.notdef 149 /.notdef 150 /.notdef 151 /.notdef 152 /.notdef 153 /.notdef 154 /.notdef 155 /.notdef 156 /.notdef 158 /.notdef 159 /.notdef 160 /space 164 /Euro 166 /Scaron 168 /scaron 173 /hyphen 176 /degree 180 /Zcaron 184 /zcaron 188 /OE 189 /oe 190 /Ydieresis';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x00A0,0x00A1,0x00A2,0x00A3,0x20AC,0x00A5,0x0160,0x00A7,
    0x0161,0x00A9,0x00AA,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF,
    0x00B0,0x00B1,0x00B2,0x00B3,0x017D,0x00B5,0x00B6,0x00B7,
    0x017E,0x00B9,0x00BA,0x00BB,0x0152,0x0153,0x0178,0x00BF,
    0x00C0,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x00C7,
    0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF,
    0x00D0,0x00D1,0x00D2,0x00D3,0x00D4,0x00D5,0x00D6,0x00D7,
    0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x00DD,0x00DE,0x00DF,
    0x00E0,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x00E7,
    0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF,
    0x00F0,0x00F1,0x00F2,0x00F3,0x00F4,0x00F5,0x00F6,0x00F7,
    0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x00FD,0x00FE,0x00FF);

	this.names[this.names.length] = 'ISO8859-16';
	this.diff[this.diff.length] = '.notdef 128 /.notdef 130 /.notdef 131 /.notdef 132 /.notdef 133 /.notdef 134 /.notdef 135 /.notdef 136 /.notdef 137 /.notdef 138 /.notdef 139 /.notdef 140 /.notdef 142 /.notdef 145 /.notdef 146 /.notdef 147 /.notdef 148 /.notdef 149 /.notdef 150 /.notdef 151 /.notdef 152 /.notdef 153 /.notdef 154 /.notdef 155 /.notdef 156 /.notdef 158 /.notdef 159 /.notdef 160 /space 161 /Aogonek 162 /aogonek 163 /Lslash 164 /Euro 165 /quotedblbase 166 /Scaron 168 /scaron 170 /Scommaaccent 172 /Zacute 173 /hyphen 174 /zacute 175 /Zdotaccent 176 /degree 178 /Ccaron 179 /lslash 180 /Zcaron 181 /quotedblright 184 /zcaron 185 /ccaron 186 /scommaaccent 188 /OE 189 /oe 190 /Ydieresis 191 /zdotaccent 195 /Abreve 197 /Cacute 208 /Dcroat 209 /Nacute 213 /Ohungarumlaut 215 /Sacute 216 /Uhungarumlaut 221 /Eogonek 222 /Tcommaaccent 227 /abreve 229 /cacute 240 /dcroat 241 /nacute 245 /ohungarumlaut 247 /sacute 248 /uhungarumlaut 253 /eogonek 254 /tcommaaccent ';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x00A0,0x0104,0x0105,0x0141,0x20AC,0x201E,0x0160,0x00A7,
    0x0161,0x00A9,0x0218,0x00AB,0x0179,0x00AD,0x017A,0x017B,
    0x00B0,0x00B1,0x010C,0x0142,0x017D,0x201D,0x00B6,0x00B7,
    0x017E,0x010D,0x0219,0x00BB,0x0152,0x0153,0x0178,0x017C,
    0x00C0,0x00C1,0x00C2,0x0102,0x00C4,0x0106,0x00C6,0x00C7,
    0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF,
    0x0110,0x0143,0x00D2,0x00D3,0x00D4,0x0150,0x00D6,0x015A,
    0x0170,0x00D9,0x00DA,0x00DB,0x00DC,0x0118,0x021A,0x00DF,
    0x00E0,0x00E1,0x00E2,0x0103,0x00E4,0x0107,0x00E6,0x00E7,
    0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF,
    0x0111,0x0144,0x00F2,0x00F3,0x00F4,0x0151,0x00F6,0x015B,
    0x0171,0x00F9,0x00FA,0x00FB,0x00FC,0x0119,0x021B,0x00FF);

	this.names[this.names.length] = 'CP1250';
	this.diff[this.diff.length] = '127 /.notdef 131 /.notdef 136 /.notdef 140 /Sacute 141 /Tcaron 143 /Zacute 152 /.notdef 156 /sacute 157 /tcaron 159 /zacute 160 /space 161 /caron 162 /breve 163 /Lslash 165 /Aogonek 170 /Scedilla 173 /hyphen 175 /Zdotaccent 176 /degree 178 /ogonek 179 /lslash 185 /aogonek 186 /scedilla 188 /Lcaron 189 /hungarumlaut 190 /lcaron 191 /zdotaccent 192 /Racute 195 /Abreve 197 /Lacute 198 /Cacute 200 /Ccaron 202 /Eogonek 204 /Ecaron 207 /Dcaron 208 /Dcroat 209 /Nacute 210 /Ncaron 213 /Ohungarumlaut 216 /Rcaron 217 /Uring 219 /Uhungarumlaut 222 /Tcommaaccent 224 /racute 227 /abreve 229 /lacute 230 /cacute 232 /ccaron 234 /eogonek 236 /ecaron 239 /dcaron 240 /dcroat 241 /nacute 242 /ncaron 245 /ohungarumlaut 248 /rcaron 249 /uring 251 /uhungarumlaut 254 /tcommaaccent 255 /dotaccent ';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x20AC,0x0000,0x201A,0x0000,0x201E,0x2026,0x2020,0x2021,
    0x0000,0x2030,0x0160,0x2039,0x015A,0x0164,0x017D,0x0179,
    0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,
    0x0000,0x2122,0x0161,0x203A,0x015B,0x0165,0x017E,0x017A,
    0x00A0,0x02C7,0x02D8,0x0141,0x00A4,0x0104,0x00A6,0x00A7,
    0x00A8,0x00A9,0x015E,0x00AB,0x00AC,0x00AD,0x00AE,0x017B,
    0x00B0,0x00B1,0x02DB,0x0142,0x00B4,0x00B5,0x00B6,0x00B7,
    0x00B8,0x0105,0x015F,0x00BB,0x013D,0x02DD,0x013E,0x017C,
    0x0154,0x00C1,0x00C2,0x0102,0x00C4,0x0139,0x0106,0x00C7,
    0x010C,0x00C9,0x0118,0x00CB,0x011A,0x00CD,0x00CE,0x010E,
    0x0110,0x0143,0x0147,0x00D3,0x00D4,0x0150,0x00D6,0x00D7,
    0x0158,0x016E,0x00DA,0x0170,0x00DC,0x00DD,0x0162,0x00DF,
    0x0155,0x00E1,0x00E2,0x0103,0x00E4,0x013A,0x0107,0x00E7,
    0x010D,0x00E9,0x0119,0x00EB,0x011B,0x00ED,0x00EE,0x010F,
    0x0111,0x0144,0x0148,0x00F3,0x00F4,0x0151,0x00F6,0x00F7,
    0x0159,0x016F,0x00FA,0x0171,0x00FC,0x00FD,0x0163,0x02D9);

	this.names[this.names.length] = 'CP1251';
	this.diff[this.diff.length] = '127 /.notdef 128 /afii10051 129 /afii10052 131 /afii10100 136 /Euro 138 /afii10058 140 /afii10059 141 /afii10061 142 /afii10060 143 /afii10145 144 /afii10099 152 /.notdef 154 /afii10106 156 /afii10107 157 /afii10109 158 /afii10108 159 /afii10193 160 /space 161 /afii10062 162 /afii10110 163 /afii10057 165 /afii10050 168 /afii10023 170 /afii10053 173 /hyphen 175 /afii10056 176 /degree 178 /afii10055 179 /afii10103 180 /afii10098 184 /afii10071 185 /afii61352 186 /afii10101 188 /afii10105 189 /afii10054 190 /afii10102 191 /afii10104 192 /afii10017 193 /afii10018 194 /afii10019 195 /afii10020 196 /afii10021 197 /afii10022 198 /afii10024 199 /afii10025 200 /afii10026 201 /afii10027 202 /afii10028 203 /afii10029 204 /afii10030 205 /afii10031 206 /afii10032 207 /afii10033 208 /afii10034 209 /afii10035 210 /afii10036 211 /afii10037 212 /afii10038 213 /afii10039 214 /afii10040 215 /afii10041 216 /afii10042 217 /afii10043 218 /afii10044 219 /afii10045 220 /afii10046 221 /afii10047 222 /afii10048 223 /afii10049 224 /afii10065 225 /afii10066 226 /afii10067 227 /afii10068 228 /afii10069 229 /afii10070 230 /afii10072 231 /afii10073 232 /afii10074 233 /afii10075 234 /afii10076 235 /afii10077 236 /afii10078 237 /afii10079 238 /afii10080 239 /afii10081 240 /afii10082 241 /afii10083 242 /afii10084 243 /afii10085 244 /afii10086 245 /afii10087 246 /afii10088 247 /afii10089 248 /afii10090 249 /afii10091 250 /afii10092 251 /afii10093 252 /afii10094 253 /afii10095 254 /afii10096 255 /afii10097';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
    0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x0402,0x0403,0x201A,0x0453,0x201E,0x2026,0x2020,0x2021,
    0x20AC,0x2030,0x0409,0x2039,0x040A,0x040C,0x040B,0x040F,
    0x0452,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,
    0x0000,0x2122,0x0459,0x203A,0x045A,0x045C,0x045B,0x045F,
    0x00A0,0x040E,0x045E,0x0408,0x00A4,0x0490,0x00A6,0x00A7,
    0x0401,0x00A9,0x0404,0x00AB,0x00AC,0x00AD,0x00AE,0x0407,
    0x00B0,0x00B1,0x0406,0x0456,0x0491,0x00B5,0x00B6,0x00B7,
    0x0451,0x2116,0x0454,0x00BB,0x0458,0x0405,0x0455,0x0457,
    0x0410,0x0411,0x0412,0x0413,0x0414,0x0415,0x0416,0x0417,
    0x0418,0x0419,0x041A,0x041B,0x041C,0x041D,0x041E,0x041F,
    0x0420,0x0421,0x0422,0x0423,0x0424,0x0425,0x0426,0x0427,
    0x0428,0x0429,0x042A,0x042B,0x042C,0x042D,0x042E,0x042F,
    0x0430,0x0431,0x0432,0x0433,0x0434,0x0435,0x0436,0x0437,
    0x0438,0x0439,0x043A,0x043B,0x043C,0x043D,0x043E,0x043F,
    0x0440,0x0441,0x0442,0x0443,0x0444,0x0445,0x0446,0x0447,
    0x0448,0x0449,0x044A,0x044B,0x044C,0x044D,0x044E,0x044F);

	this.names[this.names.length] = 'CP1252';
	this.diff[this.diff.length] = '127 /.notdef 160 /space 173 /hyphen 176 /degree';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x20AC,0x0000,0x201A,0x0192,0x201E,0x2026,0x2020,0x2021,
    0x02C6,0x2030,0x0160,0x2039,0x0152,0x0000,0x017D,0x0000,
    0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,
    0x02DC,0x2122,0x0161,0x203A,0x0153,0x0000,0x017E,0x0178,
    0x00A0,0x00A1,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,
    0x00A8,0x00A9,0x00AA,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF,
    0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,
    0x00B8,0x00B9,0x00BA,0x00BB,0x00BC,0x00BD,0x00BE,0x00BF,
    0x00C0,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x00C7,
    0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF,
    0x00D0,0x00D1,0x00D2,0x00D3,0x00D4,0x00D5,0x00D6,0x00D7,
    0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x00DD,0x00DE,0x00DF,
    0x00E0,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x00E7,
    0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF,
    0x00F0,0x00F1,0x00F2,0x00F3,0x00F4,0x00F5,0x00F6,0x00F7,
    0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x00FD,0x00FE,0x00FF);


	this.names[this.names.length] = 'CP1253';
	this.diff[this.diff.length] = '';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x20AC,0x0000,0x201A,0x0192,0x201E,0x2026,0x2020,0x2021,
    0x0000,0x2030,0x0000,0x2039,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,
    0x0000,0x2122,0x0000,0x203A,0x0000,0x0000,0x0000,0x0000,
    0x00A0,0x0385,0x0386,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,
    0x00A8,0x00A9,0x0000,0x00AB,0x00AC,0x00AD,0x00AE,0x2015,
    0x00B0,0x00B1,0x00B2,0x00B3,0x0384,0x00B5,0x00B6,0x00B7,
    0x0388,0x0389,0x038A,0x00BB,0x038C,0x00BD,0x038E,0x038F,
    0x0390,0x0391,0x0392,0x0393,0x0394,0x0395,0x0396,0x0397,
    0x0398,0x0399,0x039A,0x039B,0x039C,0x039D,0x039E,0x039F,
    0x03A0,0x03A1,0x0000,0x03A3,0x03A4,0x03A5,0x03A6,0x03A7,
    0x03A8,0x03A9,0x03AA,0x03AB,0x03AC,0x03AD,0x03AE,0x03AF,
    0x03B0,0x03B1,0x03B2,0x03B3,0x03B4,0x03B5,0x03B6,0x03B7,
    0x03B8,0x03B9,0x03BA,0x03BB,0x03BC,0x03BD,0x03BE,0x03BF,
    0x03C0,0x03C1,0x03C2,0x03C3,0x03C4,0x03C5,0x03C6,0x03C7,
    0x03C8,0x03C9,0x03CA,0x03CB,0x03CC,0x03CD,0x03CE,0x0000);

	this.names[this.names.length] = 'CP1254';
	this.diff[this.diff.length] = '127 /.notdef 160 /space 173 /hyphen 176 /degree';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x20AC,0x0000,0x201A,0x0192,0x201E,0x2026,0x2020,0x2021,
    0x02C6,0x2030,0x0160,0x2039,0x0152,0x0000,0x0000,0x0000,
    0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,
    0x02DC,0x2122,0x0161,0x203A,0x0153,0x0000,0x0000,0x0178,
    0x00A0,0x00A1,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,
    0x00A8,0x00A9,0x00AA,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF,
    0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,
    0x00B8,0x00B9,0x00BA,0x00BB,0x00BC,0x00BD,0x00BE,0x00BF,
    0x00C0,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x00C7,
    0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF,
    0x011E,0x00D1,0x00D2,0x00D3,0x00D4,0x00D5,0x00D6,0x00D7,
    0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x0130,0x015E,0x00DF,
    0x00E0,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x00E7,
    0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF,
    0x011F,0x00F1,0x00F2,0x00F3,0x00F4,0x00F5,0x00F6,0x00F7,
    0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x0131,0x015F,0x00FF);

	this.names[this.names.length] = 'CP1255';
	this.diff[this.diff.length] = '';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x20AC,0x0000,0x201A,0x0192,0x201E,0x2026,0x2020,0x2021,
    0x02C6,0x2030,0x0000,0x2039,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,
    0x02DC,0x2122,0x0000,0x203A,0x0000,0x0000,0x0000,0x0000,
    0x00A0,0x00A1,0x00A2,0x00A3,0x20AA,0x00A5,0x00A6,0x00A7,
    0x00A8,0x00A9,0x00D7,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF,
    0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,
    0x00B8,0x00B9,0x00F7,0x00BB,0x00BC,0x00BD,0x00BE,0x00BF,
    0x05B0,0x05B1,0x05B2,0x05B3,0x05B4,0x05B5,0x05B6,0x05B7,
    0x05B8,0x05B9,0x0000,0x05BB,0x05BC,0x05BD,0x05BE,0x05BF,
    0x05C0,0x05C1,0x05C2,0x05C3,0x05F0,0x05F1,0x05F2,0x05F3,
    0x05F4,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x05D0,0x05D1,0x05D2,0x05D3,0x05D4,0x05D5,0x05D6,0x05D7,
    0x05D8,0x05D9,0x05DA,0x05DB,0x05DC,0x05DD,0x05DE,0x05DF,
    0x05E0,0x05E1,0x05E2,0x05E3,0x05E4,0x05E5,0x05E6,0x05E7,
    0x05E8,0x05E9,0x05EA,0x0000,0x0000,0x200E,0x200F,0x0000);

	this.names[this.names.length] = 'CP1256';
	this.diff[this.diff.length] = '';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x20AC,0x067E,0x201A,0x0192,0x201E,0x2026,0x2020,0x2021,
    0x02C6,0x2030,0x0679,0x2039,0x0152,0x0686,0x0698,0x0688,
    0x06AF,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,
    0x06A9,0x2122,0x0691,0x203A,0x0153,0x200C,0x200D,0x06BA,
    0x00A0,0x060C,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,
    0x00A8,0x00A9,0x06BE,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF,
    0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,
    0x00B8,0x00B9,0x061B,0x00BB,0x00BC,0x00BD,0x00BE,0x061F,
    0x06C1,0x0621,0x0622,0x0623,0x0624,0x0625,0x0626,0x0627,
    0x0628,0x0629,0x062A,0x062B,0x062C,0x062D,0x062E,0x062F,
    0x0630,0x0631,0x0632,0x0633,0x0634,0x0635,0x0636,0x00D7,
    0x0637,0x0638,0x0639,0x063A,0x0640,0x0641,0x0642,0x0643,
    0x00E0,0x0644,0x00E2,0x0645,0x0646,0x0647,0x0648,0x00E7,
    0x00E8,0x00E9,0x00EA,0x00EB,0x0649,0x064A,0x00EE,0x00EF,
    0x064B,0x064C,0x064D,0x064E,0x00F4,0x064F,0x0650,0x00F7,
    0x0651,0x00F9,0x0652,0x00FB,0x00FC,0x200E,0x200F,0x06D2);

	this.names[this.names.length] = 'CP1257';
	this.diff[this.diff.length] = '127 /.notdef 131 /.notdef 136 /.notdef 138 /.notdef 140 /.notdef 141 /dieresis 142 /caron 143 /cedilla 152 /.notdef 154 /.notdef 156 /.notdef 157 /macron 158 /ogonek 159 /.notdef 160 /space 161 /.notdef 165 /.notdef 168 /Oslash 170 /Rcommaaccent 173 /hyphen 175 /AE 176 /degree 184 /oslash 186 /rcommaaccent 191 /ae 192 /Aogonek 193 /Iogonek 194 /Amacron 195 /Cacute 198 /Eogonek 199 /Emacron 200 /Ccaron 202 /Zacute 203 /Edotaccent 204 /Gcommaaccent 205 /Kcommaaccent 206 /Imacron 207 /Lcommaaccent 208 /Scaron 209 /Nacute 210 /Ncommaaccent 212 /Omacron 216 /Uogonek 217 /Lslash 218 /Sacute 219 /Umacron 221 /Zdotaccent 222 /Zcaron 224 /aogonek 225 /iogonek 226 /amacron 227 /cacute 230 /eogonek 231 /emacron 232 /ccaron 234 /zacute 235 /edotaccent 236 /gcommaaccent 237 /kcommaaccent 238 /imacron 239 /lcommaaccent 240 /scaron 241 /nacute 242 /ncommaaccent 244 /omacron 248 /uogonek 249 /lslash 250 /sacute 251 /umacron 253 /zdotaccent 254 /zcaron 255 /dotaccent';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x20AC,0x0000,0x201A,0x0000,0x201E,0x2026,0x2020,0x2021,
    0x0000,0x2030,0x0000,0x2039,0x0000,0x00A8,0x02C7,0x00B8,
    0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,
    0x0000,0x2122,0x0000,0x203A,0x0000,0x00AF,0x02DB,0x0000,
    0x00A0,0x0000,0x00A2,0x00A3,0x00A4,0x0000,0x00A6,0x00A7,
    0x00D8,0x00A9,0x0156,0x00AB,0x00AC,0x00AD,0x00AE,0x00C6,
    0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,
    0x00F8,0x00B9,0x0157,0x00BB,0x00BC,0x00BD,0x00BE,0x00E6,
    0x0104,0x012E,0x0100,0x0106,0x00C4,0x00C5,0x0118,0x0112,
    0x010C,0x00C9,0x0179,0x0116,0x0122,0x0136,0x012A,0x013B,
    0x0160,0x0143,0x0145,0x00D3,0x014C,0x00D5,0x00D6,0x00D7,
    0x0172,0x0141,0x015A,0x016A,0x00DC,0x017B,0x017D,0x00DF,
    0x0105,0x012F,0x0101,0x0107,0x00E4,0x00E5,0x0119,0x0113,
    0x010D,0x00E9,0x017A,0x0117,0x0123,0x0137,0x012B,0x013C,
    0x0161,0x0144,0x0146,0x00F3,0x014D,0x00F5,0x00F6,0x00F7,
    0x0173,0x0142,0x015B,0x016B,0x00FC,0x017C,0x017E,0x02D9);

	this.names[this.names.length] = 'CP1258';
	this.diff[this.diff.length] = '';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x20AC,0x0000,0x201A,0x0192,0x201E,0x2026,0x2020,0x2021,
    0x02C6,0x2030,0x0000,0x2039,0x0152,0x0000,0x0000,0x0000,
    0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,
    0x02DC,0x2122,0x0000,0x203A,0x0153,0x0000,0x0000,0x0178,
    0x00A0,0x00A1,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,
    0x00A8,0x00A9,0x00AA,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF,
    0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,
    0x00B8,0x00B9,0x00BA,0x00BB,0x00BC,0x00BD,0x00BE,0x00BF,
    0x00C0,0x00C1,0x00C2,0x0102,0x00C4,0x00C5,0x00C6,0x00C7,
    0x00C8,0x00C9,0x00CA,0x00CB,0x0300,0x00CD,0x00CE,0x00CF,
    0x0110,0x00D1,0x0309,0x00D3,0x00D4,0x01A0,0x00D6,0x00D7,
    0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x01AF,0x0303,0x00DF,
    0x00E0,0x00E1,0x00E2,0x0103,0x00E4,0x00E5,0x00E6,0x00E7,
    0x00E8,0x00E9,0x00EA,0x00EB,0x0301,0x00ED,0x00EE,0x00EF,
    0x0111,0x00F1,0x0323,0x00F3,0x00F4,0x01A1,0x00F6,0xF00F7,
    0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x01B0,0x20AB,0x00FF);

	this.names[this.names.length] = 'KOI8-R';
	this.diff[this.diff.length] = '127 /.notdef 128 /SF100000 129 /SF110000 130 /SF010000 131 /SF030000 132 /SF020000 133 /SF040000 134 /SF080000 135 /SF090000 136 /SF060000 137 /SF070000 138 /SF050000 139 /upblock 140 /dnblock 141 /block 142 /lfblock 143 /rtblock 144 /ltshade 145 /shade 146 /dkshade 147 /integraltp 148 /filledbox 149 /periodcentered 150 /radical 151 /approxequal 152 /lessequal 153 /greaterequal 154 /space 155 /integralbt 156 /degree 157 /twosuperior 158 /periodcentered 159 /divide 160 /SF430000 161 /SF240000 162 /SF510000 163 /afii10071 164 /SF520000 165 /SF390000 166 /SF220000 167 /SF210000 168 /SF250000 169 /SF500000 170 /SF490000 171 /SF380000 172 /SF280000 173 /SF270000 174 /SF260000 175 /SF360000 176 /SF370000 177 /SF420000 178 /SF190000 179 /afii10023 180 /SF200000 181 /SF230000 182 /SF470000 183 /SF480000 184 /SF410000 185 /SF450000 186 /SF460000 187 /SF400000 188 /SF540000 189 /SF530000 190 /SF440000 191 /copyright 192 /afii10096 193 /afii10065 194 /afii10066 195 /afii10088 196 /afii10069 197 /afii10070 198 /afii10086 199 /afii10068 200 /afii10087 201 /afii10074 202 /afii10075 203 /afii10076 204 /afii10077 205 /afii10078 206 /afii10079 207 /afii10080 208 /afii10081 209 /afii10097 210 /afii10082 211 /afii10083 212 /afii10084 213 /afii10085 214 /afii10072 215 /afii10067 216 /afii10094 217 /afii10093 218 /afii10073 219 /afii10090 220 /afii10095 221 /afii10091 222 /afii10089 223 /afii10092 224 /afii10048 225 /afii10017 226 /afii10018 227 /afii10040 228 /afii10021 229 /afii10022 230 /afii10038 231 /afii10020 232 /afii10039 233 /afii10026 234 /afii10027 235 /afii10028 236 /afii10029 237 /afii10030 238 /afii10031 239 /afii10032 240 /afii10033 241 /afii10049 242 /afii10034 243 /afii10035 244 /afii10036 245 /afii10037 246 /afii10024 247 /afii10019 248 /afii10046 249 /afii10045 250 /afii10025 251 /afii10042 252 /afii10047 253 /afii10043 254 /afii10041 255 /afii10044';
	this.values[this.values.length] = new Array(
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,
	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
    0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
    0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
    0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
    0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
    0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
    0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
    0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
    0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
    0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
    0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
    0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
    0x2500,0x2502,0x250C,0x2510,0x2514,0x2518,0x251C,0x2524,
    0x252C,0x2534,0x253C,0x2580,0x2584,0x2588,0x258C,0x2590,
    0x2591,0x2592,0x2593,0x2320,0x25A0,0x2219,0x221A,0x2248,
    0x2264,0x2265,0x00A0,0x2321,0x00B0,0x00B2,0x00B7,0x00F7,
    0x2550,0x2551,0x2552,0x0451,0x2553,0x2554,0x2555,0x2556,
    0x2557,0x2558,0x2559,0x255A,0x255B,0x255C,0x255D,0x255E,
    0x255F,0x2560,0x2561,0x0401,0x2562,0x2563,0x2564,0x2565,
    0x2566,0x2567,0x2568,0x2569,0x256A,0x256B,0x256C,0x00A9,
    0x044E,0x0430,0x0431,0x0446,0x0434,0x0435,0x0444,0x0433,
    0x0445,0x0438,0x0439,0x043A,0x043B,0x043C,0x043D,0x043E,
    0x043F,0x044F,0x0440,0x0441,0x0442,0x0443,0x0436,0x0432,
    0x044C,0x044B,0x0437,0x0448,0x044D,0x0449,0x0447,0x044A,
    0x042E,0x0410,0x0411,0x0426,0x0414,0x0415,0x0424,0x0413,
    0x0425,0x0418,0x0419,0x041A,0x041B,0x041C,0x041D,0x041E,
    0x041F,0x042F,0x0420,0x0421,0x0422,0x0423,0x0416,0x0412,
    0x042C,0x042B,0x0417,0x0428,0x042D,0x0429,0x0427,0x042A);
		
//--------------- methods ---------------------------

	this.find						= pdfCharacterMap$find;
	this.getCID					= pdfCharacterMap$getCID;
	this.getNotDefined				= pdfCharacterMap$getNotDefined;
	this.unicodeIndex				= pdfCharacterMap$unicodeIndex;
	this.getWidths					= pdfCharacterMap$getWidths;
	
	this.template_font				= pdfCharacterMap$template_font;
	this.template_fontDescriptor	= pdfCharacterMap$template_fontDescriptor;
	this.getMapping					= pdfCharacterMap$getMapping;
	this.cmap						= pdfCharacterMap$cmap;
	this.define						= pdfCharacterMap$define;
} 
//===================================================================
//						pdfCharacterMap$find
//===================================================================
function pdfCharacterMap$find(name)
{
	var i;
	
	name = name.toUpperCase();

	for (i=0; i < this.names.length; ++i)
	{
		if (this.names[i] == name) return i;	
	}
	
	return 0;
}
//===================================================================
//						pdfCharacterMap$getNotDefined
//===================================================================
function pdfCharacterMap$getNotDefined(values)
{
	var i;
	var codespace,obj,notdefined,found;
	
	notdefined = new Array();
	
	found = false;
	
	for (i=0; i < 255; ++i)
	{
		if (found)
		{
			if (values[i] == 0) 
			{
				obj.ubound = i;
				continue;
			}
			
			found = false;
		}
		
		if (values[i] == 0)
		{
			found = true;
			obj = new Object();
			obj.lbound = i;
			obj.ubound = i;
			notdefined[notdefined.length] = obj;
		}			
	}		

	return notdefined;
}
//===================================================================
//						pdfCharacterMap$getCID
//===================================================================
function pdfCharacterMap$getCID(values)
{
	var i,obj;
	var cid;
	
	cid = new Array();
		
	for (i=0; i < 256; ++i)
	{
		if (values[i] == 0) continue;
		if (values[i] == i) continue;

		obj = new Object();
		obj.fromChar = i;
		obj.toChar = values[i];
		cid[cid.length] = obj;
	}		

	return cid;
}
//===================================================================
//						pdfCharacterMap$cmap
//===================================================================
function pdfCharacterMap$cmap(encoding)
{
	var text,i,j,n,count,remain,map;
	var k,codespace,notdefined,cid;

	k = this.find(encoding);
		
	notdefined = this.getNotDefined(this.values[k]);
	cid = this.getCID(this.values[k]);
	
	map = '';
	
	map += "/CIDInit /ProcSet findresource begin\n";
	map += "12 dict begin\n";
	map += "begincmap\n";
	map += "/CIDSystemInfo\n";
	map += "<< /Registry ( CollinsSoftware )\n";
	map += "/Ordering ( ' + this.fontName + ' )\n";
	map += "/Supplement 0\n";
	map += ">> def\n";
	map += '/CMapName ' + encoding + " def\n";
	map += "CMapType 2 def\n";

//-------------- codespace ---------------

	map += "begincodespacerange\n";
	map += "<00> <FFFF>\n";
	map += "endcodespacerange\n";

//-------------- notdefined ---------------
/*

	map += notdefined.length + " beginnotdefinedrange\n";
	for (i=0; i < notdefined.length; ++i)
	{
		map += '<' + notdefined[i].lbound.toString(16) + ' > < ' +  notdefined[i].ubound.toString(16) + "> 41\n";
	}

	map += "endnotdefinedrange\n";

*/

//-------------- cid -------------------

	remain = cid.length;
	n = Math.ceil(cid.length / 100);

	for (j=0; j < n; ++j)
	{
		count = remain;
		if (count > 100) count = 100;
		remain = remain - count;
		map += count + " beginbfchar\n";
	
		for (i=0; i < cid.length; ++i)
		{
//			map += '<' + cid[i].fromChar.toString() + '> <' + cid[i].toChar.toString(16) + ">\n";
			map += '<' + cid[i].fromChar.toString(16) + "> <41>\n";
		}

		map += "endbfchar\n";
	}

//----------------------------------------

	map += "endcmap\n";
	map += "CMapName currentdict /CMap defineresource pop\n";
	map += "end\n";
	map += "end\n";

	text = '';
	text += "<< /Length " + map.length + ">>\n";
	text += "stream\n";
	text += map;
	text += "\n" + "endstream";


//--------------------------- test - test --------------------------

/*
	map = '';
	map += "/CIDInit /ProcSet findresource begin\n";
	map += "12 dict begin\n";
	map += "begincmap\n";
	map += "/CIDSystemInfo << /Registry (CollinsSoftware) /Ordering (" + this.FontName + ") /Supplement 0 >> def\n";
	map += "/CMapName /" + this.fontName + " def\n";
	map += "/CMapType 0 def\n";
	map += "1 begincodespacerange\n";
	map += "<0000 FFFF> \n";
	map += "endcodespacerange\n";
	map += "1 beginbfrange\n";
	map += "<32> <96> <045>\n";
	map += "endbfrange\n";
	map += "endcmap\n";
	map += "CMapName currentdict /CMap defineresource pop \n";
	map += "end\n";
	map += "end\n";
	
	text = '';
	text += '<< /Length ' + map.length + ">>\n";
	text += "stream\n";
	text += map;
	text += "endstream\n";
*/

	return text;
}
//===================================================================
//						pdfCharacterMap$template_font
//===================================================================
function pdfCharacterMap$template_font(encoding)
{
	var text,k,base,lastChar;
	var diff,i,n;
	
	k = this.find(encoding);
	text = '';

	base = 'WinAnsiEncoding';
	if (k == 0) base = 'StandardEncoding';
	if (k == 2) base = 'MacRomanEncoding';

	diff = this.diff[k];
	
	lastChar = (parseInt(this.firstChar) + this.unicode_widths.length) - 1;

	text += '<< ';
	text += "/Type /Font\n";
	text += "/BaseFont /" + this.fontName + "{mode}\n";
	text += "/Subtype /Type1\n";
	text += "/FontDescriptor {ref} 0 R\n";
	text += "/FirstChar " + this.firstChar + "\n";
	text += "/LastChar " + lastChar + "\n";
	text += "/Widths [" + this.pdf.trim(this.unicode_widths.join(' ')) + "]\n";
	text += "/Encoding << ";
	text += "/Type /Encoding ";
	text += "/BaseEncoding /" + base + " ";
	
	if (diff != '') text += '/Differences [' + diff + "]\n";
	text += ">>\n";
	text += '>>';

	return text;
}	
//===================================================================
//					pdfCharacterMap$template_fontDescriptor
//===================================================================
function pdfCharacterMap$template_fontDescriptor(encoding)
{
	var text,k,flags;
	
	flags = 262178;
//	flags = 32;
	
	text = '';
	text += '<< ' + "\n";
	text += '/Type /FontDescriptor' + "\n";
	text += '/Ascent '  + this.ascent  + "\n";
	text += '/Descent ' + this.descent + "\n";
	text += '/Flags ' + flags  + "\n";
	text += '/FontBBox [' + this.range.join(' ') + ']' + "\n";
	text += '/FontName /' + this.fontName + '{mode}' + "\n";
	text += '/FontWeight 700';
	text += '/ItalicAngle 0' + "\n";
	text += '/StemV 0' + "\n";
	text += '/XHeight 0' + "\n";
	text += '/FontFile {ref} 0 R' + "\n";
	text += '>>';
	
	return text;
}
//===================================================================
//						pdfCharacterMap$getWidths
//===================================================================
function pdfCharacterMap$getWidths(encoding,first)
{
	var text,i,j,n,widths,fst,k,values;

	k = this.find(encoding);
	values = this.values[k];
	widths = new Array();
	
	fst = 0;
	if (arguments.length > 1) fst = first;

	for (i=fst; i < values.length; ++i) widths[i-fst] = 0;
	
	j = 0;

	for (i=fst; i < values.length; ++i)
	{
		n = this.unicodeIndex(this.values[k][i]);
		widths[j] = this.widths[n];
		j = j + 1;
	}	
	
	return widths;
}
//===================================================================
//						pdfCharacterMap$define
//===================================================================
function pdfCharacterMap$define(filename,mode)
{
	var i,j;

	var i,j,name,ext,text,list,value;
	var forReading = 1;
	var fs,f,afilename,pfilename;

	var defaultRange	= '-115,-240,1151,1009';
	var defaultAscent	= 739;
	var defaultDescent	= -192;
	var defaultFirstChar	= 32;
	var defaultLastChar	= 255;

	this.range		= defaultRange.split(',');
	this.ascent		= defaultAscent;
	this.descent		= defaultDescent;
	this.firstChar		= defaultFirstChar;
	this.lastChar		= defaultLastChar;
	this.unicodes		= new Array();

	this.fontWidths	= new Array();
	this.widths = new Array();
	this.unicodes = new Array();

	i = filename.lastIndexOf('.');
	if (i < 0) i = filename.length;
	ext = filename.substr(i);
	ext = ext.toLowerCase();

	pfilename = filename.substr(0,i) + ext;
	afilename = filename.substr(0,i) + '.afm';

	if (ext == '.txt')
	{
		text = CollinsPDF().read(pfilename);
		if (text == '') return;
		i = text.indexOf('|');
		text = text.substr(0,i);
		if (text == '') return;		
		list = text.split(';');
		this.ascent		= parseInt(list[0]);
		this.descent		= parseInt(list[1]);
		this.firstChar		= parseInt(list[2]);
		this.lastChar		= parseInt(list[3]);
		this.range		= list[4].split(',');
		this.fontWidths		= list[5].split(',');
		this.widths		= list[5].split(',');
		this.unicodes		= list[6].split(',');
		return;
	}


	this.pdf.sys.type1FontDefine(this,afilename);
	
	if (this.widths.length == 0)
	{
		for (i=0; i < 256; ++i)
		{
			this.widths[i]		= 800;
			this.fontWidths[i]	= 800;
			this.unicodes[i]	= i;
		}

		this.ascent = 900;
		this.descent = 900;
		this.range = new Array();
		this.range[0] = 0;
		this.range[1] = 0;
		this.range[2] = 900;
		this.range[3] = 1200;
		this.firstChar = 0;
		this.lastChar = 255;
	}
}
//===================================================================
//			pdfCharacterMap$unicodeIndex
//===================================================================
function pdfCharacterMap$unicodeIndex(unicode)
{
	var i;

	if (unicode == 0) return 0;
	
	for (i=0; i < this.unicodes.length; ++i)
	{
		if (unicode == this.unicodes[i]) return i;
	}
			
	return 0;
}
//===================================================================
//			pdfCharacterMap$getMapping
//===================================================================
function pdfCharacterMap$getMapping(encoding)
{
	var k,cid;
	
	k = this.find(encoding);
	cid = this.getCID(this.values[k]);
	return cid;
}
//==========================================================================
//							pdf$setUnits
//==========================================================================
function pdf$setUnits(name)
{

	this.unitscale = 72;		// default inches
	
	name = name.toLowerCase();

	if (name ==        'inch') this.unitscale = 72;
	if (name ==      'inches') this.unitscale = 72;
	if (name ==       'point') this.unitscale = 1;
	if (name ==      'points') this.unitscale = 1;
	if (name ==       'pixel') this.unitscale = 72 / 110;
	if (name ==      'pixels') this.unitscale = 72 / 110;
	if (name ==          'mm') this.unitscale = 72 / 0.039;
	if (name ==          'cm') this.unitscale = 72 / 0.39;
	if (name ==  'centimeter') this.unitscale = 72 / 0.39;
	if (name == 'centimeters') this.unitscale = 72 / 0.39;
	if (name ==  'millimeter') this.unitscale = 72 / 0.039;
	if (name == 'millimeters') this.unitscale = 72 / 0.039;

}
//==========================================================================
//							pdf$toPoint_
//==========================================================================
function pdf$toPoint_(x,y)
{
	var p;

	if (arguments.length == 1) return x * this.unitscale ;

	p = new Object();	
	p.x = (x * this.unitscale) + this.xmin;
	p.y = (y * (-this.unitscale)) + this.ymax;	
	
	return p;
}
//==========================================================================
//							pdf$toPoints_
//==========================================================================
function pdf$toPoints_(points)
{
	var pnts,i;

	pnts = new Array();

	for (i=0; i < points.length; ++i)
	{
		pnts[i] = this.toPoint_(points[i].x,points[i].y);
	}

	return pnts;
}
//==========================================================================
//			pdf$getPosition
//==========================================================================
function pdf$getPosition()
{
	var p,x,y;
	
	x = this.xpos;
	y = this.ypos;

	p = new Object();	
	p.x = (x - this.xmin) / this.unitscale;
	p.y = (y - this.ymax) / (-this.unitscale);
	
	return p;
}
//=============================================================================
//			pdf$setView
//=============================================================================
function pdf$setView(x,y,width,height)
{
	var p,text,h;

	this.view = new Object();
	this.view.xmin = this.xmin;
	this.view.ymin = this.ymin;
	this.view.xmax = this.xmax;
	this.view.ymax = this.ymax;

	p = this.toPoint_(x,y);	

	if (isNaN(width)) width = 0;
	if (isNaN(height)) height = 0;

	if (width <= 0) width = this.xmax - p.x;
	if (height <= 0) height = p.y - this.ymin;

	h = this.fontSize * 1.2;

	this.xpos = p.x;
	this.ypos = p.y - h;

	this.xmin = p.x;
	this.ymax = p.y;
	
	this.xmax = p.x + width;
	this.ymin = p.y - height;

//	this.setClipRegion(this.xmin,this.ymin,this.xmax,this.ymax);

	width  = this.xmax - this.xmin;
	height = this.ymax - this.ymin;
	
	text = "q\n";
	text = text + this.xmin + ' ' + this.ymin + ' ' + width + ' ' + height + " re W n\n";
	this.catalog.activePage.add(text);

}
//=============================================================================
//			pdf$setClip
//=============================================================================
function pdf$setClip(x,y,width,height)
{
	var text;

	if (this.isClip)
	{
		text = "Q\n";
		this.catalog.activePage.add(text);
		this.isClip = false;
	}
	
	if (arguments.length != 4) return;
	
//	this.setGraphicLineWeight(1);
//	this.setGraphicFillColor(0.9);
//	this.plot.rectangle(x,y,x+width,y+height);
	
	text = "q\n";
	text = text + x + ' ' + y + ' ' + width + ' ' + height + " re W n\n";
	this.catalog.activePage.add(text);
	this.isClip = true;
	
}
//=============================================================================
//			pdf$restoreView
//=============================================================================
function pdf$restoreView()
{
	var text;
	
	if (this.view == null) return;

	this.xmin = this.view.xmin;
	this.ymin = this.view.ymin;
	this.xmax = this.view.xmax;
	this.ymax = this.view.ymax;

	this.view = null;

	text = "Q\n";
	this.catalog.activePage.add(text);

}
//=============================================================================
//			pdf$setPosition
//=============================================================================
function pdf$setPosition(x,y)
{
	var p;

	if (arguments.length == 1)
	{
		this.xpos = x.x;
		this.ypos = x.y;
		return;
	}
	
	p = this.toPoint_(x,y);	
	this.xpos = p.x;
	this.ypos = p.y;
}
//==========================================================================================
//			pdf$drawBottomLine
//==========================================================================================
function pdf$drawBottomLine()
{
	var x1,y1,x2,y2;
	
	x1 = 0;
	x2 = this.maxWidth;
	y1 = this.ypos - (this.charHeight() * 0.98);
	y2 = y1;
	this.draw.line(x1,y1,x2,y2);
}
//==========================================================================================
//			pdf$drawTableBox
//==========================================================================================
function pdf$drawTableBox(x1,y1,x2,y2,lightColor,darkColor,lineWeight,backgroundColor)
{
	var p1,p2;
	
	p1 = this.toPoint_(x1,y1);
	p2 = this.toPoint_(x2,y2);
	
	x1 = p1.x;
	y1 = p1.y;
	x2 = p2.x;
	y2 = p2.y;

	if (backgroundColor != '')
	{
		this.setGraphicLineWeight(0);
		this.setGraphicFillColor(backgroundColor);
		this.plot.rectangle(x1,y1,x2,y2);
	}
	
	if (lineWeight <= 0) return;

	this.plot.setLineWeight(lineWeight);
	this.plot.setLineColor(darkColor);
	this.plot.line(x1,y1,x1,y2);
	this.plot.line(x2,y1,x1,y1);	
	this.plot.setLineColor(lightColor);
	this.plot.line(x2,y2,x2,y1);
	this.plot.line(x1,y2,x2,y2);
}
//==========================================================================================
//			pdf$drawBox
//==========================================================================================
function pdf$drawBox(x1,y1,x2,y2,backgroundColor,lineColor,lineWeight)
{
	var p1,p2;
	
	p1 = this.toPoint_(x1,y1);
	p2 = this.toPoint_(x2,y2);
	
	x1 = p1.x;
	y1 = p1.y;
	x2 = p2.x;
	y2 = p2.y;

	this.setGraphicColor(lineColor);
	this.setGraphicLineWeight(lineWeight);
	this.setGraphicFillColor(backgroundColor);

	this.plot.rectangle(x1,y1,x2,y2);
}
//==========================================================================================
//			pdf$setGraphicColor
//==========================================================================================
function pdf$setGraphicColor(color)
{
	if (arguments.length > 0) return this.plot.setLineColor(color);
	this.plot.setLineColor('black');
}
//==========================================================================================
//			pdf$setGraphicFillColor
//==========================================================================================
function pdf$setGraphicFillColor(color)
{
	if (arguments.length > 0) return this.plot.setFillColor(color);
	this.plot.setFillColor('');
}
//==========================================================================================
//			pdf$setGraphicLineWeight
//==========================================================================================
function pdf$setGraphicLineWeight(weight)
{
	if (arguments.length > 0) return this.plot.setLineWeight(weight);
	this.plot.setLineWeight(1);
}
//==========================================================================================
//			pdf$setGraphicLineStyle
//==========================================================================================
function pdf$setGraphicLineStyle(style)
{
	if (arguments.length > 0) return this.plot.setLineStyle(style);
	this.plot.setLineStyle('solid');
}
//==========================================================================================
//			pdf$setGraphicTransparent
//==========================================================================================
function pdf$setGraphicTransparent(value)
{
	if (arguments.length > 0) return this.plot.setTransparent(value);
	this.plot.setTransparent('');
}
//=================================================================
//			pdfPlot.js
//=================================================================
function pdfPlot$(pdf)
{

	this.pdf = pdf;
	
	this.default_fontSize		= 10;
	this.default_fontName		= 'arial';

	this.color			= -1;
	this.fillColor			= 0;
	this.grayscale			= 0;
	this.lineWeight			= 1;
	this.lineStyle			= 'solid';
	this.transparent		= '';

	this.fontSize			= 10;
	this.fontColor			= 'Black';
	this.fontName			= 'arial';
	
	this.clip			= false;	

	this.lineCap			= 2;			// Extended Lines;

//----------- public methods ----------------------

	this.textWidth			= pdfPlot$textWidth;
	this.clear			= pdfPlot$clear;
	this.setBlur			= pdfPlot$setBlur;

	this.line			= pdfPlot$line;
	this.linestring			= pdfPlot$linestring;
	this.rectangle			= pdfPlot$rectangle;
	this.polygon			= pdfPlot$polygon;

	this.cone			= pdfPlot$cone;
	this.arc			= pdfPlot$arc;
	this.circle			= pdfPlot$circle;
	this.symbol			= pdfPlot$symbol;
	this.marker			= pdfPlot$marker;
	this.text			= pdfPlot$text;
	this.image			= pdfPlot$image;
	this.grid			= pdfPlot$grid;

	this.setFontColor		= pdfPlot$setFontColor;
	this.setFontSize		= pdfPlot$setFontSize;
	this.setFontName		= pdfPlot$setFontName;
	this.setFont			= pdfPlot$setFont;

	this.setFillColor		= pdfPlot$setFillColor;
	this.setLineColor		= pdfPlot$setLineColor;
	this.setLineStyle		= pdfPlot$setLineStyle;
	this.setLineWeight		= pdfPlot$setLineWeight;
	this.setStyle			= pdfPlot$setStyle;
	this.setTransparent		= pdfPlot$setTransparent;

//--------- internal methods ---------

	this.clipBegin			= pdfPlot$clipBegin;
	this.clipEnd			= pdfPlot$clipEnd;
	
	this.shapeStyle			= pdfPlot$shapeStyle;
	this.shapeStyleEnd		= pdfPlot$shapeStyleEnd;

	this.lineStyleText_		= pdfPlot$lineStyleText_;
	this.transparentText_		= pdfPlot$transparentText_;
	this.shape_			= pdfPlot$shape_;
	this.makeArc_			= pdfPlot$makeArc_;
	this.textWidth			= pdfPlot$textWidth;

}
//==========================================================================================
//				pdfPlot$clear
//==========================================================================================
function pdfPlot$clear()
{
}
//==========================================================================================
//				pdfPlot$setBlur
//==========================================================================================
function pdfPlot$setBlur()
{

}
//==========================================================================================
//				pdfPlot$textWidth
//==========================================================================================
function pdfPlot$textWidth(text)
{

	return this.pdf.textWidth(text);
	
}
//==========================================================================================
//				pdfPlot$setFont
//==========================================================================================
function pdfPlot$setFont(color,size,name)
{

	this.setFontColor(color);
	this.setFontSize(size);
	this.setFontName(name);
}
//==========================================================================================
//				pdfPlot$setStyle
//==========================================================================================
function pdfPlot$setStyle(color,weight,style,fillcolor,transparent)
{
	this.setLineColor(color);
	this.setFillColor(fillcolor);
	this.setLineWeight(weight);
	this.setLineStyle(style);
	this.setTransparent(transparent);
}
//==========================================================================================
//				pdfPlot$text
//==========================================================================================
function pdfPlot$text(x,y,text,url,angle,just,size)
{
	if (arguments.length > 6) this.pdf.fontSize = size;
	this.pdf.placeText_A(x,y,text,url,angle,just);
}
//==========================================================================================
//				pdfPlot$image
//==========================================================================================
function pdfPlot$image(x,y,filename,height,width,angle)
{
	var p;
	
	this.pdf.placeImage_A(x,y,filename,height,width,angle);
}
//==========================================================================================
//				pdfPlot$symbol
//==========================================================================================
function pdfPlot$symbol(x,y,char,angle)
{
	var dx,dy,c,xcos,xsin,textAngle;
	var saveFont,xchr,v,value,width,size,ncolor;
	var text,tran,obj;
	
	saveFont = this.pdf.font.name;

	c = char.substr(0,1);
	c =  c.toUpperCase();
	value = char.substr(1);
	if (isNaN(value)) c = '';
	v = parseInt(value,8);
	if (isNaN(v)) v = 32;

	this.setFontName(c);

	xchr = String.fromCharCode(v);
	size = this.fontSize;
	angle = angle / 180.0 * Math.PI;	

	width = this.pdf.charWidth(v);

//	width = 580;
//	width = width / 1000;
//	width = width * size;

	dx = width / 2;
	dy = width / 2;

	x = x - ( (Math.cos(angle) * dx) - (Math.sin(angle) * dy) );
	y = y - ( (Math.sin(angle) * dx) + (Math.cos(angle) * dy) );


	text = '';
	x = Math.round(x * 100) / 100;
	y = Math.round(y * 100) / 100;
	
	tran = '1 0 0 1 ' + x + ' ' + y + " cm\n";

	textAngle = '';
	if (Math.abs(angle) > 0.001)
	{
	  xcos = Math.cos(angle);
	  xcos = Math.round(xcos*10000) / 10000;
	  xsin = Math.sin(angle);
	  xsin = Math.round(xsin*10000) / 10000;
	  textAngle = textAngle + xcos + ' ' + (xsin) + ' ' + (-xsin) + ' ' + (xcos) + " 0 0 cm% Rotate\n";
	}

	text = text + "q\n";
	text = text + "BT\n";

	text = text + '/' + this.pdf.fontName_() + ' ' + size + " Tf\n";
	text = text + tran;
	text = text + textAngle;

	obj = this.pdf.parseColor_(this.fontColor);
	text = text + this.pdf.colorText_(obj.color);
	if (this.pdf.fontRender > 0) text = text + this.pdf.fontRender + " Tr\n";

	text = text + '(' + this.pdf.escape_(xchr) + ") Tj\n";

	text = text + "ET\n";
	text = text + "Q\n";

	this.pdf.catalog.activePage.add(text);
	this.pdf.setFontName(saveFont);
}
//==========================================================================================
//				pdfPlot$marker
//==========================================================================================
function pdfPlot$marker(x,y,name,size)
{
	var saveName, text, i;
	var saveSize,saveColor;

	saveName = this.pdf.font.name;
	saveSize = this.pdf.font.size;
	
	this.pdf.setFontName('dingbats');
	this.pdf.setFontSize(size);

	text = String.fromCharCode(108);
	name = name.toLowerCase();
	if (name ==  'circle') text = String.fromCharCode(109);
	if (name ==     'box') text = String.fromCharCode(110);
	if (name ==   'check') text = String.fromCharCode(51);
	if (name ==    'star') text = String.fromCharCode(72);
	if (name ==   'arrow') text = String.fromCharCode(225);

	if (name ==   'heart') text = String.fromCharCode(170);
	if (name ==   'spade') text = String.fromCharCode(171);
	if (name ==    'club') text = String.fromCharCode(168);
	if (name == 'diamond') text = String.fromCharCode(169);

	this.pdf.setFontName('dingbats');
	this.pdf.placeText_A(x,y,text,'',0,'');

	this.pdf.setFontName(saveName);
	this.pdf.setFontSize(saveSize);
}
//==========================================================================================
//				pdfPlot$line
//==========================================================================================
function pdfPlot$line(x1,y1,x2,y2)
{
	var weight;
	var text,dy,dx,color;

	x1 = Math.round(x1 * 1000) / 1000;
	y1 = Math.round(y1 * 1000) / 1000;

	x2 = Math.round(x2 * 1000) / 1000;
	y2 = Math.round(y2 * 1000) / 1000;

	weight = this.lineWeight - 1;
	if (weight < 0) return;

	text = '';
	text = text + this.shapeStyle(false);
	text += x1 + ' ' + y1 + ' m' + "\n";
	text += x2 + ' ' + y2 + ' l' + "\n";
	text = text + this.shapeStyleEnd(true);

	this.pdf.catalog.activePage.add(text);
}
//==========================================================================================
//				pdfPlot$rectangle
//==========================================================================================
function pdfPlot$rectangle(x1, y1, x2, y2)
{
	var weight;
	var text,dy,dx,color;

	x1 = Math.round(x1 * 1000) / 1000;
	y1 = Math.round(y1 * 1000) / 1000;
	
	x2 = Math.round(x2 * 1000) / 1000;
	y2 = Math.round(y2 * 1000) / 1000;
	
	dx = x2 - x1;
	dy = y2 - y1;

	text = '';
	text = text + this.shapeStyle(true);
	text = text + x1 + ' ' + y1 + ' ' + dx + ' ' + dy + " re\n";
	text = text + this.shapeStyleEnd(true);

	this.pdf.catalog.activePage.add(text);
}
//==========================================================================================
//				pdfPlot$linestring
//==========================================================================================
function pdfPlot$linestring(pnts)
{
	this.shape_(pnts,false);
}
//==========================================================================================
//				pdfPlot$polygon
//==========================================================================================
function pdfPlot$polygon(pnts)
{
	this.shape_(pnts,true);
}
//==========================================================================================
//				pdfPlot$shape_
//==========================================================================================
function pdfPlot$shape_(pnts,closed)
{
	var weight,text;
	var x1,y1,x2,y2,i,code;

	weight = this.lineWeight - 1;
	if (pnts.length <= 1) return;

	x1 = Math.round((pnts[0].x) * 1000) / 1000;
	y1 = Math.round((pnts[0].y) * 1000) / 1000;

	text = this.shapeStyle(closed);
	text += x1 + ' ' + y1 + ' m' + "\n";
	
	for (i=1; i < pnts.length; ++i)
	{
		x2 = Math.round((pnts[i].x) * 1000) / 1000;
		y2 = Math.round((pnts[i].y) * 1000) / 1000;
		code = ' l';
		if (pnts[i].code != 'undefined' && pnts[i].code == 'M') code = ' m';
		text += x2 + ' ' + y2 + code + "\n";
	}

	text += this.shapeStyleEnd(closed);	
	this.pdf.catalog.activePage.add(text);
}
//==========================================================================================
//				pdfPlot$circle
//==========================================================================================
function pdfPlot$circle(cx,cy,radius)
{
	var weight;
	var text,dy,dx,color;
	var x1,y1,x2,y2,x3,y3,x2,y2,x3,y3;
	var q1,q2,q3,q4;
	var x0,y0,r,d;

	cx = Math.round(cx * 1000) / 1000;
	cy = Math.round(cy * 1000) / 1000;

	r = Math.round(radius * 1000) / 1000;
	d = r * 0.552284749;		// 4 ( sqrt(2) - 1) / 3) * Radius
//------- q1 ---------

	x0 = cx + r;
	y0 = cy;

	x1 = x0;
	y1 = y0 + d;
	
	x3 = cx;
	y3 = cy + r;
	
	x2 = x3 + d;
	y2 = y3;	
	q1 = x1 + ' ' + y1 + ' ' + x2 + ' ' + y2 + ' ' + x3 + ' ' + y3 + ' c' + "\n";

//------- q2 ---------

	x1 = x3 - d;
	y1 = y3;
	
	x3 = cx - r;
	y3 = cy;
	x2 = x3;
	y2 = y3 + d;	
	q2 = x1 + ' ' + y1 + ' ' + x2 + ' ' + y2 + ' ' + x3 + ' ' + y3 + ' c' + "\n";

//------- q3 ---------

	x1 = x3;
	y1 = y3 - d;
	
	x3 = cx;
	y3 = cy - r;
	x2 = x3 - d;
	y2 = y3;	
	q3 = x1 + ' ' + y1 + ' ' + x2 + ' ' + y2 + ' ' + x3 + ' ' + y3 + ' c' + "\n";

//------- q4 ---------

	x1 = x3 + d;
	y1 = y3;
	
	x3 = cx + r;
	y3 = cy;
	x2 = x3;
	y2 = y3 - d;	
	q4 = x1 + ' ' + y1 + ' ' + x2 + ' ' + y2 + ' ' + x3 + ' ' + y3 + ' c' + "\n";

	text = this.shapeStyle(true);
	
	text = text + x0 + ' ' + y0 + ' m' + "\n" + 
			q1 + q2 + q3 + q4;
	
	text = text + this.shapeStyleEnd(true);

	this.pdf.catalog.activePage.add(text);
}
//==========================================================================================
//				pdfPlot$makeArc_
//==========================================================================================
function pdfPlot$makeArc_(cx,cy,radius,start,sweep,first,cone)
{
	var d,text;
	var a1,a2,x1,y1,x2,y2;
	var p0x,p0y,p1x,p1y,p2x,p2y,p3x,p3y;
	var d1_x,d1_y,d2_x,d2_y,f,z;

	z = 0.552284749;		// 4 ( sqrt(2) - 1) / 3) * Radius
	f = sweep / 90;
	z = z * f;
	
	d = radius * z;		// 4 ( sqrt(2) - 1) / 3) * Radius

	a1 = start;
	a2 = (-(90 - sweep)) + start;
	a1 = (a1 / 180) * Math.PI;
	a2 = (a2 / 180) * Math.PI;

	x1 = radius;
	y1 = 0;

	x2 = 0;
	y2 = radius;

	d1_x = radius;
	d1_y = d;

	d2_x = d;
	d2_y = radius;

	p0x = x1 * Math.cos(a1);
	p0y = x1 * Math.sin(a1);
	
	p1x = (d1_x * Math.cos(a1)) - (d1_y * Math.sin(a1));
	p1y = (d1_x * Math.sin(a1)) + (d1_y * Math.cos(a1));
	
	p2x = - (y2 * Math.sin(a2));
	p2y = y2 * Math.cos(a2);
	
	p3x = (d2_x * Math.cos(a2)) - (d2_y * Math.sin(a2));
	p3y = (d2_x * Math.sin(a2)) + (d2_y * Math.cos(a2));

	p0x = p0x + cx;
	p0y = p0y + cy;

	p1x = p1x + cx;
	p1y = p1y + cy;

	p2x = p2x + cx;
	p2y = p2y + cy;

	p3x = p3x + cx;
	p3y = p3y + cy;

	text = '';
	if (first) 
	{		
		if (cone)
		{
			text = text +  cx + ' ' +  cy + ' m' + "\n";
			text = text + p0x + ' ' + p0y + ' l' + "\n";
		}
		else 
		{
			text = text + p0x + ' ' + p0y + ' m' + "\n";
		}
		
	}

	text = text + p1x + ' ' + p1y + ' ' + p3x + ' ' + p3y + ' ' + p2x + ' ' + p2y + ' c' + "\n";

	return text;
}
//==========================================================================================
//				pdfPlot$arc
//==========================================================================================
function pdfPlot$arc(cx,cy,radius,start,sweep)
{
	var weight;
	var text,dy,dx,color;
	var x1,y1,x2,y2,x3,y3,x2,y2,x3,y3;
	var q1,q2,q3,q4;
	var x0,y0,r,d;
	var xstart,xsweep,swp,first;

	cx = Math.round(cx * 1000) / 1000;
	cy = Math.round(cy * 1000) / 1000;

	r = Math.round(radius * 1000) / 1000;
	d = r * 0.552284749;		// 4 ( sqrt(2) - 1) / 3) * Radius

	if (sweep < 0)
	{
		start = start + sweep;
		sweep = - sweep;
	}

	start = (start + 360) % 360;
	if (sweep < 0) sweep = (sweep + 360) % 360;
	
//------- q1 ---------

	text = '';
	text = text + this.shapeStyle(true);

	xstart = start;
	xsweep = sweep;
	first = true;

	while (xsweep > 0)
	{
		swp = 90;
		if (swp > xsweep) swp = xsweep;
		xsweep = xsweep - swp;
		text = text + this.makeArc_(cx,cy,radius,xstart,swp,first);
		first = false;
		xstart = xstart + swp;
	}
	
	text = text + this.shapeStyleEnd(true);

	this.pdf.catalog.activePage.add(text);
}
//==========================================================================================
//				pdfPlot$cone
//==========================================================================================
function pdfPlot$cone(cx,cy,radius,start,sweep)
{
	var weight;
	var text,dy,dx,color;
	var x1,y1,x2,y2,x3,y3,x2,y2,x3,y3;
	var q1,q2,q3,q4;
	var x0,y0,r,d;
	var xstart,xsweep,swp,first;
	
	cx = Math.round(cx * 1000) / 1000;
	cy = Math.round(cy * 1000) / 1000;

	r = Math.round(radius * 1000) / 1000;
	d = r * 0.552284749;		// 4 ( sqrt(2) - 1) / 3) * Radius

	if (sweep < 0)
	{
		start = start + sweep;
		sweep = - sweep;
	}

	start = (start + 360) % 360;
	if (sweep < 0) sweep = (sweep + 360) % 360;

//------- q1 ---------

	text = '';
	text = this.shapeStyle(true);

	xstart = start;
	xsweep = sweep;
	first = true;

	while (xsweep > 0)
	{
		swp = 90;
		if (swp > xsweep) swp = xsweep;
		xsweep = xsweep - swp;
		text = text + this.makeArc_(cx,cy,radius,xstart,swp,first,true);
		first = false;
		xstart = xstart + swp;
	}
	
	text = text + 'h ' + "\n";		// close cone;
	text = text + this.shapeStyleEnd(true);

	this.pdf.catalog.activePage.add(text);

}
//==========================================================================================
//				pdfPlot$grid
//==========================================================================================
function pdfPlot$grid(x1, y1, x2, y2, rows, cols)
{
	var weight;
	var text,dy,dx,color;
	var dr,dc,r,c,tx,ty;
	var rows;

	x1 = Math.round(x1 * 1000) / 1000;
	y1 = Math.round(y1 * 1000) / 1000;
	
	x1 = Math.round(x1 * 1000) / 1000;
	y1 = Math.round(y1 * 1000) / 1000;

	x2 = Math.round(x2 * 1000) / 1000;
	y2 = Math.round(y2 * 1000) / 1000;
	
	dx = x2 - x1;
	dy = y2 - y1;
	weight = this.lineWeight;

	text = '';
	text = text + this.shapeStyle(true);
	text = text + x1 + ' ' + y1 + ' ' + dx + ' ' + dy + " re\n";

	if (cols < 1) cols = 1;
	if (rows < 1) rows = 1;

	dr = dy / rows;
	dc = dx / cols;
	
	ty = y1;
	tx = x1;

	for (r = 0; r < rows; ++r)
	{
		ty += dr;
		text = text + x1 + ' ' + ty + " m\n";
		text = text + x2 + ' ' + ty + " l\n";
	}

	for (c = 0; c < cols; ++c)
	{
		tx += dc;
		text = text + tx + ' ' + y1 + " m\n";
		text = text + tx + ' ' + y2 + " l\n";
	}

	text = text + this.shapeStyleEnd(true);
//	text = text + "S\n";	
	this.pdf.catalog.activePage.add(text);
}

//==========================================================================================
//				pdfPlot$shapeStyle
//==========================================================================================
function pdfPlot$shapeStyle(closed)
{
	var text,weight;
	
	text = 'q' + "\n";
	
	weight = this.lineWeight - 1;
	if (weight >= 0) text += weight + ' w' + "\n";

	text += this.pdf.colorText_(this.color).toUpperCase();
	text += this.lineStyleText_(this.lineStyle);
	text += this.transparentText_();

	if (! closed) return text;

	text += this.pdf.colorText_(this.fillColor);
	if (this.grayscale > 0) text = text + this.grayscale + ' g' + "\n";

	return text;
}
//==========================================================================================
//				pdfPlot$shapeStyleEnd
//==========================================================================================
function pdfPlot$shapeStyleEnd(closed)
{
	var text,weight;

	text = '';
	weight = this.lineWeight - 1;
	if (! closed) 
	{
		if (weight < 0) return '';
		return 'S' + "\n";
	}

	if ( ( (this.grayscale > 0) || (this.fillColor != '')))
	{
		if (weight < 0)
		{
			 text += 'F' + "\n";
		}
		else 
		{
			text += 'B' + "\n";
		}
	}
	else 
	{
		if (weight < 0) return '';
		text += 'S' + "\n";
	}

	text += 'Q' + "\n";

	return text;
}
//==========================================================================================
//				pdfPlot$transparentText_
//==========================================================================================
function pdfPlot$transparentText_()
{
	var text,index;

	if (! this.transparent) this.transparent = '';
	if (this.transparent == '') return '';
//	if (this.transparent == 1) return '';

	index = this.pdf.catalog.addExtGState('' + this.transparent);
	text = '/GS' + index + ' gs' + "\n";
	return text;

}
//==========================================================================================
//				pdfPlot$lineStyleText_
//==========================================================================================
function pdfPlot$lineStyleText_(name)
{
	name = '' + name;
	name = name.toLowerCase();

	if (name == '') return "[] 0 d\n";
	if (name == 'dot') return "[1 2] 1 d\n";
	if (name == 'dash') return "[4 2] 2 d\n";
	if (name == 'solid') return "[] 0 d\n";



	if (name.indexOf('[') < 0) return "[] 0 d\n";	// solid	
	return name + " d\n";		// pattern
}
//==========================================================================================
//				pdfPlot$setLineStyle
//==========================================================================================
function pdfPlot$setLineStyle(value)
{
	this.lineStyle = "" + value;
	this.lineStyle = this.lineStyle.toLowerCase();
}
//==========================================================================================
//				pdfPlot$setLineColor
//==========================================================================================
function pdfPlot$setLineColor(value)
{
    var obj;
    
    obj = this.pdf.parseColor_(value);
    this.color = obj.color;
    this.transparent = obj.opaque;

}
//==========================================================================================
//				pdfPlot$setFillColor
//==========================================================================================
function pdfPlot$setFillColor(value)
{
	var g,obj;
	
	this.grayscale = 0;
	this.fillColor = 0;
	obj = this.pdf.parseColor_(value);
	this.transparent = obj.opaque;

	g = parseFloat(value);
	if (isNaN(g) || (g <= 0) || (g > 1))
	{
	    this.fillColor = obj.color;
	    this.garyscale = obj.opaque;
	}
	else 
	{
		this.grayscale = g;
		this.fillColor = 0xfff00;	// needed for grayscale
	}
}
//==========================================================================================
//				pdfPlot$setLineWeight
//==========================================================================================
function pdfPlot$setLineWeight(value)
{
	this.lineWeight = 1;
	value = parseInt(value);
	if (isNaN(value)) return;
	this.lineWeight = value;

}
//==========================================================================================
//				pdfPlot$setTransparent
//==========================================================================================
function pdfPlot$setTransparent(value)
{
	if (! value) value = '';
	this.transparent = '' + value;
}
//==========================================================================================
//				pdf$clipBegin
//==========================================================================================
function pdfPlot$clipBegin(x1, y1, x2, y2)
{
	var weight;
	var text,dy,dx,color;

	if (! this.clip) return;
	
	x1 = Math.round(x1 * 1000) / 1000;
	y1 = Math.round(y1 * 1000) / 1000;

	x2 = Math.round(x2 * 1000) / 1000;
	y2 = Math.round(y2 * 1000) / 1000;
	
	dx = x2 - x1;
	dy = y2 - y1;

	text = "q\n";
	text = text + "W\n";
	text = text + x1 + ' ' + y1 + ' ' + dx + ' ' + dy + " re\n";
	text = text + "n\n";
	this.pdf.catalog.activePage.add(text);
}
//==========================================================================================
//				pdfPlot$clipEnd
//==========================================================================================
function pdfPlot$clipEnd()
{
	var text;

	if (! this.clip) return;
	

	text = "Q\n";
	this.pdf.catalog.activePage.add(text);
}
//==========================================================================================
//				pdfPlot$setFontSize
//==========================================================================================
function pdfPlot$setFontSize(size)
{
	this.fontSize = parseFloat(size);
	this.pdf.setFontSize(size);
}
//==========================================================================================
//				pdfPlot$setFontColor
//==========================================================================================
function pdfPlot$setFontColor(color)
{
	this.fontColor = color;
	this.pdf.setFontColor(color);
}
//==========================================================================================
//				pdfPlot$setFontName
//==========================================================================================
function pdfPlot$setFontName(name)
{
	this.fontName = name;
	this.pdf.setFontName(name);
}

"use strict";
//========================================================================================
//								Html.js
//	Author: Clifford L. Collins				Date: Feb 2013
//-----------------------------------------------------------------------------------------
//	Collins Software
//	7710 Janak Drive, Houston Texas 77055
//	http://CollinsSoftware.com
//=========================================================================================

//=========================================================================================
//									html
//=========================================================================================
function html$(sys,data,parent)
{
	var NODE_TEXT = 3;
	var NODE_TAG  = 1;
	var tag,i,name;

	this.sys			= sys;
	this.holdTag			= false;

	this.PDF_eventPrefix		= 'pdf';
	this.trace_border		= false;
	this.trace_mathml		= false;
	this.convertImageCommand = '';
	this.firstPdf			= null;
	this.onWordWidth		= null;
	this.onCharWidth		= null;

	this.database			= '';
	this.questionType		= 'mc';
	this.outputType			= '';
	this.formatRow			= true;

//	this.convertImageCommand = 'http://your-site/cgi-bin/CollinsImage.cgi?input={href}&format=.jpg';

	this.parent			= null;
	if (arguments.length > 3) this.parent = parent;

	if (parent == null)
	{
		 this.storage = new htmlstorage$(this);		// global macro storage
	}
	else
	{
		 this.storage = parent.storage;
	}
	
	this.isLoop			= false;
	this.nowrap			= false;
	this.graphicScale		= 110 / 72;
	this.resolved			= null;

	this.document			= null;
	this.cnn			= null;
	this.keepUnresolved		= true;

	this.remove_A			= true;

	this.default_fontName = 'helvetica';
//	this.default_fontName = 'times';
	this.default_fontSize = 10;

	this.initializeForeignOutput	= html$initializeForeignOutput;

	this.clear			= html$clear;	
	this.resize			= html$resize;
	this.writeToPdf			= html$writeToPdf;
	this.writeToPdfScale		= html$writeToPdfScale;
	this.writeToPdfFit		= html$writeToPdfFit;
	this.writePageBreak		= html$writePageBreak;
	this.getPdfHeight		= html$getPdfHeight;

	this.parse			= html$parse;
	this.loadFromUrl		= html$loadFromUrl;
	this.loadFromFile		= html$loadFromFile;

	this.setFontName		= html$setFontName;

	this.extractFileName		= html$extractFileName;
	this.setStyle			= html$setStyle;
	this.check_fit			= html$check_fit;

	this.pixelToPoint		= html$pixelToPoint;
	this.pointToPixel		= html$pointToPixel;

	this.pixelToInch_x		= html$pixelToInch_x;
	this.pixelToInch_y		= html$pixelToInch_y;

	this.getElementsByTagName	= html$getElementsByTagName;
	this.getElementsByTagName_A	= html$getElementsByTagName_A;
	
	this.tableAdjustCells_		= html$tableAdjustCells_;
	this.getAll				= html$getAll;
	this.getElements		= html$getElements;
	
	this.check_P			= html$check_P;
	this.parse_A			= html$parse_A;
	this.addText_			= html$addText_;
	this.parseTag_			= html$parseTag_;

	this.skipTag			= html$skipTag;
	this.skipScript_		= html$skipScript_;
	this.skipScript_A		= html$skipScript_A;
	this.addOutline			= html$addOutline;

	this.loadStyle_		= html$loadStyle_;
	this.loadGraphic_		= html$loadGraphic_;
	this.loadHtml_			= html$loadHtml_;
	this.processStart_		= html$processStart_;
	this.processEnd_		= html$processEnd_;
	this.createElement_		= html$createElement_;
	this.end_			= html$end_;
	this.end_TR			= html$end_TR;
	this.end_TD			= html$end_TD;
	this.end_TH			= html$end_TH;
	this.end_TIMELINE		= html$end_TIMELINE;

	this.findParent_		= html$findParent_;
	this.defineTable_		= html$defineTable_;
	this.defineTable_A		= html$defineTable_A;

	this.setOutput_			= html$setOutput_;
	this.getSize			= html$getSize;
	
	this.parseXml_			= html$parseXml_;
	this.startXml_			= html$startXml_;
	this.endXml_			= html$endXml_;
	this.mathML			= html$mathML;
	this.mathML_A			= html$mathML_A;
	this.mathML_decode		= html$mathML_decode;
	this.mathML_simpleChildren	= html$mathML_simpleChildren;
	
	this.start_MAP			= html$start_MAP;
	this.start_AREA			= html$start_AREA;
	this.start_LINK			= html$start_LINK;

	this.start_BR			= html$start_BR;
	this.start_META			= html$start_META;
	this.start_TITLE		= html$start_TITLE;
	this.start_BODY			= html$start_BODY;

	this.start_DT			= html$start_DT;
	this.start_DD			= html$start_DD;
	this.start_DL			= html$start_DL;

	this.start_OTHER		= html$start_OTHER;
	this.start_LABEL		= html$start_LABEL;
	this.start_P			= html$start_P;
	this.start_A			= html$start_A;
	this.start_FORM			= html$start_FORM;
	this.start_INPUT		= html$start_INPUT;
	this.start_TEXTAREA		= html$start_TEXTAREA;
	this.start_SELECT		= html$start_SELECT;
	this.start_OPTION		= html$start_OPTION;
	this.start_LI			= html$start_LI;
	this.start_BLOCKQUOTE		= html$start_BLOCKQUOTE;
	this.start_UL			= html$start_UL;
	this.start_OL			= html$start_OL;
	this.start_DIV			= html$start_DIV;
	this.start_FONT			= html$start_FONT;
	this.start_SMALL		= html$start_SMALL;
	this.start_BIG			= html$start_BIG;
	this.start_SPAN			= html$start_SPAN;
	this.start_PAGEBREAK		= html$start_PAGEBREAK;

	this.start_TABLE		= html$start_TABLE;
	this.start_THEAD		= html$start_THEAD;
	this.start_TFOOT		= html$start_TFOOT;
	this.start_TBODY		= html$start_TBODY;
	this.start_TR			= html$start_TR;
	this.start_TD			= html$start_TD;
	this.start_TH			= html$start_TH;

	this.start_IMG			= html$start_IMG;
	this.start_MACRO		= html$start_MACRO;
	this.start_PRE			= html$start_PRE;
	this.start_ECHO			= html$start_ECHO;
	this.start_TRACE		= html$start_TRACE;

	this.findMacro			= html$findMacro;

	this.start_B			= html$start_B;
	this.start_STRONG		= html$start_STRONG;
	this.start_I			= html$start_I;
	this.start_EM			= html$start_EM;
	this.start_U			= html$start_U;

	this.start_H			= html$start_H;
	this.start_HR			= html$start_HR;
	
	this.start_FRAMESET		= html$start_FRAMESET;
	this.start_FRAME		= html$start_FRAME;
	this.start_IFRAME		= html$start_IFRAME;

	this.start_DOC			= html$start_DOC;

	this.start_CONFIG		= html$start_CONFIG;
	this.start_GROUP		= html$start_GROUP;
	this.start_LOOP			= html$start_LOOP;
	this.start_GRAPHIC		= html$start_GRAPHIC;
	this.start_RAISE		= html$start_RAISE;
	this.start_DIVIDE		= html$start_DIVIDE;
	this.start_BY			= html$start_BY;
	this.start_POWER		= html$start_POWER;

	this.start_TIMELINE		= html$start_TIMELINE;
	this.start_SCHEDULE		= html$start_SCHEDULE;

	this.start_CALENDAR		= html$start_CALENDAR;
	this.start_EVENT		= html$start_EVENT;

	this.start_MATRIX		= html$start_MATRIX;
	this.start_CELL			= html$start_CELL;
	this.start_ROOT			= html$start_ROOT;
	this.start_QUANTITY		= html$start_QUANTITY;
	this.start_EXPONENT		= html$start_EXPONENT;

	this.start_INTEGRAL		= html$start_INTEGRAL;
	this.start_MIN			= html$start_MIN;
	this.start_MAX			= html$start_MAX;

	this.start_SUMMATION		= html$start_SUMMATION;
	this.start_RANGE		= html$start_RANGE;

	this.start_SET			= html$start_SET;
	this.start_SUB			= html$start_SUB;
	this.start_SUP			= html$start_SUP;
	this.start_ROW			= html$start_ROW;

	this.start_MC			= html$start_MC;
	this.start_E			= html$start_E;
	this.start_TF			= html$start_TF;
	this.start_FIB			= html$start_FIB;
	this.start_PDF			= html$start_PDF;
	this.start_HTML			= html$start_HTML;

	this.start_REPORT		= html$start_REPORT;
	this.start_REPORTGROUP		= html$start_REPORTGROUP;
	this.start_REPORTTABLE		= html$start_REPORTTABLE;
	this.start_DETAIL		= html$start_DETAIL;
	this.start_HEADER		= html$start_HEADER;
	this.start_FOOTER		= html$start_FOOTER;
	this.start_COLUMN		= html$start_COLUMN;
	this.start_RECORDS		= html$start_RECORDS;
	this.start_EVAL			= html$start_EVAL;

	this.dump			= html$dump;
	this.toString			= html$toString;
	this.toString_A			= html$toString_A;
	this.space_			= html$space_;
	this.decode_			= html$decode_;

	this.calendarToPdf		= html$calendarToPdf;
	this.timelineToPdf		= html$timelineToPdf;
	this.timelinePlace		= html$timelinePlace;
	this.scheduleToPdf		= html$scheduleToPdf;
	
	this.groupToPdf			= html$groupToPdf;

	this.reportToPdf		= html$reportToPdf;
	this.reportToPdf_A		= html$reportToPdf_A;

	this.textToPdf			= html$textToPdf;
	this.tabReplace			= html$tabReplace;

	this.reportWriteDetail		= html$reportWriteDetail;
	this.reportWriteDetail_A	= html$reportWriteDetail_A;
	this.reportWriteDetail_B	= html$reportWriteDetail_B;

	this.reportGroupHeader		= html$reportGroupHeader;
	this.reportGroupFooter		= html$reportGroupFooter;

	this.reportWriteDetailHeader	= html$reportWriteDetailHeader;

	this.resolve			= html$resolve;
	this.resolve_A			= html$resolve_A;
	this.resolveTag			= html$resolveTag;
	this.getResolve			= html$getResolve;
	this.resolveFunction		= html$resolveFunction;
	this.resolveWindow		= html$resolveWindow;

	this.formatDate			= html$formatDate;
	this.formatTime			= html$formatTime;
	this.formatDateTime		= html$formatDateTime;
	
	this.fromCsv			= html$fromCsv;
	this.fromCsv_A			= html$fromCsv_A;

	this.sqlList			= html$sqlList;
	this.sqlList_A			= html$sqlList_A;
	this.sqlValue			= html$sqlValue;
	this.sqlValueAll		= html$sqlValueAll;

	this.imageFilename		= html$imageFilename;

	this.groupReplaceValue		= html$groupReplaceValue;

	this.executeLoop		= html$executeLoop;
	this.getImageSize		= html$getImageSize;
	this.getImageSize_A		= html$getImageSize_A;
	this.jpegSize			= html$jpegSize;

	this.filename_size		= html$filename_size;

	this.trace			= html$trace;
	this.traceNode			= html$traceNode;
	this.trace_A			= html$trace_A;

	this.init			= html$init;
	this.getHeight			= html$getHeight;
	this.getWidth			= html$getWidth;
	this.isUrl_			= html$isUrl_;
	this.removeScriptComments_	= html$removeScriptComments_;
	
	this.addHours			= html$addHours;
	this.addDays			= html$addDays;
	this.getDaysInMonth		= html$getDaysInMonth;
	this.addDuration		= html$addDuration;

	this.r8				= html$r8;
	this.size_4			= html$size_4;
	this.trim			= html$trim;
	this.comma			= html$comma;
	this.find			= html$find;
	this.radian			= html$radian;
	this.colorByCount		= html$colorByCount;
	this.inlist			= html$inlist;
	this.compress			= html$compress;	
	this.parseFontSize		= html$parseFontSize;
	
	this.getMacro			= html$getMacro;
	this.init(10);

	if (arguments.length < 2) return;

//	if (data == '') return;
//	this.parse(data);
}
//===================================================
//			html$getAll
//===================================================
function html$getAll(tag)
{
	var all;

	all = new Array();
	this.body.getAll(all,[]);
	return all;

}
//===================================================
//			html$getElements
//===================================================
function html$getElements(tags)
{
	var all;

	all = new Array();
	this.body.getAll(all,tags);
	return all;

}
//===================================================
//			html$getMacro
//===================================================
function html$getMacro()
{
	var i,m,list;

	list = new Array();
	for (i=0; i < this.macros.length; ++i)
	{
		m = this.macros[i];
		list[m.id] = m.bin.last;
	}

	return list;
}
//===================================================
//                   html$addOutline
//===================================================
function html$addOutline(outline,xpos,ypos)
{ 
	var i,list,text,zoomFactor,title,a,owner,zoom;
	var x,y,tx,ty,pageLength,topMargin,leftMargin;

	pageLength = this.pdf.pageLength * 110;

	topMargin = pageLength - (this.pdf.ymax / 72 * 110);
	leftMargin = this.pdf.xmin / 72 * 110;

	xpos = leftMargin + xpos;
	ypos = topMargin + ypos;
	
	zoomFactor = 1;
	owner = '';

	i = outline.indexOf(';');
	if (i >= 0)
	{
		list = outline.split(';');
		
		for (i = 0; i < list.length; ++i)
		{
			text = this.trim(list[i]);
			if (text == '') continue;
			a = text.split(':');
			if (a.length < 2) continue;

			name = this.trim(a[0]);
			name = name.toLowerCase();
			text = this.trim(a[1]);
			
			if (name == 'title')
			{
				title = this.trim(a[1]);
				if (title != '') outline = title;
			}

			if (name == 'top')
			{
				y = parseInt(text);
				if (isNaN(y)) continue;
				if (text.substr(0,1) == '+') y = ypos + y;
				if (text.substr(0,1) == '-') y = ypos + y;		
				ypos = y;
			}

			if (name == 'left')
			{
				x = parseInt(text);
				if (isNaN(x)) continue;
				if (text.substr(0,1) == '+') x = xpos + x;
				if (text.substr(0,1) == '-') x = xpos + x;		
				xpos = x;
			}

			if (name == 'zoom')
			{
				y = parseInt(text);
				if (isNaN(y)) continue;
				if (y  < 10) continue ;
				if ( y > 6000) continue;
				zoomFactor = y / 100;
			}

			if (name == 'owner')
			{
				owner = this.trim(a[1]) + '~';
			}
		}
	}

	tx = xpos / 110 * 72;
	ty = (pageLength - ypos) / 110 * 72;

	this.pdf.addOutline(owner + outline,tx,ty,zoomFactor);	
}
//===================================================
//                   html$isUrl_
//===================================================
function html$isUrl_(filename)
{ 
	var temp;

	if (filename.substr(0,7).toUpperCase() == 'BASE64,')	return false;
	if (filename.substr(0,4).toUpperCase() == 'HEX,')	return false;
	if (filename.substr(0,8).toUpperCase() == 'ASCII85,')	return false;
	if (filename.substr(0,7).toUpperCase() == 'CANVAS:')	return false;
	if ((filename.substr(0,5).toUpperCase() == 'FILE,'))	return false;

	if (this.sys.isClient) return true;

	temp = filename.toLowerCase();
	if (temp.substr(0,6) == 'https:') return true;
	if (temp.substr(0,5) == 'http:') return true;
	
	return false;
}
//=====================================================
//		html$clear
//=====================================================
function html$clear()
{

	this.init(this.default_fontSize);

}
//=====================================================
//		html$getHeight
//=====================================================
function html$getHeight()
{
	return this.body.offsetHeight;
}
//=====================================================
//		html$getWidth
//=====================================================
function html$getWidth()
{
	return this.body.offsetWidth;
}
//=====================================================
//		html$trace
//=====================================================
function html$trace()
{
	var text;
	text = this.trace_A(this.body,0,'',false);
	return text;
}
//=====================================================
//		html$traceNode
//=====================================================
function html$traceNode()
{
	var text;

	text = this.trace_A(this.body,0,'',true);
	return text;
}
//=====================================================
//		html$trace_A
//=====================================================
function html$trace_A(ele,level,pname,nodes)
{
	var text,cname;

	cname = pname;

	text = '';

	if ((nodes && ele.isNode()) || (! nodes))
	{
		cname = ele.tagName;
		if (pname != '') cname = pname + '.' + ele.tagName;
	
		if (ele.nodeType == 3)
		{
			 text = level + ') ' + cname + ' "' + ele.text + '"\r\n';
		}
		else text = level + ') ' + cname + ' x: ' + ele.offsetLeft + ' y: ' + ele.offsetTop + ' height: ' + ele.offsetHeight + ' width: ' + ele.offsetWidth + '\r\n';
	}
	
	if (ele.firstChild != null) text += this.trace_A(ele.firstChild,level+1,cname,nodes);
	if (ele.nextSibling != null) text += this.trace_A(ele.nextSibling,level,pname,nodes);

	return text;

}
//============================================================================================
//			html$loadFromUrl
//============================================================================================
function html$loadFromUrl(url)
{
	var data;

	this.document = new htmlDocument$(this,url);
	data = this.document.read();
	this.parse('' + data);
}
//============================================================================================
//			html$loadFromFile
//============================================================================================
function html$loadFromFile(url)
{
	var data;
	
	data = this.sys.fileRead(url);
	this.parse(data);
}
//============================================================================================
//			html$init
//============================================================================================
function html$init(fontSize)
{		

	var fsize;
	
	fsize = parseFloat(fontSize);
	if (isNaN(fsize)) fsize = this.default_fontSize;
	
	this.level = new Object();
	this.level.B = 0;
	this.level.I = 0;
	this.level.U = 0;
	this.level.SUB = 0;
	this.level.SUP = 0;

	this.macros		= new Array();
	this.reports		= new Array();
	this.tables		= new Array();
	this.maps		= new Array();
	this.links		= new Array();
	this.metas		= new Array();
	this.framesets		= new Array();
	this.recordsets		= new Array();
	this.scripts		= new Array();
	
	this.marginLeft		= 0;
	this.marginRight	= 0;
	this.marginTop		= 0;
	this.marginBottom	= 0;
	
	this.title		= '';
	this.script		= '';

	this.bpi		= 110;		// bits per inch;
	this.imageScale		= 1;		// scale factor for all images
	this.factor		= 1;		// scale fortor for all elements;

	this.fontName		= this.default_fontName;	// default font, select 1 of times, courier, or Helvetica
	this.graphic		= '';
	this.group		= '';
	this.loop		= '';

	this.out		= null;
	this.pageHeader		= '';
	this.pageFooter		= '';
	this.column		= '';
	this.event		= '';
	
	this.rs			= null;

	this.activeFontName	= '';
	this.setFontName(this.fontName,true);

	this.style		= new htmlStyle$(this,'font-size:10; font-color:black',null);		// active Style

	this.href		= '';
	this.href_target	= '';
	this.href_title		= '';

	this.maxWidth		= 8.25 * this.bpi;
	this.x			= 0;
	this.y			= 0;

	this.font		= null;
	this.fonts		= new Array();
	this.fontCount		= 0;

	this.css		= new htmlCss$(this);
	this.pages = new Array();

	this.x			= 0;
	this.y			= 0;
	this.body = new htmlElement$(this,'body',0);

	this.body.style	= new htmlStyle$(this,'font-family:' + this.fontName + ';font-size:' + fsize + 'pt;color:black',null);
	this.body.setActive();

	this.activeElement	= this.body;
	this.fontSize		= fsize;	
	this.nowrap		= false;
}
//============================================================
//			html$setFontName
//============================================================
function html$setFontName(name,force)
{
	var i;
	
	if ((! force) && (name == this.activeFontName)) return;

	if (name == '') name = this.default_fontName;
	name = '' + name;
	name = name.toLowerCase();
	this.activeFontName = name;
	this.fontName = name;
	
	if (this.pdf != null)
	{
		this.pdf.setFontName(name,this.font_widths);
		return;
	}

//--------- Times Roman ----------
	
	if (name == 'times')
	{
	this.activeFontName = 'Times';

	this.font_widths = new Array(531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,
		531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,253,
		335,409,503,503,835,2,179,333,333,501,565,251,338,250,280,501,501,
		501,501,501,501,501,501,501,501,276,276,0,566,566,444,927,726,669,
		669,727,612,559,727,727,333,389,726,614,896,729,727,558,727,671,559,
		614,727,727,952,726,726,614,331,276,331,464,512,333,444,501,444,501,
		446,335,503,503,278,278,503,278,784,503,503,503,503,333,391,278,503,
		503,747,504,504,446,0,0,483,545,350,503,350,333,503,446,1009,503,
		503,335,995,561,335,897,350,616,350,350,333,333,446,446,350,503,1011,
		335,989,389,335,727,352,446,727,242,335,503,503,503,503,198,503,335,
		766,276,503,568,335,766,333,402,568,301,301,317,513,455,250,333,299,
		312,503,756,756,756,446,727,727,727,727,727,727,897,673,616,616,616,
		616,335,335,335,335,727,727,727,727,727,727,727,568,727,727,727,727,
		727,727,559,503,448,448,448,448,448,673,444,444,0,1227,444,444,278,
		278,278,278,503,503,503,503,503,503,503,570,503,503,503,503,503,503,
		503,503);
		return;
	}

	if (name == 'courier')
	{
		this.activeFontName = 'Courier';

		this.font_widths = new Array();
		for (i=0; i < 256; ++i)
		{
			this.font_widths[i] = 600;
		}
		return;
	}

//--------- Helvetica ----------

//	this.activeFontName = 'Helvetica';

	this.font_widths = new Array(750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,
			750,750,750,750,750,750,750,750,750,750,750,750,
			750,750,278,278,355,556,556,889,667,191,333,333,
			389,584,278,333,278,278,556,556,556,556,556,556,556,556,556,556,278,278,584,584,584,556,
			1015,667,667,722,722,667,611,778,722,278,500,667,556,833,722,778,667,778,722,667,611,722,
			667,944,667,667,611,278,278,278,469,556,333,556,556,500,556,556,278,556,556,222,222,500,
			222,833,556,556,556,556,333,500,278,556,500,722,500,500,500,334,260,334,584,750,556,750,
			222,556,333,1000,556,556,333,1000,667,333,1000,750,611,750,750,222,222,333,333,350,556,
			1000,333,1000,500,333,944,750,500,667,278,333,556,556,556,556,260,556,333,737,370,556,
			584,333,737,552,400,549,333,333,333,576,537,278,333,333,365,556,834,834,834,611,667,667,
			667,667,667,667,1000,722,667,667,667,667,278,278,278,278,722,722,778,778,778,778,778,584,
			778,722,722,722,722,667,667,611,556,556,556,556,556,556,889,500,556,556,556,556,278,278,
			278,278,556,556,556,556,556,556,556,549,611,556,556,556,556,500,556,500);
}
//============================================================
//                          html$getDaysInMonth
//============================================================
function html$getDaysInMonth(m,y) 
{
	var daysInMonth = new Array(31,28,31,30,31,30,31,31,30,31,30,31);
	var n;
	var a;
	
	n = daysInMonth[m];
	if (m != 1) return n;		// not Feb.

	a = 0;
	if ((y % 4) == 0) a = 1;	// not a leap year;
	if ((y % 100) == 0) a = 0;  // cannot fall on 100 years (except if div by 400)
	if ((y % 400) == 0) a = 1;   // Leap year is every 400 years

	n = n + a;				// feb;
	return n;
}

//============================================================================================
//				html$addDuration
//============================================================================================
function html$addDuration(startDate,value)
{
	var HOURS_PER_DAY   =  24;
	var HOURS_PER_WEEK  =   7 * HOURS_PER_DAY;
	var n,dim,list,i,g;
	var y,m,d;
	var endDate;
	
	value = this.trim(value);
	if (value == '') return startDate;
		
	list = value.split(' ');

	if (list.length != 2) return startDate;
	n = parseFloat(list[0]);

	if (isNaN(n)) return startDate;
	if (n <= 0) return startDate;
	
	if (list[1] ==  'hour') return this.addHours(startDate,n);
	if (list[1] ==   'day') return this.addHours(n * HOURS_PER_DAY);
	if (list[1] ==  'week') return this.addHours(n * HOURS_PER_WEEK);

	y = startDate.getYear();
	m = startDate.getMonth();
	d = startDate.getDate();

	if (list[1] == 'month')
	{
		for (i = 0; i < n; ++i)
		{
			m = m + 1;
			if (m > 11)
			{
				m = 0;
				y = y + 1;
			}
		}
		
		dim = this.getDaysInMonth(m,y);
		if (g > dim) d = dim;
		endDate = new Date(y,m,d);
		return endDate;
	}
	
	if (list[1] ==  'year')
	{
		y = y + n;
		dim = this.getDaysInMonth(m,y);
		if (d > dim) d = dim;
		endDate = new Date(y,m,d);
		return endDate;
	}
	
	return startDate;

}
//============================================================
//                      html$addHours
//============================================================
function  html$addDays(ydate,days)
{
	var hours;
	
	hours = days * 24;
	return this.addHours(ydate,hours);

}
//============================================================
//                       html$addHours
//============================================================
function  html$addHours(ydate,hours)
{
	var y,d,m;
	var xdate,dh,dm,h,m,mth;

	xdate = new Date(ydate);

	if (hours == 0) return xdate;

	dh = xdate.getHours();
	dm = xdate.getMinutes();
	h = dh + hours + (dm / 60);
	dh = Math.floor(h);
	m = Math.round((h - dh) * 60);

	while (dh < 0)
	{
		xdate = this.addDays(xdate,-1);
		dh = dh + 24;		
	}

	while (dh > 24)
	{
		xdate = this.addDays(xdate,1);
		dh = dh - 24;
	}

	y   = xdate.getFullYear();
	mth = xdate.getMonth();
	d   = xdate.getDate();

	xdate = new Date(y,mth,d,dh,m);
	return xdate;
}
//============================================================================================
//				html$timelineToPdf
//============================================================================================
function html$timelineToPdf(pdf,ele,x,y,height,width)
{
	var min,max,month,r,xhtml;
	var height,width,cal,i,j,k,e,n;
	var row,col,day,xmin,ymin,xmax,ymax;
	var save,xday,g,line;
	var startDate,endDate,resolution;
	var xhtml,margin,gutter,align,xpos,pnt;
	var x1,y1,x2,y2,offset;
	var points,ypos,px,py;
	
	startDate = ele.startDate;
	endDate = ele.endDate;
	
	if (ele.duration != '') endDate = this.addDuration(startDate,ele.duration);
	
	pdf.drawTimeline(startDate,endDate,x,y,height,width,ele);

	xhtml = new html$(this.sys);

	align = 0;
	if (align == 'center') align = 0.5;
	if (align == 'right') align = 1;

	margin = 10;
	gutter = 4;

//------------------- Make List of Timeline Points ----------------

	points = new Array();

	for (i=0; i < ele.events.length; ++i)
	{
		e = ele.events[i];
		xhtml.init(ele.eventFontSize);
		xhtml.parse(e.htmlData);
		xhtml.resize(width,height);

		e.height = xhtml.body.offsetHeight;
		e.width = xhtml.body.offsetWidth;
	
		xpos = pdf.graphic.timelinePosition(e.startDate);
		if (xpos < 0) continue;					// not on timeline

		n = points.length;						// assume new entry;

//------------------- insert sortted -----------------
			
		for (j=0;  j < points.length; ++j)
		{
			pnt = points[j];
			if (pnt.xpos == xpos)
			{
				pnt.list[pnt.list.length] = e;	// stack events;
				if (e.width > pnt.width) pnt.width = e.width;
				pnt.height = pnt.height + e.height;
				n = -1;    // no entry;
				break;
			}
			
			if (pnt.xpos > xpos)
			{
				for (k = points.length; k > j;  --k) 
				{
					points[k] = points[k-1];
					points[k].index = k;
				}
				n = j;
				break;
			}
		}
		
		if (n >= 0) 
		{
			pnt = new Object();
			pnt.xpos = xpos;
			pnt.ypos = 0;
			pnt.height = e.height;
			pnt.width = e.width;
			pnt.list = new Array();
			pnt.list[0] = e;
			pnt.index = n;
			points[n] = pnt;
		}
	}		
	
//---------------------------- place events -------------------------------

	if (ele.eventPlacement == 'down') margin = -margin;

	pdf.setGraphicFillColor('');

	pdf.setGraphicColor(ele.leaderColor);
	pdf.setGraphicLineStyle(ele.leaderStyle);
	pdf.setGraphicLineWeight(ele.leaderWidth);
//	pdf.setGraphicFillColor(ele.leaderFillColor);

	pdf.holdPage = true;

	for (i=points.length-1; i >= 0; --i)
	{
		pnt = points[i];
		pdf.setGraphicFillColor('');

		this.timelinePlace(pdf,pnt,points,margin,align,ele.eventPlacement,1);
		pdf.graphic.timelineLeader(pnt.xpos,pnt.xmin,pnt.ymin,pnt.xmax,pnt.ymax,ele.leaderType);
		
		ypos = pdf.graphic.timeline.cy + pnt.ymax;

		e = pnt.list[0];
		px = pnt.xpos;
		py = pdf.graphic.timeline.cy;
		pdf.setFontSize(e.markerSize);
		pdf.setFontColor(e.markerColor);
		pdf.setGraphicFillColor('');
		
		if (e.markerShape == 'circle') pdf.drawSymbol_A(px,py,'Z154',0);
		if (e.markerShape == 'box') pdf.drawSymbol_A(px,py,'Z156',0);
		if (e.markerShape == 'square') pdf.drawSymbol_A(px,py,'Z156',0);
		if (e.markerShape == 'star') pdf.drawSymbol_A(px,py,'Z110',0);
		if (e.markerShape == 'triangle') pdf.drawSymbol_A(px,py,'Z163',0);
		if (e.markerShape == 'diamond') pdf.drawSymbol_A(px,py,'Z165',0);
		if (e.markerShape == 'club') pdf.drawSymbol_A(px,py,'Z250',0);
		if (e.markerShape == 'heart') pdf.drawSymbol_A(px,py,'Z252',0);
		if (e.markerShape == 'spade') pdf.drawSymbol_A(px,py,'Z253',0);

		offset = 0;
		
		for (j=0; j < pnt.list.length; ++j)
		{
			e = pnt.list[j];
			xhtml.init(ele.eventFontSize);
			xhtml.parse(e.htmlData);

			xhtml.resize(width,height);

			pdf.setGraphicFillColor(e.color);

			y1 = pdf.graphic.timeline.cy;
			y2 = y1 - e.height;
			x1 = pnt.xmin;
			x2 = pnt.xmax;

			if (e.color != '')
			{

				pdf.setGraphicFillColor(e.color);
				pdf.drawRectangle_A(x1,y1,x2,y2);
			}

			offset = offset - e.height;

			xhtml.body.write(pdf,x1,y1);
		}
	}


	pdf.setGraphicFillColor('');
	pdf.holdPage = false;

 }
//============================================================================================
//				html$timelinePlace
//============================================================================================
function html$timelinePlace(pdf,pnt,points,ypos,align,placement,cnt)
{
	var i,y,p;
	
	if (cnt > 30) return;

	pnt.xmin = (pnt.xpos + (pnt.width * align)) - 0;
	pnt.xmax = (pnt.xmin + pnt.width) + 4 ;
	pnt.ymin = ypos;
	
	if (ypos >= 0) 
	{	
		pnt.ymin = ypos;
		pnt.ymax = pnt.ymin + pnt.height;
	}
	else
	{
		pnt.ymax = ypos - 8;
		pnt.ymin = pnt.ymax - pnt.height;
	}

	for (i=pnt.index+1; i < points.length; ++i)
	{
		p = points[i];
	  
		if ((pnt.xmax <= p.xmin) || (pnt.xmin >= p.xmax)) continue;
		if ((ypos < 0) && (pnt.ymax <= (p.ymin - 4))) continue;
		if ((ypos > 0) && (pnt.ymin >= (p.ymax + 4))) continue;

		if (placement == 'updown')
		{
			if (ypos > 0) 
			{
			this.timelinePlace(pdf,pnt,points,-ypos,align,placement,cnt+1);
				return;
			}
		}

		y = Math.abs(ypos) + 8;
		this.timelinePlace(pdf,pnt,points,y,align,placement,cnt+1);
		return;
	}
}
//============================================================================================
//				html$scheduleToPdf
//============================================================================================
function html$scheduleToPdf(pdf,ele,x,y,height,width)
{

}
//============================================================================================
//				html$calendarToPdf
//============================================================================================
function html$calendarToPdf(pdf,ele,x,y,height,width)
{
	var min,max,month,r,xhtml;
	var height,width,cal,i,e,text;
	var row,col,day,xmin,ymin,xmax,ymax;
	var save,xday;
	
	cal = pdf.drawCalendar(ele.year,ele.month,x,y,height,width,ele.border,ele.events,ele.noref);

//	return;
	xhtml = new html$(this.sys);

	xhtml.fontSize = 8;	
	
	pdf.holdPage = true;

	for (day=1; day <= cal.dim; ++day)
	{
		e = ele.events[day];
		if (this.trim(e.htmlData) == '') continue;		
		text = this.resolve(e.htmlData);
		if (text == '') continue;
	
		xday = (cal.firstColumn + day) - 1;
		row = Math.floor(xday / 7);
		col = xday % 7;
		

		xmin = cal.x + (col * cal.dx);
		xmax = xmin + cal.offsetWidth;
//		ymin = (cal.y - (row * cal.dy)) - (cal.dy - cal.offsetHeight);
		ymin = (cal.y - ((row + 1) * cal.dy));
		ymax = ymin + cal.offsetHeight;

		xhtml.init(10);
		xhtml.parse(text);

		xhtml.resize(cal.dx / 72 * 110,cal.dy / 72 * 110);

		x = (xmin - pdf.xmin) / 72 * 110;
		y = (pdf.ymax - ymin) / 72 * 110;

		y = y - xhtml.body.offsetHeight;

		xhtml.body.write(pdf,x+2,y-4);
	}

	pdf.holdPage = false;

}
//============================================================================================
//				html$textToPdf
//============================================================================================
function html$textToPdf(out,x,y,text)
{
	var lines,i;
	
	lines = text.split(String.fromCharCode(3));
	out.setPosition(x,y);
	out.setFontName('courier');
	out.setFontSize('10');

	for (i=0; i < lines.length; ++i)
	{
		out.addText(this.tabReplace(lines[i]));
		out.lineBreak();
	}
}
//============================================================================================
//				html$tabReplace
//============================================================================================
function html$tabReplace(text)
{
	var data,blank,i,c,n,r;
	
	blank = '      ';
	data = '';
	for (i=0; i < text.length; ++i)
	{
		c = text.charAt(i);
		if (c == "\t") 
		{
			n = data.length;
			r = 4 - (n % 4);
			data += blank.substr(0,n);
			continue;
		}
		data += c;
	}	
	
	return data;
}
//============================================================================================
//				html$reportToPdf
//============================================================================================
function html$reportToPdf(out,x,y,ele)
{
	var xmin,ymin,xmax,ymax;
	var px1,py1,px2,py2;
	var pageHeight,pageWidth;
	var height,width;
	var padWidth,padHeight;
	var clipReport,text;

	clipReport = false;
	if ((ele.fixed_width) && (ele.fixed_width)) clipReport = true;

	if (ele.fit && clipReport) clipReport = false;
		
	if (clipReport)
	{	
		xmin = x;
		ymin = y;
		xmax = xmin + ele.iwidth;
		ymax = ymin + ele.iheight;

		px1 = this.pixelToInch_x(xmin);
		py1 = this.pixelToInch_y(ymin);
		px2 = this.pixelToInch_x(xmax);
		py2 = this.pixelToInch_y(ymax);

		ele.writeBackground(out,xmin,ymin,xmax,ymax);
		ele.writeBorder(out,xmin,ymin,xmax,ymax);

		out.clip = true;
		out.clipBegin(px1,py1,px2,py2);
	}
	
	this.reportToPdf_A(out,x,y,ele);

	if (clipReport)
	{	
		out.clipEnd();
		out.clip = false;
		ele.offsetWidth = ele.iwidth;
		ele.offsetHeight = ele.iheight;
		return;
	}

	if (ele.fit)
	{

		padWidth = out.marginLeft + out.marginRight;		
		padHeight = out.marginTop + out.marginBottom;

		xmin = x;
		ymin = y;
		xmax = x + ele.clientWidth;
		ymax = y + ele.clientHeight;
		ele.writeBorder(out,xmin,ymin,xmax,ymax);

		width = xmax + (padWidth * 110 / 72);
		height = ymax + (padHeight * 110 / 72);

		if (height < (11 * 110)) height = 11 * 110;
		if (width < (8.5 * 110)) width = 8.5 * 110;

		pageHeight = height + this.marginTop + this.marginBottom + 0;
		pageWidth = width;

		this.body.active.maxHeight = pageHeight;

		pageHeight = pageHeight / 110;
		pageWidth = pageWidth / 110;

		text = pageWidth + ',' + pageHeight;
		out.setPageSize(text,true);
	}
}
//============================================================================================
//				html$reportToPdf_A
//============================================================================================
function html$reportToPdf_A(out,x,y,ele)
{
	var xhtml,list,i,data,value;
	var height,dy,last,sql,index;
	var min,max,rs,g,keys,sql;
	var left,right;
	var wudth,filler,detail;

	min = 0;
	max = -1;

	this.keepUnresolved = true;
	this.rs = null;

	if (ele.table != '')
	{
		for (i=0; i < this.recordsets.length; ++i)
		{
			if (this.recordsets[i].id == ele.table)
			{
				this.rs = this.recordsets[i];
				this.rs.pos = 0;
				min = 1;
				max = this.rs.records.length;
				break;
			}
		}
		if ((rs == null) && (this.parent != null))
		{
	
			for (i=0; i < this.parent.recordsets.length; ++i)
			{
				if (this.parent.recordsets[i].id == ele.table)
				{
					this.rs = this.parent.recordsets[i];
					this.rs.pos = 0;
					min = 1;
					max = this.rs.records.length;
					break;
				}
			}
		}
	}

	if (ele.sql != '')
	{
		sql = this.resolve(ele.sql);
		this.rs = this.sys.sqlRead(sql);
		if (this.rs == null) return;
		min = 1;
		this.rs.MoveLast();
		max = this.rs.RecordCount;
		this.rs.MoveFirst();
	}

	xhtml = new Array();

	for (i=0; i < ele.maxColumn; ++i)
	{
		xhtml[i] = new html$(this.sys,'',this);
		xhtml[i].parent = this;
		xhtml[i].default_fontName = ele.font.fontName;
		xhtml[i].default_fontSize = ele.font.fontSize;

	}

	out.html = this;
	this.grid = new htmlGrid$(this,out,ele,x,y);
	this.grid.xhtml = xhtml;
	
	keys = new Array(ele.groups.length);

	this.keeptogether = false;
	for (i=0; i < ele.groups.length; ++i)
	{

			g = ele.groups[i];
			g.count	= 0;
			g.rowCount	= 0;
			g.index		= i;
			g.keyValue	= '';

			if (g.keeptogether) this.keeptogether = true;
	}

//------------------- report header -------------

	if (ele.header != null)
	{
		if (ele.header.pageBreakBeore) this.grid.pageBreak();
		this.grid.writeFull(ele.header.data);
		if (ele.header.pageBreakAfter) this.grid.pageBreak();
	}

//------------------ report details  --------------

		this.reportWriteDetail(min,max);

//----------------- report flush ------------

	if (this.rs != null)
	{
		this.rs.Close();
		this.rs = null;
	}

	for (index=0; index < ele.groups.length; ++index)
	{
		g = ele.groups[index];
		this.reportGroupFooter(out,g,false);
	}


	this.grid.done();
	 
//--------------------- report footer ---------------

	if (ele.footer != null)
	{
		if (ele.footer.pageBreakBeore) this.grid.pageBreak();
		this.grid.writeFull(ele.footer.data);
		if (ele.footer.pageBreakAfter) this.grid.pageBreak();
	}

	ele.clientHeight = this.grid.offsetHeight;
	ele.clientWidth = this.grid.offsetWidth;
	this.body.offsetHeight = this.grid.offsetHeight;
	this.body.offsetWidth = this.grid.offsetWidth;
}
//============================================================================================
//				html$reportWriteDetail
//============================================================================================
function html$reportWriteDetail(min,max)
{
	var ele,i,g;

	ele = this.grid.ele;

//	if (ele.rowsPerColumn != '') return this.reportWriteDetail_look(min,max);
//	if (this.keeptogether) return this.reportWriteDetail_keep(min,max,0);

//----------- simple ---------------

	if (this.rs == null) return;

//	this.rs.Move(min+1,1);
	for (i=min; i <= max; ++i)
	{
		this.reportWriteDetail_B(i);
		this.rs.MoveNext();
	}

	for (i = ele.groups.length-1; i >= 0; --i)
	{
		g = ele.groups[i];
		this.reportGroupFooter(g);
		g.rowCount = 0;
	}

}
//============================================================================================
//				html$reportWriteDetail_B
//============================================================================================
function html$reportWriteDetail_B(count)
{
	var i,j,c,text,g,name,detail,index,key,m;
	var dx,dy,column,d,ypos,continued;
	var maxHeight,x,b,list,newgroup;
	var xmin,ymin,xmax,ymax,header,n,remain;
	var xoff,yoff,text,ele,xhtml,width;
	var used,need,filler,dname,footer;
	var xpad,ypad,dname;
	
	xhtml = this.grid.xhtml;
	ele = this.grid.ele;

	newgroup = false;
	g == null;

	for (index=0; index < ele.groups.length; ++index)
	{
		g = ele.groups[index];
		key = this.resolve(g.key).toLowerCase();
		if ((g.rowCount == 0) || (g.keyValue != key)) newgroup = true;
		if (newgroup)  this.reportGroupHeader(ele.groups,index,key);
		g.keyValue = key;
		g.rowCount += 1;
	}

	name = this.resolve(ele.detail);
	detail = ele.details[0];

	xpad = 0;
	if (detail.borderLeft > 0) xpad += detail.borderLeft-1;
	if (detail.borderRight > 0) xpad += detail.borderRight-1;

	ypad = 0;
	if (detail.borderTop > 0) ypad += detail.borderTop-1;
	if (detail.borderBottom > 0) ypad += detail.borderBottom-1;

	if (newgroup)
	{
		for (i=0; i < ele.details.length; ++i) ele.details[i].count = 0;
	}
	
	d = null;
	for (i=0; i < ele.details.length; ++i)
	{
		d = ele.details[i];
		dname = this.resolve(d.id);
		if (name == dname.toLowerCase())
		{
			detail = d;
			break;
		}
	}

//----------------------- Run Macros ----------------------------

	for (i=0; i < detail.macros.length; ++i)	
	{
		m = detail.macros[i];
		m.run(this);
	}	

//----------------------- detail header ----------------------------

	if (! detail.defined)
	{
		detail.defined = true;
		detail.count = 0;
		detail.headerHeight = 0;
		detail.footerHeight = 0;
		c = -1;

//-------------------------- columns -----------------------------------

		used = 0;
		need = new Array();
		

		for (i=0; i < detail.columns.length; ++i)
		{
			column = detail.columns[i];
			width = column.width;
			if ((width == '') || (width == '*')) 
			{
				need[need.length] = i;
			}
			else
			{
				width = parseInt(column.width);
				if (isNaN(width)) 
				{
					need[need.length] = i;
					continue;
				}
			
				if (column.width.substr(column.width.length-1) == '%')
				{
					width = Math.floor((width / 100) * this.grid.columnWidth);
				}

				column.width = width;
				used += width;
			}
		}
				
		if (need.length > 0)
		{
		    width = (this.grid.columnWidth - used) / need.length;
		    for (i=0; i < need.length; ++i)
		    {
			column = detail.columns[need[i]];
			column.width = width;
		    }
		}		    
				
//----------------------- header ---------------------------------------

		for (i=0; i < detail.headers.length; ++i)
		{
			header = detail.headers[i];
			width = 0;
			for (j=0; j < header.colspan; ++j)
			{
				c = c + 1;
				if (c >= detail.columns.length) continue;
				column = detail.columns[c];
				width += column.width;
				if (j > 0) width += detail.cellspacing + ypad;
			}

			header.width = width;
			header.html = new html$(this.sys,'',this);
			header.html.default_fontName = detail.font.fontName;
			header.html.init(ele.font.size);
			header.html.parse('<font color=' + detail.headColor + ' face="' + detail.font.fontName + '">' + header.data + '</font>');

			header.html.resize(width,0);
			if (header.html.body.offsetHeight > detail.headerHeight) detail.headerHeight = header.html.body.offsetHeight;

		}	
		if (detail.headerHeight > 0) detail.headerHeight += detail.cellpadding * 2 + detail.borderBottom;

//---------------------------- footer ------------------------------------------
		c = -1;

		for (i=0; i < detail.footers.length; ++i)
		{
			footer = detail.footers[i];
			width = 0;
			for (j=0; j < footer.colspan; ++j)
			{
				c = c + 1;
				if (c >= detail.columns.length) continue;
				column = detail.columns[c];
				width += column.width;
				if (j > 0) width += detail.cellspacing + (detail.cellpadding + detail.border) * 2;
			}

			footer.width = width;
			footer.html = new html$(this.sys,'',this);
			footer.html.default_fontName = detail.font.fontName;

			footer.html.init(detail.font.size);
			footer.html.parse(footer.data);

			footer.html.resize(width,0);
			if (footer.html.body.offsetHeight > detail.footerHeight) detail.footerHeight = footer.html.body.offsetHeight;

		}	

		if (detail.footerHeight > 0) detail.footerHeight += ((detail.cellpadding + detail.border) * 2);


	}

//----------------------- Fit Columns ----------------------------

	maxHeight = 0;
	detail.count += 1;

	for (i=0; i < detail.columns.length; ++i)
	{
		column = detail.columns[i];

		width = column.width - (detail.cellpadding * 2);
		if (width <= 0) width = this.grid.maxWidth;

		text = column.data;
		text = text.replace(/\{count\}/ig,count);
		text = text.replace(/\{detail\}/ig,detail.count);
		text = this.resolve(text);

		xhtml[i].default_fontName = detail.font.fontName;
		xhtml[i].init(detail.font.fontSize);
		xhtml[i].nowrap = column.nowrap;
		xhtml[i].parse(text);

		xhtml[i].resize(width,0);

		b = xhtml[i].body;
		if (xhtml[i].body.offsetHeight > maxHeight) maxHeight = xhtml[i].body.offsetHeight;
	}

	this.reportWriteDetail_A(maxHeight,detail);
}
//==================================================================================
//				reportWriteDetail_A
//==================================================================================
function html$reportWriteDetail_A(maxHeight,detail)
{
	var i,x,xhtml,dx,dy,xoff,yoff;
	var xmin,ymin,xmax,ymax,px,py;
	var column,hoffset;
	var xpad,ypad,save;


	xhtml = this.grid.xhtml;

	this.lastDetail = detail;

	xpad = 0;
	if (detail.borderLeft > 0) xpad += detail.borderLeft - 1;
	if (detail.borderRight > 0) xpad += detail.borderRight - 1;

	ypad = 0;
	if (detail.borderTop > 0) ypad += detail.borderTop-1;
	if (detail.borderBottom > 0) ypad += detail.borderBottom-1;

//------------------ startDetail -----------------

	if ((this.grid.row == 1) || (detail.count == 1))
	{
		hoffset = detail.headerHeight + detail.cellspacing + detail.borderTop;		
		maxHeight += hoffset;
		this.grid.pos(maxHeight);
		this.grid.start(maxHeight);
		this.reportWriteDetailHeader(detail);
	}
	else
	{
		hoffset = 0;
		this.grid.pos(maxHeight);
		
		if (this.grid.row == 1)
		{
			hoffset = detail.headerHeight + detail.cellspacing + detail.borderTop + detail.borderBottom;		
			maxHeight += hoffset;

			this.grid.start(maxHeight);
			this.reportWriteDetailHeader(detail);
		}
		else
		{
		 this.grid.start(maxHeight);
		}
	}	
 
//------------------ write detail ----------------

	x = this.grid.xpos + this.grid.x + detail.border;

	for (i=0; i < detail.columns.length; ++i)
	{
		column = detail.columns[i];
		dy = maxHeight - (xhtml[i].body.offsetHeight + detail.cellpadding + detail.border + hoffset);
		dx = column.width - (xhtml[i].body.offsetWidth + ((detail.cellpadding + xpad) * 2));

		xoff = 0;
		yoff = 0;
		if (column.align == 'center') xoff = dx / 2;
		if (column.align == 'right')  xoff = dx;

		if (column.valign == 'center') yoff = dy / 2;
		if (column.valign == 'middle') yoff = dy / 2;
		if (column.valign == 'bottom') yoff = dy;

		px = x + xoff + detail.cellpadding;
		py = this.grid.ypos + this.grid.y + yoff + hoffset + detail.cellpadding;
		
		xmin = x;
		ymin = this.grid.ypos + this.grid.y + hoffset;
		xmax = xmin + column.width;
		ymax = (ymin + maxHeight + (detail.cellpadding * 2)) - hoffset; 

		this.grid.updateSize(xmax,ymax);

		save = detail.style.backgroundColor;
		if (column.bgcolor != '')
		{
			detail.style.backgroundColor = this.resolve(column.bgcolor);
		}

		detail.writeBackground(this.grid.out,xmin,ymin,xmax,ymax);
		detail.writeBorder(this.grid.out,xmin,ymin,xmax,ymax);

		detail.style.backgroundColor = save;

		xhtml[i].body.write(this.grid.out,px,py);
		x += column.width + detail.cellspacing + xpad;
	}		

//------------------ end detail -----------------

	maxHeight = maxHeight + detail.cellspacing + detail.borderTop + (detail.cellpadding * 2);

	this.grid.end(maxHeight);
		
}
//==================================================================================
//				reportWriteDetailHeader
//==================================================================================
function html$reportWriteDetailHeader(detail)
{
	var i,x,xhtml,dx,dy,xoff,yoff;
	var xmin,ymin,xmax,ymax,px,py;
	var column,header,j,c,width;
	var maxHeight;
	var xpad,ypad;
	 
//------------------ write detail ----------------

	x = this.grid.xpos + this.grid.x + detail.border + detail.cellspacing;

	xpad = 0;
	if (detail.borderLeft > 0) xpad += detail.borderLeft - 1;
	if (detail.borderRight > 0) xpad += detail.borderRight - 1;

	ypad = 0;
	if (detail.borderTop > 0) ypad += detail.borderTop-1;
	if (detail.borderBottom > 0) ypad += detail.borderBottom-1;

	c = -1;
	for (i=0; i < detail.headers.length; ++i)
	{
		header = detail.headers[i];
		if (header.width == 0) continue;

		dy = detail.headerHeight - (header.html.body.offsetHeight + (detail.cellpadding * 2) + detail.borderTop + detail.borderBottom);
		dx = header.width - (header.html.body.offsetWidth + (detail.cellpadding * 2) + detail.borderLeft + detail.borderRight);

		xoff = 0;
		yoff = 2;
		if (header.align == 'center') xoff = dx / 2;
		if (header.align == 'right')  xoff = dx;

		if (header.valign == 'center') yoff = dy / 2;
		if (header.valign == 'middle') yoff = dy / 2;
		if (header.valign == 'bottom') yoff = dy;

		px = x + xoff + detail.cellpadding + detail.borderLeft;
		py = this.grid.ypos + this.grid.y + yoff + detail.cellpadding;
		
		xmin = x;
		ymin = this.grid.ypos + this.grid.y;
		xmax = xmin + header.width;
		ymax = ymin + detail.headerHeight; 

		this.grid.updateSize(xmax,ymax);

		header.style.backgroundColor = detail.headBackground;

		
		header.writeBackground(this.grid.out,xmin,ymin,xmax,ymax);
		detail.writeBorder(this.grid.out,xmin,ymin,xmax,ymax);

		header.html.body.write(this.grid.out,px,py);
		x += header.width + detail.cellspacing + xpad;
	}		
}
//============================================================================================
//				html$onGroupHeader
//============================================================================================
function html$reportGroupHeader(groups,index,key)
{
	var g, width, xhtml,i;

	xhtml = this.grid.xhtml[0];

	for (i=index; i < groups.length; ++i)
	{
		g = groups[i];
		this.reportGroupFooter(g);
		g.rowCount = 0;
	}

	g = groups[index];
	g.count = g.count + 1;

	if (this.grid.columnOrder) 
	{
		width = this.grid.ele.active.maxWidth;
		this.grid.reset();
	}
	else
	{
		width = this.grid.columnWidth;
	}

	if (g.header == null) return;
	if (g.header.pageBreakBefore) this.grid.pageBreak();
	this.grid.write_A(g.header.data,width);
	if (g.header.pageBreakAfter) this.grid.pageBreak();
}
//============================================================================================
//				html$reportGroupFooter
//============================================================================================
function html$reportGroupFooter(g)
{
	var xhtml, width;

	if (g.footer == null) return;

	if (g.count == 0) return;
	if ((g.rowCount == 0) && g.skipIfBlank) return;

	xhtml = this.grid.xhtml[0];

	width = this.grid.columnWidth;
	if (this.grid.columnOrder) width = this.grid.ele.active.maxWidth;

	this.grid.ypos += this.grid.maxRowHeight;
	this.grid.maxRowHeight = 0;
	if (this.grid.columnOrder) this.grid.curColumn = 0;

	if (g.footer.pageBreakBefore) this.grid.pageBreak();

	this.grid.write_A(g.footer.data,width);	
	if (g.footer.pageBreakAfter) this.grid.pageBreak();
}
//============================================================================================
//				html$executeLoop
//============================================================================================
function html$executeLoop(ele)
{
	var xhtml,rs,count,rad,re,by,index;
	var list,min,max,i,data,value,last;
	
	xhtml = new html$(this.sys,'',this);
	xhtml.isLoop = true;

	list = new Array();		// assume none;

	min = ele.min;
	max = ele.max;
	by  = ele.increment;

	rs = null;

	if (ele.list != '') 
	{
		list = this.fromCsv(ele.list);
		min = 0;
		max = list.length-1;
		by = 1;
	}
	
	if (ele.sql != '') 
	{
		rs = this.sys.sqlRead(ele.sql);
		min = 1;
		max = rs.RecordCount;
		if (rs == null) return;
		by = 1;
	}	

	last = '';
	count = 0;
	if (ele.id == '') ele.id = 'loop';

	for (i=min; i <= max; i+=by)
	{
		index = count;
		count = count + 1;

		value = i;

		if (i < list.length) value = list[i];
		if (rs != null) value = rs(0).Value;

		data = ele.loop;

		re = new RegExp('{' + ele.id + '}','ig');
		data = data.replace(re,'' + value);

		re = new RegExp('{' + ele.id + '.count}','ig');
		data = data.replace(re, '' + count);

		re = new RegExp('{' + ele.id + '.index}','ig');
		data = data.replace(re,'' + index);

		re = new RegExp('{' + ele.id + '.last}','ig');
		data = data.replace(re,last);

		rad = parseFloat(value);
		if (isNaN(rad)) rad = 0;
		rad = rad / 180 * Math.PI;
		
		re = new RegExp('{' + ele.id + '.radian}','ig');
		data = data.replace(re,rad);

		last = value;

		xhtml.init(10);
		xhtml.parse(data);
		if (rs != null) rs.MoveNext();
	}

}
//============================================================================================
//				html$groupReplaceValue
//============================================================================================
function html$groupReplaceValue(data,id,value,count,row,last,rs,total)
{
	var re,name,index,i;
	
	index = count - 1;
	
	re = new RegExp('{' + id + '}','ig');
	data = data.replace(re,value);

	re = new RegExp('{' + id + '.index}','ig');
	data = data.replace(re,index);

	re = new RegExp('{' + id + '.count}','ig');
	data = data.replace(re,count);

	re = new RegExp('{' + id + '.row}','ig');
	data = data.replace(re,row);

	re = new RegExp('{' + id + '.last}','ig');
	data = data.replace(re,last);

	re = new RegExp('{' + id + '.total}','ig');
	data = data.replace(re,total);

	if (rs == null) return data;
	for (i=0; i < rs.Fields.count; ++i)
	{
		name = id + '.' + rs.Fields(i).Name;
		re = new RegExp('{' + id + '.last}','ig');		
		data = data.replace(re,name);
	}

	return data;
}
//============================================================================================
//				html$groupToPdf
//============================================================================================
function html$groupToPdf(x,y,out,ele)
{
	var xhtml,list,i,data,value;
	var height,dy,last;
	var min,max,rs;
	var total,count;

	xhtml = new Array();
	xhtml[0] = new html$(this.sys,'',this);

	list = new Array();		// assume none;

	min = ele.min;
	max = ele.max;
	rs = null;

	if (ele.list != '') 
	{
		list = this.fromCsv(ele.list);
		min = 0;
		max = list.length-1;
	}
	
	if (ele.sql != '') 
	{
		rs = this.sys.sqlRead(ele.sql);
		min = 1;
		max = rs.RecordCount;
		if (rs == null) return;
	}	

	last = '';

	out.html = this;
	this.grid = new htmlGrid$(this,out,ele,x,y);
	this.grid.xhtml = xhtml;

	total = (max - min) + 1;
	
	count = 0;
	
	for (i=min; i <= max; ++i)
	{
		value = i;
		count += 1;
		if (i < list.length) value = list[i];
		if (rs != null) value = rs(0).Value;
		data = this.groupReplaceValue(ele.group,ele.id,value,count,i,last,rs,total);
//		data = this.resolve(data);
		last = value;

		this.grid.write(data);

		if (rs != null) rs.MoveNext();
	}

	ele.clientHeight = this.grid.offsetHeight;
	ele.clientWidth = this.grid.offsetWidth;

}
//============================================================================================
//				html$sqlList
//============================================================================================
function html$sqlList(sql)
{
	var result;
	
try
{
	result = this.sqlList_A(sql);
}
catch (e) { result = null; }

	if (this.cnn == null) return result;
	if (this.cnn.State == 1) this.cnn.Close();

	return result;

}
//============================================================================================
//				html$sqlList
//============================================================================================
function html$sqlList_A(sql)
{
	var list,rs,f;

	list = new Array();
//	if (this.client) return list;

	sql = sql.toLowerCase();
	if (sql.indexOf(':') >= 0) return list;
	if (sql.indexOf('script') >= 0) return list;

	rs = this.sys.sqlRead(sql);
	if (rs == null) return list;

	
	rs.MoveFirst();
	while (! rs.EOF)
	{
		f = rs.Fields(0);
		if (f.value != null) 
		{
			if (f.value != '')
			{ 
				list[list.length] = f.value;
				if (list.length >= 20) break;
			}
		}
		
		rs.MoveNext();
	}

	rs.Close();
	return list;
}
//============================================================================================
//				html$sqlValue
//============================================================================================
function html$sqlValue(sql)
{
	var value,rs,f;

	sql = sql.toLowerCase();
	if (sql.indexOf(':') >= 0) return '';
	if (sql.indexOf('script') >= 0) return '';

	value = '';
	rs = this.sys.sqlRead(sql);
	if (rs == null) return;

	f = rs.Fields(0);
	if (f.value != null) value = f.value;

	rs.Close();
	return value;
}
//============================================================================================
//				html$sqlValueAll
//============================================================================================
function html$sqlValueAll(sql)
{
	var value,rs,f;

	sql = sql.toLowerCase();
	if (sql.indexOf(':') >= 0) return '';
	if (sql.indexOf('script') >= 0) return '';

	value = '';
	rs = this.sys.sqlRead(sql);
	if (rs == null) return '';

	while (! rs.EOF)
	{
		f = rs.Fields(0);
		if (f.value != null) value += f.value;
	
		rs.MoveNext();
	}	

	rs.Close();
	return value;
}
//============================================================================================
//				i4
//============================================================================================
function html$i4(text)
{
	var value;
try
{

	value = parseInt(text);
	if (isNaN(value)) value = 0;
	return value;

}
catch (e) { }
	return 0;
} 
//============================================================================================
//				trim
//============================================================================================
function html$trim(text)
{
     text = '' + text;
     text = text.replace(/\003/g,' ');
     return text.replace(/^\s+|\s+$/g,'');
} 
//============================================================================================
//				trimLeft
//============================================================================================
function html$trimLeft(text)
{
     text = '' + text;   
     return text.replace(/^\s+/g,'');
} 
//============================================================================================
//				htmlCss$
//============================================================================================
function htmlCss$(html)
{

	this.html		= html;
	this.top		= null;
	
	this.media		= 'screen';
	this.count		= 0;
	this.mode		= '';

//------------------ methods ---------------------
	
	this.load		= htmlCss$load;
	this.load_A		= htmlCss$load_A;
	this.parseSelector	= htmlCss$parseSelector;

	this.style		= htmlCss$style;
	this.compare		= htmlCss$compare;
	this.copy		= htmlCss$copy;
	this.insert		= htmlCss$insert;
	this.loadMedia		= htmlCss$loadMedia;
	this.removeComments	= htmlCss$removeComments;
	this.selectMedia	= htmlCss$selectMedia;
	this.changeBorder	= htmlCss$changeBorder;
}
//============================================================================================
//						htmlCss$changeBorder
//============================================================================================
function htmlCss$changeBorder(border,ele)
{
	var list;

	if (! (ele.tagName == 'TH' || ele.tagName == 'TD' || ele.tagName == 'TABLE')) return border;
	list = border.split(' ');
	list[0] = ele.border;
	return list.join(' ');

}
//============================================================================================
//				html$inlist
//============================================================================================
function html$inlist(list,value)
{
	var i;

	value = value.toLowerCase();

	for (i=0; i < list.length; ++i)
	{
		if (list[i] == value) return true;
	}		

	return false;
}
//============================================================================================
//				htmlCss$style
//============================================================================================
function htmlCss$style(ele,style)
{
	var text,i,s,node;

	node = this.top;

	this.mode = '';
	if (ele.href != '') this.mode = 'alink';
		
	while (node != null)
	{
		this.pc = node.match.length-1;

		if (this.compare(ele,node.match))
		{
			this.copy(node.style,style,ele);
			return;
		}		
	
		node = node.next;
	}
}
//============================================================================================
//				htmlCss$compare
//============================================================================================
function htmlCss$compare(ele,match)
{
	var i,pc,m,parent,sibling;
	var tag,value,clist,name;
	
	if (this.pc < 0) return true;

	tag = ele.tagName;

	name = this.html.trim(ele.className).toLowerCase();
	clist = name.split(' ');
	
	while (this.pc >= 0) 
	{
		m = match[this.pc];

		switch (m.op)
		{
		case        "tag": if (m.value != ele.tagName.toLowerCase()) return false; break;
		case         "id": if (m.value != ele.id.toLowerCase()) return false; break;
		case      "class": if (! this.html.inlist(clist,m.value)) return false; break;
		case       "mode": if (m.value != 'link') return false;  break;
		case  "getparent": 
			{
				if (ele.parentElement == null) return false; 
				parent = ele.parentElement;
				pc = this.pc-1;
				while (parent != null)
				{
					this.pc = pc;
					if (this.compare(parent,match)) return true;
					parent = parent.parentElement;
				}
				return false;
			}

		case    "parent": if (ele.parentElement == null) return false; ele = ele.parentElement; break;

		case    "sibling": 
			{
				if (ele.parentElement == null) return false;
				parent = ele.parentElement;
				sibling = parent.firstChild;
				pc = this.pc-1;
				while (sibling != null)
				{
					if (sibling != ele)
					{
						this.pc = pc;
						if (this.compare(sibling,match)) return true;
					}
					sibling = sibling.nextSibling;
				}
				return false;
			}
		case       "attr": 
				value = eval("ele." + m.name);
				if (value == undefined) return false;
		default: return false;
		}

		this.pc = this.pc - 1;
	}

	return true;		
}

//============================================================================================
//				htmlCss$loadMedia
//============================================================================================
function htmlCss$loadMedia(data)
{
	var i,j,list,name,data,medias,temp;
	var text,level,c,media,level,c,text;

	i = data.indexOf('{');
	if (i < 0) return '';
	
	media = data.substr(0,i);
	data = data.substr(i+1);
	
	media = this.html.trim(media);
	
	level = 0;
	
	for (i=0; i < data.length; ++i)
	{
		c = data.charAt(i);
		if (c == '{') level = 1;
		if (c != '}') continue;
		
		if (level == 0) break; 
		level = 0;
	}

	
	text = data.substr(0,i-1);
	data = data.substr(i+1);

	if (this.selectMedia(media)) return text + data;

	return data;		
}
//============================================================================================
//				htmlCss$selectMedia
//============================================================================================
function htmlCss$selectMedia(names)
{
	var list,i,j,name,medias,temp;

	names = this.html.trim(names);
	if (names == '') return true;

	names = names.toLowerCase();
	list = names.split(',');
	
	temp = this.media.toLowerCase();
	medias = temp.split(',');
		
	for (i=0; i < list.length; ++i)
	{
		name = this.html.trim(list[i]);
		if (name == '') continue;
		
		for (j =0 ; j < medias.length; ++j)
		{
			if (this.html.trim(medias[j]) == name) return true;
		}
	}

	return false;
}
//============================================================================================
//				htmlCss$removeComments
//============================================================================================
function htmlCss$removeComments(data)
{
	var i,a,value,j,comment;

//-------------- strip comments -----------------

	data = this.html.trim(data);

	i = data.indexOf('/*');
	if (i < 0) return data;

	a = '';
	
	while (i >= 0)
	{
		if (i > 0) a += data.substr(0,i);
		data = data.substr(i+2);
		j = data.indexOf('*/');
		if (j < 0) break;

		comment = data.substr(0,j);
		data = data.substr(j+2);
		i = data.indexOf('/*');
		if (i < 0) a += data;
	}
	
	return this.html.trim(a);

}	
//============================================================================================
//				htmlCss$load
//============================================================================================
function htmlCss$load(data,doc)
{
	var temp,i,url,a,value,j,changed;
	var activeDoc,xdoc,xdata;

	data = this.removeComments(data);
	if (data == '') return;	

	a = '';
	changed = false;

	i = data.indexOf('@');
	while (i >= 0)
	{
		changed = true;
		if (i > 0) a += data.substr(0,i);
		data = data.substr(i+1);
		temp = data.substr(0,20);
		temp = this.html.trim(temp.toLowerCase());

		if (temp.substr(0,5) == 'media') 
		{
			data = data.substr(5);
			data = this.loadMedia(data);
			i = data.indexOf('@');
			continue;
		}
		
		if (temp.substr(0,6) == 'import') 
		{

			data = data.substr(6);
			j = data.indexOf(';');
			if (j < 0) j = data.length;
			value = data.substr(0,j);
			data = data.substr(j+1);	
			i = data.indexOf('@');

			j = value.indexOf('(');
			if (j < 0) continue;
			temp = value.substr(j+1);
			j = temp.indexOf(')');
			if (j < 0) continue;
			
			temp = temp.substr(0,j);
			if (! this.html.document) continue;

			url = this.html.document.resolve(temp);
			temp = this.html.document.read(url);		// non-recursive
			xdata =  this.removeComments(temp);

			xdoc = new htmlDocument$(this.html,this.html.document.href);
			this.load_A(xdata,xdoc);
			
			continue;
		}	 

		data = '';		// unknown syntax;
		break;
	}
	
	if (changed) data = a + data;
	this.load_A(data,doc);

}
//============================================================================================
//				htmlCss$insert
//============================================================================================
function htmlCss$insert(select)
{
	var next,prev,node;

	select.next = null;
	select.index = this.count;
	this.count += 1;

	if (this.top == null)
	{
		this.top = select;
		return;
	}
	
	node = this.top;
	prev = null;
	
	while (node != null)
	{
		if (node.order <= select.order) break;
		prev = node;
		node = node.next;
	}
	
	if (node == null)
	{
		prev.next = select;
		return;
	}

	if (prev == null)
	{
		select.next = this.top;
		this.top = select;
		return;
	}
	
	select.next = prev.next;
	prev.next = select;			
		
}
//============================================================================================
//				htmlCss$load_A
//============================================================================================
function htmlCss$load_A(data,doc)
{
	var i,j,text,style,selector,list,s,name,xlist;
	var a,comment,match,select;
	

//---------------- parse Styles ----------------

	while (data != '')
	{
		i = data.indexOf('{');
		if (i < 0) return;
		selector = data.substr(0,i);
		selector = this.html.trim(selector);
		data = data.substr(i+1);
		i = data.indexOf('}');
		if (i < 0) i = data.length;

		text = data.substr(0,i);
		data = this.html.trim(data.substr(i+1));

		i = text.indexOf('!');
		if (i >= 0) text = text.substr(0,i-1);
	
		style = new htmlStyle$(this.html,text,doc);

		list = selector.split(',');

		for (i=0; i < list.length; ++i)
		{

			name = this.html.trim(list[i]);
			if (name == '') continue;
			
			select = this.parseSelector(name);
			if (select != null)
			{
				select.style = style;
				this.insert(select);
			}
	
		}
	}
}
//============================================================================================
//				htmlCss$parseSelector
//============================================================================================
function htmlCss$parseSelector(name)
{
	var list,a,c,match,op,i,data,obj,value;
	var A,B,C,D,select,loop;
	var name;
	
	name = this.html.trim(name);
	name = this.html.compress(name);
	name = name.toLowerCase();

	name = name.replace(/\s>/g,'>');
	name = name.replace(/>\s/g,'>');
	
	name = name.replace(/\s\+/g,'+');
	name = name.replace(/\+\s/g,'+');

	name = name + '!';

	A = 0;
	B = 0;
	C = 0;
	D = 0;

	if (name == '') return null;

	match = new Array();

	op = 'tag';
	
	while (name != '')
	{
		for (i=0; i < name.length; ++i)
		{
			c = name.charCodeAt(i);
			if (c <= 32) c = 32;
			c = String.fromCharCode(c);
			loop = true;
		
		switch (c)
			{
		case '!': 
				if (i != name.length-1) break;
				loop = false;
				value = name.substr(0,i);
				name = '';
				if ((value == '') || (value == '*')) break;
				obj = new Object();
				obj.op = op;
				obj.value = value;

				if (op == 'tag') D += 1;
	
				match[match.length] = obj;
				break;
	
		case " ":
				loop = false;
				value = name.substr(0,i);
				name = name.substr(i+1);
				if (!  ((value == '') || (value == '*')))
				{
					obj = new Object();
					obj.op = op;
					obj.value = value;
					if (op == 'tag') D += 1;
					if (op == 'class') D += 1;
					match[match.length] = obj;
				}
	
				obj = new Object();
				obj.op = 'getparent';
				obj.value = '';
				match[match.length] = obj;

				op = 'tag';	
				break;

		case ".":
				loop = false;
				value = name.substr(0,i);
				name = name.substr(i+1);
				if (! ((value == '') || (value == '*')))	
				{
					obj = new Object();
					obj.op = op;
					obj.value = value;
					if (op == 'tag') D += 1;
					match[match.length] = obj;
				}
				if (op != 'class') C += 1;
				op = 'class';
				break;

		case '#':
				loop = false;
				value = name.substr(0,i);
				name = name.substr(i+1);
				if (! ((value == '') || (value == '*')))
				{
					obj = new Object();
					obj.op = op;
					obj.value = value;
					if (op == 'tag') D += 1;
					match[match.length] = obj;
				}
				op = 'id';
				B += 1;
				break;
				
		case '>':
				loop = false;
				value = name.substr(0,i);
				name = name.substr(i+1);
				if (! ((value == '') || (value == '*')))
				{
					obj = new Object();
					obj.op = op;
					obj.value = value;
					if (op == 'tag') D += 1;
					match[match.length] = obj;
				}
				
				obj = new Object();
				obj.op = 'parent';
				obj.value = '';
				
				match[match.length] = obj;
					
				op = 'tag';
				break;

		case '+':
				loop = false;
				value = name.substr(0,i);
				name = name.substr(i+1);
				if (! ((value == '') || (value == '*')))
				{
					obj = new Object();
					obj.op = op;
					obj.value = value;
					if (op == 'tag') D += 1;
					match[match.length] = obj;
				}
					
				obj = new Object();
				obj.op = 'sibling';
				obj.value = '';
				match[match.length] = obj;
					
				op = 'tag';
				break;

		case ':':
				{
				loop = false;
				value = name.substr(0,i);
				name = name.substr(i+1);
				if (! ((value == '') || (value == '*')))
				{
					obj = new Object();
					obj.op = op;
					obj.value = value;
					if (op == 'tag') D += 1;
					match[match.length] = obj;
				}

				C += 1;
				op = 'mode';
				break;
				}
				
		case '[':
				loop = false;
				value = name.substr(0,i);
				name = name.substr(i+1);
				if (! ((value == '') || (value == '*')))
				{
					obj = new Object();
					obj.op = op;
					obj.value = value;
					if (op == 'tag') D += 1;
					match[match.length] = obj;
				}

				i = name.indexOf(']');
				if (i < 0) i = name.length;
				value = name.substr(0,i-1);

				i = value.indexOf('=');
				if (i < 0) i = value.length;
				
				obj = new Object();
				obj.op = 'attr';
				obj.name  = this.html.trim(value.substr(0,i));
				obj.value = this.html.trim(value.substr(i+1));
				if (obj.value.substr(0,1) == '"') 
				{	
					obj.value = obj.value.substr(1,obj.value.length-1);
				}
				else
				{
					if (obj.value.substr(0,1) == "'") obj.value = obj.value.substr(1,obj.value.length-1);
				}
				match[match.length] = obj;
					
				C += 1;
				op = 'tag';
				break;
			}
			
			if (! loop) break;
		}
	}
	
	if (match.length == 0) return null;
	
	select = new Object();
	select.match = match;
	select.order = (A * 1000000) + (B * 10000) + (C * 100) + D;
	
	return select;
}
//============================================================================================
//					htmlCss$copy
//============================================================================================
function htmlCss$copy(a,b,ele)
{

	if (a.clear			!= '') b.clear = a.clear;
	if (a.top			!= '') b.top = a.top;
	if (a.left			!= '') b.left = a.left;
	if (a.height			!= '') b.height = a.height;
	if (a.width			!= '') b.width = a.width;
	if (a.color			!= '') b.color = a.color;
	if (a.opacity			!= '') b.opacity= a.opacity;
	if (a.fit			!= '') b.fit = a.fit;
	if (a.backgroundColor		!= '') b.backgroundColor = a.backgroundColor;
	if (a.backgroundImage		!= '') b.backgroundImage = a.backgroundImage;
	if (a.backgroundRepeat		!= '') b.backgroundRepeat = a.backgroundRepeat;
	if (a.backgroundPosition	!= '') b.backgroundPosition = a.backgroundPosition;
	
	if (a.borderLeft		!= '') b.borderLeft = this.changeBorder(a.borderLeft,ele);
	if (a.borderRight		!= '') b.borderRight = this.changeBorder(a.borderRight,ele);
	if (a.borderTop		!= '') b.borderTop = this.changeBorder(a.borderTop,ele);
	if (a.borderBottom		!= '') b.borderBottom = this.changeBorder(a.borderBottom,ele);
	
	if (a.position			!= '') b.position = a.position ;
	if (a.zIndex			!= '') b.zIndex = a.zIndex ;
	if (a.display			!= '') b.display = a.display ;
	if (a.visibility		!= '') b.visibility = a.visibility ;

	if (a.float			!= '') b.float = a.float;

	if (a.fontFamily		!= '') b.fontFamily = a.fontFamily;
	if (a.fontSize			!= '') b.fontSize = a.fontSize;
	if (a.fontSizeAdjust		!= '') b.fontSizeAdjust = a.fontSizeAdjust;
	if (a.fontStretch		!= '') b.fontStretch = a.fontStretch;
	if (a.fontStyle		!= '') b.fontStyle = a.fontStyle;
	if (a.fontVariant		!= '') b.fontVariant = a.fontVariant;	 
	if (a.fontWeight		!= '') b.fontWeight = a.fontWeight; 
	if (a.letterSpacing		!= '') b.letterSpacing = a.letterSpacing;
	if (a.fontRender		!= '') b.fontRender = a.fontRender;
	if (a.fontSkew			!= '') b.fontSkew = a.fontSkew;
	if (a.fontScale			!= '') b.fontScale = a.fontScale;

	if (a.lineHeight		!= '') b.lineHeight = a.lineHeight ;
	if (a.textAlign			!= '') b.textAlign = a.textAlign; 
	if (a.textDecoration		!= '') b.textDecoration = a.textDecoration ;
	if (a.textIndent		!= '') b.textIndent = a.textIndent ;
	if (a.textShadow		!= '') b.textShadow = a.textShadow ;
	if (a.textTransform		!= '') b.textTransform = a.textTransform;

	if (a.vertialAlign		!= '') b.vertialAlign = a.vertialAlign;
	if (a.textTransform		!= '') b.textTransform = a.textTransform;
	if (a.textAlign			!= '') b.textAlign = a.textAlign;
	if (a.textIndent		!= '') b.textIndent = a.textIndent;
	
	if (a.margin			!= '') b.margin = a.margin;
	if (a.marginTop			!= '') b.marginTop = a.marginTop;
	if (a.marginLeft		!= '') b.marginLeft = a.marginLeft;
	if (a.marginRight		!= '') b.marginRight = a.marginRight;
	if (a.marginBottom		!= '') b.marginBottom = a.marginBottom;
	
	if (a.padding			!= '') b.padding = a.padding;
	if (a.paddingTop		!= '') b.paddingTop = a.paddingTop;
	if (a.paddingLeft		!= '') b.paddingLeft = a.paddingLeft;
	if (a.paddingRight		!= '') b.paddingRight = a.paddingRight;
	if (a.paddingBottom		!= '') b.paddingBottom = a.paddingBottom;
	
	if (a.pageBreakBefore		!= '') b.pageBreakBefore = a.pageBreakBefore;
	if (a.pageBreakAfter		!= '') b.pageBreakAfter = a.pageBreakAfter;
	if (a.clip			!= '') b.clip = a.clip;
	if (a.filter			!= '') b.filter = a.filter;
	if (a.tableLayout		!= '') b.tableLayout = a.tableLayout;
	if (a.borderCollapse		!= '') b.borderCollapse = a.borderCollapse;
	if (a.direction			!= '') b.direction = a.direction;
	if (a.behavior			!= '') b.behavior = a.behavior;
	if (a.wordBreak			!= '') b.wordBreak = a.wordBreak;
	if (a.lineBreak			!= '') b.lineBreak = a.lineBreak;
	if (a.texJustify		!= '') b.texJustify = a.texJustify;
	if (a.textJustifyTrim		!= '') b.textJustifyTrim = a.textJustifyTrim;
	if (a.textAutospace		!= '') b.textAutospace = a.textAutospace;
	if (a.overflowX			!= '') b.overflowY = a.overflowY;
	if (a.overflowY			!= '') b.overflowY = a.overflowY;
	if (a.layoutFlow		!= '') b.layoutFlow = a.layoutFlow;
	if (a.zoom			!= '') b.zoom = a.zoom;
	if (a.wordWrap			!= '') b.wordWrap = a.wordWrap;
	if (a.writingMode		!= '') b.writingMode = a.writingMode;
	if (a.textAlignLast		!= '') b.textAlignLast = a.textAlignLast;
	if (a.textOverflow		!= '') b.textOverflow = a.textOverflow;
	if (a.minHeight			!= '') b.minHeight = a.minHeight;
	if (a.minWidth			!= '') b.minWidth = a.minWidth;
	if (a.maxHeight			!= '') b.maxHeight = a.maxHeight;
	if (a.maxWidth			!= '') b.maxWidth = a.maxWidth;

	if (a.listStyleType		!= '') b.listStyleType = a.listStyleType;
	if (a.listStyleImage		!= '') b.listStyleImage = a.listStyleImage;	
	
}
//============================================================================================
//									htmlActive
//============================================================================================
function htmlActive$()
{
	this.xpos		= 0;
	this.ypos		= 0;
	this.Lcount		= 0;
	this.Rcount		= 0;
	this.Lstack		= new Array();
	this.Rstack		= new Array();
	this.marginLeft		= 0;
	this.leftBottom		= 0;
	this.marginRight	= 0;
	this.rightBottom	= 0;
	this.rowHeight		= 0;
	this.columns		= 0;
	this.width		= 0;
	this.maxWidth		= 0;
	this.remain		= 0;
	this.aligned		= false;
	this.counter		= 0;
	this.xmax		= 0;
	this.rowCount		= 0;

	this.rows		= new Array();
}
//============================================================================================
//				htmlelement
//============================================================================================
function htmlElement$(html,tagName,level)
{
	var NODE_TEXT = 3;
	var NODE_TAG  = 1;

	this.html			= html;
	this.className			= '';
	this.id				= '';
	this.htmlData			= '';
	this.outline			= '';

	this.xjust			= 0;
	this.yjust			= 0;
	this.baseY			= 0;
	this.level			= 0;

	this.isNode			= htmlElement$isNode;

	this.write			= htmlElement$write;
	this.write_A			= htmlElement$write_A;	
	this.writeElement		= htmlElement$writeElement;	
	this.writeElementText		= htmlElement$writeElementText;
	this.writeElementMatrix		= htmlElement$writeElementMatrix;
	this.getText			= htmlElement$getText;
	this.getInnerText		= htmlElement$getInnerText;
	this.getInnerText_A		= htmlElement$getInnerText_A;
	
	this.placeColumn_nocolspan	= htmlElement$placeColumn_nocolspan;
	
	this.writeBorder		= htmlElement$writeBorder;	
	this.writeBackground		= htmlElement$writeBackground;	
	this.traceBorder		= htmlElement$traceBorder;
	this.scale			= htmlElement$scale;
	
	this.findColumn		= htmlElement$findColumn;
	this.adjustSpannedColumns	= htmlElement$adjustSpannedColumns;
	this.adjustColumn		= htmlElement$adjustColumn;
	this.findParentNode		= htmlElement$findParentNode;
		
	this.appendChild		= htmlElement$appendChild;
	this.toString			= htmlElement$toString;
	this.place			= htmlElement$place;
	this.init			= htmlElement$init;
	this.xpos			= htmlElement$xpos;
	this.ypos			= htmlElement$ypos;
	this.lastChild			= htmlElement$lastChild;
	this.setSize			= htmlElement$setSize;
	this.align_dx			= htmlElement$align_dx;
	this.align_dy			= htmlElement$align_dy;

	this.wordWidth			= htmlElement$wordWidth;
	this.charWidth			= htmlElement$charWidth;
	this.charHeight			= htmlElement$charHeight;

	this.justifyCell		= htmlElement$justifyCell;

	this.pushLeft_			= htmlElement$pushLeft_;
	this.pushRight_			= htmlElement$pushRight_;
	this.newRow_			= htmlElement$newRow_;
	this.flushRow_			= htmlElement$flushRow_;
	this.countText_			= htmlElement$countText_;
	this.roman_			= htmlElement$roman_;
	this.justify_			= htmlElement$justify_;
	this.updateSize_		= htmlElement$updateSize_;

	this.setActive			= htmlElement$setActive;
	this.setMargin			= htmlElement$setMargin;

	this.placeChildren		= htmlElement$placeChildren;
	this.place			= htmlElement$place;
	this.placeDone_			= htmlElement$placeDone_;

	this.place_text			= htmlElement$place_text;
	this.place_IMG			= htmlElement$place_IMG;
	this.place_GRAPHIC		= htmlElement$place_GRAPHIC;
	this.place_GROUP		= htmlElement$place_GROUP;
	this.place_LI			= htmlElement$place_LI;
	this.place_DIV			= htmlElement$place_DIV;
	this.place_INPUT		= htmlElement$place_INPUT;
	this.place_SELECT		= htmlElement$place_SELECT;
	this.place_TEXTAREA		= htmlElement$place_TEXTAREA;
	this.place_BLOCKQUOTE		= htmlElement$place_BLOCKQUOTE;
	this.place_UL			= htmlElement$place_UL;
	this.place_BR			= htmlElement$place_BR;
	this.place_HR			= htmlElement$place_HR;
	this.place_SUP			= htmlElement$place_SUP;
	this.place_SUB			= htmlElement$place_SUB;
	this.place_TABLE		= htmlElement$place_TABLE;
	this.place_TABLE_A		= htmlElement$place_TABLE_A;
	this.place_P			= htmlElement$place_P;
	this.place_LABEL		= htmlElement$place_LABEL;
	this.place_FRAME		= htmlElement$place_FRAME;
	this.place_IFRAME		= htmlElement$place_IFRAME;
	this.place_FRAMESET		= htmlElement$place_FRAMESET;

	this.widthAvail			= htmlElement$widthAvail;
	this.writeMap			= htmlElement$writeMap;

	this.place_text_A		= htmlElement$place_text_A;
	this.place_text_B		= htmlElement$place_text_B;

	this.place_TIMELINE		= htmlElement$place_TIMELINE;
	this.place_SCHEDULE		= htmlElement$place_SCHEDULE;

	this.place_CALENDAR		= htmlElement$place_CALENDAR;
	this.place_DIVIDE		= htmlElement$place_DIVIDE;
	this.place_RAISE		= htmlElement$place_RAISE;
	this.place_ROOT			= htmlElement$place_ROOT;
	this.place_QUANTITY		= htmlElement$place_QUANTITY;
	this.place_MATRIX		= htmlElement$place_MATRIX;
	this.place_INTEGRAL		= htmlElement$place_INTEGRAL;

	this.place_SUMMATION		= htmlElement$place_SUMMATION;

	this.dy				= htmlElement$dy;
	this.positionChild_		= htmlElement$positionChild_;
	this.addImage_			= htmlElement$addImage_;

	this.getBorder_			= htmlElement$getBorder_;
	this.getBorder_A		= htmlElement$getBorder_A;

	this.padWidth			= htmlElement$padWidth;
	this.padLeft			= htmlElement$padLeft;
	this.padRight			= htmlElement$padRight;
	this.padTop			= htmlElement$padTop;
	this.padBottom			= htmlElement$padBottom;
	
	this.inherit			= htmlElement$inherit;
	this.loadCell			= htmlElement$loadCell;
	
	this.adjustTableHeight		= htmlElement$adjustTableHeight;
	this.adjustRowHeight		= htmlElement$adjustRowHeight;
	this.adjustSpannedRowHeight	= htmlElement$adjustSpannedRowHeight;

	this.initTable			= htmlElement$initTable;
	this.getAll			= htmlElement$getAll;
	this.fullName			= htmlElement$fullName;

	this.tagName			= tagName.toUpperCase();
	this.nodeType		= NODE_TAG;
	this.firstChild		= null;
	this.nextSibling		= null;
	this.parentElement		= null;
	this.parentNode			= null;
	this.offsetLeft			= 0;
	this.offsetTop			= 0;
	this.offsetHeight		= 0;
	this.offsetWidth		= 0;
	this.x				= 0;
	this.y				= 0;
	this.style			= null;

	this.aheight			= 0;		// actual
	this.awidth			= 0;
	this.fixedHeight		= false;
	this.fixedWidth			= false;

	this.percent_width		= false;
	this.percent_height		= false;
	this.fixed_width		= false;
	this.fixed_height		= false;
	this.iheight			= 0;
	this.iwidth			= 0;

	this.marginTop			= 0;
	this.marginBottom		= 0;
	this.marginRight		= 0;
	this.marginLeft			= 0;

	this.paddingTop			= 0;
	this.paddingBottom		= 0;
	this.paddingRight		= 0;
	this.paddingLeft		= 0;
	
	this.borderTop			= '';
	this.borderBottom		= '';
	this.borderRight		= '';
	this.borderLeft			= '';
	
	this.fillColor			= '';
	this.borderColor		= '';
	this.borderLineWidth		= 0;
	this.borderLineStyle		= '';

	this.id				= '';
	this.name			= '';

	this.font			= new htmlFont$(html);

	this.dump			= htmlElement$dump;
	
	this.active			= new htmlActive$();
}
//============================================================================================
//				htmlElement$getText
//============================================================================================
function htmlElement$getText()
{
	var text,j;
	
	text = '';
	if (this.parts)
	{
		for (j=0; j < this.parts.length; ++j)
		{
			if (text += '') text += ' ';
			text += this.html.trim(this.parts[j].text);
		}
	}
	else
	{
		if (this.tagName == '#TEXT') text = this.text;
	}

	return text;
}
//============================================================================================
//				htmlElement$getInnerText
//============================================================================================
function htmlElement$getInnerText()
{
	var text,temp,j,child;
	
	text = '';
	if (this.parts)
	{
		for (j=0; j < this.parts.length; ++j)
		{
			if (text += '') text += ' ';
			text += this.html.trim(this.parts[j].text);
		}
	}
	else
	{
		if (this.tagName == '#TEXT') text = this.text;
	}

	if (this.tagName == '#TEXT') return text;

//--------------------- Formatted Row ----------------------------

	if ((this.tagName == 'TR' || this.tagName == 'TH') && this.html.formatRow) 
	{
		child = this.firstChild;
		while (child != null)
		{
			temp = child.getInnerText_A();
			if (text != '') text += ',';
			text += temp;
			child = child.nextSibling;
		}
		
		return text;
	}	

//--------------------- Formatted Table ----------------------------

	if (this.tagName == 'TABLE' && this.html.formatRow) 
	{
		child = this.firstChild;
		while (child != null)
		{
			temp = child.getInnerText_A();
			if (text != '') text += '\r\n';
			text += temp;
			child = child.nextSibling;
		}
		
		return text;
	}	

//-------------------------------------------------------------------- 

	if (this.firstChild != null) 
	{
		text += ' ' +  this.firstChild.getInnerText_A();
	}	

	text =	this.html.trim(text) 
	return text;
}
//============================================================================================
//				htmlElement$getInnerText_A
//============================================================================================
function htmlElement$getInnerText_A()
{
	var text,temp,j,c,child,node;


	text = '';	
	if (this.parts)
	{
		for (j=0; j < this.parts.length; ++j)
		{
			if (text += '') text += ' ';
			text += this.html.trim(this.parts[j].text);
		}
	}
	else
	{
		if (this.tagName == '#TEXT') text = this.text;
	}

	if (this.tagName == '#TEXT') return text;

	if (this.firstChild != null)
	{
		child = this.firstChild;
		temp = child.getInnerText();
		if (temp != '') text += ' ' + temp;
	}
	
	node = this.nextSibling;
	while (node != null)
	{
		temp = node.getInnerText();
		if (temp != '') text += ' ' + temp;
		node = node.nextSibling;
	}

	text =	this.html.trim(text);
	return text;
}
//============================================================================================
//				htmlElement$getAll
//============================================================================================
function htmlElement$getAll(all,tags)
{
	var found;
	
	found = true;
	if (tags.length > 0) 
	{
		found = false;
		for (i=0; i < tags.length; ++i)
		{
			if (tags[i] == this.tagName)
			{
				found = true;
				break;
			}
		}
	}

	if (found) all[all.length] = this;
		
	if (this.firstChild != null) this.firstChild.getAll(all,tags);
	if (this.nextSibling != null) this.nextSibling.getAll(all,tags);
}
//============================================================================================
//				htmlElement$fullName
//============================================================================================
function htmlElement$fullName()
{
	var name,id;

	name = this.tagName;
	id = this.id;
	if (id != '') name += ':' + id;
	
	if (this.parentElement == null) return name ;
	
	name = this.parentElement.fullName() + '/' + name;
	return name;
		
}
//============================================================================================
//				htmlElement$dump
//============================================================================================
function htmlElement$dump()
{
	var text,a, j, tx,ty;

	a = this;
		
	text = ' x: ' + this.offsetLeft + ' y: ' + this.offsetTop + ' width: ' + this.offsetWidth + ' height: ' + this.offsetHeight;
	
	if (! this.parts) return text;

	for (j=0; j < this.parts.length; ++j)
	{
		text = this.html.trim(this.parts[j].text);
		if (text == '') continue;

		tx = (this.parts[j].offsetLeft + this.parts[j].xjust);
		ty = (this.parts[j].offsetTop + this.parts[j].yjust);

		text += 'part: ' + j + ' tx: ' + tx + ' ty: ' + ty + text + '\r\n';
	}


	return text;
}
//============================================================================================
//				htmlElement$inherit
//============================================================================================
function htmlElement$inherit(name)
{
	var value;
	
	if (! this.style) return '';
	value = eval('this.style.' + name);
	if (value == undefined) value = '';
	if (value != '') return value;
	
	if (this.parentElement == null) return '';

	if (this.tagName == 'TH') return '';
	if (this.tagName == 'TD') return '';
	if (this.tagName == 'TABLE') return '';
	
	return this.parentElement.inherit(name);
	
}
//============================================================================================
//				htmlElement$justifyCell
//============================================================================================
function htmlElement$justifyCell(row,rowHeight)
{

		var dx,dy,xmax,ele,c,align,valign,t;
		var height,width,tx,ty,xrow,i;

		t = this;
		
		align = this.align;
		valign = this.valign;
		if (this.style.verticalAlign != '') valign = this.style.verticalAlign;
	
		if (align == '') align = this.parentElement.align;
		if (valign == '') valign = this.parentElement.valign;
		
		if (valign == '') valign = 'middle';

		width = this.clientWidth;
		width = width - (this.paddingLeft + this.paddingRight + this.borderLeft + this.borderRight);

//		dy = row.offsetHeight - this.clientHeight;
		dy = rowHeight - this.clientHeight;

		if (dy < 0) dy = 0;
		dx = this.offsetWidth - this.clientWidth;
		if (dx < 0) dx = 0;

		tx = 0;
		if (align == 'center') tx = Math.floor(dx / 2);
		if (align == 'middle') tx = Math.floor(dx / 2);
		if (align ==  'right') tx = dx;
	
		ty = 0;
		if (valign == 'center') ty = Math.floor(dy / 2);
		if (valign == 'middle') ty = Math.floor(dy / 2);
		if (valign == 'bottom') ty = dy;
			
		xmax = width ;

		for (i=0; i < this.active.rows.length; ++i)
		{
			xrow = this.active.rows[i];
	
			for (c = 0; c < xrow.cells.length; ++c)
			{
				ele = xrow.cells[c];
			    dx =  this.align_dx(align,ele.offsetWidth,width);

				ele.xjust = tx + dx;
				ele.yjust = ty;
			}
		}
}
//============================================================================================
//				html$initTable
//============================================================================================
function htmlElement$initTable()
{
	var i,obj,j,col,wid;
	var row,cell,border,r;

	for (r=0; r < this.rows.length; ++r)
	{
		row = this.rows[r];
		row.maxHeight = 0;			// non-spanned rows max height
	}

	this.setActive();
	this.offsetHeight = 0;
	this.offsetWidth = 0;

	this.active.width = 0;
	this.active.remain = 0;

	border = 0;
	if (this.border > 0) border = 1;

//----------- Set column Widths ---------------

	this.colWidths = new Array();
	
	for (i=0; i <= this.maxColumnIndex; ++i)
	{
		obj = new Object();
		obj.width		= 0;
		obj.fixed		= false;
		obj.percent	= false;
		obj.used		= false;
		this.colWidths[i] = obj;
	}

	for (i = 0; i < this.rows.length; ++i)
	{
		row = this.rows[i];
		row.maxHeight = 0;			// non-spanned rows max height
		row.active.maxWidth = this.active.maxWidth - ((this.cellspacing * 2) + this.borderLeft + this.borderRight);
	
		for (j=0; j < row.cells.length; ++j)
		{
			cell = row.cells[j];
			cell.setMargin();	

			if (cell.colspan > 1) continue;
			col = this.colWidths[cell.colIndex];
			col.scanned = false;

			if (col.fixed || col.percent) continue;
			
			if (cell.fixed_width)
			{
				col.fixed = true;
				col.width = cell.iwidth;
				col.used  = true;
				continue;
			}
		
			if (cell.percent_width)
			{
				col.percent = true;
				col.width = cell.iwidth;
				col.used  = true;
				continue;
			}
		
		}
	}	

}
//============================================================================================
//				htmlElement$countText_
//============================================================================================
function htmlElement$countText_(name)
{
	var value,n;
	var greek = new Array("Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi",
						   "Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega");

	value = this.count + '.';
	name = name.toLowerCase();
	switch (name)
	{
	case     "decimal": return value;
	case "upper-roman": return this.roman_(this.count) + '.';  
	case "lower-roman": return this.roman_(this.count).toLowerCase() + '.';
	case "upper-alpha": return String.fromCharCode(this.count + 64) + '.';

	case "lower-alpha": return String.fromCharCode(this.count + 96) + '.';
	case "lower-alpha": return String.fromCharCode(this.count + 96) + '.';
	}

	return value;
}
//============================================================================================
//				htmlElement$roman
//============================================================================================
function htmlElement$roman_(value)
{
	var n,c,val;
	
	var rnumber = new Array('I','II','III','IV','V','VI','VII','VIII','IX','X','XI','XII','XIII','XIV','XV','XVI','XVII','XVIII',
		'XIX','XX','XXI','XXII','XXIII','XXIV','XXV','XXVI','XXVII','XXVIII','XXIX','XXX','XXXI','XXXII','XXXIII','XXXIV',
		'XXXV','XXXVI','XXXVII','XXXVIII','XXXIX','XL','XLI','XLII','XLIII','XLIV','XLV','XLVI','XLVII','XLVIII','XLIX',
		'L','LI','LII','LIII','LIV','LV','LVI','LVII','LVIII','LIX','LX','LXI','LXII','LXIII','LXIV','LXV','LXVI',
		'LXVII','LXVIII','LXIX','LXX','LXXI','LXXII','LXXIII','LXXIV','LXXV','LXXVI','LXXVII','LXXVIII','LXXIX','LXXX',
		'LXXXI','LXXXII','LXXXIII','LXXXIV','LXXXV','LXXXVI','LXXXVII','LXXXVIII','LXXXIX','XC','XCI','XCII','XCIII',
		'XCIV','XCV','XCVI','XCVII','XCVIII','XCIX','C');


	n = html$i4(value);
	if (n <= 0) return 'I';

	c = Math.floor(n / 100);
	n = (n-1) % 100;
	
	if (c ==  0) return rnumber[n];
	if (c ==  1) return 'C' + rnumber[n];
	if (c ==  2) return 'CC' + rnumber[n];
	if (c ==  3) return 'CCC' + rnumber[n];
	if (c ==  4) return 'CD' + rnumber[n];
	if (c ==  5) return 'D' + rnumber[n];
	if (c ==  6) return 'DC' + rnumber[n];
	if (c ==  7) return 'DCC' + rnumber[n];
	if (c ==  8) return 'DCCC' + rnumber[n];
	if (c ==  9) return 'CM' + rnumber[n];

	if (c >=  10) 
	{
		val = html$i4(value) - 1000;
		return 'M' + this.roman_(val);
	}

	return rnumber[n];
}
//============================================================================================
//			html$parseFontSize (points)
//============================================================================================
function html$parseFontSize(value)
{
	var r8,units,fsize;

	if (value == undefined) return this.default_fontSize;
	if (value == '') return this.default_fontSize;
	if (value == 0) return this.default_fontSize;
	
	value = '' + value;

	value = value.toLowerCase();
	if (value == 'x-small') return 8;
	if (value == 'small') return 10;
	if (value == 'mediam') return 12;
	if (value == 'large') return 16;

	r8 = parseFloat(value);
	if (isNaN(r8)) return this.default_fontSize;
	if (r8 <= 0) return this.default_fontSize;
	if (value.length < 3) return r8;
	
	units = value.substr(value.length-2);
	units = units.toLowerCase();

	fsize = this.default_fontSize;
	
	if (value.substr(value.length-1,1) == '%') return Math.round((r8 / 100) * fsize);

	if (units == 'ex')return r8 / 110 * 72;
	
	if (units == 'em') return Math.round(r8 * fsize);
	if (units == 'px') return r8 / 110 * 72;
	if (units == 'in') return Math.round(r8 * this.html.bpi);
	if (units == 'cm') return Math.round((r8 * this.html.bpi) / 2.54);
	if (units == 'mm') return Math.round((r8 * this.html.bpi) / 25.4);
	if (units == 'pt') return r8;
	if (units == 'pc') return Math.round(r8 * 10);
	
	return Math.round(r8 / 110 * 72);
}
//============================================================================================
//				htmlelement$size (pixels)
//============================================================================================
function html$getSize(value,e)
{
	var value,r8,units;
	var w,percent,fsize;

	if (value == '') return 0;
	if (value == 0) return 0;

	value = '' + value;

	if (e)
	if (value.substr(value.length-1) == '%')
	{
		percent = html$i4(value);
		percent = percent / 100;
		
		if (e.parentNode != null)	
		{
			w = e.parentNode.active.maxWidth;
			value = w * percent;
			return value;
		}
	}
					
	r8 = parseFloat(value);
	if (isNaN(r8)) return 0;
	if (r8 <= 0) return 0;

	value = '' + value;
	if (value.length < 3) return r8;
	
	units = value.substr(value.length-2);
	units = units.toLowerCase();

	fsize = this.default_fontSize;

	if (units == 'em') return Math.round(r8 * fsize);
	if (units == 'px') return r8;
	if (units == 'in') return Math.round(r8 * this.bpi);
	if (units == 'cm') return Math.round((r8 * this.bpi) / 2.54);
	if (units == 'mm') return Math.round((r8 * this.bpi) / 25.4);
	if (units == 'pt') return Math.round(r8 * 110 / 72);
	if (units == 'pc') return Math.round(r8 * 10);
	
	return Math.round(r8);
}
//============================================================================================
//			htmlelement#lastChild
//============================================================================================
function htmlElement$lastChild()
{
	var c;
	
	c = this.firstChild;
	if (c == null) return null;

	while (c.nextSibling != null) c = c.nextSibling;
	
	return c;	
}
//============================================================================================
//			htmlelement$xpos
//============================================================================================
function htmlElement$xpos()
{
	var x,p;

	x = this.offsetLeft;
	p = this.parentNode;
	while (p != null)
	{
		x = x + p.offsetLeft;
		p = p.parentNode;
	}

	return x;
}
//============================================================================================
//			htmlelement$ypos
//============================================================================================
function htmlElement$ypos()
{
	var y,p;

	y = this.offsetTop;
	p = this.parentNode;
	while (p != null)
	{
		y = y + p.offsetTop;
		p = p.parentNode;
	}

	return y;
}
//============================================================================================
//			htmlelement$init
//============================================================================================
function htmlElement$init()
{
	var width,height,percent;
	var e;
	
	e = this;

	width = '';
	height = '';

	if (this.width != undefined) width = '' + this.width;
	if (this.height != undefined) height = '' + this.height;

	if (this.style)
	{	
		if (this.style.width != '') width = '' + this.style.width;
		if (this.style.height != '') height = '' + this.style.height;
	}

//--------- width ----------
	
	if (width != '')
	{
		if (width.substr(width.length-1) == '%')
		{
			percent = html$i4(width);				
			this.percent_width = true;
			this.iwidth = percent;

		}
		else
		{
			this.iwidth = html$i4(width);
			this.fixed_width = true;
		}						
	}

//--------- height ----------

	if (height != '')
	{
		if (height.substr(height.length-1) == '%')
		{
			percent = html$i4(height);
			this.percent_height = true;
			this.iheight = percent;
		}
		else
		{
			this.iheight = html$i4(height);			
			this.fixed_height = true;
		}
	}
}
//============================================================================================
//			htmlelement$toString
//============================================================================================
function htmlElement$toString()
{
	var NODE_TEXT = 3;
	var NODE_TAG  = 1;

	var text,t,i,p,href,row;
	
	t = this;
	
	text = this.tagName;
	if (this.tagName == 'BR') return text;

//	text += ' type: ' + this.nodeType;

	if (this.nodeType == NODE_TAG)
	{
		if (this.id != '') text += ' id: ' + this.id;
		if (this.name != '') text += ' name: ' + this.name;
		if (this.className != '') text += ' class: ' + this.className;
 + this.offsetTop + ' height: ' + this.offsetHeight + ' width: ' + this.offsetWidth;
	}
	
	if (this.tagName == '#TEXT') 
	{

		text += ' text: ' + this.text;
		if (this.html.href != '')
		{
			 href = this.html.href;
			 if (this.html.document) href = this.html.document.resolve(href);
			 text += ' href: ' + href;
			 if (this.html.href_title != '') text += ' title: ' + this.html.href_title;
			 if (this.html.href_target != '') text += ' target: ' + this.html.href_target;
				 
		}

		if (this.parts)
		{
			for (i=0; i < this.parts.length; ++i)
			{
				p = this.parts[i];
				text += ' | x:' + p.offsetLeft + ' y:' + p.offsetTop + ' h:';
				text += p.offsetHeight + ' w:' + p.offsetWidth + ' T: ' + p.text;

			}
		}
	
		return text;
	}

	if (this.active.rows == undefined) return text;

	text += ' rows: ' + this.active.rows.length;
	for (i=0; i < this.active.rows.length; ++i)
	{
		row = this.active.rows[i];
		text += ') ' +  i + ' cells: ' + row.cells.length;
	}
	return text;

}
//============================================================================================
//			htmlElement$isNode
//============================================================================================
function htmlElement$isNode()
{

		switch (this.tagName)
		{
			case       "BODY": return true;
			case        "DIV": return true;
			case       "SPAN": return true;
			case          "P": return true;
			case          "A": return true;
			case         "TD": return true;
			case         "TH": return true;
			case         "TR": return true;
			case      "TABLE": return true;
			case     "CENTER": return true;
			case "BLOCKQUOTE": return true;
			case         "H1": return true;
			case         "H2": return true;
			case         "H3": return true;
			case         "H4": return true;
			case         "H5": return true;
			case         "H6": return true;
			case      "LABEL": return true;
			case       "EVAL": return true;

			case      "RAISE": return true;
			case     "DIVIDE": return true;
			case  "NUMERATOR": return true;
			case	     "BY": return true;
			case	  "POWER": return true;
			case	   "ROOT": return true;
			case    "RADICAL": return true;
			case   "EXPONENT": return true;

			case     "MATRIX": return true;
			case       "CELL": return true;
			case   "QUANTITY": return true;
			case       "NODE": return true;
			case   "INTEGRAL": return true;
			case  "SUMMATION": return true;
			case      "RANGE": return true;
			case        "MIN": return true;
			case        "MAX": return true;

			case		 "LI": return true;
			case		 "OL": return true;
			case		 "UL": return true;
			case		"SUB": return true;
			case		"SUP": return true;
			case		  "Q": return true;
			case		 "TT": return true;

			case	 "REPORT": return true;
			case	  "GROUP": return true;
			case     "COLUMN": return true;

//			case	 "PAGEBREAK": return true;
		}

	return false;
}
//============================================================================================
//			htmlElement$findParentNode
//============================================================================================
function htmlElement$findParentNode()
{
	var node;

	if (this.parentElement == null) return null;

	node = this.parentElement;
	while (node != null)
	{
		if (node.isNode()) return node;
		node = node.parentElement;
	}
	
	return this.html.body;			// LOST TRACK ???

}
//============================================================================================
//			htmlElement$appendChild
//============================================================================================
function htmlElement$appendChild(e)
{
	var c;

	e.parentElement = this;
	e.parentNode = e.findParentNode();
	e.level			= this.level + 1;

	c = this.firstChild;
	if (c == null)
	{
		this.firstChild = e;
	}
	else
	{
		while (c.nextSibling != null) c = c.nextSibling;
		c.nextSibling = e;
	}
}
//============================================================================================
//			htmlstyle
//============================================================================================
function htmlStyle$(html,text,doc)
{
	this.html		= html;
	this.parse_		= htmlStyle$parse_;
	this.dump		= htmlStyle$dump;
	this.clear		= htmlStyle$clear;

	this.data		= text;

	this.clear(); 
	this.parse_(text,'',doc);
}
//============================================================================================
//			htmlstyle$clear
//============================================================================================
function htmlStyle$clear()
{
	this.clear			= '';
	
	this.top			= '';
	this.left			= '';
	this.height			= '';
	this.width			= '';
	this.color			= '';
	this.backgroundColor		= '';
	this.fit			= '';
	this.opacity			= '';
	this.backgroundImage		= '';
	this.backgroundRepeat		= '';
	this.backgroundPosition		= '';

	this.borderLeft		= '';
	this.borderRight		= '';
	this.borderTop			= '';
	this.borderBottom		= '';
	this.position			= '';
	this.zIndex			= '';
	this.display			= '';
	this.visibility		= '';

	this.float			= '';

	this.fontFamily		= '';
	this.fontSize			= '';
	this.fontSizeAdjust		= '';
	this.fontStretch		= '';
	this.fontStyle			= '';
	this.fontVariant		= '';
	this.fontWeight			= '';
	this.letterSpacing		= '';
	this.fontRender		= '';
	this.fontSkew			= '';
	this.fontScale			= '';

	this.lineHeight		= '';
	this.textAlign			= '';
	this.textDecoration	= '';
	this.textIndent		= '';
	this.textShadow		= '';
	this.textTransform		= '';

	this.vertialAlign		= '';
	this.textTransform		= '';
	this.textAlign			= '';
	this.textIndent			= '';
	this.lineHeight			= '';

	this.margin			= '';
	this.marginTop			= '';
	this.marginLeft			= '';
	this.marginRight		= '';
	this.marginBottom		= '';

	this.padding			= '';
	this.paddingTop			= '';
	this.paddingLeft		= '';
	this.paddingRight		= '';
	this.paddingBottom		= '';

	this.pageBreakBefore		= '';
	this.pageBreakAfter		= '';
	this.clip			= '';
	this.filter			= '';
	this.tableLayout		= '';
	this.borderCollapse		= '';
	this.direction			= '';
	this.behavior			= '';
	this.wordBreak			= '';
	this.lineBreak			= '';
	this.texJustify			= '';
	this.textJustifyTrim		= '';
	this.textAutospace		= '';
	this.overflowX			= '';
	this.overflowY			= '';
	this.layoutFlow			= '';
	this.zoom			= '';
	this.wordWrap			= '';
	this.writingMode		= '';
	this.textAlignLast		= '';
	this.textOverflow		= '';

	this.minHeight			= '';
	this.minWidth			= '';
	this.maxHeight			= '';
	this.maxWidth			= '';

	this.listStyleType		= '';
	this.listStyleImage		= '';
	
	this.borderLeft			= '';
	this.borderRight		= '';
	this.borderTop			= '';
	this.borderBottom		= '';
	
	this.verticalAlign		= '';
	
	this.scaleX			= 1.0;
	this.scaleY			= 1.0;
}
//============================================================================================
//				htmlstyle$dumo
//============================================================================================
function htmlStyle$dump()
{
	var text;
	
	var text = ' -- ';

	if (this.clear				!= '') text += ' clear:' + this.clear;

	if (this.top				!= '') text += ' top:' + this.top;
	if (this.left				!= '') text += ' left:' + this.left;
	if (this.height				!= '') text += ' height:' + this.height;
	if (this.width				!= '') text += ' width:' + this.width;
	if (this.color				!= '') text += ' color:' + this.color;
	if (this.opacity			!= '') text += ' opacity:' + this.opacity;
	if (this.fit				!= '') text += ' fit:' + this.fit;
	if (this.backgroundColor		!= '') text += ' backgroundColor:' + this.backgroundColor;
	if (this.backgroundImage		!= '') text += ' backgroundImage:' + this.backgroundImage;
	if (this.backgroundRepeat		!= '') text += ' backgroundRepeat:' + this.backgroundRepeat;
	if (this.backgroundPosition		!= '') text += ' backgroundPosition:' + this.backgroundPosition;

	if (this.borderLeft			!= '') text += ' borderLeft:' + this.borderLeft ;
	if (this.borderRight			!= '') text += ' borderRight:' + this.borderRight ;
	if (this.borderTop			!= '') text += ' borderTop:' + this.borderTop ;
	if (this.borderBottom			!= '') text += ' borderBottom: ' + this.borderBottom ;
	if (this.position			!= '') text += ' position:' + this.position ;
	if (this.zIndex			!= '') text += ' zIndex:' + this.zIndex ;
	if (this.display			!= '') text += ' display:' + this.display ;
	if (this.visibility			!= '') text += ' visibility:' + this.visibility ;

	if (this.float				!= '') text += ' float:' + this.float ;

	if (this.fontFamily			!= '') text += ' fontFamily:' + this.fontFamily ;
	if (this.fontSize			!= '') text += ' fontSize:' + this.fontSize ;
	if (this.fontSizeAdjust		!= '') text += ' fontSizeAdjust:' + this.fontSizeAdjust ;
	if (this.fontStretch			!= '') text += ' fontStretch:' + this.fontStretch ;
	if (this.fontStyle			!= '') text += ' fontStyle:' + this.fontStyle ;
	if (this.fontVariant			!= '') text += ' fontVariant:' + this.fontVariant;	 
	if (this.fontWeight			!= '') text += ' fontWeight:' + this.fontWeight; 
	if (this.letterSpacing			!= '') text += ' letterSpacing:' + this.letterSpacing ;
	if (this.fontRender			!= '') text += ' fontRender: ' + this.fontRender ;
	if (this.fontSkew			!= '') text += ' fontSkew:' + this.fontSkew;
	if (this.fontScale			!= '') text += ' fontScale:' + this.fontScale;

	if (this.textAlign			!= '') text += ' textAlign:' + this.textAlign; 
	if (this.textDecoration		!= '') text += ' textDecoration:' + this.textDecoration ;
	if (this.textIndent			!= '') text += ' textIndent:' + this.textIndent ;
	if (this.textShadow			!= '') text += ' textShadow:' + this.textShadow ;
	if (this.textTransform			!= '') text += ' textTransform:' + this.textTransform;
						
	if (this.vertialAlign			!= '') text += ' vertialAlign:' + this.vertialAlign;
	if (this.textTransform			!= '') text += ' textTransform:' + this.textTransform;
	if (this.textAlign			!= '') text += ' textAlign:' + this.textAlign;
	if (this.textIndent			!= '') text += ' textIndent:' + this.textIndent;
	if (this.lineHeight			!= '') text += ' lineHeight:' + this.lineHeight;

	if (this.margin				!= '') text += ' margin:' + this.margin;
	if (this.marginTop			!= '') text += ' marginTop:' + this.marginTop;
	if (this.marginLeft			!= '') text += ' marginLeft:' + this.marginLeft;
	if (this.marginRight			!= '') text += ' marginRight:' + this.marginRight;
	if (this.marginBottom			!= '') text += ' marginBottom:' + this.marginBottom;

	if (this.padding			!= '') text += ' padding:' + this.padding;
	if (this.paddingTop			!= '') text += ' paddingTop:' + this.paddingTop;
	if (this.paddingLeft			!= '') text += ' paddingLeft:' + this.paddingLeft;
	if (this.paddingRight			!= '') text += ' paddingRight:' + this.paddingRight;
	if (this.paddingBottom			!= '') text += ' paddingBottom:' + this.paddingBottom;
	if (this.pageBreakBefore		!= '') text += ' pageBreakBefore:' + this.pageBreakBefore;
	if (this.pageBreakAfter			!= '') text += ' pageBreakAfter:' + this.pageBreakAfter;
	if (this.clip				!= '') text += ' clip:' + this.clip;
	if (this.filter				!= '') text += ' filter:' + this.filter;
	if (this.tableLayout			!= '') text += ' tableLayout:' + this.tableLayout;
	if (this.borderCollapse			!= '') text += ' borderCollapse:' + this.borderCollapse;
	if (this.direction			!= '') text += ' direction:' + this.direction;
	if (this.behavior			!= '') text += ' behavior:' + this.behavior;
	if (this.wordBreak			!= '') text += ' wordBreak:' + this.wordBreak;
	if (this.lineBreak			!= '') text += ' lineBreak:' + this.lineBreak;
	if (this.texJustify			!= '') text += ' texJustify:' + this.texJustify;
	if (this.textJustifyTrim		!= '') text += ' textJustifyTrim:' + this.textJustifyTrim;
	if (this.textAutospace			!= '') text += ' textAutospace:' + this.textAutospace;
	if (this.overflowX			!= '') text += ' overflowY:' + this.overflowY;
	if (this.overflowY			!= '') text += ' overflowY:' + this.overflowY;
	if (this.layoutFlow			!= '') text += ' layoutFlow:' + this.layoutFlow;
	if (this.zoom				!= '') text += ' zoom:' + this.zoom;
	if (this.wordWrap			!= '') text += ' wordWrap:' + this.wordWrap;
	if (this.writingMode			!= '') text += ' writingMode:' + this.writingMode;
	if (this.textAlignLast			!= '') text += ' textAlignLast:' + this.textAlignLast;
	if (this.textOverflow			!= '') text += ' textOverflow:' + this.textOverflow;

	if (this.minHeight			!= '') text += ' minHeight:' + this.minHeight;
	if (this.minWidth			!= '') text += ' minWidth:' + this.minWidth;
	if (this.maxHeight			!= '') text += ' maxHeight:' + this.maxHeight;
	if (this.maxWidth			!= '') text += ' maxWidth:' + this.maxWidth;

	if (this.verticalAlign			!= '') text += ' verticalAlign:' + this.verticalAlign;

	if (this.listStyleType			!= '') text += ' listStyleType:' + this.listStyleType;
	if (this.listStyleImage			!= '') text += ' listStyleImage:' + this.listStyleImage;	
	
	return text;
	
}
//============================================================================================
//			html$size_4
//============================================================================================
function html$size_4(value)
{
	var a,b,size;

	value = '' + value;
		
	size = new Object();
	size.left = 0;
	size.right = 0;
	size.top = 0;
	size.bottom = 0;

	if (value == '') return size;
	
	b = value.split(' ');
	if (b.length <= 0) return size;
	
	if (b.length == 1)
	{
		size.top	= this.getSize(b[0],null);
		size.right	= size.top;
		size.bottom	= size.top;
		size.left	= size.top;
		return size;
	}

	if (b.length == 2)
	{
		size.top	= this.getSize(b[0],null);
		size.right	= this.getSize(b[1],null);
		size.bottom	= size.top;
		size.left	= size.right;
		return size;	
	}

	if (b.length == 3)
	{
		size.top	= this.getSize(b[0],null);
		size.right	= this.getSize(b[1],null);
		size.bottom	= this.getSize(b[2],null);
		size.left	= size.right;
		return size;	
	}

	size.top	= this.getSize(b[0],null);
	size.right	= this.getSize(b[1],null);
	size.bottom	= this.getSize(b[2],null);
	size.left	= this.getSize(b[3],null);
	return size;
}
//============================================================================================
//			htmlstyle$parse_
//============================================================================================
function htmlStyle$parse_(text,selector,doc)
{
	var list,i,a,b,temp,s;
	var j,image,size;
	var left,right,top,bottom;
	var s;
	var name,value;
	
	this.height = 0;
	this.width = 0;

	temp = '' + text;
	list = temp.split(';');

	for (i=0; i < list.length; ++i)
	{
		temp = this.html.trim(list[i]);
		if (temp == '') continue;

		j = temp.indexOf(':');
		if (j < 0) 
		{
			name = this.html.trim(temp);
			name = name.toLowerCase();
			if (name == 'border-collapse') this.borderCollapse = 'collapse';
			continue;
		}
		name = temp.substr(0,j);
		value = temp.substr(j+1);

		name = this.html.trim(name);
		name = name.toLowerCase();

		value = this.html.trim(value);
		switch (name)
		{
			case "clear":
					this.clear = value.toLowerCase();
					break;
			case "height":
					this.height = value.toLowerCase();					
					break;
			case "width":
					this.width = value.toLowerCase();
					break;
			case "top":
					this.top = value;
					break;
			case "color":
					if (this.color.indexOf('!important') >= 0) break;
					this.color = value;
					break;
			case "left":
					this.left = value;
					break;
			case "display":
					this.display = value.toLowerCase();
					break;
			case "visibility":
					this.visibility = value.toLowerCase();
					break;
			case "position":
					this.position = value.toLowerCase();
					break;
			case "z-index":
					this.zIndex = value;
					break;
			case "opacity":
					this.opacity = value; 
					break;
			case "fit":
					this.fit = value.toLowerCase();
					if (this.fit == '') this.fit = 'true'; 
					break;
			case "background-color":
					this.backgroundColor = value.toLowerCase();
					break;
			case "background-position":
					this.backgroundPosition = value.toLowerCase();
					break;
			case "background-image":
					image = value;
					if (image == '') break;
					j = image.indexOf('(');
					if (j < 0) break;
					image = image.substr(j+1);
					j = image.indexOf(')');
					if (j < 0) break;
					image = image.substr(0,j);
					this.backgroundImage = this.html.trim(image);
					if (doc != null) this.backgroundImage = doc.resolve(this.backgroundImage);
					break;
		
			case "background":
					image = value;
					if (image == '') break;

					j = image.indexOf('(');
					if (j < 0)
					{
						this.backgroundColor = value;
						break;
					}
					
					image = image.substr(j+1);
					j = image.indexOf(')');
					if (j < 0) break;
					image = image.substr(0,j);
					this.backgroundImage = this.html.trim(image);
					if (doc != null) this.backgroundImage = doc.resolve(this.backgroundImage);
					break;
			case "background-repeat":
					this.backgroundRepeat = value.toLowerCase();
					break;

			case "float":
					this.float = value.toLowerCase();
					break;

			case "margin":
					size = this.html.size_4(value);
					this.margin			= value;
					this.marginLeft	= size.left;
					this.marginRight	= size.right;
					this.marginTop	= size.top;
					this.marginBottom	= size.bottom;					
					break;
			case "margin-left":
					this.marginLeft	= this.html.getSize(value,null);
					break;
			case "margin-right":
					this.marginRight	= value;
					break;
			case "margin-top":
					this.marginTop	= value;
					break;
			case "margin-bottom":
					this.marginBottom	= value;
					break;

			case "padding":				
					size = this.html.size_4(value);
					this.padding		= value;
					this.paddingLeft	= size.left;
					this.paddingRight	= size.right;
					this.paddingTop	= size.top;
					this.paddingBottom  = size.bottom;					
					break;
			case "padding-left":
					this.paddingLeft	= value;
					break;
			case "padding-right":
					this.paddingRight	= value;
					break;
			case "padding-top":
					this.paddingTop	= value;
					break;
			case "padding-bottom":
					this.paddingBottom	= value;
					break;

			case "border":
					this.borderLeft	= value;
					this.borderRight	= value;
					this.borderTop		= value;
					this.borderBottom	= value;
					break;
			case "border-left":
					this.borderLeft = value;
					break;
			case "border-right":
					this.borderRight = value;
					break;
			case "border-top":
					this.borderTop = value;
					break;
			case "border-bottom":
					this.borderBottom = value;
					break;
			case "font-family": 
					this.fontFamily = value;
					break;
			case "font-size":
					this.fontSize = value;
					break;
			case "font-size-adjust":
					this.fontSizeAdjust = value;
					break;
			case "font-stretch":
					this.fontStretch = value;
					break;
			case "font-style":
					this.fontStyle = value;
					break;
			case "font-variant": 
					this.fontVariant = value;
					break;
			case "font-weight":
					this.fontWeight = value;
					break;
			case "font-render":
					this.fontRender = value.toLowerCase();
					break;
			case "font-skew":
					this.fontSkew = parseFloat(value);
					break;
			case "font-scale":
					this.fontScale = value;
					break;
			case "letter-spacing":
					this.letterSpacing = value.toLowerCase();
					break;
			case "word-spacing":
					this.wordSpacing = value.toLowerCase();
					break;
			case "line-height":
					this.lineHeight = value.toLowerCase();
					break;
			case "list-style":
					this.listStyleType = value.toLowerCase();
					break;
			case "list-style-type":
					this.listStyleType = value.toLowerCase();
					break;
			case "list-style-image":
					image = value;
					if (image == '') break;
					j = image.indexOf('(');
					if (j < 0) break;
					image = image.substr(j+1);
					j = image.indexOf(')');
					if (j < 0) break;
					image = image.substr(0,j);
					this.listStyleImage = this.html.trim(image);
					if (doc != null) this.listStyleImage = doc.resolve(this.listStyleImage);

					break;
			case "text-align":
					this.textAlign = value.toLowerCase();
					break;
			case "vertical-align":
					this.verticalAlign = value.toLowerCase();
					break;
			case "text-decoration":
					this.textDecoration = value.toLowerCase();
					break;
			case "text-indent":
					this.textIndent = value;
					break;
			case "text-shadow":
					this.textShadow = value;
					break;
			case "text-transform":
					this.textTransform = value;
					break;		
			case "border-collapse":
					value = value.toLowerCase();
					if (value == 'collapse') this.borderCollapse = 'collapse';
					if (value == 'true') this.borderCollapse = 'collapse';
					if (value == 't') this.borderCollapse = 'collapse';
					break;		
			}
		}
}
//==============================================================
//                     html$formatDateTime
//==============================================================
function html$formatDateTime(value)
{
	return this.formatDate(value) + ' ' + this.formatTime(value);
}
//==============================================================
//                  html$formatDate
//==============================================================
function html$formatDate(value)
{
	var m1,d1,y1;
	var text;
	var d;

	d = new Date(value);
	var Month = new Array('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec');
		
	m1 = d.getMonth();
	d1 = d.getDate();
	y1 = d.getFullYear();
	
	text = Month[m1] + " " + d1 + " " + y1;
	return text;
}
//==============================================================
//                     html$formatTime
//==============================================================
function html$formatTime(value)
{
	var h,m,s;
	var ampm;
	var d,text;
	

	d = new Date(value);

	h = d.getHours();
	s = d.getSeconds();
	m = d.getMinutes();
	
	ampm = 'am';
	if (h >= 12) ampm = 'pm';
	if (h > 12) h = h - 12;
	if (h == 0) h = 12;

	if (h < 10) h = "0" + h;
	if (m < 10) m = "0" + m;
	
	text = h + ':' + m + ' ' + ampm;
	return text;
}
//============================================================================================
//			html$resolve
//============================================================================================
function html$resolve(data)
{
	var text,i,j;
	var first,pos;
	
	text = '';
	pos = new Object();
	pos.first = 0;

	while (true)
	{
		j = data.indexOf('{',pos.first);
		if (j < 0) return text + data.substr(pos.first);
		text += data.substr(pos.first,j-pos.first);
		pos.first = j+1;
		text += this.getResolve(data,pos);
	}
}
//============================================================================================
//			html$getResolve
//============================================================================================
function html$getResolve(data,pos)
{
	var i,j,text,depth,c;
	
	depth = 0;

	for (i=pos.first; i < data.length; ++i)
	{
		c = data.substr(i,1);
		if (c == '}')
		{
			if (depth == 0)
			{
				text = '{' + data.substr(pos.first,i-pos.first) + '}';
				pos.first = i+1;
				return this.resolve_A(text);
			}
			else depth -= 1;
		}

		if (c == '{') depth += 1;
	}
		
	text = '{' + data.substr(pos.first) + '}';
	pos.first = data.length;
	return this.resolve_A(text);

}
//============================================================================================
//			html$resolve_A
//============================================================================================
function html$resolve_A(data)
{
	var i,j,first,mid,test,a;


	i = data.indexOf('{');
	if (i < 0) return data;

	first = data.substr(0,i);
	data = data.substr(i+1);

	i = data.indexOf('}');
	if (i < 0) return first + '{' + data;

	while (true)
	{
		i = data.indexOf('}');
		j = data.indexOf('{');
		if (j < 0) break;
		if (j > i) break;
		a = data.substr(0,j);
		test = a + this.resolve_A(data.substr(j));
		if (test == data) return data;		// recursive ???
		data = test;
	}

	mid = data.substr(0,i);
	data = data.substr(i+1);
	data = first + this.resolveTag(mid) + this.resolve(data);

	return data;

}
//============================================================================================
//			html$resolveTag
//============================================================================================
function html$resolveTag(tag)
{
	var i,j,name,text,args,f;
	var xdate,value,fname,a;
	var monthName = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];

	i = tag.indexOf('(');
	j = tag.indexOf('.'); // special case;
	if (j >= 0 && j < i) i = 0;
	if (i > 0) 
	{
		name = tag.substr(0,i);
		name = this.trim(name);
		name = name.toLowerCase();
		text = tag.substr(i+1,tag.length-1);
		if (text.substr(text.length-1) == ')') text = text.substr(0,text.length-1);
		args = text.split(',');
		return this.resolveFunction(name,args,tag);
	}

	name = tag;

	name = this.trim(name);
	name = name.toLowerCase();


	i = name.indexOf('defer:');
	if (i >= 0) return '{' + tag.substr(i+6) + '}';

	if (this.resolved != null)
	{
		a = typeof(this.resolved[name]);
		if (a != 'undefined') return this.resolved[name];
	}

	i = name.indexOf('eval:');
	if (i < 0) i = name.indexOf('eval.1:');
	if (i < 0) i = name.indexOf('eval.2:');
	if (i < 0) i = name.indexOf('eval.3:');
	if (i < 0) i = name.indexOf('eval.4:');
	if (i < 0) i = name.indexOf('eval.5:');
	if (i < 0) i = name.indexOf('eval.6:');
	
	if (i >= 0)
	{		
		i = name.indexOf(':');
		fname = tag.substr(0,i);
		value = tag.substr(i+1);		

		try
		{
			 value = eval(value);
			 if (fname == 'eval.1') return Math.round(value * 10) / 10;
			 if (fname == 'eval.2') return Math.round(value * 100) / 100;
			 if (fname == 'eval.3') return Math.round(value * 1000) / 1000;
			 if (fname == 'eval.4') return Math.round(value * 10000) / 10000;
			 if (fname == 'eval.5') return Math.round(value * 100000) / 100000;
			 if (fname == 'eval.6') return Math.round(value * 1000000) / 1000000;
	
			 return value;
		}
		catch (e)
		{ 
			return "eval:" + value + ' ' +  e.message; 
		};
	}
	
	xdate = new Date();
	if (name == 'pi') return Math.PI;
	if (name == 'date') return this.formatDate(xdate);
	if (name == 'time') return this.formatTime(xdate);
	if (name == 'datetime') return this.formatDateTime(xdate);
	if (name == 'year') return xdate.getFullYear();
	if (name == 'month') return monthName[xdate.getMonth()];
	if (name == 'day') return xdate.getDay();

	if (name == 'pdf')
	{
	    return 'out';
//		return CollinsPDF('return as=object_pdf');
	}

	args = '';
	i = name.indexOf('.');
	if (i > 0) 
	{
		args = name.substr(i+1);
		name = name.substr(0,i);

		if (name == 'window') return this.resolveWindow(tag);
	}


	i = name.indexOf('[');
	if (i > 0)
	{
		args = name.substr(i) + args;
		name = name.substr(0,i);
	}

	for (i=0; i < this.macros.length; ++i)
	{
		if (this.macros[i].id == name) 
		{
			if (args == '') return this.macros[i].execute();
			return this.macros[i].resolve(args);
		}
	}

	for (i=0; i < this.storage.bins.length; ++i)
	{
		if (this.storage.bins[i].id == name) 
		{
		    var bin = this.storage.bins[i];
		    if (bin.value != '') return bin.value;
		    if (bin.pos < bin.list.length)
		    {
		        value =  bin.list[bin.pos];
		        bin.pos += 1;
		        return value;
            }
			return '';
		}
	}

	if (this.parent != null)
	{
		for (i=0; i < this.parent.macros.length; ++i)
		{
		if (this.parent.macros[i].id == name) 
			{
				if (args == '') return this.parent.macros[i].execute();
				return this.parent.macros[i].resolve(args);
			}
		}
	}

	if (this.rs != null)
	{
		if (this.rs.mine)
		{
			for (i=0; i < this.rs.fields.length; ++i)
			{
				if (this.rs.fields[i].toLowerCase() == name)
				{
					value = this.rs.records[this.rs.pos][i];
					return value;
				}
			}
		}
		else
		{		
			for (i=0; i < this.rs.Fields.Count; ++i)
			{
				f = this.rs.Fields(i);
				if (f.name.toLowerCase() == name)
				{
					if (f.value == null) return '';
					return f.value;
				}
			}
		}	
	}

	if (this.keepUnresolved) return '{' + tag + '}';
	return tag;
}
//============================================================================================
//			html$resolveWindow
//============================================================================================
function html$resolveWindow(value)
{
	var text,img,context,canvas;
	var dataUrl;

try
{

	i = value.lastIndexOf('.');
	if (i < 0) return eval(value);
	
	name = value.substr(i+1);
	value = value.substr(0,i);


	if (name = 'toData()')
	{
		img = eval(value);
		canvas  = document.createElement('canvas');
	
		canvas.width = img.width;
		canvas.height = img.height;
		context = canvas.getContext("2d");
	    context.drawImage(img,0,0);
		dataUrl = canvas.toDataURL('image/jpeg');
		dataUrl = 'Base64,' + img.width + ',' + img.height + ':' + dataUrl.substr(dataUrl.indexOf(','));
		
		return dataUrl;
	}
	
	if (i < 0) return eval(value);

}
catch (e) { return '' }
		
}
//============================================================================================
//			html$radian
//============================================================================================
function html$radian(value)
{
	value = parseFloat(value);
	if (isNaN(value)) return 0;
	
	value = value % 360;
	value = value / 180 * Math.PI;
	return value;
}
//============================================================================================
//			html$r8
//============================================================================================
function html$r8(value)
{
	value = parseFloat(value);
	if (isNaN(value)) return 0;
	return value;
}

//============================================================================================
//			html$colorByCount
//============================================================================================
function html$colorByCount(value)
{
	var n;

	var lightColors = new Array('#FAEBD7','#7FFFD4','#F5F5DC','#FFE4C4','#FFEBCD',
	'#7FFF00','#FFF8DC',
	'#FFFAF0','#DCDCDC',
	'#DAA520','#ADFF2F',
	'#F0FFF0','#FF69B4','#FFFFF0','#F0E68C','#E6E6FA','#FFF0F5','#FFFACD','#ADD8E6','#E0FFFF','#FAFAD2',
	'#90EE90','#FFB6C1','#FFA07A','#87CEFA',
	'#FFFFE0','#FAF0E6',
	'#F5FFFA','#FFE4E1','#FFE4B5','#FFDEAD',
	'#FDF5E6',
	'#EEE8AA','#98FB98','#AFEEEE','#FFEFD5','#FFDAB9',
	'#FFC0CB',
	'#F4A460','#FFF5EE','#87CEEB',
	'#FFFAFA','#D2B48C','#D8BFD8','#EE82EE','#F5DEB3','#F5F5F5','#9ACD32');

	n = parseInt(value);
	if (isNaN(n)) n = 0;
	n = Math.abs(n);
	n = n % lightColors.length;

	return lightColors[n];	
}
//============================================================================================
//			html$comma
//============================================================================================
function html$comma(value)
{
	var text,a,b,c,re;
	
	if (value == '') return '';

	text = '' + value;
	a = text.split('.');
	b = a[0];
	c = '';
	if (a.length > 1) c = '.' + a[1];
	re = RegExp("/(\d+)(\d{3})/;");
	
	while (re.test(b)) b = b.replace(re, '$1' + ',' + '$2');
	return b + c;
}
//============================================================================================
//			html$resolveFunction
//============================================================================================
function html$resolveFunction(name,args,text)
{
	var value,min,max,mod;
	var dx;
	var i,n;
	var a,b,c,d,re;

	switch (name)
	{
	case      'log': return Math.log(this.r8(args[0]));
	case  'ifblank': 
					a = this.trim(args[0]);
					if (a != '') return a;
					return args[1];

	case  'replace': 
					a = args[0];
					b = args[1];
					c = args[2];
					re = RegExp(b,'gi');
					d = a.replace(re,c);
					return d;
	
	case      'sin': return Math.sin(this.radian(args[0]));
	case      'cos': return Math.cos(this.radian(args[0]));
	case      'tan': return Math.tan(this.radian(args[0]));

	case     'asin': return Math.asin(this.r8(args[0]));
	case     'acos': return Math.acos(this.r8(args[0]));
	case     'atan': return Math.atan(this.r8(args[0]));

	case     'sqrt': return Math.sqrt(this.r8(args[0]));

	case      'abs': return Math.abs(this.r8(args[0]));
	case    'round': return Math.round(this.r8(args[0]));
	case     'ceil': return Math.ceil(this.r8(args[0]));
	case    'floor': return Math.floor(this.r8(args[0]));

	case      'min': return Math.min(this.r8(args[0]),this.r8(args[1]));
	case      'max': return Math.max(this.r8(args[0]),this.r8(args[1]));

	case      'pow': return Math.pow(this.r8(args[0]),this.r8(args[1]));

	case   'escape': return escape(args[0]);
	case 'unescape': return unescape(args[0]);

	case       'pi': return Math.PI;

	case 'colorbycount': return this.colorByCount(args[0]);
	case     'filesize': return this.sys.fileSize(this.imageFilename(args[0]));
	case    'imagesize': return this.sys.fileSize(this.imageFilename(args[0]));

	case    'comma': return this.comma(args[0]); 

	case   'dollar': text = this.comma(args[0]); 
					 if (text == '') return '';
					 return '$' + text;

	case   'first': n = parseInt(args[0]);
					if (isNaN(n)) return args[0];
					text = '' + n;
					i = text.substr(text.length-1);
					if (i == '1') return n + 'st';
					if (i == '2') return n + 'nd';
					if (i == '3') return n + 'th';
					return n + 'th';
	case      'mod': 
				value = parseInt(args[0]);
				if (isNaN(value)) return '0';
				mod = parseInt(args[1]);
				if (isNaN(mod)) return '0';
				value = value % mod;
				return '' + value;
	case   'random': 
				if (args.length == 0) return Math.random();
				if (args[0] == '') return Math.random();
				min = this.r8(args[0]);
				if (isNaN(min)) return Math.random();
				if (args.length == 2)
				{
					max = this.r8(args[1]);
				}
				else
				{
					max = min;
					min = 1;
				}
				if (isNaN(max)) return Math.random();
	
				if (min >= max) return Math.random();
				dx = (max - min) + 1;
				value = (Math.round(Math.random() * dx) % dx) + min;
				return value;
		
	case   'eval':
		try
		{
			 value = eval(args[0]);
			 return value;
		}
		catch (e) { return ''; };

	default:
		try
		{
		    if (this.script != '')
		    {
		        value = eval(this.script + text);
		        return value;
		    }
			 value = eval(text);
			 return value;
		}
		catch (e) { return e.description; };
	
	
	}

	return '';
}
//============================================================================================
//			html$writePageBreak
//============================================================================================
function html$writePageBreak(y,pdf)
{
	this.pages[this.pages.length] = Math.floor(y);
	pdf.pageBreak(0,true);

}
//============================================================================================
//			html$pointToPixel
//============================================================================================
function html$pointToPixel(x)
{
	x = (x / 72) * this.bpi;
	return x;
}
//============================================================================================
//			html$pixelToInch_x
//============================================================================================
function html$pixelToInch_x(x)
{
	x = x / this.bpi;
	return x;
}
//============================================================================================
//			html$pixelToInch_y
//============================================================================================
function html$pixelToInch_y(y)
{
	var i,dy;
	var t;
	
	t = this;

	dy = 0;

	for (i=0; i < this.pages.length; ++i)
	{
		if ((y + 1) < this.pages[i]) break;
		dy = this.pages[i];
	}

	y = (y - dy);
	y = y / this.bpi;
//	y = y + this.offsetY;
	return y;
}
//============================================================================================
//			html$pixelToPoint
//============================================================================================
function html$pixelToPoint(x)
{
	x = (x / this.bpi) * 72;
	return x;
}
//============================================================================================
//			htmlFont$
//============================================================================================
function htmlFont$(html)
{
	var f,p,scale,x,y,list;

//-------- methods -----------

	this.setFontStyle		= htmlFont$setFontStyle;
	this.scale			= htmlFont$scale;

//-------- properties -----------

	this.html			= html;

	this.bold			= (html.level.B > 0);
	this.underline			= (html.level.U > 0);
	this.italic			= (html.level.I > 0);
	this.letterSpacing		= 0;
	this.wordSpacing		= 0;
	this.scaleX			= 1;
	this.scaleY			= 1;

	this.size			= 0;
	this.color			= '';

	this.fontName			= '';
	this.fontSize			= '';	
	
	
}
//============================================================================================
//				htmlFont$scale
//============================================================================================
function htmlFont$scale(scale)
{


	this.letterSpacing *= scale;
	this.wordSpacing *= scale;
//	this.size *= scale;
	this.scaleX *= scale;
	this.scaleY *= scale;
}
//============================================================================================
//				htmlFont$setFontStyle
//============================================================================================
function htmlFont$setFontStyle(ele)
{
	var scale,scale,x,y,list,p,f,name,i;

	f = this;

//	this.letterSpacing	= this.html.getSize(ele.style.letterSpacing,null);
//	this.wordSpacing	= this.html.getSize(ele.style.wordSpacing,null);

	this.letterSpacing	= ele.style.letterSpacing;
	this.wordSpacing	= ele.style.wordSpacing;

	if (ele.style.fontWeight == 'bold') this.bold = true;
	if (ele.style.fontFamily != '') this.fontName = ele.style.fontFamily;

	if (ele.style.fontSize != '') this.fontSize =  ele.style.fontSize;
	if (ele.style.color != '')    this.color = ele.style.color;

	scale = ele.style.fontScale;
	if (scale != '')
	{
		list = scale.split(' ');
		if (list.length == 1) list = scale.split(',');

		if (list.length == 2)
		{
			x = parseFloat(list[0]);
			if (! isNaN(x)) this.scaleX = x;
			y = parseFloat(list[1]);
			if (! isNaN(y)) this.scaleY = y;	
		}
	}

	p = ele;
	while (p != null)
	{
		if (p.tagName == 'FONT')
		{

			if ((p.size  != '') && (this.fontSize == '')) this.fontSize = p.fontSize;
			if ((p.color != '') && (this.color    == '')) this.color    = p.color;
			if ((p.face  != '') && (this.fontName == '')) this.fontName = p.face;
		}
		else
		{
			if ((p.font.color		!= '') && (this.color    == '')) this.color    = p.font.color;
			if ((p.font.fontSize	!= '') && (this.fontSize == '')) this.fontSize = p.font.fontSize;
			if ((p.font.fontName	!= '') && (this.fontName == '')) this.fontName = p.font.fontName;

			if (p.style)
			{
				if (this.letterSpacing == '') this.letterSpacing = p.style.letterSpacing;
				if (this.wordSpacing == '') this.letterSpacing = p.style.wordSpacing;
			}
		}

		p = p.parentElement;
	}

	if (ele.style.fontStyle ==    'italic') this.italic = true;
	if (ele.style.fontStyle ==      'bold') this.bold = true;
	if (ele.style.fontStyle == 'underline') this.underline = true;


	this.render		= ele.style.fontRender;
	this.skew		= ele.style.fontSkew;


	if (ele.tagName == 'A')
	{
		if (ele.style.color == '') this.color = 'blue';
		this.underline = true;	
	}

	if (this.color    == '') this.color	= ele.inherit('color');
	if (this.fontSize == '') this.fontSize  = ele.inherit('fontSize');
	if (this.fontName == '') this.fontName	= ele.inherit('fontFamily');

	if (ele.style.textDecoration == 'none')
	{
		this.bold = false;
		this.underline = false;
		this.italic = false;
		this.scaleX = 1;
		this.scaley = 1;
		this.skew   = '';
		this.render = '';
		this.letterSpacing = 0;
		this.wordSpacing = 0;
	}

	if (this.fontSize == '') this.fontSize = this.html.fontSize;
	
	if (this.fontSize == '') this.fontSize = this.default_fontSize + 'pt'; 
	this.size = this.html.parseFontSize(this.fontSize);

	if (this.size <= 0) this.size = this.default_fontSize;
	if (this.color == '') this.color = 'black';

	name = this.fontName.toLowerCase();
	this.fontName = name;

	if (name.indexOf('arial') >= 0)	this.fontName = 'arial';
	if (name.indexOf('time') >= 0)		this.fontName = 'times';
	if (name.indexOf('helvetica') >= 0) this.fontName = 'helvetica';
	if (name.indexOf('courier') >= 0)	this.fontName = 'courier';
	
	if (ele.tagName ==   'MIN') this.size = this.size - 3;
	if (ele.tagName ==   'MAX') this.size = this.size - 3;
	if (ele.tagName == 'RANGE') this.size = this.size - 3;

	if (ele.tagName == 'SMALL') this.size = this.size - 2;
	if (ele.tagName ==   'BIG') this.size = this.size + 2;

	if (ele.tagName == 'TD' || ele.tagName == 'TH')
	{
		if (ele.style.backgroundColor == '')
		{
			p = ele.parentElement;
			if (p) 
			{
				ele.style.backgroundColor = p.style.backgroundColor;
			}
		}
	}

	i = this.color.indexOf('!important');

	if (i >= 0) 
	{
		this.color = this.color.substr(0,i);
	}


	if (ele.tagName == 'P')
	{
		p = ele.parentElement;
		while (p != null)
		{			
			if (p.style)
			{
				if (ele.align == '') ele.align = p.style.textAlign;
			}
			if (p.tagName == 'TABLE') break;
			if (p.tagName == 'DIV') break;
			if (p.tagName == 'SPAN') break;

			p = p.parentElement;	
		}	
	}
}
//============================================================================================
//				dump
//============================================================================================
function dump(e)
{
	var text;
	
	if (! e.tagName) return '';
	
	text = 'tagName ' + e.tagName + ' class: ' + e.className;
	if (e.style) text += ' color style: ' + e.style.color;
	if (e.color) text += ' color: ' + e.color;
	text += '\r\n';
	
	if (e.parentElement) text += dump(e.parentElement);
	
	return text;
}
//============================================================================================
//				html$extractFileName
//============================================================================================
function html$extractFileName(filename)
{
	var i,name;

	filename = this.trim(filename);
	if (filename == '') return '';

	filename = filename.replace(/\\/g,'/');
	i = filename.lastIndexOf('/');
	if (i < 0) return filename;
	
	name = filename.substr(i+1);
	return this.trim(name);
}
//============================================================================================
//				html$setOutput_
//============================================================================================
function html$setOutput_(pdf,ele)
{

	if (ele == null) return;
	if (pdf == null) return;
	
	if (ele.pageSize  != '') pdf.setPageSize(ele.pageSize);
	if (ele.landscape != '') pdf.setLandscape(true);
	if (ele.portrait  != '') pdf.setLandscape(false);

	if (ele.xmarginLeft   != '') pdf.setMarginLeft(ele.xmarginLeft);
	if (ele.xmarginRight  != '') pdf.setMarginRight(ele.xmarginRight);
	if (ele.xmarginTop    != '') pdf.setMarginTop(ele.xmarginTop);
	if (ele.xmarginBottom != '') pdf.setMarginBottom(ele.xmarginBottom);

	if (ele.fontName  != '') pdf.setFontName(ele.fontName);
	if (ele.fontColor != '') pdf.setFontColor(ele.fontColor);
	if (ele.fontSize  != '') pdf.setFontSize(ele.fontSize);

	if (ele.watermark != '') pdf.setWatermark(ele.watermark);

	if (ele.backgroundColor != '' && typeof(pdf.setPageBackgroundColor) == 'function') pdf.setPageBackgroundColor(ele.backgroundColor);
	if (ele.marginColor	!= '' && typeof(pdf.setPageMarginColor) == 'function') pdf.setPageMarginColor(ele.marginColor);
	if (ele.rotate			!= '' && typeof(pdf.setPageRotate) == 'function') pdf.setPageRotate(ele.rotate);

	pdf.drawMargin	= ele.drawMargin;
	if (pdf.drawMargin) pdf.drawMargin_();

	if (ele.title    != '') pdf.title	= ele.title;
	if (ele.subject  != '') pdf.subject	= ele.subject;
	if (ele.author   != '') pdf.author	= ele.author;	
	if (ele.keywords != '') pdf.keywords	= ele.keywords;

	if (ele.onDocumentOpen		!= '' && typeof(pdf.onDocumentOpen) == 'function') pdf.onDocumentOpen(ele.onDocumentOpen);
	if (ele.onWillClose		!= '' && typeof(pdf.onWillClose) == 'function') pdf.onWillClose(ele.onWillClose);
	if (ele.onWillSave		!= '' && typeof(pdf.onWillSave) == 'function' ) pdf.onWillSave(ele.onWillSave);
	if (ele.onDidSave		!= '' && typeof(pdf.onDidSave) == 'function') pdf.onDidSave(ele.onDidSave);
	if (ele.onWillPrint		!= '' && typeof(pdf.onWillPrint) == 'function') pdf.onWillPrint(ele.onWillPrint);
	if (ele.onDidPrint		!= '' && typeof(pdf.onDidPrint) == 'function') pdf.onDidPrint(ele.onDidPrint);		
	
	this.body.active.maxWidth = (pdf.xmax - pdf.xmin) / 72 * 110;
}
//============================================================================================
//			html$writeToPdfFit
//============================================================================================
function html$writeToPdfFit(pdf)
{
	var pageWidth, pageHeight, xoffset,yoffset,ele;
	var height,width,text,t;
	var left,right,top,bottom,dx;

	pdf.href_style = false;
	pdf.justify = false;

	ele = this.firstPDF;
//	pdf.urlColor = '';
	this.setOutput_(pdf,this.firstPDF);

	this.offsetY = 0;

	dx = (pdf.marginLeft + pdf.marginRight) / 72;
	pageWidth = (8.5 - dx) * 110;
	pageHeight = 144 * 110;

	this.marginTop		= 0;
	this.marginLeft	= 0;
	this.marginRight	= 0;
	this.marginBottom	= 0;

	pdf.default_fontSize = this.default_fontSize;
	pdf.default_fontName = this.default_fontName;
	
	pdf.setFontName(this.fontName);
	pdf.setFontSize(this.fontSize);

	this.resize(pageWidth-3,pageHeight);

	t = this.body;

	height = this.body.offsetHeight + this.body.marginTop + this.body.marginBottom + 0;
	width = this.body.offsetWidth + this.body.marginLeft + this.body.marginRight + 0;

	pageWidth = pageWidth + this.body.marginLeft + this.body.marginRight + 4;
	
	if (height < (11 * 110)) height = 11 * 110;
	if (width < ((8.5 - dx) * 110)) width = (8.5 - dx) * 110;

	if (height < pageHeight) pageHeight = height + this.marginTop + this.marginBottom + 0;
	if (width > pageWidth) pageWidth = width;

	this.body.active.maxHeight = pageHeight;

	pageHeight = pageHeight / 110;
	pageWidth = (pageWidth / 110) + dx;

	text = pageWidth + ',' + pageHeight;

	pdf.setPageSize(text);
	pdf.setLandscape(false);

	this.body.write(pdf,0,0);
}
//============================================================================================
//			html$writeToPdf
//============================================================================================
function html$writeToPdf(pdf,x1,y1,x2,y2,fit)
{
	var pageWidth, pageLength, xoffset,yoffset,ele;
	var t,text,height,width,scale,scalex,scaley,ds,scalex1;
	var tx1,ty1,tx2,ty2,count,xwidth,w,lastWidth,clip;
	var dy;

	if (arguments.length < 6) fit = '';
	
	clip = false;
	pdf.justify = false;
	pdf.href_style = false;

	this.setOutput_(pdf,this.firstPdf);

	this.offsetY = (pdf.ymax - pdf.ypos) / 72;

	pageWidth = (pdf.xmax - pdf.xmin) / 72 * 110;
	pageLength = ((pdf.ymax - pdf.ymin) / 72) * 110;

	pdf.default_fontSize = this.default_fontSize;
	pdf.default_fontName = this.default_fontName;
	
	pdf.setFontName(this.fontName);
	pdf.setFontSize(this.fontSize);

	xoffset = this.pointToPixel(pdf.xpos);
	yoffset = this.pointToPixel(pdf.ypos);

	xoffset = 0;
	yoffset = 0;

	if (arguments.length > 1)
	{
		tx1 = Math.min(x1,x2);
		ty1 = Math.min(y1,y2);
		tx2 = Math.max(x1,x2);
		ty2 = Math.max(y1,y2);
		
		pageLength = ty2 - ty1;
		pageWidth = tx2 - tx1;
		xoffset = tx1;
		yoffset = ty1;		
	}

	this.body.active.maxWidth = pageWidth;
	this.body.active.maxHeight = pageLength;

	this.resize(pageWidth,pageLength);

	ele = this.body;

	if (fit != '')
	{	

		height = this.body.offsetHeight;
		width = this.body.offsetWidth;

		if (height <= 0) return;
		if (width <= 0) return;
		if (pageWidth <= 0) return;
		if (pageLength<= 0) return;

		scalex = pageWidth / width;
		scaley = pageLength / height;
		scale = scalex;
		if (scaley < scale) scale = scaley;
		if (fit == 'clip' || fit == 'false') scale = 1.0;
		if (fit == 'shrink-only' && scale > 1) scale = 1.0;
		if (fit == 'expand-only' && scale < 1) scale = 1.0;
		
		if (scale != 1)
		{

			count = 0;
			xwidth = pageWidth;

			while (count < 5)
			{
				count += 1;
				scalex1 = scalex;
				
				lastWidth = xwidth;
				
				xwidth = xwidth * 1.5;
				this.body.active.maxWidth = xwidth;
				this.resize(xwidth,pageLength);
	
				height = this.body.offsetHeight;
				width = this.body.offsetWidth;

				scalex = xwidth / width;
				scaley = pageLength / height;
				if (scalex < scaley) break;
	
				w = width * scale;			
				if (w > pageWidth) break;
	
				scale = scalex;
				if (scaley < scale) scale = scaley;

			}

			this.resize(lastWidth,pageLength);
			ele.scale(scale);
		}

		height = pageLength / 110 * 72;
		width = pageWidth / 110 * 72;
		dy = yoffset / 110 * 72;
		pdf.setClip(xoffset + pdf.xmin,pdf.ymax - (dy + height),width,height);
	}


	t = this.body;
	ele = this.body;

	ele.write(pdf,xoffset,yoffset);

	pdf.setClip();

}
//============================================================================================
//			html$writeToPdfScale
//============================================================================================
function html$writeToPdfScale(pdf,x1,y1,x2,y2,scale)
{
	var pageWidth, pageLength, xoffset,yoffset,ele;
	var t,text,height,width,scale,scalex,scaley,ds,scalex1;
	var tx1,ty1,tx2,ty2,count,xwidth,w,lastWidth,clip;
	var dy;

	if (arguments.length < 6) scale = 1;
	
	clip = false;
	pdf.justify = false;
	pdf.href_style = false;

	this.setOutput_(pdf,this.firstPdf);

	this.offsetY = (pdf.ymax - pdf.ypos) / 72;

	pageWidth = (pdf.xmax - pdf.xmin) / 72 * 110;
	pageLength = ((pdf.ymax - pdf.ymin) / 72) * 110;

	pdf.default_fontSize = this.default_fontSize;
	pdf.default_fontName = this.default_fontName;
	
	pdf.setFontName(this.fontName);
	pdf.setFontSize(this.fontSize);

	xoffset = this.pointToPixel(pdf.xpos);
	yoffset = this.pointToPixel(pdf.ypos);

	xoffset = 0;
	yoffset = 0;

	if (arguments.length > 1)
	{
		tx1 = Math.min(x1,x2);
		ty1 = Math.min(y1,y2);
		tx2 = Math.max(x1,x2);
		ty2 = Math.max(y1,y2);
		
		pageLength = ty2 - ty1;
		pageWidth = tx2 - tx1;
		xoffset = tx1;
		yoffset = ty1;		
	}

	this.body.active.maxWidth = pageWidth;
	this.body.active.maxHeight = pageLength;

//	this.resize(pageWidth,pageLength);

	ele = this.body;

	if (scale < 1)
	{	
		lastWidth = pageWidth / scale;
//		this.resize(lastWidth,pageLength);
		ele.scale(scale);
	}

	t = this.body;
	ele = this.body;

	ele.write(pdf,xoffset,yoffset);

}
//============================================================================================
//			htmlElement$scale
//============================================================================================
function htmlElement$scale(scale)
{	
	var j;

	if (scale == 1) return;
	if (scale < 0.0001) return;
	
	this.offsetHeight = this.offsetHeight * scale;
	this.offsetWidth = this.offsetWidth * scale;

	this.clientHeight = this.clientHeight * scale;
	this.clientWidth = this.clientWidth * scale;

	this.height = this.height * scale;
	this.width = this.width * scale;

	this.font.scale(scale);

	this.marginLeft   *= scale;
	this.marginRight  *= scale;
	this.marginTop    *= scale;
	this.marginBottom *= scale;

	this.paddingLeft   *= scale;
	this.paddingRight  *= scale;
	this.paddingTop    *= scale;
	this.paddingBottom *= scale;

	this.offsetLeft	  *= scale;
	this.offsetTop	  *= scale;

	if (this.parts)
	{
		for (j=0; j < this.parts.length; ++j)
		{
			this.parts[j].offsetLeft *= scale;
			this.parts[j].offsetTop *= scale;
			this.parts[j].xjust *= scale;
			this.parts[j].yjust *= scale;
		}
	}
	

	if (this.firstChild != null) 
	{
		if (this.style.display != 'none') this.firstChild.scale(scale);
	}
	
	if ((typeof(single) != 'undefined') && single) return;
	if (this.nextSibling != null) this.nextSibling.scale(scale);	
}
//============================================================================================
//			htmlElement$write
//============================================================================================
function htmlElement$write(out,x,y,single)
{	
	var cx,cy;
	var px,py;
	var dx,dy;
	var text,s;

	if (this.html.remove_A && this.tagName == 'A')
	{
//		if (this.nextSibling != null) this.nextSibling.write(out,x,y);
//		return;	
	}
		
	if (this.style)
	{
		if ((this.style.display == 'none') || (this.style.visibility == 'hidden')) 
		{
			if ((typeof(single) != 'undefined') && single) return;
			if (this.nextSibling != null) this.nextSibling.write(out,x,y);
			return;
		}
	}
	
	if (this.tagName == 'PAGEBREAK')
	{
		x = 0;
		y = 0;
	}

	dx = 0;
	dy = 0;
	if (this.style && (this.style.position == 'relative'))
	{
		if (this.style.left != '') dx = parseInt(this.style.left);
		if (this.style.top  != '') dy = parseInt(this.style.top);
	}

	px = x + (this.offsetLeft + this.xjust + dx);
	py = y + (this.offsetTop + this.yjust + dy);

	this.write_A(out,px,py);
	
	if ((this.tagName == 'REPORT') || (this.tagName == 'XGROUP'))
	{
		x = 0;
		y = this.clientHeight;
		this.html.body.offsetHeight = this.clientHeight;
		this.html.body.offsetWidth  = this.clientWidth;
	}
	
//-----------------------------------------------------------------

	
	cx = x + (this.offsetLeft + this.xjust + dx);
	cy = y + (this.offsetTop + this.yjust + dy);

	if (this.tagName == 'PAGEBREAK')
	{
		cx = 0;
		cy = 0;
	}
	
	if ((this.firstChild != null) && (this.tagName != 'MATRIX')) 
	{
		if (this.style.display != 'none') this.firstChild.write(out,cx,cy);
	}
	
	if ((typeof(single) != 'undefined') && single) return;
	if (this.nextSibling != null) this.nextSibling.write(out,x,y);	
}
//============================================================================================
//			htmlElement$write_A
//============================================================================================
function htmlElement$write_A(out,x,y)
{
	var NODE_TEXT = 3;
	var NODE_TAG  = 1;
	var text;
	var xmin,ymin,xmax,ymax;
	var obj;

	xmin = x + this.marginLeft;
	ymin = y + this.marginTop;
	xmax = (x + this.offsetWidth) - this.marginRight;
	ymax = (y + this.offsetHeight) - this.marginBottom;
	
	if (this.nodeType == NODE_TAG)
	{
		this.writeBackground(out,xmin,ymin,xmax,ymax);
		this.writeBorder(out,xmin,ymin,xmax,ymax);
	}
	
	if (this.outline != '') this.html.addOutline(this.outline,xmin,ymin);
	this.writeElement(out,xmin,ymin,xmax,ymax);

}
//============================================================================================
//			htmlElement$writeBorder
//============================================================================================
function htmlElement$writeBorder(out,xmin,ymin,xmax,ymax)
{
	var bx1,by1,bx2,by2;
	var x1,y1,x2,y2,t;
	var tag;
	
	tag = this.tagName;

	if (! this.style) return;
	if (this.tagName == 'BODY') return;

	t = this;

	if ((this.style.borderLeft   == '') &&
		(this.style.borderRight  == '') &&
		(this.style.borderTop    == '') &&
		(this.style.borderBottom == '')) {
		this.traceBorder(out,xmin,ymin,xmax,ymax);	
		return;
	}

	if (xmax > 20000) return;
	if (ymax > 20000) return;

	bx1 = xmin - Math.floor(this.borderLeft / 2);
	by1 = ymin - Math.floor(this.borderTop / 2);
	bx2 = xmax + Math.floor(this.borderRight / 2);
	by2 = ymax + Math.floor(this.borderBottom / 2);
	
	bx1 = this.html.pixelToInch_x(bx1);
	by1 = this.html.pixelToInch_y(by1);
	bx2 = this.html.pixelToInch_x(bx2);
	by2 = this.html.pixelToInch_y(by2);


	out.drawBorder(bx1,by1,bx2,by2,this.style.borderLeft,this.style.borderRight,this.style.borderTop,this.style.borderBottom,this);

//	this.writeBorder_A(out,this.style.boderLeft,  xmin,ymin,xmax,ymax);
//	this.writeBorder_A(out,this.style.boderRight, xmin,ymin,xmax,ymax);
//	this.writeBorder_A(out,this.style.boderTop,   xmin,ymin,xmax,ymax);
//	this.writeBorder_A(out,this.style.boderBottom,xmin,ymin,xmax,ymax);
}
//============================================================================================
//			htmlElement$traceBorder
//============================================================================================
function htmlElement$traceBorder(out,xmin,ymin,xmax,ymax)
{	
	var bx1,by1,bx2,by2;
	var x1,y1,x2,y2;
	var tx,ty,h,t;
	var height,width;

	t = this;

	if (! this.html.trace_border) return;

	if (xmax > 20000) return;
	if (ymax > 20000) return;

	if (this.tagName == 'BODY')
	{
		xmax = xmin + this.active.maxWidth;
		ymax = ymin + this.active.maxHeight;
	}

	bx1 = xmin - Math.floor(this.borderLeft / 2);
	by1 = ymin - Math.floor(this.borderTop / 2);
	bx2 = xmax + Math.floor(this.borderRight / 2);
	by2 = ymax + Math.floor(this.borderBottom / 2);

	x1 = this.html.pixelToInch_x(bx1);
	y1 = this.html.pixelToInch_y(by1);
	x2 = this.html.pixelToInch_x(bx2);
	y2 = this.html.pixelToInch_y(by2);	

	out.setGraphicFillColor('');
	out.setGraphicColor('green');
	out.drawRectangle(x1,y1,x2,y2,this);
}
//============================================================================================
//			htmlElement$writeBackground
//============================================================================================
function htmlElement$writeBackground(out,xmin,ymin,xmax,ymax)
{	
	var bx1,by1,bx2,by2;
	var x1,y1,x2,y2;
	var tx,ty,h,t;
	var height,width;
	var filename;

	if (! this.style) return;

	t = this;

	if (xmax > 20000) return;
	if (ymax > 20000) return;

	if (this.tagName == 'BODY')
	{
		xmax = xmin + this.active.maxWidth;
		ymax = ymin + this.active.maxHeight;
	}

	bx1 = xmin - Math.floor(this.borderLeft / 2);
	by1 = ymin - Math.floor(this.borderTop / 2);
	bx2 = xmax + Math.floor(this.borderRight / 2);
	by2 = ymax + Math.floor(this.borderBottom / 2);

	x1 = this.html.pixelToInch_x(bx1);
	y1 = this.html.pixelToInch_y(by1);
	x2 = this.html.pixelToInch_x(bx2);
	y2 = this.html.pixelToInch_y(by2);
	
	if (this.style.backgroundColor != '')
	{
		out.setGraphicFillColor(this.style.backgroundColor);
		out.setGraphicLineWeight(0);
		out.drawRectangle(x1,y1,x2,y2,this);
	}

	if (this.style.backgroundImage != '')
	{
		filename = this.html.imageFilename(this.style.backgroundImage);

		out.tileImage(x1,y1,x2,y2,filename,this.style.backgroundRepeat,this.style.backgroundPosition);		
	}
}

//============================================================================================
//			htmlElement$writeElementMatrix
//============================================================================================
function htmlElement$writeElementMatrix(out,x,y)
{	
	var i,j,row,cell;
	var xpos,ypos,f,href;
	var tx,ty,ytemp;
	var dx,dy,size,h;
	var xoff,yoff,rx,ry,tx1,ty1;
	var x1,y1,x2,y2;
	var px1,py1,px2,py2;

	ypos = this.paddingTop;

	f = this.font;

	out.setLetterSpacing(this.html.pixelToPoint(f.letterSpacing));
	out.setWordSpacing(this.html.pixelToPoint(f.wordSpacing));
	out.setFontRender(f.render);
	out.setFontSkew(f.skew);
	out.setFontScale(f.scaleX,f.scaleY);

	size = this.html.pixelToPoint(f.size);			
	size = f.size;

	out.setFont(f.color,size,f.bold,f.italic,f.underline,f.fontName,f.subscript,f.superscript);
	
	for (i=0; i < this.grid.rows.length; ++i)
	{
		row = this.grid.rows[i];
		ytemp = ypos;
		ypos += this.grid.cellHeight + this.cellspacing;
		xpos = this.padLeft();

		for (j=0; j < row.cells.length; ++j)
		{
			tx = x + xpos;
			ty = y + ytemp;
			xpos += this.grid.cellWidth + this.cellspacing;

			x1 = tx;
			y1 = ty;
			x2 = x1 + this.grid.cellWidth;
			y2 = y1 + this.grid.cellHeight;
			px1 = this.html.pixelToInch_x(x1);
			py1 = this.html.pixelToInch_y(y1);
			px2 = this.html.pixelToInch_x(x2);
			py2 = this.html.pixelToInch_y(y2);
		
			cell = row.cells[j];

			switch (cell.type)
			{
			case "element": 
					xoff = (this.grid.cellWidth - cell.element.offsetWidth) / 2;
					yoff = (this.grid.cellHeight - cell.element.offsetHeight) / 2;

					cell.element.offsetTop = 0;
					cell.element.offsetLeft = 0;

					if (this.clip)
					{
						out.clip = true;
						out.clipBegin(px1,py1,px2,py2);
					}

					cell.element.write(out,tx+xoff,ty+yoff,true);
						
					if (this.clip)
					{
						out.clipEnd();
						out.clip = false;
					}
					
					break;

			case "value":
					xoff = (this.grid.cellWidth - cell.width) / 2;
					yoff = (this.grid.cellHeight - cell.height) / 2;

					tx1 = tx + xoff;
					ty1 = ty + yoff;
					rx = this.html.pixelToInch_x(tx1);
					ry = this.html.pixelToInch_y(ty1);

					h = (out.charHeight() * 0.75) / 72;

					if (this.clip)
					{
						out.clip = true;
						out.clipBegin(px1,py1,px2,py2);
					}

					out.placeText(rx,ry+h,cell.value,'',this);		// inches

					if (this.clip)
					{
						out.clipEnd();
						out.clip = false;
					}

					break;
			}

		}
	}
}
//============================================================================================
//			htmlElement$writeElementText
//============================================================================================
function htmlElement$writeElementText(out,x,y)
{	
	var x1,y1,x2,x2;
	var field,i,j,f;
	var px,py,dx,dy,rx,ry;
	var href,a,b,p;
	var tx,ty,h,w;
	var text,size,ymax;
	var height,width;
	var t,p,size,x,y,tx,ty,h,w;
	var y2,lightColor,darkColor,tx1,ty1,tx2,ty2,ch,cw,angle,url;

	f = this.parentElement.font;

	out.setLetterSpacing(this.html.pixelToPoint(f.letterSpacing));
	out.setWordSpacing(this.html.pixelToPoint(f.wordSpacing));
	out.setFontRender(f.render);
	out.setFontSkew(f.skew);
	out.setFontScale(f.scaleX,f.scaleY);

	size = f.size;

	href = this.href;
	href = this.html.decode_(href);

	if ((href != '') && (this.html.document != null)) href = this.html.document.resolve(href);
	out.setFont(f.color,size,f.bold,f.italic,f.underline,f.fontName,f.subscript,f.superscript);

	if (! this.parts) return;

	for (j=0; j < this.parts.length; ++j)
	{
		text = this.html.trim(this.parts[j].text);
	
		if (text == '') continue;

		tx = (x + this.parts[j].offsetLeft + this.parts[j].xjust);
		ty = (y + this.parts[j].offsetTop + this.parts[j].yjust);

		tx = this.html.pixelToInch_x(tx);
		ty = this.html.pixelToInch_y(ty);

		h = out.charHeight() / 72;
//		ty += h * 0.85;	

		out.placeText(tx,ty,this.parts[j].text,href,this);		// inches
	}

}
//============================================================================================
//			htmlElement$writeElement
//============================================================================================
function htmlElement$writeElement(out,x,y)
{	
	var x1,y1,x2,x2;
	var field,i,j,f,ds;
	var px,py,dx,dy,rx,ry;
	var href,a,b,p;
	var tx,ty,h,w,field;
	var text,size,ymax;
	var height,width,counter;
	var t,p,size,tx,ty,h,w,lastds;
	var px2,py2,command,data;
	var y2,lightColor,darkColor,tx1,ty1,tx2,ty2,ch,cw,angle,url;
	var scale,scalex,scaley,oHeight,oWidth,ds,lastds,counter;
	var xHeight,xWidth;

	t = this;
	
	px = x;
	py = y;
	px = this.html.pixelToInch_x(px);
	py = this.html.pixelToInch_y(py);

	oHeight = this.offsetHeight - (this.paddingTop + this.paddingBottom);
	oWidth = this.offsetWidth - (this.paddingLeft + this.paddingRight);

	if (this.style != null)
	{
		out.setOpacity(this.style.opacity);	

		if (this.style.fit != '')
		{
			this.html.xhtml = new html$(this.sys);
			data = this.html.resolve(this.htmlData);

			this.html.xhtml.parse(data);

						
			x2 = x + oWidth;
			y2 = y + oHeight;
				
			px2 = this.html.pixelToInch_x(x2);
			py2 = this.html.pixelToInch_y(y2);

			px += this.paddingLeft / 110;
			py += this.paddingTop / 110;
								
			x2 = x + this.offsetWidth;
			y2 = y + this.offsetHeight;
			this.html.xhtml.writeToPdf(out,x,y,x2,y2,this.style.fit);
			out.restoreView();
			return;
		}
	}
	
	switch (this.tagName)
	{		
	case "PAGEBREAK":
			out.pageBreak(1,true);
			
			break;

	case "#TEXT": 
		{
			this.writeElementText(out,x,y);
			break;
		}

	case "PDF": 
		{
			this.html.setOutput_(out,this);
			break;
		}

	case "HR": 
		{
			x1 = x;
			y1 = y;	
			x2 = x1 + this.offsetWidth;
			y2 = y1 + this.offsetHeight;

			ymax = 0;
			// this.writePageBreak(y1,pdf);
							
			lightColor = 0xECE9D8;
			darkColor = 0xACA899;

			tx1 = this.html.pixelToInch_x(x1);
			ty1 = this.html.pixelToInch_y(y1);
			tx2 = this.html.pixelToInch_x(x2);
			ty2 = this.html.pixelToInch_y(y2);

			out.drawTableBox(tx1,ty1,tx2,ty2,darkColor,lightColor,1,this.color);
			if (ty1 > ymax) ymax = ty1;

			break;
		}


	case "GROUP": 
			{
				this.html.groupToPdf(x,y,out,this);
				break;
			}

	case "INPUT": 
			{
				f = this.parentElement.font;

				out.setLetterSpacing(this.html.pixelToPoint(f.letterSpacing));
				out.setWordSpacing(this.html.pixelToPoint(f.wordSpacing));
				out.setFontRender(f.render);
				out.setFontSkew(f.skew);
				out.setFontScale(f.scaleX,f.scaleY);
				size = f.size;
				out.setFont(f.color,size,f.bold,f.italic,f.underline,f.fontName,f.subscript,f.superscript);

				field = out.placeFormInput(px,py,this);
				if (field == null) break;
		
				field.onChange		= this.PDF_onChange;
				field.onClick		= this.PDF_onClick;
				field.onMouseDown	= this.PDF_onMouseDown;
				field.onMouseUp	= this.PDF_onMouseUp;
				field.onKeyUp		= this.PDF_onKeyUp;
				field.onKeyDown		= this.PDF_onKeyDown;
				field.onEnter		= this.PDF_onEnter;
				field.onLeave		= this.PDF_onLeave;
				break;
			}

			case "SELECT": 
			{
				f = this.parentElement.font;

				out.setLetterSpacing(this.html.pixelToPoint(f.letterSpacing));
				out.setWordSpacing(this.html.pixelToPoint(f.wordSpacing));
				out.setFontRender(f.render);
				out.setFontSkew(f.skew);
				out.setFontScale(f.scaleX,f.scaleY);
				size = f.size;
				out.setFont(f.color,size,f.bold,f.italic,f.underline,f.fontName,f.subscript,f.superscript);

				height = this.offsetHeight;
				width  = this.offsetWidth;
				
				field = out.placeFormSelect(px,py,this.name,this.options,this.values,this.selected,this.PDF_onchange,height,width,this);
				if (field == null) break;
				field.onClick		= this.PDF_onClick;
				field.onMouseDown	= this.PDF_onMouseDown;
				field.onMouseUp	= this.PDF_onMouseUp;
				field.onKeyUp		= this.PDF_onKeyUp;
				field.onKeyDown		= this.PDF_onKeyDown;
				field.onEnter		= this.PDF_onEnter;
				field.onLeave		= this.PDF_onLeave;
				break;
			}

			case "TEXTAREA": 
			{
				height = (this.offsetHeight / 110 * 72);
				width  = (this.offsetWidth / 110 * 72);
				px += 4 / 72;

				field = out.placeFormTextarea(px,py,this.name,this.value,this.PDF_onChange,height,width,this);
				if (field == null) break;
				field.onClick		= this.PDF_onClick;
				field.onMouseDown	= this.PDF_onMouseDown;
				field.onMouseUp	= this.PDF_onMouseUp;
				field.onKeyUp		= this.PDF_onKeyUp;
				field.onKeyDown		= this.PDF_onKeyDown;
				field.onEnter		= this.PDF_onEnter;
				field.onLeave		= this.PDF_onLeave;
				break;
			}

			case "REPORT": 
			{
				this.html.reportToPdf(out,x,y,this);
				break;
			}

			case "PRE": 
			{
				this.html.textToPdf(out,x,y,this.value);
				break;
			}

			case "ECHO": 
			{
				this.html.textToPdf(out,x,y,this.html.image);
				break;
			}

			case "MATRIX":
					this.writeElementMatrix(out,x,y); 
				//break ==- // FALL THROUGH TO QUANTITY (Side Bars of Matrix
			case "QUANTITY": 
			{				
				f = this.font;
				out.setLetterSpacing(this.html.pixelToPoint(f.letterSpacing));
				out.setWordSpacing(this.html.pixelToPoint(f.wordSpacing));
				out.setFontRender(f.render);
				out.setFontSkew(f.skew);
				out.setFontScale(f.scaleX,f.scaleY);
				size = f.size;
				out.setFont(f.color,size,f.bold,f.italic,f.underline,f.fontName,f.subscript,f.superscript);

				px2 = this.html.pixelToInch_x(x + this.offsetRight);

				height = this.offsetHeight / 110 * 72;
				out.drawChar(px ,py,height,this.char.left);
				out.drawChar(px2,py,height,this.char.right);

				break;
			}

			case "ROOT": 
			{				
				out.setGraphicColor(this.lineColor);	
				out.setGraphicLineWeight(this.lineWeight);	
				out.setGraphicLineStyle(this.lineStyle);
				out.drawLinestring2(px,py,this.line);
				break;
			}
			case "FRAME":
			case "IFRAME": 
			    {
		        if (this.src == '') break;

		        this.html.xhtml = new html$(this.sys);

			    if (this.html.document)
                       this.html.xhtml.loadFromUrl(this.src);
			     else  this.html.xhtml.loadFromFile(this.src);

				x2 = x + this.offsetWidth;
				y2 = y + this.offsetHeight;
				
				px2 = this.html.pixelToInch_x(x2);
				py2 = this.html.pixelToInch_y(y2);

				out.clip = true;
				out.clipBegin(px,py,px2,py2);
				this.html.xhtml.writeToPdf(out,x,y,x2,y2);
				out.clipEnd();
				out.clip = false;
				break;
			}

			case "INTEGRAL": 
			{
				out.setGraphicColor(this.lineColor);	
				out.setGraphicLineWeight(this.lineWeight);	
				out.setGraphicLineStyle(this.lineStyle);	

				f = this.font;
				out.setLetterSpacing(this.html.pixelToPoint(f.letterSpacing));
				out.setWordSpacing(this.html.pixelToPoint(f.wordSpacing));
				out.setFontRender(f.render);
				out.setFontSkew(f.skew);
				out.setFontScale(f.scaleX,f.scaleY);
				size = f.size;
				out.setFont(f.color,size,f.bold,f.italic,f.underline,f.fontName,f.subscript,f.superscript);

				height = this.offsetHeight / 110 * 72;
				dy = (height * 0.15) / 72;
				out.drawChar(px,py+dy,height,this.char.left);

				break;
			}

			case "SUMMATION": 
			{
				f = this.font;
				out.setLetterSpacing(this.html.pixelToPoint(f.letterSpacing));
				out.setWordSpacing(this.html.pixelToPoint(f.wordSpacing));
				out.setFontRender(f.render);
				out.setFontSkew(f.skew);
				out.setFontScale(f.scaleX,f.scaleY);
				size = this.font.size;
				out.setFont(f.color,size,f.bold,f.italic,f.underline,f.fontName,f.subscript,f.superscript);
				dy = (size * 0.75) / 72;
				out.placeText(px,py+dy,this.text,'',this);
				break;
			}

			case "BR": 
			{
				break;
			}
			case "DIVIDE": 
			{

				x1 = this.html.pixelToInch_x(x);
				x2 = this.html.pixelToInch_x(x + this.offsetWidth);

				py = this.html.pixelToInch_y(y + this.lineYpos);

				out.setGraphicColor(this.lineColor);	
				out.setGraphicLineWeight(this.lineWeight);	
				out.setGraphicLineStyle(this.lineStyle);	
				out.drawLine(x1,py,x2,py);
				break;
			}
			
			case "TRACE": 
			{
				if (this.errors)
				{
					py = py + 0.3;
					out.setFont('black',8,false,false,false,'arial',false,false);
					out.placeText(px,py,log(),'',this);
				}
				break;
			}


			case "CALENDAR": 
			{
				width = this.offsetWidth / 110 * 72;
				height = this.offsetHeight / 110 * 72;

				this.html.calendarToPdf(out,this,px,py,height,width);

				break;
			}
	
			case "TIMELINE": 
			{
				width = this.offsetWidth / 110 * 72;
				height = this.offsetHeight / 110 * 72;
				this.html.timelineToPdf(out,this,px,py,height,width);
				if ((y + height) > ymax) ymax = y + height;
				break;
			}

			case "SCHEDULE": 
			{
				width = this.offsetWidth / 72;
				height = this.offsetHeight / 72;

				this.html.scheduleToPdf(out,this,px,py,height,width);
				break;
			}
			case "GRAPHIC": 
			{
				out.setLetterSpacing(0);
				out.setWordSpacing(0);
				out.setFontRender('');
				out.setFontSkew(0);
				out.setFontScale(1,1);

				h = this.html.pixelToPoint(this.height);
				w = this.html.pixelToPoint(this.width);

				y = py + (h / 72);		
//				h = this.height;
//				w = this.width;

				out.placeGraphic(px,y,this.graphic,this);
				break;
			}
			case "LI": 
			{
				if (this.bullet == null) return;

				if (this.bullet.text != '')
				{
				
					out.setLetterSpacing(0);
					out.setWordSpacing(0);
					out.setFontRender('');
					out.setFontSkew(0);
					out.setFontScale(1,1);
				
					size = this.bullet.size;
					out.setFontName(this.bullet.fontName);
					out.setFont(this.font.color,size,this.font.bold,false,false);

					x = x + this.bullet.offsetLeft;
					y = (y + this.bullet.offsetTop);	
					tx = this.html.pixelToInch_x(x);
					ty = this.html.pixelToInch_y(y);
	
					out.placeText(tx,ty,this.bullet.text,'',this);		// inches
					return;
				}

				if (this.bullet.imageSize != undefined)

				if (this.bullet.imageSize != null)
				{
						
					h = this.bullet.imageSize.height / this.bpi;
					w = this.bullet.imageSize.width / this.bpi;

					px = (px + this.bullet.offsetLeft);
					py = (py - this.bullet.offsetTop);
	
					out.placeImage(px,py,this.bullet.src,h,w,this);			// inches
					break;
				}
	
				break;
			}
			
			case "EVAL":

				f = this.font;
				out.setLetterSpacing(this.html.pixelToPoint(f.letterSpacing));
				out.setWordSpacing(this.html.pixelToPoint(f.wordSpacing));
				out.setFontRender(f.render);
				out.setFontSkew(f.skew);
				out.setFontScale(f.scaleX,f.scaleY);
				size = f.size;
				out.setFont(f.color,size,f.bold,f.italic,f.underline,f.fontName,f.subscript,f.superscript);
				
				px += this.paddingLeft / 110;
				py += this.paddingTop / 110;
				
				height = this.offsetHeight - (this.paddingTop + this.paddingBottom);
				width = this.offsetWidth - (this.paddingLeft + this.paddingRight);
				height = height / 110 * 72;
				width = width / 110 * 72;
				
				out.setView(px, py, width, height);

				command = this.html.resolve(this.command);
				command = 'try{' + command + '} catch (e) { alert(e.message + " " + command); }';
				
//				try 
				{
					 eval(command); 
				}
//				catch (e) { log( "EVAL error: " + e.message); }
				out.restoreView();
				break;	
			
			case "IMG": 
			{
				dx = (html$i4(this.vspace) / 2);
				dy = (html$i4(this.hspace) / 2);

				rx = x + dx;
				ry = y + dy;
				
				if (this.borderLeft > 0) rx += this.borderLeft;
				if (this.borderTop > 0) ry += this.borderTop;

				rx = this.html.pixelToInch_x(rx);
				ry = this.html.pixelToInch_y(ry);

				ch = this.offsetHeight - (this.borderTop + this.borderBottom);
				cw = this.offsetWidth - (this.borderLeft + this.borderRight);
		
				h = ch / this.html.bpi;
				w = cw / this.html.bpi;
				angle = 0;

				url = this.html.imageFilename(this.src);

				out.placeImage(rx,ry,url,h,w,angle,this.alt,this);			// inches
				if (this.usemap != '')	this.writeMap(out,rx,ry);

				if ((this.borderLeft == 0) && (this.borderRight == 0) && (this.borderTop == 0) && (this.borderBottom == 0)) break;

				x1 = x + dx;
				y1 = y + dy;
				x2 = x1 + this.offsetWidth - 1;
				y2 = y1 + this.offsetHeight - 1;

				x1 = this.html.pixelToInch_x(x1);
				y1 = this.html.pixelToInch_y(y1);
				x2 = this.html.pixelToInch_x(x2);
				y2 = this.html.pixelToInch_y(y2);
				b = this.getBorder_();

				out.lineCap = 2; // assume all 4 sides;
				if (b.left   == '') out.lineCap = 0;
				if (b.right  == '') out.lineCap = 0;
				if (b.top    == '') out.lineCap = 0;
				if (b.bottom == '') out.lineCap = 0;

				out.drawBorder(x1,y1,x2,y2,b.left,b.right,b.top,b.bottom);
				if (y1 > ymax) ymax = y1;
				break;
			}
			default:
				if (typeof(out.placeElement) != 'function') break;
				//out.placeElement(px,py,this);
		
		}
}
//============================================================================================
//			html$writeMap
//============================================================================================
function htmlElement$writeMap(out,x,y)
{
	var i,map,a,j,c,e;
	var xmin,ymin,xmax,ymax;
	var height,width,dx,dy;
		
	if (this.usemap == '') return;
	e = this;

	map = null;
	
	for (i=0; i < this.html.maps.length; ++i)
	{
		map = this.html.maps[i];
		if (('#' + map.name) == this.usemap) break;
		map = null;
	}
	

	if (map == null) return;
	
	for (i = 0; i < map.areas.length; ++i)
	{
		a = map.areas[i];
		if (a.coords.length < 4) continue;
		xmin = a.coords[0];
		ymin = a.coords[1];
		xmax = xmin;
		ymax = ymin;
		for (j=2; j < a.coords.length; ++j)
		{
			c = a.coords[j];
			if ((j % 2) == 0) 
			{
				if (c < xmin) xmin = c;
				if (c > xmax) xmax = c;
			}
			else
			{
				if (c < ymin) ymin = c;
				if (c > ymax) ymax = c;
			}

		}

		xmin = xmin / this.html.bpi;
		ymin = ymin / this.html.bpi;
		xmax = xmax / this.html.bpi;
		ymax = ymax / this.html.bpi;
		
		height = (ymax - ymin);
		width  = (xmax - xmin);

		dx = xmin;
		dy = ymin;

		x = x + dx;
		y = y + dy;
		
		out.placeHotspot(x,y,height,width,a.href);	
	}	
}
//============================================================================================
//			html$imageFilename
//============================================================================================
function html$imageFilename(src)
{
	var filename,name;
	var href,i,j,url,xsrc;

	if (src.substr(0,8).toUpperCase() == 'ASCII85,') return src;

	src = src.replace(/\'/g,'');
	src = src.replace(/\"/g,'');
	
	if (src.toLowerCase() == 'about:blank') return src;

	if (src.substr(0,6).toLowerCase() == 'macro:')
	{
		name = src.substr(6);
		filename = this.resolveTag(name);
		return filename;
	}	

	if (this.document) 
	{	
		href = this.document.resolve(src);	
	}
	else
	{	
		if (src.indexOf(':') < 0 && src.indexOf('//') < 0) 
		{
			src = CollinsPDF().mapPath(src);
			return src;
		}
		href = src;
	}

	if (this.convertImageCommand == '') return href;

	xsrc = src.toLowerCase();
	i = xsrc.indexOf('.jpg');
	j = xsrc.indexOf('.jpeg');

	if ((j > 0) || (i > 0)) return href;
	
	url = this.convertImageCommand;
	url = url.replace(/\{href\}/gi,href);

	return url;
}
//============================================================================================
//			html$getPdfHeight
//============================================================================================
function html$getPdfHeight(pdf)
{
	return this.body.height;
}
//============================================================================================
//			hrmlElement$getBorder_
//============================================================================================
function htmlElement$getBorder_()
{
	var b;
	var xleft,xright,xtop,xbottom;

	b = new Object();
	b.size = html$i4(this.border);
	if (isNaN(b.size)) b.size = 0;
	if (b.size > 3) b.size = Math.round(b.size / 2);
	if (b.size < 0) b.size = 0;	

	b.dx = b.size;
	b.sizeLeft		= b.dx;
	b.sizeTop		= b.dx;
	b.sizeRight		= b.dx;
	b.sizeBottom		= b.dx;

	b.left			= b.size + ' solid black';
	b.right			= b.size + ' solid black';
	b.top			= b.size + ' solid black';
	b.bottom		= b.size + ' solid black';
	
	if  ( (this.style.borderLeft   == '') && 
		  (this.style.borderRight  == '') && 
		  (this.style.borderTop    == '') && 
		  (this.style.borderBottom == '')) return b;

	b.left			= this.style.borderLeft;
	b.right			= this.style.borderRight;
	b.top			= this.style.borderTop;
	b.bottom		= this.style.borderBottom;

	xleft			= this.getBorder_A(this.style.borderLeft);
	xright			= this.getBorder_A(this.style.borderRight);
	xtop			= this.getBorder_A(this.style.borderTop);
	xbottom			= this.getBorder_A(this.style.borderBottom);
		

	b.dx = xleft + xright;
	b.sizeLeft		= xleft;
	b.sizeTop		= xtop;
	b.sizeRight		= xright;
	b.sizeBottom		= xbottom;
	b.size			= 1;	// anything
	
	return b;

}
//============================================================================================
//			hrmlElement$getBorder_A
//============================================================================================
function htmlElement$getBorder_A(border)
{
	var obj,list,size;

	if (this.tagName == 'TH') border = this.border;
	if (this.tagName == 'TD') border = this.border;
	if (this.tagName == 'TABLE') border = this.border;

	border = this.html.trim(border);
	if (border == '') return 0;

	list = border.split(' ');
	size = html$i4(list[0]);

	if (size <= 0) return 0;
	if (size < 3) return size;
	return Math.round(size * (72 / 110));
}
//============================================================================================
//			html$getElementsByTagName
//============================================================================================
function html$getElementsByTagName(tagName)
{
	var e,list;

	tagName = tagName.toUpperCase();
	list = new Array();
	e = this.body;
	this.getElementsByTagName_A(tagName,e,list);

	return list;
}
//============================================================================================
//			html$getElementsByTagName_A
//============================================================================================
function html$getElementsByTagName_A(tagName,e,list)
{
	if (e == null) return;
	if (e.tagName == tagName) list[list.length] = e;

	if (e.firstChild != null) this.getElementsByTagName_A(tagName,e.firstChild,list);
	if (e.nextSibling != null) this.getElementsByTagName_A(tagName,e.nextSibling,list);
}
//============================================================================================
//			html$toString
//============================================================================================
function html$toString(h)
{
	var text,cr;
	
	cr = '\r\n';
	if (h != undefined) cr = '\r\n<br>';

	text = '';

	text += this.toString_A(this.body,0,cr);
	return text;		

}
//============================================================================================
//			html$dump
//============================================================================================
function html$dump(format)
{
	var text,cr;
	
	switch (format)
	{
		case 'text': cr = '\r\n'; break;
		case 'html': cr = '\r\n<br>'; break;
		default: '\r\n<br>';
	}

	text = '';
//	text += this.css.dump(cr);
	text += this.toString_A(this.body,0,cr);
	return text;		

}
//============================================================================================
//			html$toString_A
//============================================================================================
function html$toString_A(e,level,cr)
{
	var text,e;
	
	if (e == null) return '';
	text = cr + this.space_(level * 4) + e.toString();
	if (e.style) text += e.style.dump();
	text += e.dump();

	if (e.firstChild != null) text += this.toString_A(e.firstChild, level + 1, cr);
	if (e.nextSibling != null) text += this.toString_A(e.nextSibling,level, cr);
 
	return text;	
}
//============================================================================================
//			html$space_
//============================================================================================
function html$space_(n)
{
	var i,text;

	text = '';
	for (i=0; i < n; ++i) text += ' ';

	return text;
}
//============================================================================================
//			html$createElement_
//============================================================================================
function html$createElement_(tag,level)
{
	var e,tagName,term;

	if (arguments.length < 2) 
	{
		level = 0;
		if (this.activeElement) level = this.activeElement.level;
	}

	if (typeof(tag) == 'object')
	{
		tagName = tag.name.toUpperCase();

		e = new htmlElement$(this,tagName,level);
		if (this.holdTag) e.tag = tag;

		e.className		= tag.value("class");
		e.name			= tag.value("name");
		e.id			= tag.value("id");
		e.outline		= tag.value("bookmark");

		e.style			= new htmlStyle$(this,tag.value('style'),this.document);

		e.PDF_onClick		= tag.value(this.PDF_eventPrefix + 'onclick');
		e.PDF_onChange		= tag.value(this.PDF_eventPrefix + 'onchange');
		e.PDF_onMouseDown	= tag.value(this.PDF_eventPrefix + 'onmousedown');
		e.PDF_onMouseUp	= tag.value(this.PDF_eventPrefix + 'onmouseup');
		e.PDF_onKeyDown	= tag.value(this.PDF_eventPrefix + 'onkeydown');
		e.PDF_onKeyUp		= tag.value(this.PDF_eventPrefix + 'onkeyup');
		e.PDF_onEnter		= tag.value(this.PDF_eventPrefix + 'onenter');
		e.PDF_onLeave		= tag.value(this.PDF_eventPrefix + 'onleave');
	}
	else
	{
		e = new htmlElement$(this,tag,level);	
		e.style	= new htmlStyle$(this,'',this.document);
	}

	if (tag.end) return e;
	if (! e.style) return e;
	if (e.style.fit == '') return e;
	
	term = '</' + e.tagName.toLowerCase() + '>';
	this.parseData = this.loadHtml_(tag,this.parseData,term,true) + term;
	e.htmlData = this.data;
	return e;
	
}
//============================================================================================
//			html$charHeight
//============================================================================================
function htmlElement$charHeight()
{
	var h,f,text,value;
	
	f = 110/72;
	h = this.font.size * f;

	text = this.style.lineHeight;
	value = h;
	if (text != '')
	{
		value = parseFloat(text);
		if (text.substr(text.length-1) == '%')
		{
			if (isNaN(value)) value = 100;
			value = h * (value / 100);		
		}
		else
		{
			if (isNaN(value)) value = h;
			
		}	
		
	}
	
	if (this.style.scaleY <= 0) return value;
	h = value * this.style.scaleY;
	return h;
}
//============================================================================================
//			htmlElement$charWidth
//============================================================================================
function htmlElement$charWidth(code,last)
{
	var w,f,c;

	f = 0.975;
	f = 110/72;

	if (this.font.bold) f = f * 1.1;

	c = code;
	if (this.html.pdf != null && typeof(this.html.pdf.cid_) == 'function') c = this.html.pdf.cid_(code);

	w = 0;	
	if (this.html.onCharWidth) 
	{	
		w = this.html.onCharWidth(c,this.font.fontName, this.font.size, this.font.bold, this.font.italic);
	}
	else
	{
		if (c < this.html.font_widths.length) w = (this.html.font_widths[c] / 1000) * this.font.size * f;
	}

	if ((c == 32) && (this.font.wordSpacing > 0))
	{
		w = w + (this.font.wordSpacing * 1.095);
		w = w * this.font.scaleX;
		return w;
	}

	w = w * this.font.scaleX;

	if (last) return w;
	if (this.font.letterSpacing == 0) return w;

	w = w + (this.font.letterSpacing * 1.095);
	return w;
}
//============================================================================================
//			htmlElement$wordWidth
//============================================================================================
function htmlElement$wordWidth(text)
{
	var width,i,last,w;
	
	width = 0;
	
	if (this.html.onWordWidth != null) 
	{
		return this.html.onWordWidth(text,this.font.fontName,this.font.size,this.font.bold, this.font.italic);
	}

	this.html.setFontName(this.font.fontName);

	text = text.replace(/\|\|/g,'');
	text = text.replace(/\|[^\|]+\|/g,'Z');		// Replace Encoded to a Z

	for (i=0; i < text.length; ++i)
	{
		last = false;
		if (i == text.length-1) last = true;
		width += this.charWidth(text.charCodeAt(i),last);
	}

	return Math.round(width);
}
//============================================================================================
//			html$decode_
//============================================================================================
function html$decode_(text)
{	
var htmlcode_names = ['Aacute','aacute','Acirc','acirc','acute','AElig',
	'aelig','Agrave','agrave','alefsym','Alpha','alpha','amp',
	'and','ang','apos','aring','Aring','asymp','atilde',
	'Atilde','auml','Auml','bdquo','Beta','beta','brvbar',
	'bull','cap','ccedil','Ccedil','cedil','cent','Chi',
	'chi','circ','clubs','cong','copy','crarr','cup',
	'curren','Dagger','dagger','darr','dArr','deg','Delta',
	'delta','diams','divide','eacute','Eacute','ecirc','Ecirc',
	'egrave','Egrave','empty','emsp','ensp','Epsilon','epsilon',
	'equiv','Eta','eta','eth','ETH','euml','Euml',
	'euro','exist','fnof','forall','frac12','frac14','frac34',
	'frasl','Gamma','gamma','ge','gt','harr','hArr',
	'hearts','hellip','iacute','Iacute','icirc','Icirc','iexcl',
	'igrave','Igrave','image','infin','int','Iota','iota',
	'iquest','isin','iuml','Iuml','Kappa','kappa','Lambda',
	'lambda','lang','laquo','larr','lArr','lceil','ldquo',
	'le','lfloor','lowast','loz','lrm','lsaquo','lsquo',
	'lt','macr','mdash','micro','middot','minus','Mu',
	'mu','nabla','nbsp','ndash','ne','ni','not',
	'notin','nsub','ntilde','Ntilde','Nu','nu','oacute',
	'Oacute','ocirc','Ocirc','OElig','oelig','ograve','Ograve',
	'oline','omega','Omega','Omicron','omicron','oplus','or',
	'ordf','ordm','oslash','Oslash','otilde','Otilde','otimes',
	'ouml','Ouml','para','part','permil','perp','Phi',
	'phi','Pi','pi','piv','plusmn','pound','Prime',
	'prime','prod','prop','Psi','psi','quot','radic',
	'rang','raquo','rarr','rArr','rceil','rdquo','real',
	'reg','rfloor','Rho','rho','rlm','rsaquo','rsquo',
	'sbquo','scaron','Scaron','sdot','sect','shy','Sigma',
	'sigma','sigmaf','sim','spades','sub','sube','sum',
	'sup','sup1','sup2','sup3','supe','szlig','Tau',
	'tau','there4','Theta','theta','thetasym','thinsp','thorn',
	'THORN','tilde','times','trade','uacute','Uacute','uarr',
	'uArr','ucirc','Ucirc','ugrave','Ugrave','uml','upsih',
	'Upsilon','upsilon','uuml','Uuml','weierp','Xi','xi',
	'yacute','Yacute','yen','yuml','Yuml','Zeta','zeta',
	'zwj','zwnj'];

var htmlcode_values = [193,225,194,226,180,198,230,192,224,
	8501,913,945,38,8743,8736,39,229,197,8776,
	227,195,228,196,8222,914,946,166,8226,8745,
	231,199,184,162,935,967,710,9827,8773,169,
	8629,8746,164,8225,8224,8595,8659,176,916,948,
	9830,247,233,201,234,202,232,200,8709,8195,
	8194,917,949,8801,919,951,240,208,235,203,
	8364,8707,402,8704,189,188,190,8260,915,947,
	8805,62,8596,8660,9829,8230,237,205,238,206,
	161,236,204,8465,8734,8747,921,953,191,8712,
	239,207,922,954,923,955,9001,171,8592,8656,
	8968,8220,8804,8970,8727,9674,8206,8249,8216,60,
	175,8212,181,183,8722,924,956,8711,160,8211,
	8800,8715,172,8713,8836,241,209,925,957,243,
	211,244,212,338,339,242,210,8254,969,937,
	927,959,8853,8744,170,186,248,216,245,213,
	8855,246,214,182,8706,8240,8869,934,966,928,
	960,982,177,163,8243,8242,8719,8733,936,968,
	34,8730,9002,187,8594,8658,8969,8221,8476,174,
	8971,929,961,8207,8250,8217,8218,353,352,8901,
	167,173,931,963,962,8764,9824,8834,8838,8721,
	8835,185,178,179,8839,223,932,964,8756,920,
	952,977,8201,254,222,732,215,8482,250,218,
	8593,8657,251,219,249,217,168,978,933,965,
	252,220,8472,926,958,253,221,165,255,376,
	918,950,8205,8204];
	
	var value,i,j,k,list,c,n,temp,found;
	
	if (text.indexOf('&') < 0) return text;

	value = '';
	while (true)
	{
		i = text.indexOf('&');
		if (i < 0)
		{
			value += text;
			return value;
		}
		
		value += text.substr(0,i);
		text = text.substr(i+1);
		j = text.indexOf(';');
		if (j > 10)
		{
			value += '&';
			continue;
		}
		
		temp = text.substr(0,j);
		text = text.substr(j+1);
					

		if (temp.substr(0,1) == '#')
		{
				temp = temp.substr(1);
				n = html$i4(temp,16);
				value += String.fromCharCode(n);
				continue;
		}

		found = false;
		for (k=0; k < htmlcode_names.length; ++k)
		{
			if (temp == htmlcode_names[k])
			{
				found = true;
				value += String.fromCharCode(htmlcode_values[k]);
				break;
			}
		}

		if (found) continue;
	
		c = '';		
		if (temp ==    'nbsp') c = ' ';
		if (temp ==      'sp') c = ' ';
		if (temp ==   'blank') c = ' ';
	
		if (temp ==     'num') c = '#';
		if (temp ==    'excl') c = '!';
		if (temp ==  'dollar') c = '$';
		if (temp ==  'percnt') c = '%';
		if (temp ==    'lpar') c = '(';
		if (temp ==    'rpar') c = ')';
		if (temp ==  'period') c = '.';
		if (temp ==   'comma') c = ',';
		if (temp ==   'colon') c = ':';
		if (temp ==    'semi') c = ';';

		if (temp ==      'lt') c = '<';
		if (temp ==      'gt') c = '>';
		if (temp ==     'amp') c = '&';
		if (temp ==    'quot') c = '"';
		if (temp ==    'apos') c = "'";
		if (temp ==   'quest') c = "?";
				
		if (temp ==  'verbar') c = "|";
		if (temp ==    'lcub') c = "{";
		if (temp ==    'rcub') c = "}";

		if (temp ==    'lsqb') c = "[";
		if (temp ==    'rsqb') c = "]";
		if (temp ==    'bsol') c = "\\";
		if (temp ==     'sol') c = "/";
		if (temp ==  'lowbar') c = "_";

		if (c == '') value += '&' + temp + ';';
		if (c != '') value += c;

	}

	return value;
}
//============================================================================================
//			html$compress
//============================================================================================
function html$compress(text)
{	
	var value,i,c,last;
	
	text = '' + text;
	last = 66;
	value = '';
	
	for (i=0; i < text.length; ++i)
	{
		c = text.charCodeAt(i);
		if (c <= 32)
		{
			if (last <= 32) continue;
		}
		
		value += String.fromCharCode(c);
		last = c;		
	}
	
	return value;
}
//============================================================================================
//			html$addText_
//============================================================================================
function html$addText_(text)
{	
	var NODE_TEXT = 3;
	var NODE_TAG  = 1;

	var e,a,c,href,skip;

	if (this.activeElement == null) return;

	if (this.activeElement.active.xpos == 0)
	{
//		 text = html$trimLeft(text);
	}
	
	if (text == '') return;
	if (this.trim(text) == '')
	{
		c = this.activeElement.lastChild();
		if (c == null) return;
		if (c.tagName == 'DIV') return;
		if (c.tagName == 'IMG') return;
		if (c.tagName == 'SPAN') return;		
		if (c.tagName == 'OL') return;
		if (c.tagName == 'BR') return;
		if (c.tagName == 'DOC') return;
		if (c.tagName == 'HR') return;
		if (c.tagName == 'GRAPHIC') return;		
		if (c.tagName == 'GROUP') return;		
		if (c.tagName == 'LOOP') return;		
		if (c.tagName == 'PDF') return;		
		if (c.tagName == 'PAGEHEADER') return;		
		if (c.tagName == 'PAGEFOOTER') return;		
		if (c.tagName == 'DIVIDE') return;		
		if (c.tagName == 'RAISE') return;		
		if (c.tagName == 'CALENDAR') return;		
		if (c.tagName == 'TIMELINE') return;		
		if (c.tagName == 'SCHEDULE') return;		
		if (c.tagName == 'UL') return;		
		if (c.tagName == 'LI') return;		
		if (c.tagName == 'TR') return;		
		if (c.tagName == 'TD') return;
		if (c.tagName == 'TH') return;
		if (c.tagName == 'P') return;
		if (c.tagName == 'TABLE') return;
		if (c.tagName == 'BLOCKQUOTE') return;		
		if (c.tagName == 'TABLE') return;		
	}

	skip = false;

	c = this.activeElement.lastChild();
	if (c != null)
	{
		if (c.tabName == 'B') skip = true;	
		if (c.tabName == 'U') skip = true;	
		if (c.tabName == 'I') skip = true;	
	}
	

	if (! skip) text = this.compress(text);
	if (text == '') text = ' ';
	text = unescape(text);	
	if (text.indexOf('&') >= 0) text = this.decode_(text);

	href = this.href;
	if (this.document) href = this.document.resolve(href);

	e = this.createElement_('#text');
	e.nodeType		= NODE_TEXT;				// text;
	e.text			= text;
	e.href			= href;
	e.href_title	= this.href_title;
	e.href_target	= this.href_target;
	
	this.activeElement.appendChild(e);
}
//============================================================================================
//			html$tableAdjustCells_
//============================================================================================
function html$tableAdjustCells_(tbl,r,c,row,cell)
{
	var i,xcell;
	var xr,xrow,xc;
	
	if (cell.colspan < 1) cell.colspan = 1;
	if (cell.rowspan < 1) cell.rowspan = 1;

	if ((cell.colspan <= 1) && (cell.rowspan <= 1)) return;

//--------- adjust current row -----------
	
	if (cell.colspan > 1)
	{
		for (i=c+1; i < row.cells.length; ++i)
		{
			xcell = row.cells[i];
			xcell.colIndex += cell.colspan - 1;
			if (xcell.colIndex > tbl.maxColumnIndex) tbl.maxColumnIndex = xcell.colIndex;
		}
	}
	
//--------- adjust next rows -----------

	if (cell.rowspan <= 1) return;
	
	for (i=1; i < cell.rowspan; ++i)
	{
		xr = i + r;

		if (xr >= tbl.rows.length) break;
		xrow = tbl.rows[xr];
		for (xc=0; xc < xrow.cells.length; ++xc)
		{
			xcell = xrow.cells[xc];
			if (xcell.colIndex >= cell.colIndex)
			{
				xcell.colIndex += cell.colspan;
				if (xcell.colIndex > tbl.maxColumnIndex) tbl.maxColumnIndex = xcell.colIndex;
			}
		}
	}
}

//============================================================================================
//			html$defineTable_
//============================================================================================
function html$defineTable_(tbl)
{
	var row,text,cell,c;
	var i,j,col,wid,obj,r,temp;
	
	this.defineTable_A(tbl);

//-------------------- debug ----------------------

	text = 'maxColumnIndex = ' + tbl.maxColumnIndex + '\r\n';

	for (r=0; r < tbl.rows.length; ++r)
	{
		row = tbl.rows[r];
		temp = '\r\n row: ' + r + ' -- ' ;
		for (c=0; c < row.cells.length; ++c)
		{
			cell = row.cells[c];
			temp += ' ' + cell.colIndex;
		}

		text += '\r\n' + temp;
	}
}
//============================================================================================
//			html$defineTable_A
//============================================================================================
function html$defineTable_A(tbl)
{
	var r,c,row,cell,ncol;
	var width,span,cur,cwidth,i,obj;

	tbl.actualColumns  = 0;
	tbl.maxColumnIndex = 0;
	tbl.span = false;

//--------------------- initialize -------------------------

	for (r=0; r < tbl.rows.length; ++r)
	{
		row = tbl.rows[r];
		row.rowIndex = r;

		for (c=0; c < row.cells.length; ++c)
		{
			cell = row.cells[c];
			cell.colIndex = c;
			cell.rowIndex = r;

			if (cell.colspan > 1) tbl.span = true;
			if (cell.rowspan > 1) tbl.span = true;
		}

		if (row.cells.length > tbl.actualColumns ) tbl.actualColumns = row.cells.length;			
	}


	tbl.maxColumnIndex = tbl.actualColumns - 1;

//------------- determine max number of columns ----------

	for (c=0; c < tbl.actualColumns; ++c)
	{
		for (r=0; r < tbl.rows.length; ++r)
		{
			row = tbl.rows[r];
			if (c >= row.cells.length) continue;
			cell = row.cells[c];
			this.tableAdjustCells_(tbl,r,c,row,cell);	
		}
	}

	tbl.cols  = tbl.maxColumnIndex + 1;

}
//============================================================================================
//			html$parse
//============================================================================================
function html$parse(data,onComplete)
{
	var i,c,status,self,async;

	this.elements = new Array();
	this.onComplete = null;
	this.async = false;
	if (arguments.length > 1 && typeof(onComplete) == 'function') 
	{
		this.async = true;
		this.onComplete = onComplete;
	}

	data = this.trim(data);

	c = String.fromCharCode(3);

	data = data.replace(/\r\n/g,c);
	data = data.replace(/\r/g,c);
	data = data.replace(/\n/g,c);

	this.image = data;

	data = data.replace(/\t/g,c);
	data = data.replace(/\s\s/g,' ');

	this.parseData = data.replace(/\|\^2\|/g,"<sup>2</sup>");

	self = this;

	this.totalLength = this.parseData.size;
	this.parse_A();

	for (i=0; i < this.tables.length; ++i)
	{
		this.defineTable_(this.tables[i]);
	}

	this.setStyle(this.body);
}
//============================================================================================
//			html$setStyle
//============================================================================================
function html$setStyle(ele)
{
	var tagName;

	tagName = ele.tagName;

	if (ele.style)
	{	
		this.css.style(ele,ele.style);
		ele.collapse = false;
		if (ele.style.borderCollapse == 'collapse')
		{
			 ele.collapse = true;
			 ele.cellspacing = 0;
		}
		ele.font.setFontStyle(ele);
		
		ele.init();
	}

	if (ele.firstChild != null) this.setStyle(ele.firstChild);
	if (ele.nextSibling != null) this.setStyle(ele.nextSibling);
}
//============================================================================================
//			html$parse_A
//============================================================================================
function html$parse_A()
{
	var i,text,tag,tagData,count,self;
	
	self = this;
	count = 0;

	while (true)
	{
		if (this.parseData == '') 
		{
			if (this.onComplete != null) this.onComplete();
			this.onComplete = null;
			return;
		}

//-------------------- async progress -------------------------
		
		if (this.async && typeof(window) == 'object')
		{		
			if (window.abort) 
			{
				this.parseData = '';
				if (this.onComplete != null) this.onComplete();
				this.onComplete = null;
				return;
			}
			
			count += 1;
			if (count == 200)
			{
try
{
	//CollinsPDF('wait progress title="parsing HTML" total=' +  this.totalLength + ' prosition=' + this.parseData.length);
}
catch (e) { }

				setTimeout(self.parse_A(),10);
				return;
			}
		}
		
//--------------------------------------------------------------
			
		i = this.parseData.indexOf('<');
		if (i < 0)
		{		
			this.parseData = this.parseData.replace(/\003/g,' ');
			this.parseData = this.resolve(this.trim(this.parseData));
			if (this.parseData == ' ') this.parseData = '';
			if (this.parseData != '') this.addText_(this.parseData);
			this.parseData = '';
			if (this.onComplete != null) this.onComplete();
			this.onComplete = null;
			return;
		}
	
		if (i > 0)
		{
			text = this.parseData.substr(0,i);	
			this.parseData= this.parseData.substr(i);
			text = text.replace(/\003/g,' ');
			text = this.resolve(text);
			if (text != ' ') this.addText_(text);
		}

//---------------- handle comment -----------------
		
		if (this.parseData.substr(0,4) == '<' + '!--') 
		{
			i = this.parseData.indexOf('-->');
			if (i < 0) 
			{
				this.parseData = '';
				if (this.onComplete != null) this.onComplete();
				this.onComplete = null;
				return;
			}
			this.parseData= this.parseData.substr(i+3);
			continue;
		}
		
//--------------- get tag -----------------------

		i = this.parseData.indexOf('>');
		if (i < 0)
		{
			this.parseData= this.parseData.replace(/\003/g,' ');
			this.parseData= this.resolve(this.parseData);
			this.addText_(this.parseData);
			this.parseData = '';
			if (this.onComplete != null) this.onComplete();
			this.onComplete = null;
			return;	
		}
	
		tagData = this.parseData.substr(1,i-1);
		tagData = tagData.replace(/\003/g,' ');

		this.parseData= this.parseData.substr(i+1);

//-------------- process tag --------------
	
//		if (tagData.substr(0,3) == 'img') debugger;
		tag = this.parseTag_(tagData);
		
		if ((tag.name == 'SCRIPT') && ! tag.end) this.parseData = this.skipScript_(tag,this.parseData);
		if ((tag.name == 'STYLE') && ! tag.end) this.parseData = this.loadStyle_(tag,this.parseData);
		if ((tag.name == 'IF') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'</if>');
		if ((tag.name == 'RESOLVE') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'</resolve>');
		if ((tag.name == 'P') && ! tag.end) this.parseData= this.check_P(this.parseData,tag);
		if ((tag.name == 'COLUMN') && (! tag.end)  && (this.activeElement.tagName == 'DETAIL'))
		{
			this.parseData= this.loadHtml_(tag,this.parseData,'</column>');
		}

		if ( ((tag.name == 'ASSIGN') || (tag.name == 'STORE')) && ! tag.end)
		{
			if (tag.value("value") == '*')
			{
				this.parseData = this.loadHtml_(tag,this.parseData,'</' + tag.name.toLowerCase() + '>');
				tag.changeValue("value",trim(this.data));
			}
		}

		if ((tag.name ==        'LOOP') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'</loop>');
		if ((tag.name ==       'GROUP') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'</group>');
		if ((tag.name ==      'HEADER') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'</header>');
		if ((tag.name ==      'FOOTER') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'</footer>');
		if ((tag.name ==     'RECORDS') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'</records>');
		if ((tag.name ==       'EVENT') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'</event>');
		if ((tag.name ==  'PAGEFOOTER') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'</pagefooter>');
		if ((tag.name ==  'PAGEHEADER') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'</pageheader>');
		if ((tag.name ==         'PRE') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'</pre>');
		if ((tag.name ==        'EVAL') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'</eval>');
		if ((tag.name ==        'MATH') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'</math>');

		if ((tag.name ==    'TEXTAREA') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'</textarea>');
		if ((tag.name ==      'OPTION') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'</option>');

		if ((tag.name ==       'TITLE') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'</title>');
		if ((tag.name == 'REPORTTABLE') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'</reporttable>');

		if ((tag.name ==     'GRAPHIC') && ! tag.end) this.parseData = this.loadGraphic_(tag,this.parseData,'</graphic>');
		if ((tag.name ==   'A:GRAPHIC') && ! tag.end) this.parseData = this.loadGraphic_(tag,this.parseData,'</a:graphic>');

		if (tag.start) this.processStart_(tag);
		if (tag.end) this.processEnd_(tag);
	}
}
//============================================================================================
//			html$check_fit
//============================================================================================
function html$check_fit(tag)
{
	var text;
	if (! tag.exists(style)) return false;
	text = tag.value(style);
	text = text.toLowerCase();
	if (text.indexOf('fit:') < 0) return false;
	return true;
}
//============================================================================================
//			html$check_P
//============================================================================================
function html$check_P(data,tag)
{
	var i,j,temp,c;
	
	i = data.indexOf('<p');
	j = data.indexOf('<P');
	if (i < 0) i = j;
	if (i < 0) return data;

	temp = data.substr(0,i);
	for (j=0; j < temp.length; ++j)
	{
		c = temp.charCodeAt(j);
		if (c > 32) return data;
	}

	data = data.substr(i+1);
	i = data.indexOf('>');
	if (i < 0)
		 data = '';
	else data = data.substr(i+1);

	tag.start = false;
	tag.end = false;
	return data;	
}
//============================================================================================
//			html$processStart
//============================================================================================
function html$processStart_(tag)
{

	if (tag.name == 'MATH') return;


	switch (tag.name)
	{
	case		  "B": this.level.B += 1; break;
	case	 "STRONG": this.level.B += 1; break;
	case	  "I": this.level.I += 1; break;
	case         "EM": this.level.I += 1; break;
	case		  "U": this.level.U += 1; break;

	case	  "MC": this.start_MC(tag); return;		// questionType
	case	  "TF": this.start_TF(tag); return;
	case	 "FIB": this.start_FIB(tag); return;
	case	   "E": this.start_E(tag); return;

	case     "PDF": this.start_PDF(tag); return;	// OutputType
	case    "HTML": this.start_HTML(tag); return;

	}
		
	switch (tag.name)
	{
	case  "PAGEBREAK": this.start_PAGEBREAK(tag); break;
	case        "DOC": this.start_DOC(tag); break;
	case	     "BR": this.start_BR(tag); break;

	case		  "B": this.start_B(tag); break;
	case	 "STRONG": this.start_STRONG(tag); break;
	case	  "SMALL": this.start_SMALL(tag); break;
	case	    "BIG": this.start_BIG(tag); break;
	case	  "I": this.start_I(tag); break;
	case         "EM": this.start_EM(tag); break;
	case		  "U": this.start_U(tag); break;

	case	   "LINK": this.start_LINK(tag); break;

	case   "FRAMESET": this.start_FRAMESET(tag); break;
	case	  "FRAME": this.start_FRAME(tag); break;
	case	 "IFRAME": this.start_IFRAME(tag); break;

	case		 "H1": this.start_H(tag,1); break;
	case		 "H2": this.start_H(tag,2); break;
	case		 "H3": this.start_H(tag,3); break;
	case		 "H4": this.start_H(tag,4); break;
	case		 "H5": this.start_H(tag,5); break;
	case		 "H6": this.start_H(tag,6); break;

	case		 "HR": this.start_HR(tag); break;

	case     "RANDOM": this.start_MACRO(tag); break;
	case     "ASSIGN": this.start_MACRO(tag); break;
	case      "STORE": this.start_MACRO(tag); break;

	case     "GRAPHIC": this.start_GRAPHIC(tag); break;
	case        "LOOP": this.start_LOOP(tag); break;
	case       "GROUP": this.start_GROUP(tag); break;
	case      "CONFIG": this.start_CONFIG(tag); break;

	case    "QUANTITY": this.start_QUANTITY(tag); break;
	case        "ROOT": this.start_ROOT(tag); break;
	case    "EXPONENT": this.start_EXPONENT(tag); break;

	case      "MATRIX": this.start_MATRIX(tag); break;
	case        "CELL": this.start_CELL(tag); break;

	case    "INTEGRAL": this.start_INTEGRAL(tag); break;
	case   "SUMMATION": this.start_SUMMATION(tag); break;
	case       "RANGE": this.start_RANGE(tag); break;
	case         "MIN": this.start_MIN(tag); break;
	case         "MAX": this.start_MAX(tag); break;

	case         "SET": this.start_SET(tag); break;
	case      "DIVIDE": this.start_DIVIDE(tag); break;
	case       "RAISE": this.start_RAISE(tag); break;
	case          "BY": this.start_BY(tag); break;
	case       "POWER": this.start_POWER(tag); break;

	case    "CALENDAR": this.start_CALENDAR(tag); break;
	case    "TIMELINE": this.start_TIMELINE(tag); break;
	case    "SCHEDULE": this.start_SCHEDULE(tag); break;
	case       "EVENT": this.start_EVENT(tag); break;

	case         "SUP": this.start_SUP(tag); break;
	case         "SUB": this.start_SUB(tag); break;
	case         "ROW": this.start_ROW(tag); break;
	case         "PRE": this.start_PRE(tag); break;
	case        "ECHO": this.start_ECHO(tag); break;

	case	     "MAP": this.start_MAP(tag); break;
	case	    "AREA": this.start_AREA(tag); break;

	case   "TEXTAREA": this.start_TEXTAREA(tag); break;
	case	  "INPUT": this.start_INPUT(tag); break;
	case	   "FORM": this.start_FORM(tag); break;
	case	 "SELECT": this.start_SELECT(tag); break;
	case	 "OPTION": this.start_OPTION(tag); break;
	case "BLOCKQUOTE": this.start_BLOCKQUOTE(tag); break;

	case      "TITLE": this.start_TITLE(tag); break;
	case       "META": this.start_META(tag); break;
	case       "BODY": this.start_BODY(tag); break;

	case		  "A": this.start_A(tag); break;
	case		  "P": this.start_P(tag); break;
	case		  "DL": this.start_DL(tag); break;
	case		  "DD": this.start_DD(tag); break;
	case		  "DT": this.start_DT(tag); break;
	case	     "LI": this.start_LI(tag); break;
	case	     "UL": this.start_UL(tag); break;
	case	     "OL": this.start_OL(tag); break;
	case	    "DIV": this.start_DIV(tag); break;
	case	  "LABEL": this.start_LABEL(tag); break;
	case	    "DIV": this.start_DIV(tag); break;
	case	  "TRACE": this.start_TRACE(tag); break;
	case	   "FONT": this.start_FONT(tag); break;
	case	   "EVAL": this.start_EVAL(tag); break;
	case	   "SPAN": this.start_SPAN(tag); break;
	case	  "TABLE": this.start_TABLE(tag); break;
	case	  "THEAD": this.start_THEAD(tag); break;
	case	  "TFOOT": this.start_TFOOT(tag); break;
	case	  "TBODY": this.start_TBODY(tag); break;
	case	     "TH": this.start_TH(tag); break;
	case	     "TR": this.start_TR(tag); break;
	case	     "TD": this.start_TD(tag); break;
	case	    "IMG": this.start_IMG(tag); break;
	case	  "IMAGE": this.start_IMG(tag); break;

	case       "REPORT": this.start_REPORT(tag); break;
	case  "REPORTGROUP": this.start_REPORTGROUP(tag); break;
	case  "REPORTTABLE": this.start_REPORTTABLE(tag); break;

	case "DETAIL": this.start_DETAIL(tag); break;
	case	   "HEADER": this.start_HEADER(tag); break;
	case	   "FOOTER": this.start_FOOTER(tag); break;
	case	   "COLUMN": this.start_COLUMN(tag); break;
	case	  "RECORDS": this.start_RECORDS(tag); break;


	default: this.start_OTHER(tag);
	
	}
}
//============================================================================================
//			html$processEnd
//============================================================================================
function html$processEnd_(tag)
{
	var name,ele,ch;

	switch (tag.name)
	{
	case		  "B": if (this.level.B > 0) this.level.B -= 1; break;
	case	 "STRONG": if (this.level.B > 0) this.level.B -= 1; break;
	case		  "I": if (this.level.I > 0) this.level.I -= 1; break;
	case	     "EM": if (this.level.I > 0) this.level.I -= 1; break;
	case		  "U": if (this.level.U > 0) this.level.U -= 1; break;
	}
	
	switch (tag.name)
	{

	case		"A": this.href= '';
					 this.href_title = '';
					 this.href_target = '';
					 this.end_(tag.name,true);
					 break;

	case	    "SUP": 
					ele = this.findParent_(tag.name);
					this.end_('SUP',true);
				   if (ele == null) break;	
					   ch = ele.charHeight() + 2;
					   ele.offsetTop = ele.offsetTop - (ch);
					   ele.offsetHeight = ele.offsetHeight + ch; 
					   break;

	case	    "SUB": 
						ele = this.findParent_(tag.name);
						this.end_('SUB',true);
	
					   if (ele == null) break;	
					   ch = ele.charHeight() + 2;
					   ele.offsetTop = ele.offsetTop + ch;
					   ele.offsetHeight = ele.offsetHeight + ch;
					   break;
			
	case	"REPORTGROUP": this.end_('REPORTGROUP'); break;
	case	"REPORTTABLE": break;

	case    "TIMELINE": this.end_TIMELINE('TIMELINE',true); break;

	case	  "LABEL": this.end_('LABEL'); break;
	case	    "DIV": this.end_('DIV'); break;
	case	   "SPAN": this.end_('SPAN'); break;
	case	  "TABLE": this.end_('TABLE'); break;
	case	  "THEAD": this.end_('THEAD'); break;
	case	  "TFOOT": this.end_('TFOOT'); break;
	case	  "TBODY": this.end_('TBOFY'); break;
	
	case	     "TR": this.end_TR(); break;
	case	     "TD": this.end_TD(); break;
	case	     "TH": this.end_TH(); break;

	default:
		{
			 this.end_(tag.name,true);
		}
		
	}
}
//============================================================================================
//			html$findMacro
//============================================================================================
function html$findMacro(id)
{
	var i;

	id = id.toLowerCase();
	for (i=0; i < this.macros.length; ++i)
	{
		if (this.macros[i].id == id) return this.macros[i];
	}
	return null;
}
//============================================================================================
//			html$start_MACRO
//============================================================================================
function html$start_MACRO(tag)
{
	var m,i,xhtml,value,r8;
	var command,name,n,id;

	command = tag.name.toLowerCase();

//------------------ Store -------------------------------

	if (command == 'store')
	{
		id = tag.value('id').toLowerCase();
		xhtml = this;
		if (this.parent != null) xhtml = this.parent;
		m = new htmlmacro$(xhtml,tag);
		xhtml.macros[xhtml.macros.length] = m;

		if (this.activeElement != null)
		{
			if (this.activeElement.tagName == 'DETAIL')
			{
				this.activeElement.macros[this.activeElement.macros.length] = m;
				return;
			}
		}

//----------------------- store value ------------------------

		value = tag.value("value");
		name = tag.value("name");

		if (m.task != '')
		{
			r8 = parseFloat(value);
			if (isNaN(r8)) r8 = 0;
			
			n = m.bin.find(name);
			if (n < 0)
			{
				n = m.bin.list.length;
				m.bin.list[n]  = 0;
				m.bin.names[n] = name;
			}
			if (typeof(m.bin.list[n]) != 'number') m.bin.list[n] = parseFloat(m.bin.list[n]);
			if  (isNaN(m.bin.list[n])) m.bin.list[n] = 0;
			if (m.task ==     'count') m.bin.list[n] += 1;
			if (m.task == 'increment') m.bin.list[n] += 1;
			if (m.task == 'decrement') m.bin.list[n] -= 1;
			if (m.task ==       'add') m.bin.list[n] += r8;
			return;
		}
		else
		{
			m.bin.list[m.bin.list.length] = value;
			m.bin.names[m.bin.names.length] = name;
			return;	
		}
	}

//------------------ Assign / Random ---------------

	m = new htmlmacro$(this,tag);
	if (this.activeElement.tagName == 'DETAIL') this.activeElement.macros[this.activeElement.macros.length] = m;
	this.macros[this.macros.length] = m;
	
}
//============================================================================================
//			html$start_TRACE
//============================================================================================
function html$start_TRACE(tag)
{
	var e;
	
	this.trace_border = tag.bool('border');
	this.trace_mathml = tag.bool('mathml');	

	e = this.createElement_(tag);
	e.errors = tag.bool('ERROR') || tag.bool('ERRORS') || tag.bool('ERROR_MESSAGES') || tag.bool('ERROR_MESSAGE');
	
	this.activeElement.appendChild(e);
	
}
//============================================================================================
//			html$start_REPORT
//============================================================================================
function html$start_REPORT(tag)
{
	var e,rowOrder,spacing;

	e = this.createElement_(tag);

	e.sql			= tag.rawValue("sql");
	e.detail		= tag.rawValue("detail");

	e.height		= tag.value('height');
	e.width			= tag.value('width');
	e.fit			= tag.bool('fit');
	e.table			= tag.value('table');
	
	if (e.height == '') e.clipReport = true;

	e.border		= tag.i4('border');

//----------------- grid ----------------------

	e.columnOrder	= tag.bool('columnOrder');	
	e.columns		= tag.i4('columns');	

	if (e.columns < 1) e.columns = 1;
	if (e.columns == 1) e.columnOrder = false;

	e.columnWidth	= tag.value('columnwidth');
	e.columnHeight	= tag.value('columnheight');
	e.rowsPerColumn = tag.value('rowspercolumn');

	spacing		= tag.value('cellspacing');

	e.cellspacing = 2;
	if (spacing != '') e.cellspacing = parseInt(spacing);
	if (isNaN(e.cellspacing)) e.cellspacing = 2;
	if (e.cellspacing <    0) e.cellspacing = 2;

	e.clipCell		= tag.bool('clipcell');
	if (e.columnHeight == '') e.clipCell = false;

	e.groups = new Array();

	e.header = null;
	e.footer = null;
	e.records = '';

	e.activeDetail = null;
	e.activeGroup = null;

	e.groups		= new Array();
	e.details		= new Array();
	e.maxColumn	= 1;		// assume 1

	this.header = '';
	this.footer = '';
	this.column = '';
	this.records = '';

	e.borderColorDark	= tag.value("bordercolordark");
	e.borderColorLight	= tag.value("bordercolorlight");
	e.borderColor		= tag.value('bordercolor');

	if (e.borderColor != '') e.borderColorDark = e.borderColor;
	if (e.borderColor != '') e.borderColorLight = e.borderColor;

	if (e.borderColorDark == '') e.borderColorDark = '#ACA899';
	if (e.borderColorLight == '') e.borderColorLight = '#ECE9D8';

	if (e.border > 0)
	{	
		e.style.borderLeft		= e.border + ' SOLID ' + e.borderColorDark;
		e.style.borderRight	= e.border + ' SOLID ' + e.borderColorLight;
		e.style.borderTop		= e.border + ' SOLID ' + e.borderColorDark;
		e.style.borderBottom	= e.border + ' SOLID ' + e.borderColorLight;
	}

	this.activeElement.appendChild(e);
	this.activeElement = e;

}
//============================================================================================
//			html$start_REPORTGROUP
//============================================================================================
function html$start_REPORTGROUP(tag)
{
	var e,p;

	p = this.activeElement;

	if (p == null) return;
	while (p != null)
	{
		if (p.tagName == 'REPORT') break;
		p = p.parentElement;
	}

	if (p == null) return;	// orphan

	e = this.createElement_(tag);

	this.header			= '';
	this.footer			= '';

	e.header			= null;
	e.footer			= null;

	e.keeptogether		= tag.bool("keeptogether");
	e.skipIfBlank		= tag.bool("skipifblank");
	e.pageBreakBefore	= tag.bool("pagebreakbefore");
	e.pageBreakAfter	= tag.bool("pagebreakafter");

	e.key				= tag.rawValue("key");

	p.activeGroup = e;
	p.groups[p.groups.length] = e;

	this.activeElement.appendChild(e);
	this.activeElement = e;

}
//============================================================================================
//									htmlRs$Close()
//============================================================================================
function htmlRs$Close()
{
	this.pos = 0;
}
//============================================================================================
//									htmlRs$MoveNext()
//============================================================================================
function htmlRs$MoveNext()
{
	this.pos += 1;
}
//============================================================================================
//			html$start_REPORTTABLE
//============================================================================================
function html$start_REPORTTABLE(tag)
{
	var rs,list,i,j,k,start,c;
	var index,data,firstNames,fields;

	rs = new Object();
	
	rs.id			= tag.value('id');
	rs.Close		= htmlRs$Close;
	rs.MoveNext		= htmlRs$MoveNext;

	rs.records		= new Array();
	rs.fields		= new Array();
	rs.pos			= 0;
	rs.mine			= true;
	
	firstNames		= tag.bool('FirstRowNames');
	fields			= tag.value('fields');
	
	rs.src			= tag.value('src');

	this.recordsets[this.recordsets.length] = rs;

	c = String.fromCharCode(3);
	list = this.xdata.split(c);	
	start = 0;

	if (firstNames && (list.length > 0))
	{
		for (i=0; i < list.length; ++i)
		{
			start = i + 1;
			data = this.trim(list[i]);
			if (data == '') continue;
			rs.fields = this.fromCsv(data,',');
			break;
		}
	}
	
	for (i=start; i < list.length; ++i)
	{
		index = rs.records.length;
		data = this.trim(list[i]);
		if (data == '') continue;
		rs.records[index] = this.fromCsv(data,',');
		if (rs.records[index].length > rs.fields.length)
		{
			for (j=rs.fields.length; j < rs.records[index].length; ++j)
			{
			    k = j + 1;
				rs.fields[rs.fields.length] = 'field' + k;
			}
		}
	}
}
//============================================================================================
//			html$start_HEADER
//============================================================================================
function html$start_HEADER(tag)
{
	var p,e;

	p = this.activeElement;
	if (p == null) return;

	e = this.createElement_(tag);

	e.data = this.header;
	e.pageBreakBefore = tag.bool('pagebreakbefore');
	e.pageBreakAfter = tag.bool('pagebreakafter');

	e.align		= tag.keyword('align');
	e.valign	= tag.keyword('valign');
	e.color		= tag.value('color');
	e.colspan	= tag.i4('colspan');

	if (e.colspan <= 0) e.colspan = 1;

	this.header = '';
	
	while (p != null)
	{
		if ((p.tagName == 'REPORTGROUP') || (p.tagName == 'REPORT'))
		{	
			p.header = e;
			break;
		}
		if (p.tagName == 'DETAIL')
		{
			p.headers[p.headers.length] = e;
			break;
		}
	
		p = p.parentElement;
	}

}
//============================================================================================
//			html$start_FOOTER
//============================================================================================
function html$start_FOOTER(tag)
{
	var p,footer,e;
	
	p = this.activeElement;
	if (p == null) return;

	e = this.createElement_(tag);
	e.data = this.footer;
	e.pageBreakBefore = tag.bool('pagebreakbefore');
	e.pageBreakAfter = tag.bool('pagebreakafter');

	this.footer = '';

	while (p != null)
	{
		if ((p.tagName == 'REPORTGROUP') || (p.tagName == 'REPORT'))
		{	
			p.footer = e;
			break;
		}
		if (p.tagName == 'DETAIL')
		{	
			p.footers[p.footers.length] = e;
			e.align		= tag.keyword('align');
			e.valign	= tag.keyword('valign');
			e.colspan	= tag.i4('colspan');
			break;
		}
		p = p.parentElement;
	}
	
}

//============================================================================================
//			html$start_OTHER
//============================================================================================
function html$start_OTHER(tag)
{
	var e;

	if (tag.name == 'HTML') return;
	if (tag.name == 'HEAD') return;
	if (tag.name == 'META') return;
	if (tag.name == 'STYLE') return;
	if (tag.name == 'SCRIPT') return;
	if (tag.name == '!DOCTYPE') return;

	e = this.createElement_(tag);

	this.activeElement.appendChild(e);
	this.activeElement = e;

}
//============================================================================================
//			html$start_B
//============================================================================================
function html$start_B(tag)
{
	var e;

	e = this.createElement_(tag);

	this.activeElement.appendChild(e);
	this.activeElement = e;

}
//============================================================================================
//			html$start_I
//============================================================================================
function html$start_I(tag)
{
	var e;

	e = this.createElement_(tag);

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_U
//============================================================================================
function html$start_U(tag)
{
	var e;

	e = this.createElement_(tag);

	this.activeElement.appendChild(e);
	this.activeElement = e;

}
//============================================================================================
//			html$start_EM
//============================================================================================
function html$start_EM(tag)
{
	var e;

	e = this.createElement_(tag);

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_STRONG
//============================================================================================
function html$start_STRONG(tag)
{
	var e;

	e = this.createElement_(tag);

	this.activeElement.appendChild(e);
	this.activeElement = e;

}
//============================================================================================
//			html$start_SMALL
//============================================================================================
function html$start_SMALL(tag)
{
	var e;

	e = this.createElement_(tag);

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_BIG
//============================================================================================
function html$start_BIG(tag)
{
	var e;

	e = this.createElement_(tag);

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_DETAIL
//============================================================================================
function html$start_DETAIL(tag)
{
	var p,e,spa,pad;
	var text,list;

	p = this.activeElement;

	while (p != null)
	{
		if (p.tagName == 'REPORT') break;
		p = p.parentElement;
	}

	e = this.createElement_(tag);

	spa = tag.value('cellspacing');
	pad = tag.value('cellpadding');

	e.cellspacing = tag.i4('cellspacing');
	e.cellpadding = tag.i4('cellpadding');
	e.border	  = tag.i4('border');
	e.nowrap	  = tag.bool('nowrap');

	e.height	  = tag.i4('height');
	
	e.conditional	= tag.value('if');
	
	text = tag.value('header');
	e.headColor		= 'black';
	e.headBackground	= '';
	list = text.split(',');
	if (list.length > 0) e.headColor = list[0];
	if (list.length > 1) e.headBackground = list[1];

	if (spa == '') e.cellspacing = 1;
	if (pad == '') e.cellpadding = 2;

	e.columns	= new Array();
	e.macros	= new Array();
	e.headers	= new Array();
	e.footers	= new Array();
	
	e.borderColorDark	= tag.value("bordercolordark");
	e.borderColorLight	= tag.value("bordercolorlight");
	e.borderColor		= tag.value('bordercolor');

	if (e.borderColor != '') e.borderColorDark = e.borderColor;
	if (e.borderColor != '') e.borderColorLight = e.borderColor;

	if (e.borderColorDark == '') e.borderColorDark = '#ACA899';
	if (e.borderColorLight == '') e.borderColorLight = '#ECE9D8';

	if (e.border > 0)
	{	
		e.style.borderLeft		= e.border + ' SOLID ' + e.borderColorDark;
		e.style.borderRight	= e.border + ' SOLID ' + e.borderColorLight;
		e.style.borderTop		= e.border + ' SOLID ' + e.borderColorDark;
		e.style.borderBottom	= e.border + ' SOLID ' + e.borderColorLight;
	}

	this.column = '';

	if (p != null) p.details[p.details.length] = e;

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_COLUMN
//============================================================================================
function html$start_COLUMN(tag)
{
	var e,p,bgcolor,r;

	p = this.activeElement;

	while (p != null)
	{
		if (p.tagName == 'BODY') break;
		if (p.tagName == 'DETAIL') break;
		p = p.parentElement;
	}

	if (p == null) return;
	if (typeof(p.columns) == 'undefined') p.columns = new Array();
	
	e = this.createElement_(tag);

	e.width	= tag.value('width');
	e.height	= tag.value('height');
	e.wrap		= tag.bool('wrap');
	e.align		= tag.keyword('align');
	e.valign	= tag.keyword('valign');
	e.data		= this.column;

	e.bgcolor	= tag.rawValue('bgcolor');

	this.column = '';

	e.nowrap    = p.nowrap;
	if (tag.exists('nowrap')) e.nowrap = tag.bool('nowrap');
	
	p.columns[p.columns.length] = e;

	if (p.tagName == 'DETAIL')
	{
		r = p.parentElement;
		while (r != null)
		{
			if (r.tagName == 'REPORT') break;
			r = r.parentElement;
		}
	
		if (r == null) return;
		if (p.columns.length > r.maxColumn) r.maxColumn = p.columns.length;
	}
	else
	{
		e.init();
		this.activeElement.appendChild(e);
		this.activeElement = e;
	}

}
//============================================================================================
//			html$start_PRE
//============================================================================================
function html$start_PRE(tag)
{
	var e;
	
	e = this.createElement_(tag);

	e.data = this.html;
	this.html = '';
	
	this.activeElement.appendChild(e);
}
//============================================================================================
//			html$start_ECHO
//============================================================================================
function html$start_ECHO(tag)
{
	var e;
	
	e = this.createElement_(tag);
	this.activeElement.appendChild(e);

}
//============================================================================================
//			html$start_RECORDS
//============================================================================================
function html$start_RECORDS(tag)
{
	var r,p;

	p = this.activeElement;
	if (p == null) return;
	if (p.tagName != 'REPORT') return;		// Orphan (ignore)
		
	r = new Object();

	r.id			= tag.value('id');
	r.firstRowNames = tab.bool('firstrownames');
	r.delimiter		= tag.value('delimiter').toLowerCase();
	r.data			= this.records;

	this.records = '';
	p.records = r;
}
//============================================================================================
//			html$start_BR
//============================================================================================
function html$start_BR(tag)
{
	var e;

	e = this.createElement_(tag);

	e.offsetHeight = e.charHeight() * 1.2;
	this.activeElement.appendChild(e);
}
//============================================================================================
//			html$start_FRAMESET
//============================================================================================
function html$start_FRAMESET(tag)
{
	var e,p;

	e = this.createElement_(tag);
	e.rowText = tag.value("ROWS");
	e.colText = tag.value("COLS");
	e.frames = new Array();

	p = this.activeElement;
	if (p.tagName == 'FRAMESET')
	{
		p.frames[p.frames.length] = e;
	}
	else
	{
		this.framesets[this.framesets.length] = e;
	}
	
	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_FRAME
//============================================================================================
function html$start_FRAME(tag)
{
	var e,p;

	e = this.createElement_(tag);
	e.src = tag.value("src");

	e.frameBorder	= tag.i4("frameborder");
	e.marginHeight	= tag.value("marginheight");
	e.marginWidth	= tag.value("marginwidth");
	e.noresize		= tag.bool("noresize");
	e.scrolling	= tag.value("scrolling");

	p = this.activeElement;
	if (p.tagName == 'FRAMESET')
	{
		p.frames[p.frames.length] = e;
	}

	this.activeElement.appendChild(e);
	
}
//============================================================================================
//			html$start_IFRAME
//============================================================================================
function html$start_IFRAME(tag)
{
	var e,p;

	e = this.createElement_(tag);

	e.src			= tag.value("src");
	e.align			= tag.value("align");
	e.frameBorder	= tag.i4("frameborder");
	e.marginHeight	= tag.value("marginheight");
	e.marginWidth	= tag.value("marginwidth");
	e.height		= tag.value("height");
	e.width		= tag.value("width");
	e.scrolling	= tag.value("scrolling");

	e.border = e.frameBorder;

	if ((e.height == '') && (e.style.height == '')) e.height = 120;
	if ((e.width == '') && (e.style.width == '')) e.width = 260;
	
	e.offsetWidth = parseInt(e.width);
	e.offsetHeight = parseInt(e.height);

	if (e.frameBorder > 0)
	{
		e.borderLeft = 1;
		e.borderRight = 1;
		e.bordeTop = 1;
		e.borderBottom = 1;
		
		e.style.borderLeft		= 'Black 1 SOLID';
		e.style.borderRight	= 'Black 1 SOLID';
		e.style.borderTop		= 'Black 1 SOLID';
		e.style.borderBottom	= 'Black 1 SOLID';
	}
			
	this.activeElement.appendChild(e);
}
//============================================================================================
//			html$start_LINK
//============================================================================================
function html$start_LINK(tag)
{
	var href,type,rel,charset,target,data,media;
	var xdoc,rev;

	if (this.document == null) return;

	href = tag.value("href");
	type = tag.value("type");
	rel  = tag.value("rel");
	rev  = tag.value("rev");

	charset = tag.value('charset');
	target = tag.value('target');
	media  = tag.value('media');

	if (rel != 'stylesheet') return;
	if (href == '') return;
	if (! this.css.selectMedia(media)) return;
	
	data = this.document.read(href);
	if (data == '') return;

	xdoc = new htmlDocument$(this,this.document.href);
	this.css.load(data,xdoc);

}
//============================================================================================
//			html$start_GRAPHIC
//============================================================================================
function html$start_GRAPHIC(tag)
{
	var e,clip,obj,every,value,f;

	e = this.createElement_(tag);

	e.width = html$i4(tag.value('width'));
	e.height = html$i4(tag.value('height'));

//	e.width = e.width * this.graphicScale;	
//	e.height = e.height * this.graphicScale;	

	if (isNaN(e.width)) e.width = 300;
	if (isNaN(e.height)) e.height = 200;
	
	if (e.width  < 10) e.width = 300;
	if (e.height < 10) e.height = 200;

	e.lineColor		= tag.value('color');
	e.lineWidth		= tag.value('border');
	e.lineStyle		= tag.value('linestyle');
	e.fillColor		= tag.value('fillcolor');

	e.bgcolor		= tag.value('bgcolor');
		
	e.lookat		= tag.value('lookat');
	e.lookfrom		= tag.value('lookfrom');
	e.tilt			= tag.value('tilt');
	e.angle			= html$i4(tag.value('angle'));
	e.is3D			= tag.bool('3D');
	e.dynamic		= tag.bool('dynamic');
	
	e.animateFunction	= tag.value('animate-function');
	e.animateEvery		= 1000;
	value = tag.value('animate-every');
	if (value != '') 
	{
		value = value.toLowerCase();
		f = 1;
		if (value.substr(value.length-1) == 's') f = 1000;

		e.animateEvery = parseInt(value) * f;
		if (isNaN(e.animateEvery)) e.animateEvery = 500;
	}
	
	e.align		= tag.value("align");
	e.hspace		= tag.value("hspace");
	e.vspace		= tag.value("vspace");
	e.usemap		= tag.value("usemap");

	if (tag.bool('script')) 
	{
		e.script = this.script;
	}

	e.commands = this.graphic;
	e.graphic  = this.graphic;
	e.clip	   = '';
	e.range    = '';
	clip = tag.value('clip');
	if (clip.toLowerCase() == 'true') e.clip = 'true';

	e.range = tag.value('range');
	e.origin = tag.value('origin');
	
	e.offsetWidth = e.width;
	e.offsetHeight = e.height;

	this.graphic = '';

	if (e.lineWidth > 0) {
	    e.borderLeft = 1;
	    e.borderRight = 1;
	    e.bordeTop = 1;
	    e.borderBottom = 1;

	    e.style.borderLeft = 'Black ' + e.lineWidth + ' SOLID';
	    e.style.borderRight = 'Black ' + e.lineWidth + ' SOLID';
	    e.style.borderTop = 'Black ' + e.lineWidth + ' SOLID';
	    e.style.borderBottom = 'Black ' + e.lineWidth + ' SOLID';
	}

	obj = new Object();
	obj.height = e.height;
	obj.width = e.width;
	obj.angle = 0;
	e.imageSize = obj;
	
	this.activeElement.appendChild(e);
}
//============================================================================================
//			html$start_GROUP
//============================================================================================
function html$start_GROUP(tag)
{
	var e,spacing;

	e = this.createElement_(tag);

	e.width = tag.value('width');
	e.height = tag.value('height');

	e.keeptogether  = false;
	if (tag.value("keeptogether").toLowerCase() == 'true') e.keeptogether  = true;

	e.sql			= tag.value("sql");
	e.list			= tag.value("list");

	e.columns		= html$i4(tag.value("columns"));
	e.gutter		= html$i4(tag.value("gutter"));
	e.margin		= html$i4(tag.value("margin"));

	e.count			= html$i4(tag.value("count"));

	e.min			= html$i4(tag.value("Min"));
	e.max			= html$i4(tag.value("Max"));

	e.group			= this.group;
	this.group			= '';

	if ((e.min == 0) && (e.max == 0))
	{
		e.min = 1;
		e.max = e.count;
	}

	if (e.columns <= 0) e.columns = 1;
	if (e.columns > 30) e.columns = 1;

	e.columnWidth	= tag.value('columnwidth');
	e.columnHeight	= tag.value('columnheight');
	e.rowsPerColumn = tag.value('rowspercolumn');

	spacing		= tag.value('cellspacing');

	e.cellspacing = 2;
	if (spacing != '') e.cellspacing = parseInt(spacing);
	if (isNaN(e.cellspacing)) e.cellspacing = 2;
	if (e.cellspacing <    0) e.cellspacing = 2;

	e.clipCell		= tag.bool('clipcell');
	if (e.columnHeight == '') e.clipCell = false;

	e.border		= tag.i4('border');

	e.columnOrder	= tag.bool('columnOrder');
	if (e.columns < 1) e.columns = 1;
	if (e.columns == 1) e.columnOrder = false;

	e.lineColor		= tag.value("lineColor");
	e.lineWeight	= html$i4(tag.value("lineWeight"));
	e.lineStyle		= tag.value("lineStyle");	
	
	e.offsetWidth = e.width;
	e.offsetHeight = e.height;

	e.borderColorDark	= tag.value("bordercolordark");
	e.borderColorLight	= tag.value("bordercolorlight");
	e.borderColor		= tag.value('bordercolor');

	if (e.borderColor != '') e.borderColorDark = e.borderColor;
	if (e.borderColor != '') e.borderColorLight = e.borderColor;

	if (e.borderColorDark == '') e.borderColorDark = '#ACA899';
	if (e.borderColorLight == '') e.borderColorLight = '#ECE9D8';

	if (e.border > 0)
	{	
		e.style.borderLeft		= e.border + ' SOLID ' + e.borderColorDark;
		e.style.borderRight	= e.border + ' SOLID ' + e.borderColorLight;
		e.style.borderTop		= e.border + ' SOLID ' + e.borderColorDark;
		e.style.borderBottom	= e.border + ' SOLID ' + e.borderColorLight;
	}
	
	e.init();

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_LOOP
//============================================================================================
function html$start_LOOP(tag)
{
	var e;

	e = new Object();

	e.id			= tag.value("id");

	e.sql			= tag.value("sql");
	e.list			= tag.value("list");
	e.count			= html$i4(tag.value("count"));
	e.min			= html$i4(tag.value("Min"));
	e.max			= html$i4(tag.value("Max"));

	e.increment	= html$i4(tag.value("increment"));
	if (e.increment == 0) e.increment = 1;

	e.loop			= this.loop;
	this.loop		= '';

	if ((e.min == 0) && (e.max == 0))
	{
		e.min = 1;
		e.max = e.count;
	}

	this.executeLoop(e);	
}
//============================================================================================
//			html$start_CONFIG
//============================================================================================
function html$start_CONFIG(tag)
{
	var e,m,test,text,list,pageLength,pageWidth;

	if (tag.exists('Database')) this.database = tag.value('database');

}
//============================================================================================
//			html$start_DOC
//============================================================================================
function html$start_DOC(tag)
{
	var e,m,test,text,list,pageLength,pageWidth,value;

	e = this.createElement_(tag);
	if (this.firstPdf == null) this.firstPdf = e;

	e.xmarginLeft	= '';
	e.xmarginRight	= '';
	e.xmarginTop	= '';
	e.xmarginBottom	= '';
	e.title			= '';
	e.subject		= '';
	e.author		= '';
	e.keywords		= '';
	e.pageSize		= '';
	e.drawMargin	= '';
	e.encoded		= '';
	e.landscape		= '';
	e.portrait		= '';
	e.watermark		= '';
	e.database		= '';
	e.fontSize		= '';
	e.fontColor		= '';
	e.fontName		= '';
	e.backgroundColor = '';
	e.marginColor	= '';
	e.rotate		= '';
	e.opacity		= '';

	e.onDocumentOpen = '';
	e.onWillClose	= '';
	e.onWillSave	= '';
	e.onDidSave	= '';
	e.onWillPrint	= '';
	e.onDidPrint	= '';

	text = tag.value('rotate');
	if (text ==   '0') e.rotate = '0';
	if (text ==  '90') e.rotate = '90';
	if (text == '180') e.rotate = '180';
	if (text == '270') e.rotate = '270';

	if (tag.exists('pageLayout'))
	{

		text = tag.value('pageLayout');
		text = text.toLowerCase();
		text = text.replace(/\-/g,'');
		this.pdf.catalog.pageLayout = 'singlePage'; 
		
		if (text ==        'onepage') this.pdf.catalog.pageLayout = 'SinglePage'; 
		if (text ==              '1') this.pdf.catalog.pageLayout = 'SinglePage'; 
		if (text ==          '1page') this.pdf.catalog.pageLayout = 'SinglePage'; 
		if (text ==            'one') this.pdf.catalog.pageLayout = 'SinglePage'; 
		if (text ==     'singlepage') this.pdf.catalog.pageLayout = 'SinglePage'; 
		if (text ==      'onecolumn') this.pdf.catalog.pageLayout = 'OneColumn'; 
		if (text ==  'twocolumnleft') this.pdf.catalog.pageLayout = 'TwoColumnLeft'; 
		if (text == 'twocolumnright') this.pdf.catalog.pageLayout = 'TwoColumnRight'; 
		if (text ==        'twopage') this.pdf.catalog.pageLayout = 'TwoPageLeft'; 
		if (text ==              '2') this.pdf.catalog.pageLayout = 'TwoPageLeft'; 
		if (text ==          '2page') this.pdf.catalog.pageLayout = 'TwoPageLeft'; 
		if (text ==            'two') this.pdf.catalog.pageLayout = 'TwoPageLeft'; 
		if (text ==            'odd') this.pdf.catalog.pageLayout = 'TwoPageLeft'; 
		if (text ==        'twopage') this.pdf.catalog.pageLayout = 'TwoPageLeft'; 
		if (text ==    'twopageleft') this.pdf.catalog.pageLayout = 'TwoPageLeft'; 
		if (text ==           'even') this.pdf.catalog.pageLayout = 'TwoPageRight';		
		if (text ==   'twopageright') this.pdf.catalog.pageLayout = 'TwoPageRight';		

	}

	text = tag.keyword('questiontype');
	if (text == 'm') this.questionType = 'm';
	if (text == 't') this.questionType = 't';
	if (text == 'b') this.questionType = 'b';
	if (text == 'e') this.questionType = 'e';

	text = tag.keyword('outputtype');
	if (text ==  'pdf') this.outputType  = 'pdf';
	if (text == 'html') this.outputType = 'html';

	text = tag.value('margin');
	if (text == '') text = tag.value('margins');

	if (text != '')
	{
		list = text.split(',');
		if (list.length == 1)
		{
			m = this.r8(list[0]);
			if (m < 0) m = 0;
			if (m > 6) m = 0;
			e.xmarginLeft	= m;
			e.xmarginRight	= m;
			e.xmarginTop	= m;
			e.xmarginBottom	= m;
		}
		else
		{
			if (list.length > 0) e.xmarginLeft   = this.r8(list[0]);
			if (list.length > 1) e.xmarginRight  = this.r8(list[1]);
			if (list.length > 2) e.xmarginTop    = this.r8(list[2]);
			if (list.length > 3) e.xmarginBottom = this.r8(list[3]);
		}			
	}

	if (tag.bool('watermark')) e.watermark = true;

	if (tag.exists('margins')) 
	{
	    value = this.r8(tag.value("margins"));
	    e.xmarginTop = value
	    e.xmarginBottom = value;
	    e.xmarginLeft = value;
	    e.xmarginRight = value;
	}

	if (tag.exists('margin-Top'))    e.xmarginTop = this.r8(tag.value("margin-Top"));
	if (tag.exists('margin-Bottom')) e.xmarginBottom = this.r8(tag.value("margin-Bottom"));
	if (tag.exists('margin-Left'))   e.xmarginLeft = this.r8(tag.value("margin-Left"));
	if (tag.exists('margin-Right'))  e.xmarginRight = this.r8(tag.value("margin-Right"));

	if (tag.exists('marginTop'))    e.xmarginTop = this.r8(tag.value("marginTop"));
	if (tag.exists('marginBottom')) e.xmarginBottom = this.r8(tag.value("marginBottom"));
	if (tag.exists('marginLeft'))   e.xmarginLeft = this.r8(tag.value("marginLeft"));
	if (tag.exists('marginRight'))  e.xmarginRight = this.r8(tag.value("marginRight"));

	if (tag.exists('database')) e.database = tag.value('database');

	if (tag.exists('title'))	e.title	= tag.value('title');
	if (tag.exists('subject'))	e.subject	= tag.value('subject');
	if (tag.exists('author'))	e.author	= tag.value('author');
	if (tag.exists('keywords')) e.keywords	= tag.value('keywords');

	pageLength = 0;
	pageWidth = 0;
	if (tag.exists('pageLength')) pageLength = this.r8(tag.value('pageLength'));
	if (tag.exists('pageWidth')) pageWidth	 = this.r8(tag.value('pageWidth'));
	if ((pageLength > 0) && (pageWidth > 0)) e.pageSize  = pageWidth + ',' + pageLength;

	if (tag.exists('pageSize')) e.pageSize			= tag.value('pageSize');

	if (tag.exists('backgroundColor'))	e.backgroundColor	= tag.value('backgroundColor');
	if (tag.exists('marginColor'))		e.marginColor		= tag.value('marginColor');
	if (tag.exists('opacity'))			e.opacity			= tag.value('opacity');

	if (tag.exists('onDocumentOpen')) e.onDocumentOpen	= tag.value('onDocumentOpen');
	if (tag.exists('onWillClose'))	  e.onWillClose	= tag.value('onWillClose');
	if (tag.exists('onWillPrint'))	  e.onWillPrint	= tag.value('onWillPrint');
	if (tag.exists('onDidPrint'))	  e.onDidPrint		= tag.value('onDidPrint');
	if (tag.exists('onWillSave'))	  e.onWillSave		= tag.value('onWillSave');
	if (tag.exists('onDidSave'))	  e.onDidSave		= tag.value('onDidSave');

	if (tag.value('drawMargin').toLowerCase() ==  'true') e.drawMargin = true;
	if (tag.value('encoded').toLowerCase()    == 'false') e.encoded = false;
	if (tag.value('encoded').toLowerCase()    == 'true')  e.encoded = true;
	if (tag.value('landscape').toLowerCase()  == 'true') e.landscape = 'true';
	if (tag.value('landscape').toLowerCase()  == 'false') e.portrait = 'true';

	if (tag.exists('fontColor')) e.fontColor = tag.value('fontColor');
	if (tag.exists('fontName'))  e.fontName  = tag.value('fontName');
	if (tag.exists('fontSize'))  e.fontSize  = this.parseFontSize(tag.value('fontSize'));
	
	if (e.fontName != '') 
	{
		this.default_fontName = e.fontName;
		this.body.style.fontFamily = e.fontName;
		this.setFontName(e.fontName);
	}

	if (e.fontSize != '')
	{
		this.default_fontSize = e.fontSize;
		this.body.style.fontSize = e.fontSize;
	}
	
	this.activeElement.appendChild(e);

	this.setOutput_(this.pdf,e);
}
//============================================================================================
//			html$start_QUANTITY
//============================================================================================
function html$start_QUANTITY(tag)
{
	var e,p;

	e = this.createElement_(tag);

	e.size		= tag.i4("size");
	e.valign	= tag.value('valign').toLowerCase();

	e.type		= tag.keyword('type');
	e.color	= tag.value("color");

	this.activeElement.appendChild(e);
	this.activeElement = e;

//------------------------- node -----------------

	p = this.activeElement;

	tag.name = 'NODE';
	e = this.createElement_(tag);
	
	this.activeElement.appendChild(e);
	this.activeElement = e;

}
//============================================================================================
//			html$start_MATRIX
//============================================================================================
function html$start_MATRIX(tag)
{
	var e,p,value;

	e = this.createElement_(tag);

	e.valign		= tag.value('valign').toLowerCase();

	e.rows			= tag.i4('rows');
	e.cols			= tag.i4('cols');
	e.identity		= tag.bool('identity');
	e.cellHeight	= tag.i4('cellHeight');
	e.cellWidth		= tag.i4('cellWidth');

	e.clip		= tag.bool('clip');
	if ((e.cellHeight == 0) || (e.cellWidth == 9)) e.clip = false;

	e.cellspacing	= 2;
	value			= tag.value('cellspacing');
	if (value != '') e.cellspacing = html$i4(value);
	
	e.cells = new Array();

	e.emptyCell		= null;
	e.emptyValue	= tag.value('empty');

	e.size		= tag.i4("size");
	e.valign	= tag.value('valign').toLowerCase();

	e.type		= tag.keyword('type');
	e.color	= tag.value("color");

	e.colCount	= e.cols;
	e.rowCount		= e.rows;
	e.currentColumn = 0;

	if (e.type == '') e.type = 'absolute';

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_CELL
//============================================================================================
function html$start_CELL(tag)
{
	var e,p,type,i,list;
	var colValue, rowValue;
	var row,col;

	e = this.createElement_(tag);

	e.valign	= tag.value('valign').toLowerCase();

	e.row		= tag.value('row');
	e.col		= tag.value('col');
	e.value		= tag.value('value');
	e.empty		= tag.value('empty');
	
	e.changeValue = tag.bool('replace');
	e.diagonal	= tag.bool('diagonal');

	p = this.activeElement;
	while (p.parentNode != null)
	{
		if (p.tagName == 'MATRIX') break;
		p = p.parentNode;
	}
	

	if (p.tagName == 'MATRIX')
	{
		if (e.empty) 
			 p.emptyCell = e;
		else p.cells[p.cells.length] = e;
	}

	this.activeElement.appendChild(e);
	this.activeElement = e;

//---------------------------- define cell --------------------------------

	if (p == null) return;

	e.values		= null;
	e.rows			= null;
	e.cols			= null;

	if (e.value != '') e.values = e.value.split(',');

//-------------------------- rows ----------------------

	rowValue = e.row;
	colValue = e.col;
	if (e.row == '') rowValue = '*';
	if (e.col == '') colValue = '*';

	row = e.row;
	col = e.col;
	
	if (row == '') row = p.rowCount + 1;
	if (col == '') 
	{
		if (p.coulmnCount == 0) p.colCount = 1;
		p.currentColumn = p.currentColumns + 1;
		if (p.currentColumn > p.colCount) p.currentColumn = 1;
		col = p.currentColumn;		
	}
	
	e.rows = new Array();
	list = rowValue.split(',');
	if (list.length == 1)
	{
		if (list[0] == '*')
		{
			for (i=0; i < p.rows; ++i)
			{
				e.rows[i] = i + 1;
				if (e.rows[i] > p.rowCount) p.rowCount = e.rows[i];
			}
		}
		else
		{
			e.rows[0] = html$i4(list[0]);
			if (e.rows[0] <= 0) e.rows[0] = p.currentRow;
			if (e.rows[0] > p.rowCount) p.rowCount = e.rows[0];
		}
	}
	else
	{
		for (i=0; i < list.length; ++i)
		{
			if (list[i] == '*') 
				 e.rows[i] = p.rows;
			else e.rows[i] = html$i4(list[i]);

			if (e.rows[i] <= 0) e.rows[i] = p.rows;

			if (e.rows[i] > p.rowCount) p.rowCount = e.rows[i];
		}
	}
	
//-------------------------- columns ----------------------
		
	e.cols = new Array();
	list = colValue.split(',');
	if (list.length == 1)
	{
		if (list[0] == '*')
		{
			for (i=0; i < p.rows; ++i)
			{
				e.cols[i] = i+1;
				if (e.cols[i] > p.colCount) p.colCount = e.cols[i];
				p.currentColumn = e.cols[i];
			}
		}
		else
		{
			e.cols[0] = html$i4(list[0]);
			if (e.rows[0] <= 0) e.rows[0] = p.cols;
	
			if (e.cols[0] > p.colCount) p.colCount = e.cols[0];
			p.currentColumn = e.cols[0];
		}
	}
	else
	{
		for (i=0; i < list.length; ++i)
		{
			if (list[i] == '*') 
				 e.cols[i] = p.cols;
			else e.cols[i] = html$i4(list[i]);

			if (e.cols[i] > p.colCount) p.colCount = e.cols[i];
			p.currentColumn = e.cols[i];
		}
	}
}
//============================================================================================
//			html$start_ROOT
//============================================================================================
function html$start_ROOT(tag)
{
	var e,p;

	e = this.createElement_(tag);
	p = this.activeElement;

	e.size		= tag.i4("size");
	e.valign	= tag.value('valign').toLowerCase();
	e.line		= new Object();

	e.lineWeight = tag.i4("lineWeight");
	if (! tag.exists('LineWeight')) e.lineWeight = 1;

	e.lineColor = tag.value("lineColor");
	if (! tag.exists('LineColor')) 
	{
		e.lineColor = 'Black';
		if (this.font != null) e.lineColor = this.font.color;
	}

	e.lineStyle = tag.value('linestyle');

	e.exp = null;
	e.radical = null;

	this.activeElement.appendChild(e);
	this.activeElement = e;

//--------------------- Radical ----------------------------------------

	tag.name = 'RADICAL';
	e = this.createElement_(tag);

	p = this.activeElement;
	p.radical = e;

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_EXPONENT (of Root)
//============================================================================================
function html$start_EXPONENT(tag)
{
	var e,p;

	e = this.createElement_(tag);

	p = this.activeElement;
	while (p != null) 
	{
		if (p.tagName == 'ROOT') break;
		p = p.parentNode;
	}

	if (p != null) p.exp = e;

	this.activeElement.appendChild(e);
	this.activeElement = e;
}

//============================================================================================
//			html$start_INTEGRAL
//============================================================================================
function html$start_INTEGRAL(tag)
{
	var e;

	e = this.createElement_(tag);

	e.size	= tag.i4("size");
	e.color = tag.value("color");
	if (! tag.exists('color')) 
	{
		e.color = 'Black';
		if (this.font != null) e.color = this.font.color;
	}

	e.min = null;
	e.max = null;

	e.lineColor = tag.value("color");
	e.lineStyle  = tag.value("style");
	e.lineWeight = tag.i4("weight");

	this.activeElement.appendChild(e);
	this.activeElement = e;

//--------------------- Node ----------------------------------------

	tag.name = 'NODE';
	e = this.createElement_(tag);

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_SUMMATION
//============================================================================================
function html$start_SUMMATION(tag)
{
	var e;
	
	e = this.createElement_(tag);

	e.size	= tag.i4("size");
	e.color = tag.value("color");
	if (! tag.exists('color')) 
	{
		e.color = 'Black';
		if (this.font != null) e.color = this.font.color;
	}

	e.range=null;

	this.activeElement.appendChild(e);
	this.activeElement = e;

	e.lineColor = tag.value("color");
	e.lineStyle  = tag.value("style");
	e.lineWeight = tag.ki4("weight");

//--------------------- Node ----------------------------------------

	tag.name = 'NODE';
	e = this.createElement_(tag);

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_RANGE
//============================================================================================
function html$start_RANGE(tag)
{
	var e,p;

	e = this.createElement_(tag);

	p = this.activeElement;
	while (p != null)
	{
		if (p.tagName == 'SUMMATION') break;
		p = p.parentElement;
	}

	if (p != null)
	{
		this.activeElement = p;
		 p.range = e;
	}

	this.activeElement.appendChild(e);
	this.activeElement = e;
}

//============================================================================================
//			html$start_MIN (of SUM or Integral)
//============================================================================================
function html$start_MIN(tag)
{
	var e,p;

	e = this.createElement_(tag);

	p = this.activeElement;
	while (p != null)
	{
		if (p.tagName == 'INTEGRAL') break;
		p = p.parentElement;
	}

	if (p != null)
	{
		this.activeElement = p;
		 p.min = e;
	}

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_MAX (of SUM or Integral)
//============================================================================================
function html$start_MAX(tag)
{
	var e,p;

	e = this.createElement_(tag);

	p = this.activeElement;
	while (p != null)
	{
		if (p.tagName == 'INTEGRAL') break;
		p = p.parentElement;
	}

	if (p != null)
	{
		this.activeElement = p;
		p.max = e;
	}

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_DIVIDE
//============================================================================================
function html$start_DIVIDE(tag)
{
	var e,e2;

	e = this.createElement_(tag);

	e.lineWeight = tag.i4("lineWeight");
	if (! tag.exists('LineWeight')) e.lineWeight = 1;

	e.lineColor = tag.value("lineColor");
	if (! tag.exists('LineColor')) 
	{
		e.lineColor = 'Black';
		if (this.font != null) e.lineColor = this.font.color;
	}

	e.lineStyle = tag.value('linestyle');

	e.valign	= tag.value("valign").toLowerCase();

	e.numerator = null;
	e.by = null;
	this.activeElement.appendChild(e);
	this.activeElement = e;

//----------------------------- numerator -----------------------------------

	tag.name = 'NUMERATOR';
	e2 = this.createElement_(tag);

	e.numerator = e2;

	this.activeElement.appendChild(e2);
	this.activeElement = e2;
}
//============================================================================================
//			html$start_RAISE
//============================================================================================
function html$start_RAISE(tag)
{
	var e,e2;

	e = this.createElement_(tag);

	e.power = null;
	this.activeElement.appendChild(e);
	this.activeElement = e;

//----------------------------- NODE -----------------------------------

	tag.name = 'NODE';
	e2 = this.createElement_(tag);

	e.numerator = e2;

	this.activeElement.appendChild(e2);
	this.activeElement = e2;
}
//============================================================================================
//			html$start_BY
//============================================================================================
function html$start_BY(tag)
{
	var e,p;

	e = this.createElement_(tag);

	p = this.activeElement;
	while (p.parentNode != null)
	{
		if (p.tagName == 'DIVIDE') break;
		p = p.parentNode;
		
	}

	if (p.tagName == 'DIVIDE')
	{
		 p.by = e;
		 this.activeElement = p;
	}

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_POWER
//============================================================================================
function html$start_POWER(tag)
{
	var e,p;

	e = this.createElement_(tag);
	e.align = tag.value('align');

	p = this.activeElement;
	while (p.parentNode != null)
	{
		if (p.tagName == 'RAISE') break;
		p = p.parentNode;
		
	}

	if (p.tagName == 'RAISE')
	{
		 p.power = e;
		 this.activeElement = p;
	}

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_PDF (PDF)
//============================================================================================
function html$start_PDF(tag)
{
	var not;
	if (this.outputType == '') return;

	not = tag.bool('not');	

	if (this.outputType == 'pdf' && (!not)) return;
	if (this.outputType != 'pdf' && not) return;

	this.parseData = this.skipTag(tag,this.parseData);
}
//============================================================================================
//			html$start_HTML 
//============================================================================================
function html$start_HTML(tag)
{
	var not;
	if (this.outputType == '') return;

	not = tag.bool('not');	

	if (this.outputType == 'html' && (!not)) return;
	if (this.outputType != 'html' && not) return;

	this.parseData = this.skipTag(tag,this.parseData);
}
//============================================================================================
//			html$start_MC (multiple choice)
//============================================================================================
function html$start_MC(tag)
{
	var not;
	not = tag.bool('not');	

	if (this.questionType == 'm' && (!not)) return;
	if (this.questionType != 'm' && not) return;

	this.parseData = this.skipTag(tag,this.parseData);
}
//============================================================================================
//			html$start_TF (true / false)
//============================================================================================
function html$start_TF(tag)
{
	var not;
	not = tag.bool('not');	

	if (this.questionType == 't' && (!not)) return;
	if (this.questionType != 't' && not) return;

	this.parseData = this.skipTag(tag,this.parseData);
}
//============================================================================================
//			html$start_FIB (Fill in the blank)
//============================================================================================
function html$start_FIB(tag)
{
	var not;
	not = tag.bool('not');	

	if (this.questionType == 'b' && (!not)) return;
	if (this.questionType != 'b' && not) return;

	this.parseData = this.skipTag(tag,this.parseData);
}
//============================================================================================
//			html$start_E (essay)
//============================================================================================
function html$start_E(tag)
{
	var not;
	not = tag.bool('not');	

	if (this.questionType == 'e' && (!not)) return;
	if (this.questionType != 'e' && not) return;

	this.parseData = this.skipTag(tag,this.parseData);
}
//============================================================================================
//			html$start_CALENDAR
//============================================================================================
function html$start_CALENDAR(tag)
{
	var e,xdate,m,obj,i,value;

	e = this.createElement_(tag);
	e.events = new Array();
	for (i=0; i <= 31; ++i)
	{
		obj = new Object();
		obj.style = null;
		obj.htmlData = '';
		obj.border = 0;
		obj.borderColor = '';
		obj.borderStyle = '';
		e.events[i] = obj;
	}	

	xdate = new Date();

	e.noref = false;
	value = tag.value('noref').toLowerCase();
	if (value == 'true') e.noref = true;
	if (value == 'yes') e.noref = true;
	if (value == 't') e.noref = true;
	if (tag.exists('noref') && (value == '')) e.noref = true;
	
	e.year = tag.i4("year");
	if (! tag.exists('year')) e.year = xdate.getYear();

	e.month = tag.i4("month");
	m = tag.value('month');
	m = m.toUpperCase();
	if (m == 'JAN') e.month = 0;
	if (m == 'FEB') e.month = 1;
	if (m == 'MAR') e.month = 2;
	if (m == 'APR') e.month = 3;
	if (m == 'MAY') e.month = 4;
	if (m == 'JUN') e.month = 5;
	if (m == 'JUL') e.month = 6;
	if (m == 'AUG') e.month = 7;
	if (m == 'SEP') e.month = 8;
	if (m == 'OCT') e.month = 9;
	if (m == 'NOV') e.month = 10;
	if (m == 'DEC') e.month = 11;

	if (m ==   'JANUARY') e.month = 0;
	if (m ==  'FEBURARY') e.month = 1;
	if (m ==     'MARCH') e.month = 2;
	if (m ==     'APRIL') e.month = 3;
	if (m ==       'MAY') e.month = 4;
	if (m ==      'JUNE') e.month = 5;
	if (m ==      'JULY') e.month = 6;
	if (m ==    'AUGUST') e.month = 7;
	if (m == 'SEPTEMBER') e.month = 8;
	if (m ==   'OCTOBER') e.month = 9;
	if (m ==  'NOVEMBER') e.month = 10;
	if (m ==  'DECEMBER') e.month = 11;

	if (m == 'SEPT') e.month = 8;

	if (! tag.exists('month')) e.year = xdate.getMonth();

	e.valign	= tag.value("valign").toLowerCase();

	e.width	= html$i4(tag.value("width"));
	e.height	= html$i4(tag.value("height"));
	e.border    = html$i4(tag.value('border'));

	e.header = null;
	e.footer = null;

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_TIMELINE
//============================================================================================
function html$start_TIMELINE(tag)
{
	var e,xdate,m,obj,i;

	e = this.createElement_(tag);
	e.xhtml = new html$(this.sys);

	e.events = new Array();

	e.startDate  = tag.date('startDate');
	e.endDate    = tag.date('endDate');
	e.duration   = tag.keyword('duration');
	e.resolution = tag.keyword('resolution');

	e.eventMaxLevels	= tag.i4('eventMaxLevels');
	e.eventPlacement	= tag.value('eventPlacement');
	e.eventHeight		= tag.i4('eventHeight');
	e.eventWidth		= tag.i4('eventWidth');
	e.eventBorder		= tag.i4('eventBorder');
	e.eventAlign		= tag.value('eventAlign');
	e.eventShape		= tag.value('eventLabelShape');
	e.eventColor		= tag.value('eventColor');

	e.eventFontColor	= tag.value('eventFontColor');
	e.eventFontSize		= tag.r8('eventFontSize');
	e.eventFontName		= tag.r8('eventFontName');
	
	e.eventMarkerShape	= tag.value('eventMarkerShape');
	e.eventMarkerColor	= tag.value('eventMarkerColor');
	e.eventMarkerSize	= tag.r8('eventMarkerSize');
	if (e.eventMarkerSize == 0) e.eventMarkerSize = 4;

	e.leaderSlant		= tag.i4('leaderSlant');
	e.leaderWidth		= tag.i4('leaderWidth');
	e.leaderColor		= tag.value('leaderColor');
	e.leaderStyle		= tag.value('leaderStyle');
	e.leaderType		= tag.value('leaderType');		// box, line, or point
	
	e.baselineWidth		= tag.i4('baselineWidth');
	e.baselineTics		= tag.i4('baselineTics');
	e.baselineLabels	= tag.keyword('baselineLabels');
		
	e.baselineFontColor	= tag.value('baselineFontColor');
	e.baselineFontSize	= tag.value('baselineFontSize');
	
	e.valign	= tag.value("valign").toLowerCase();

	e.width	= html$i4(tag.value("width"));
	e.height	= html$i4(tag.value("height"));
	e.border    = html$i4(tag.value('border'));

	e.header = null;
	e.footer = null;

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_SCHEDULE
//============================================================================================
function html$start_SCHEDULE(tag)
{
	var e,xdate,m,obj,i;

	e = this.createElement_(tag);
	e.events = new Array();
	xdate = new Date();
	
	e.year = tag.i4("year");
	if (! tag.exists('year')) e.year = xdate.getYear();

	e.month = tag.i4("month");
	m = tag.value('month');
	m = m.toUpperCase();
	if (m == 'JAN') e.month = 0;
	if (m == 'FEB') e.month = 1;
	if (m == 'MAR') e.month = 2;
	if (m == 'APR') e.month = 3;
	if (m == 'MAY') e.month = 4;
	if (m == 'JUN') e.month = 5;
	if (m == 'JUL') e.month = 6;
	if (m == 'AUG') e.month = 7;
	if (m == 'SEP') e.month = 8;
	if (m == 'OCT') e.month = 9;
	if (m == 'NOV') e.month = 10;
	if (m == 'DEC') e.month = 11;

	if (m ==   'JANUARY') e.month = 0;
	if (m ==  'FEBURARY') e.month = 1;
	if (m ==     'MARCH') e.month = 2;
	if (m ==     'APRIL') e.month = 3;
	if (m ==       'MAY') e.month = 4;
	if (m ==      'JUNE') e.month = 5;
	if (m ==      'JULY') e.month = 6;
	if (m ==    'AUGUST') e.month = 7;
	if (m == 'SEPTEMBER') e.month = 8;
	if (m ==   'OCTOBER') e.month = 9;
	if (m ==  'NOVEMBER') e.month = 10;
	if (m ==  'DECEMBER') e.month = 11;

	if (m == 'SEPT') e.month = 8;

	if (! tag.exists('month')) e.year = xdate.getMonth();

	e.valign	= tag.value("valign").toLowerCase();

	e.width	= html$i4(tag.value("width"));
	e.height	= html$i4(tag.value("height"));
	e.border    = html$i4(tag.value('border'));

	e.header = null;
	e.footer = null;

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_EVENT
//============================================================================================
function html$start_EVENT(tag)
{
	var e,p,day;

	p = this.activeElement;

	if (p.tagName == 'CALENDAR') 
	{
		this.activeElement = p;
	
		day = tag.i4('day');
		if ((day <= 0) || (day > 31)) return;

		e = p.events[day];
		e.border		= tag.i4('border');
		e.borderColor	= tag.value('bordercolor');
		e.borderStyle	= tag.value('borderstyle');
	
		e.style		= new htmlStyle$(this,tag.value('style'),this.document);
		e.htmlData	= this.event;
		this.event  = '';
		return;
	}

	if (p.tagName == 'TIMELINE') 
	{
		this.activeElement = p;
	
		e = new Object();
		e.color			= p.eventColor;
		if (tag.exists('color')) e.color = tag.value('color');

		e.markerSize    = p.eventMarkerSize;
		e.markerColor   = p.eventMarkerColor;
		e.markerShape   = p.eventMarkerShape;
		
		if (tag.exists('markercolor')) e.markerColor = tag.value('markercolor');
		if (tag.exists('markershape')) e.markerShape = tag.value('markershape');
		if (tag.exists('markersize'))  e.markerSize = tag.r8('markersize');
	    if (e.markerSize == 0) e.markerSize = 4;

		e.htmlData		= this.event;
		e.startDate		= tag.date('date');
		e.duration		= tag.r8('duration');

		p.events[p.events.length] = e;		
		this.event  = '';
	
		return;
	}

	if (p.tagName == 'SCHEDULE') 
	{
		this.activeElement = p;
	
		e = new Object();
		e.htmlData		= this.event;
		e.startDate		= tag.date('date');
		e.duration		= tag.r8('duration');

		p.events[p.events.length] = e;		
		this.event  = '';	
		return;
	}

	this.event  = '';

}
//============================================================================================
//			html$start_ROW
//============================================================================================
function html$start_ROW(tag)
{
	var e;

	e = this.createElement_(tag);

	this.activeElement.appendChild(e);
	this.activeElement = e;

}
//============================================================================================
//			html$start_SET
//============================================================================================
function html$start_SET(tag)
{
	var e;

	e = this.createElement_(tag);
	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_SUB
//============================================================================================
function html$start_SUB(tag)
{
	var e,ch;

	e = this.createElement_(tag);
	e.paddingBottom = 2;
	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_SUP
//============================================================================================
function html$start_SUP(tag)
{
	var e;

	e = this.createElement_(tag);
	e.paddingTop = 2;
	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_HR
//============================================================================================
function html$start_HR(tag)
{
	var e,t;

	t = this;
	e = this.createElement_(tag);

	e.color	= tag.value("color");
	e.align	= tag.value("align");
	e.width	= html$i4(tag.value("width"));
	e.noShade	= tag.value("noshade");
	e.size		= html$i4(tag.value("size"));

	this.activeElement.appendChild(e);

}
//============================================================================================
//			html$start_H (1-6)
//============================================================================================
function html$start_H(tag,n)
{
	var e;

	e = this.createElement_(tag);
	e.align		= tag.value("align");

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_A
//============================================================================================
function html$start_A(tag)
{
	var e,i,text;

	e = this.createElement_(tag);

	e.href			= tag.value("href"); 
	e.href_target	= tag.value("target"); 
	e.href_title	= tag.value("title");

	this.activeElement.appendChild(e);
	this.activeElement = e;

	this.href			= tag.value("href");		// 
	this.href_target	= tag.value("target"); 
	this.href_title	= tag.value("title");

	text = trim(e.href).toLowerCase();
	if (text == '') return;
			
	this.links[this.links.length] = e;
}
//============================================================================================
//			html$start_P
//============================================================================================
function html$start_P(tag)
{
	var e;

	e = this.createElement_(tag);

	e.align	= tag.keyword("align");
	if (e.style.textAlign == '') e.style.textAlign = e.align;

	this.activeElement.appendChild(e);
	this.activeElement = e;

}
//============================================================================================
//			html$start_DL
//============================================================================================
function html$start_DL(tag)
{
	var e;

	e = this.createElement_(tag);

	this.activeElement.appendChild(e);
	this.activeElement = e;

}
//============================================================================================
//			html$start_DD
//============================================================================================
function html$start_DD(tag)
{
	var e;

	e = this.createElement_(tag);

	this.activeElement.appendChild(e);
	this.activeElement = e;

}
//============================================================================================
//			html$start_DT
//============================================================================================
function html$start_DT(tag)
{
	var e;

	e = this.createElement_(tag);

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_MAP
//============================================================================================
function html$start_MAP(tag)
{
	var e;

	e = this.createElement_('MAP');
	e.name			= tag.value("name");
	e.areas			= new Array();

	this.maps[this.maps.length] = e;

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_AREA
//============================================================================================
function html$start_AREA(tag)
{
	var e,temp,i,value,p;

	e = new Object();
	e.name			= tag.value("name");
	e.id			= tag.value("id");

	e.target		= tag.keyword('target');
	e.href			= tag.value('href');
	e.shape			= tag.keyword('shape');
	e.alt			= tag.value('alt');

	temp		= tag.value('coords');
	e.coords	= temp.split(',');

	for (i=0; i < e.coords.length; ++i)
	{
		value = parseFloat(e.coords[i]);
		if (isNaN(value)) value = 0;
		e.coords[i] = value;
	}

	p = this.activeElement;
	if (p.tagName != 'MAP') return;
	p.areas[p.areas.length] = e;

}
//============================================================================================
//			html$start_TITLE
//============================================================================================
function html$start_TITLE(tag)
{

	this.title = this.xdata;
	this.data = '';

}
//============================================================================================
//			html$start_META
//============================================================================================
function html$start_META(tag)
{

	this.meta = this.data;
	this.data = '';
}
//============================================================================================
//			html$start_BODY
//============================================================================================
function html$start_BODY(tag)
{
	var e,bgcolor,bgimage;
	
	e = this.body;
	this.activeElement = e;
	e.style	= new htmlStyle$(this,tag.value('style'),this.document);

	
	bgcolor			= tag.value('bgcolor');
	bgimage			= tag.value('background');
	
	if (bgcolor != '') e.style.backgroundColor = bgcolor;
	if (bgimage != '') e.style.backgroundImage = bgimage;
	
}
//============================================================================================
//			html$start_INPUT
//============================================================================================
function html$start_INPUT(tag)
{
	var e,h,w,width,height,p;

	e = this.createElement_(tag);

	e.align		= tag.value('align');
	e.size			= tag.value('size');
	e.type			= tag.keyword('type');
	if (e.type == 'hidden') e.style.display = 'none';

	e.height		= tag.value('height');
	e.width		= tag.value('width');

	if (e.type == 'button' && e.height == '') e.height = 24;
	if (e.type == 'submit' && e.height == '') e.height = 24;
	
	e.value			= tag.value('value');

	e.readonly		= tag.bool('readonly');
	e.disabled		= tag.bool('disabled');

	e.checked		= tag.bool('checked');
	e.maxlength		= tag.i4('maxlength');
	e.src			= tag.value('src');
	e.accept		= tag.value('accept');

	e.onClick		= tag.value('onclick');
	e.onChange		= tag.value('onchange');

	e.action		= '';
	e.target		= '';
	e.method		= 'get';
	
	e.parentForm	= null;

	e.imageFile = '';
	if (e.type == 'image') e.imageFile = this.imageFilename(e.src);		

	p = this.activeElement;
	while (p != null)
	{
		if (p.tagName == 'FORM')
		{
			e.parentForm = p;
			if (e.type != 'submit') break;
			e.action = p.action;
			e.target = p.target;
			e.method = p.method;
			if (e.value == '') e.value = 'Submit Query';
			break;
		}
		p = p.parentElement;
	}

	this.activeElement.appendChild(e);

}
//============================================================================================
//			html$start_FORM
//============================================================================================
function html$start_FORM(tag)
{
	var e;

	e = this.createElement_(tag);

	e.target		= tag.keyword('target');
	e.method		= tag.keyword('method');
	e.action		= tag.value('action');

	e.fields		= new Array();

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_SELECT
//============================================================================================
function html$start_SELECT(tag)
{
	var e,w;

	e = this.createElement_(tag);

	e.size			= html$i4(tag.value('size'));
	e.fixedWidth	= false;
	e.width			= 32;
	e.maxWidth		= 0;

	w = html$i4(e.style.width);
	if (w > 0) 
	{
		e.fixedWidth = true;
		e.width = w;
	}

	e.height		= 16;
	if (e.size > 1) e.height = (16 * e.size);

	if (e.style.height > 0) e.height = e.style.height;
	
	e.multiple		= tag.bool('multiple');
	e.disabled		= tag.bool('disabled');
	
	e.options		= new Array();
	e.values		= new Array();
	e.selected		= -1;

	e.onChange		= tag.value('onchange');
	e.onKeyDown		= tag.value('onkeydown');
	e.onKeyUp		= tag.value('onkeyup');
	e.onMouseDown	= tag.value('onmousedown');
	e.onMouseUp		= tag.value('onmouseup');
	e.onEnter		= tag.value('onenter');
	e.onExit		= tag.value('onexit');

	this.activeElement.appendChild(e);
	this.activeElement = e;
}

//============================================================================================
//			html$start_OPTION
//============================================================================================
function html$start_OPTION(tag)
{
	var e,p,selected,value,label,text,index,w ;

	p = this.findParent_('SELECT');
	if (p.tagName != 'SELECT') return;

	selected	= tag.bool('selected');
	value		= tag.value('value');
	label		= tag.value('label');
	text		= this.data;

	w = p.wordWidth(text,10);
	if (w > p.maxWidth) p.maxWidth = w;
	if (! p.fixedWidth) p.width = p.maxWidth + 40;

	index = p.options.length;

	if (selected) p.selected = index;
	p.options[index] = text;
	p.values[index] = value;
		
	this.data = '';
		
}
//============================================================================================
//			html$start_TEXTAREA
//============================================================================================
function html$start_TEXTAREA(tag)
{
	var e;

	e = this.createElement_(tag);
	e.rows			= html$i4(tag.value('rows'));
	e.cols			= html$i4(tag.value('cols'));
	e.wrap			= tag.bool('wrap');
	
	e.width		= 200;
	e.height		= 100;

	e.readonly		= tag.bool('readonly');
	e.disabled		= tag.bool('disabled');
	e.value		= this.data;
	
	this.data		= '';

	if (e.rows > 0) e.height = e.rows * 16;
	if (e.cols > 0) e.width  = e.cols * 8;

	e.onChange		= tag.value('onchange');
	e.onKeyDown		= tag.value('onkeydown');
	e.onKeyUp		= tag.value('onkeyup');
	e.onMouseDown	= tag.value('onmousedown');
	e.onMouseUp		= tag.value('onmouseup');
	e.onEnter		= tag.value('onenter');
	e.onExit		= tag.value('onexit');

	this.activeElement.appendChild(e);
}
//============================================================================================
//			html$start_LI
//============================================================================================
function html$start_LI(tag)
{
	var e,p,obj;
	
	e = this.createElement_(tag);
	e.type			= tag.value('type');
	e.depth		= 1;

	p = this.activeElement;

	while (true)
	{
		if (p.isNode() && (p.tagName != 'LI')) break;			
		p = p.parentElement;
	}

	if (p.tagName == 'UL') e.depth = p.depth;
	if (p.tagName == 'OL') e.depth = p.depth;
	this.activeElement = p;

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_BLOCKQUOTE
//============================================================================================
function html$start_BLOCKQUOTE(tag)
{
	var e,p;

	e = this.createElement_(tag);

	this.activeElement.appendChild(e);
	this.activeElement = e;

	e.height		= 0;
	e.width		= 12;
}
//============================================================================================
//			html$start_OL
//============================================================================================
function html$start_OL(tag)
{
	var e,p;

	e = this.createElement_(tag);
	e.depth		= 1;

	
	p = this.activeElement;

	if ((p.tagName == 'LI')) e.depth = p.depth + 1;

	if ((e.depth == 1) && (e.style.paddingLeft == '')) e.style.paddingLeft = 25;

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_UL
//============================================================================================
function html$start_UL(tag)
{
	var e,p;

	e = this.createElement_(tag);
	e.type		= tag.value("type");
	e.depth		= 1;


	p = this.activeElement;

	if ((p.tagName == 'LI')) e.depth = p.depth + 1;
	if ((p.tagName == 'UL')) e.depth = p.depth + 1;
	if ((p.tagName == 'OL')) e.depth = p.depth + 1;

	if ((e.depth == 1) && (e.style.paddingLeft == '')) e.style.paddingLeft = 25;
	
	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_DIV
//============================================================================================
function html$start_DIV(tag)
{
	var e;

	e = this.createElement_(tag);
	e.dataFormatAs	= tag.value("dataformatas");
	e.align		= tag.value("align");
	e.nowrap		= tag.value("nowrap");
	
	if (e.style.textAlign == '') e.style.textAlign = e.align;
	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_LABEL
//============================================================================================
function html$start_LABEL(tag)
{
	var e;

	e = this.createElement_(tag);
	e.fieldName = tag.value('for');
	
	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_EVAL
//============================================================================================
function html$start_EVAL(tag)
{
	var e,pad;

	e = this.createElement_(tag);
	e.command		= this.data;
	e.height		= tag.value("height");
	e.width			= tag.value("width");
	
	if (e.width == '') e.width = '100%';
	
	pad = tag.value('cellpadding');

	e.cellpadding = tag.i4('cellpadding');
	e.border	  = tag.i4('border');

	if (pad == '') e.cellpadding = 2;

	if ((e.style.paddingLeft   == '') &&
		(e.style.paddingRight  == '') &&
		(e.style.paddingTop    == '') &&
		(e.style.paddingBottom == ''))
	{
		e.style.paddingLeft		= e.cellpadding;	
		e.style.paddingRight	= e.cellpadding;	
		e.style.paddingTop		= e.cellpadding;	
		e.style.paddingBottom	= e.cellpadding;	
		e.paddingLeft	= e.cellpadding;
		e.paddingRight	= e.cellpadding;
		e.paddingTop	= e.cellpadding;
		e.paddingBottom = e.cellpadding;
	}

	e.borderColorDark	= tag.value("bordercolordark");
	e.borderColorLight	= tag.value("bordercolorlight");
	e.borderColor		= tag.value('bordercolor');

	if (e.borderColor != '') e.borderColorDark = e.borderColor;
	if (e.borderColor != '') e.borderColorLight = e.borderColor;

	if (e.borderColorDark == '') e.borderColorDark = '#ACA899';
	if (e.borderColorLight == '') e.borderColorLight = '#ECE9D8';

	if (e.border > 0)
	{	
		e.style.borderLeft		= e.border + ' SOLID ' + e.borderColorDark;
		e.style.borderRight	= e.border + ' SOLID ' + e.borderColorLight;
		e.style.borderTop		= e.border + ' SOLID ' + e.borderColorDark;
		e.style.borderBottom	= e.border + ' SOLID ' + e.borderColorLight;
	}

	this.activeElement.appendChild(e);
}
//============================================================================================
//			html$start_FONT
//============================================================================================
function html$start_FONT(tag)
{
	var e,size;

	e = this.createElement_(tag);
	
	e.align		= tag.keyword("align");
	e.size		= tag.value("size");
	e.color	= tag.value("color");
	e.face	= tag.value("face");

	e.fontSize	= e.size;

	if (e.size == 1) e.fontSize = '6pt';
	if (e.size == 2) e.fontSize = '8pt';
	if (e.size == 3) e.fontSize = '10pt';
	if (e.size == 4) e.fontSize = '12pt';
	if (e.size == 5) e.fontSize = '16pt';
	if (e.size == 6) e.fontSize = '24pt';
	if (e.size == 7) e.fontSize = '32pt';

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_SPAN
//============================================================================================
function html$start_SPAN(tag)
{
	var e;

	e = this.createElement_(tag);
	e.dataFormatAs	= tag.value("dataformatas");

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_PAGEBREAK
//============================================================================================
function html$start_PAGEBREAK(tag)
{
	var e;
	
	this.activeElement = this.body;
	e = this.createElement_(tag);

	this.activeElement = this.body;
	this.activeElement.appendChild(e);
}
//============================================================================================
//			html$start_IMG
//============================================================================================
function html$start_IMG(tag)
{
	var e,size,src;

	e = this.createElement_(tag);
	e.tagName		= 'IMG';
	
	e.height		= tag.value("height");
	e.width		= tag.value("width");

	e.align		= tag.value("align");
	e.hspace		= tag.value("hspace");
	e.vspace		= tag.value("vspace");
	e.usemap		= tag.value("usemap");
	e.border		= tag.value("border");
	e.dynsrc		= tag.value("dynsrc");
	e.src			= this.resolve(tag.value("src"));
	e.alt			= tag.value("alt");

	e.u3dName		= tag.value("Name");

	e.u3dToolbar		= tag.keyword("3D-toolbar");
	e.u3dLightingScheme	= tag.keyword("3D-lighting-scheme");
	e.u3dRenderMode		= tag.keyword("3D-Render-Mode");
	e.u3dView		= tag.value("3D-View");
	e.u3dCamera		= tag.value("3D-Camera");
	e.u3dCameraTilt		= tag.value("3D-Camera-Tilt");

	e.srcText		= e.src;

	e.src = this.imageFilename(e.src);		
	e.imageSize = this.getImageSize(e.src);
	this.activeElement.appendChild(e);
}
//============================================================================================
//			html$start_TABLE
//============================================================================================
function html$start_TABLE(tag)
{
	var e;
	var bgcolor,bgimage,backgroundColor;

	e = this.createElement_(tag);

	e.width = tag.value("width");
	e.height = tag.value("height");
	e.align = tag.value("align");

	if (e.style.textAlign != '') 
	{
		e.align = e.style.textAlign;
	}
	else
	{
		e.style.textAlign = e.align;
	}

	
	bgcolor = tag.value("bgcolor");
	bgimage = tag.value("background");

	if (bgcolor != '') e.style.backgroundColor = bgcolor;
	if (bgimage != '') e.style.backgroundImage = bgimage;
	
	if ((e.style.backgroundColor == '') && (e.style.backgroundImage == ''))
	{
		 e.style.backgroundColor = 'white';
	}

	e.border = html$i4(tag.value("border"));
	
	e.cellpadding = html$i4(tag.value("cellpadding",1));
	e.cellspacing = html$i4(tag.value("cellspacing",2));

	e.collapse = false;
	if (e.style.borderCollapse == 'collapse')
	{
		 e.collapse = true;
		 if (e.border > 1) e.border = 1;
	}

	if (e.style.align != '') e.align = e.style.align;
	if (e.style.align == '') e.style.align = e.align;
	
	if (e.collapse && (e.border > 0)) e.cellspacing = 0;

	e.frame = tag.value("frame");

	e.borderColorDark	= tag.value("bordercolordark");
	e.borderColorLight	= tag.value("bordercolorlight");
	e.borderColor		= tag.value('bordercolor');

	if (e.borderColor != '') e.borderColorDark = e.borderColor;
	if (e.borderColor != '') e.borderColorLight = e.borderColor;

	if (e.borderColorDark == '') e.borderColorDark = '#ACA899';
	if (e.borderColorLight == '') e.borderColorLight = '#ECE9D8';

	e.rows = new Array();
	e.colWidths = new Array();

	e.spanned_col = false;
	e.spanned_row = false;

	if (e.style.borderLeft == '')
	{
		e.style.borderLeft		= e.border + ' SOLID ' + e.borderColorLight;
		e.style.borderRight	= e.border + ' SOLID ' + e.borderColorDark;
		e.style.borderTop		= e.border + ' SOLID ' + e.borderColorLight;
		e.style.borderBottom	= e.border + ' SOLID ' + e.borderColorDark;
	}
	
	this.activeElement.appendChild(e);
	this.activeElement = e;
	
	e.tableIndex = this.tables.length;
	this.tables[this.tables.length] = e;
}
//============================================================================================
//			html$findParent_
//============================================================================================
function html$findParent_(tagName)
{
	var p,prev;

	prev = null;	
	p = this.activeElement;
	
	while (true)
	{
		if (p.tagName == tagName) return p;
		if (p.parentElement == null) return p;
			
		if (tagName == 'TR')
		{
			if (p.tagName == 'TABLE') return p;
		}
		
		prev = p;
		p = p.parentElement;
	}
}
//============================================================================================
//			html$start_THEAD
//============================================================================================
function html$start_THEAD(tag)
{
	var e;

	e = this.createElement_(tag);

	e.char = tag.value("char");
	e.charoff = tag.value("charoff");
	e.align = tag.value("align");
	e.valign = tag.value("valign");

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_TFOOT
//============================================================================================
function html$start_TFOOT(tag)
{
	var e;

	e = this.createElement_(tag);

	e.char = tag.value("char");
	e.charoff = tag.value("charoff");
	e.align = tag.value("align");
	e.valign = tag.value("valign");

	if (e.style.textAlign != '') 
	{
		e.align = e.style.textAlign;
	}
	else
	{
		e.style.textAlign = e.align;
	}


	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_TBODY
//============================================================================================
function html$start_TBODY(tag)
{
	var e;

	e = this.createElement_(tag);

	e.char = tag.value("char");
	e.charoff = tag.value("charoff");
	e.align = tag.value("align");
	e.valign = tag.value("valign");

	if (e.style.textAlign != '') 
	{
		e.align = e.style.textAlign;
	}
	else
	{
		e.style.textAlign = e.align;
	}


	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_TR
//============================================================================================
function html$start_TR(tag)
{
	var e,p,text;

	e = this.createElement_(tag);

	e.width = tag.value("width");
	e.height = tag.value("height");
	e.align = tag.value("align");
	e.valign = tag.value("valign");
	e.backgroundColor = tag.value("bgcolor");
	e.background = tag.value("background");
	e.cells = new Array();

	if (e.style.textAlign != '') 
	{
		e.align = e.style.textAlign;
	}
	else
	{
		e.style.textAlign = e.align;
	}


	p = this.findParent_('TABLE');
	if (p.tagName == 'TABLE') p.rows[p.rows.length] = e;

	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$start_TH
//============================================================================================
function html$start_TH(tag)
{
	tag.name = 'TD';
	this.start_TD(tag);
}
//============================================================================================
//			html$start_TD
//============================================================================================
function html$start_TD(tag)
{
	var e,p,r,tbl;

	e = this.createElement_(tag);

	e.colspan		= html$i4(tag.value("colspan"));
	e.rowspan		= html$i4(tag.value("rowspan"));

	e.char			= tag.value("char");
	e.charoff		= tag.value("charoff");

	e.width			= tag.value("width");
	e.height		= tag.value("height");

	e.align			= tag.value("align");
	e.valign		= tag.value("valign");
	e.scope			= tag.value("scope");
	e.headers		= tag.value("headers");
	e.backgroundColor	= tag.value("bgcolor");
	e.background		= tag.value("background");

	if (e.style.textAlign != '') 
	{
		e.align = e.style.textAlign;
	}
	else
	{
		e.style.textAlign = e.align;
	}

	e.borderColorDark = tag.value("bordercolordark");
	e.borderColorLight = tag.value("bordercolorlight");
	e.borderColor = tag.value("bordercolor");

	if (e.borderColor != '')
	{
		e.borderColorDark = e.borderColor;
		e.borderColorLight = e.borderColor;
	}	
	
	e.borderLeft	= 0;
	e.borderRight	= 0;
	e.borderTop	= 0;
	e.borderBottom	= 0;
	e.border        = 0;

	tbl = this.findParent_('TABLE');
			
	if (tbl)
	{
		e.border = 0;
		if (tbl.border > 0) e.border = 1;
	
		if (e.borderColorDark == '') e.borderColorDark = tbl.borderColorDark;
		if (e.borderColorLight == '') e.borderColorLight = tbl.borderColorLight;
	}
			
	if (e.style.borderLeft == '' && e.border > 0)
	{
		e.style.borderLeft		= e.border + ' SOLID ' + e.borderColorDark;
		e.style.borderRight	= e.border + ' SOLID ' + e.borderColorLight;
		e.style.borderTop		= e.border + ' SOLID ' + e.borderColorDark;
		e.style.borderBottom	= e.border + ' SOLID ' + e.borderColorLight;
	}

	p = this.findParent_('TR');
	if (p != null)
	{
		if (p.tagName == 'TABLE') 
		{
			r = this.createElement_('TR');
			r.cells = new Array();
			r.className = tag.value("class");
			p.appendChild(r);
	
			p = r;	
		}
	
		if (p.tagName == 'TR') 
		{
			this.activeElement = p;
			e.index = p.cells.length;		// actual Index
			e.colIndex = p.cells.length;	// dynamic index
			p.cells[p.cells.length] = e;
		}
	}

	if (tbl != null)
	{

		if (e.rowspan > 1) tbl.spanned_row = true;
		if (e.colspan > 1) tbl.spanned_col = true;
	}
	
	this.activeElement.appendChild(e);
	this.activeElement = e;
}
//============================================================================================
//			html$end_
//============================================================================================
function html$end_(tagName,blocked)
{
	var e;

	if (tagName == 'IMG') return;
	if (tagName == 'INPUT') return;
	if (tagName == 'BR') return;

	e = this.activeElement;
	while (e.parentElement != null)
	{
		if (e.tagName == tagName)
		{
			 e = e.parentElement;
			 this.activeElement = e;
			 break;
		}
		if (blocked)
		{
			if (e.tagName == 'DIV') break;		// blocked
			if (e.tagName == 'SPAN') break;		// blocked
			if (e.tagName == 'TABLE') break;	// blocked
			if (e.tagName == 'P') break;	// blocked
		}
	
		e = e.parentElement;
	}

}
//============================================================================================
//			html$end_TIMELINE
//============================================================================================
function html$end_TIMELINE()
{

	var e;
	e = this.activeElement;

	this.end_('TIMELINE',false);

}
//============================================================================================
//			html$end_TR
//============================================================================================
function html$end_TR()
{

	var e;

	e = this.activeElement;
	while (e.parentNode != null)
	{
		if (e.tagName == "TABLE") break;
		e = e.parentNode;
	}

	this.activeElement = e;
}
//============================================================================================
//			html$end_TD
//============================================================================================
function html$end_TD()
{

	var e;

	e = this.activeElement;
	while (e.parentNode != null)
	{
		if (e.tagName == "TABLE") break;
		if (e.tagName == "TR") break;

		e = e.parentNode;
	}

	this.activeElement = e;		
}
//============================================================================================
//			html$end_TH
//============================================================================================
function html$end_TH()
{

	var e;

	e = this.activeElement;
	while (e.parentNode != null)
	{
		if (e.tagName == "TABLE") break;
		if (e.tagName == "TR") break;

		e = e.parentNode;
	}

	this.activeElement = e;		
}
//============================================================================================
//			html$removeScriptComments_ (Required)
//============================================================================================
function html$removeScriptComments_(data)
{
	var i,list,text,line;
	
	text = '';
	list = data.split('\r\n');
	for (i=0; i < list.length; ++i)
	{
		line = this.trim(list[i]);
		if (line == '') return;
		if (line.substr(0,2) == '//') continue;
		if (text != '') text += '\r\n';
		text += line;
	}
	
	return text;
}
//============================================================================================
//			html$skipScript_
//============================================================================================
function html$skipScript_(tag,data)
{
	var script, head, node;
	
	data = this.skipScript_A(tag,data);
	

	if (! tag.exists('LOAD')) return data;
	this.script = this.removeScriptComments_(tag.script);
	return data;
}
//============================================================================================
//			html$find
//============================================================================================
function html$find(xdata,a)
{
	var re,i;
	
	re = RegExp(a,"i");	
	i = xdata.search(re);
	return i;
}
//============================================================================================
//			html$skipScript_A
//============================================================================================
function html$skipScript_A(tag,data)
{
	var i,temp,script;
	
	tag.script = '';

	if (data == '') return '';
	i = this.find(data,"</scr" + "ipt>");
	if (i < 0) i = data.length;

	temp = data.substr(0,i);
	temp = temp.replace(/\003/g,' ');
	tag.script += temp;

	script = new Object();
	script.data = temp;
	script.src = tag.value('src');
	this.scripts[this.scripts.length] = script;

	data = data.substr(i+2);
	
	i = data.indexOf('>');
	if (i < 0) i = data.length;
	data = data.substr(i+1);
	return data;

}
//============================================================================================
//			html$skipTag
//============================================================================================
function html$skipTag(tag,data)
{
	var i,name;
	
	if (data == '') return '';
	name = '</' + tag.name + '>';

	i = this.find(data,name);
	if (i < 0) return '';

	data = data.substr(i+name.length);
	return data;

}

//============================================================================================
//			html$loadStyle_
//============================================================================================
function html$loadStyle_(tag,data)
{
	var i,temp,style;
	
	style = '';
	tag.end = true;


	while (true)
	{
		if (data == '') break;
		i = data.indexOf('</');
		if (i < 0) 
		{
			data = '';
			break;
		}

		temp = data.substr(i,8);
		temp = temp.toLowerCase();
		if (temp != '</sty' + 'le>')
		{
			style += data.substr(0,i+1);
			data = data.substr(i+2);
			continue;
		}
		
		if (i == 0) 
		{
			data = data.substr(8);
			break;
		}
			
		temp = data.substr(0,i);
		style += temp;
		data = data.substr(i+8);	
		break;
	}	

	this.css.load(style,this.document);

	return data;
}
//============================================================================================
//			html$loadGraphic_
//============================================================================================
function html$loadGraphic_(tag,data,term)
{
	var i,temp,graphic,xdata,nt;

	graphic = '';
	nt = term.length;
	tag.name = 'GRAPHIC';
	term = term.toLowerCase();
	tag.end=true;

	while (true)
	{
		if (data == '') break;
		xdata = data.toLowerCase();
		i = xdata.indexOf(term);
		if (i < 0) 
		{
			data = '';
			break;
		}

		temp = data.substr(i,nt);
		temp = temp.toLowerCase();
		if (temp != term) 
		{
			graphic += data.substr(0,i+1);
			data = data.substr(i+2);
			continue;
		}
		
		if (i == 0) 
		{
			data = data.substr(nt);
			break;
		}
			
		temp = data.substr(0,i);
		graphic += temp;
		data = data.substr(i+nt);	
		break;
	}	

	graphic = graphic.replace(/\003/g,' ');	
	this.graphic = this.resolve(graphic);
	return data;
}
//============================================================================================
//			html$loadHtml_
//============================================================================================
function html$loadHtml_(tag,data,term,any)
{
	var i,temp,text,xdata;
	var xml,a,b;
	var match,imatch,status;
	var nt,value,ivalue;

	text = '';
	nt = term.length;
	term = term.toLowerCase();
	tag.end		= true;

	while (true)
	{
		if (data == '') break;
		xdata = data.toLowerCase();
		i = xdata.indexOf(term);
		if (i < 0) 
		{
			data = '';
			break;
		}

		temp = data.substr(i,nt);
		temp = temp.toLowerCase();
		if (temp != term) 
		{
			text += data.substr(0,i+1);
			data = data.substr(i+2);
			continue;
		}
		
		if (i == 0) 
		{
			data = data.substr(nt);
			break;
		}
			
		temp = data.substr(0,i);
		text += temp;
		data = data.substr(i+nt);	
		break;
	}	

	if (term == '</reporttable>') this.xdata		= text;
	text = text.replace(/\003/g,' ');

	if (arguments.length > 3)
	{
		this.data = text;
		return data;
	}

	if (term ==  '</pageheader>') this.pdf.html_pageHeader	= text;
	if (term ==  '</pagefooter>') this.pdf.html_pageFooter	= text;
	if (term ==      '</footer>') this.footer		= text;
	if (term ==      '</header>') this.header		= text;
	if (term ==        '</loop>') this.loop			= text;
	if (term == '</reportgroup>') this.reportgroup		= text;
	if (term ==      '</column>') this.column		= text;
	if (term ==       '</group>') this.group		= text;
	if (term ==       '</eval>')  this.data			= text;
	if (term ==       '</event>') this.event		= text;
	if (term ==    '</textarea>') this.data			= text;
	if (term ==      '</option>') this.data			= text;
	if (term ==      '</assign>') this.data			= text;
	if (term ==       '</store>') this.data			= text;
	if (term ==       '</title>') this.xdata		= text;
	if (term ==        '</math>')
	{
			xml = this.parseXml_(text);		// parse MathML
			text = this.mathML(xml);		// convert to HTML
			temp = text.replace(/</g,'&lt;');
			temp = temp.replace(/>/g,'&gt;');

			if (! this.trace_mathml) return text + data;

			temp = temp.replace(/\|/g,'|bar|');
			return text + '<br>' + '<br><font size=2 color=blue> ' + temp + '</font><br>' + data ;
	}

	if (term == '</resolve>') return data + this.resolve(text);
	if (term !=          '</if>') return data;
//-------------------------------- Conditional --------------------------------

	status = false;

	value = tag.keyword("value");
	ivalue = parseFloat(value);

	if (tag.exists('true') ) status = true;
	if (tag.exists('false') ) status = false;
	
	if (tag.exists('equal') || tag.exists('eq')  || tag.exists('equals') )
	{
		match = tag.keyword("equal") + tag.keyword("equals") + tag.keyword("eq");

		imatch = parseFloat(match);

		if (isNaN(imatch) || isNaN(ivalue))
			 status = (value == match);
		else status = (ivalue == imatch);
	}


	if (tag.exists('lessthan')) 
	{
		match = tag.keyword("lessthan");
		imatch = parseFloat(match);
		if (isNaN(imatch) || isNaN(ivalue))
			 status = (value < match);
		else status = (ivalue < imatch);
	}

	if (tag.exists('lt')) 
	{
		match = tag.keyword("lt");
		imatch = parseFloat(match);
		if (isNaN(imatch) || isNaN(ivalue))
			 status = (value < match);
		else status = (ivalue < imatch);
	}

	if (tag.exists('gt')) 
	{
		match = tag.keyword("lt");
		imatch = parseFloat(match);
		if (isNaN(imatch) || isNaN(ivalue))
			 status = (value > match);
		else status = (ivalue > imatch);
	}

	if (tag.exists('le')) 
	{
		match = tag.keyword("le");
		imatch = parseFloat(match);
		if (isNaN(imatch) || isNaN(ivalue))
			 status = (value <= match);
		else status = (ivalue <= imatch);
	}

	if (tag.exists('ge')) 
	{
		match = tag.keyword("ge");
		imatch = parseFloat(match);
		if (isNaN(imatch) || isNaN(ivalue))
			 status = (value >= match);
		else status = (ivalue >= imatch);
	}
		
	if (tag.exists('greaterthan')) 
	{
		match = tag.keyword("greaterthan");
		imatch = parseFloat(match);
		if (isNaN(imatch) || isNaN(ivalue))
			 status = (value > match);
		else status = (ivalue > imatch);
	}

	if (tag.exists('contains'))
	{
		status = false;
		match = tag.keyword("contains");
		if (value.indexOf(match) >= 0) status = true;
	}
		
	if (tag.exists('blank'))
	{
		status = (this.trim(value) == '');
	}

	if (tag.exists('zero'))
	{
		status = (this.trim(value) == '') || (this.r8(value) == 0);
	}

	if (tag.exists('not')) status = ! status;

	i = text.indexOf('<else>');
	a = text;
	b = '';
	if (i > 0) 
	{
		a = text.substr(0,i);
		b = text.substr(i+6);
	}
	
	if (  status && a != '') data = a + data;
	if (! status && b != '') data = b + data;
	return data;
}
//============================================================================================
//			html$parseTag_
//============================================================================================
function html$parseTag_(data)
{
	var i,name,tag, term;

	data = this.trim(data);
	data = data.replace(/\= /g,'=');

	term = false;
	if (data.substr(data.length-1,1) == '/')
	{
		term = true;
		data = data.substr(0,data.length-1);
	}
	
	i = data.indexOf(' ');
	if (i < 0) i = data.length;

	
	name = data.substr(0,i);
	name = this.trim(name.toUpperCase());

	data = this.trim(data.substr(i+1));
	tag = new htmltag$(this,name,data);

	if (term) tag.end=true;
	return tag;	
}
//============================================================================================
//				htmltag$
//============================================================================================
function htmltag$(html,name,parameters)
{
	var n;
	
	this.html		= html;

	this.name		= name;
	this.onStart		= null;
	this.onEnd		= null;
	this.parameters	= new html_dictionary$();
	this.evaluate		= htmltag$evaluate;
	this.toString		= htmltag$toString;
	this.start		= true;
	this.end		= false;

	this.value		= htmltag$value;
	this.rawValue		= htmltag$rawValue;
	this.exists		= htmltag$exists;
	this.bool		= htmltag$bool;
	this.date		= htmltag$date;
	this.changeValue	= htmltag$changeValue;

	this.i4		= htmltag$i4;
	this.r8		= htmltag$r8;
	this.keyword		= htmltag$keyword;
	
	if (parameters != '')
	{
		n = parameters.length;
		if (parameters.substr(n,1) == '/')
		{
			this.name = name.substr(1);
			this.onEnd = eval('onEnd_' + this.name);
			this.end  = true;
			parameters = parameters.substr(0,n-1);	
		}

		this.parameters.parse(parameters);
	}

	if (name.substr(0,1) == '/')
	{
		this.name  = name.substr(1);
		this.start = false;
		this.end   = true;
		this.onEnd = this.evaluate('onEnd_' + this.name);
		return;
	}

	this.onStart = this.evaluate('onStart_' + name);

}
//============================================================================================
//			htmltag$keyword
//===========================================================================================
function htmltag$keyword(name)
{
	var value;

	value = this.value(name);
	value = value.toLowerCase();
	return value;
	
}
//============================================================================================
//			htmltag$i4
//===========================================================================================
function htmltag$i4(name)
{
	var value;

	value = this.value(name);
	value = parseInt(value);

	if (isNaN(value)) return 0;
	return value;
}
//============================================================================================
//			htmltag$r8
//===========================================================================================
function htmltag$r8(name)
{
	var value;

	value = this.value(name);
	value = parseFloat(value);

	if (isNaN(value)) return 0;
	return value;
}
//============================================================================================
//			htmltag$bool
//===========================================================================================
function htmltag$bool(name)
{
	var value,i;

	i = this.parameters.findName(name);
	if (i < 0) return false;
	
	value = this.value(name);
	value = value.toLowerCase();
	if (value ==     '') return true;
	if (value == 'true') return true;
	if (value ==  'yes') return true;
	if (value ==   'on') return true;

	return false;

}
//============================================================================================
//			htmltag$value
//===========================================================================================
function htmltag$value(name,def)
{
	var i,value,save;


	i = this.parameters.findName(name);


	if (i >= 0)
	{
		value = this.parameters.values[i];
		save = this.html.keepUnresolved;
		this.html.keepUnresolved = false;
		value = this.html.resolve(value);
		this.html.keepUnresolved = save;
		return value;
	}

	if (typeof(def) == 'undefined') return '';
	return def; 
}
//============================================================================================
//			htmltag$date
//===========================================================================================
function htmltag$date(name,def)
{
	var i,value;

	value = this.value(name);
	value = new Date(value);

	if (isNaN(value)) return null;
	return value;
}
//============================================================================================
//			htmltag$rawValue
//===========================================================================================
function htmltag$rawValue(name,def)
{
	var i,value;

	i = this.parameters.findName(name);

	if (i >= 0)
	{
		value = this.parameters.values[i];
		return value;
	}

	if (typeof(def) == 'undefined') return '';
	return def; 
}
//============================================================================================
//			htmltag$changeValue
//===========================================================================================
function htmltag$changeValue(name,value)
{
	var i;

	i = this.parameters.findName(name);
	if (i < 0) return;

	this.parameters.values[i] = value;
}
//============================================================================================
//			htmltag$exists
//===========================================================================================
function htmltag$exists(name)
{
	var i;

	i = this.parameters.findName(name);
	if (i >= 0) return true;
	return false;
}
//============================================================================================
//			htmltag$toString
//===========================================================================================
function htmltag$toString()
{
	var text,i;
	
	text = 'Tag: ' + this.name;
	if (this.start) text += ' start ';
	if (this.end) text += ' end ';

	for (i=0; i < this.parameters.names.length; ++i)
	{
		text += '\r\n' + i + ') ' + this.parameters.names[i] + ' = ' + this.parameters.values[i];
	}
	
	return text;
}
//============================================================================================
//			htmltag$evaluate
//============================================================================================
function htmltag$evaluate(name)
{
	var a;

try
{
	a = eval(name);
	return a;
}
catch (e) { return null; }	

}
//============================================================================================
//				dictionary
//============================================================================================
function html_dictionary$()
{
	this.parse		= html_dictionary$parse;
	this.findName		= html_dictionary$findName;
	this.findValue		= html_dictionary$findValue;
	this.add		= html_dictionary$add;
	this.trim		= html_dictionary$trim;

	this.names = new Array();
	this.values = new Array();
}
//============================================================================================
//				trim
//============================================================================================
function html_dictionary$trim(text)
{
     text = '' + text;
     text = text.replace(/\003/g,' ');
     return text.replace(/^\s+|\s+$/g,'');
} 
//============================================================================================
//				html_dictionary$parse
//============================================================================================
function html_dictionary$parse(data)
{
	var i,inside,q,c,v,j,k;
	var name,value,hasValue;

	data = this.trim(data);
	if (data == '') return;
	inside = false;
	name = '';
	value = '';

	j = -1;
	k = -1;
	hasValue = false;

	data = data.replace('= ','=');


//---------------- get Name ------------------

	for (i=0; i < data.length; ++i)
	{
		c = data.charAt(i);
		if (c == '=')
		{
			j = i+1;
			hasValue = true;
			break;						
			
		} 

		v = data.charCodeAt(i);
		if (v <= 32) 
		{
			j = i+1;
			k = i + 1;
			break;						
		} 
		
		name += c;
	}

//---------------- get Value ------------------


	if (hasValue)
	{
		q = data.charAt(j);
		inside = false;
		if ((q == '"') || (q == "'"))
		{
			inside = true;
			j = j + 1;
		}

		value = '';
		for (i=j; i < data.length; ++i)
		{
			c = data.charAt(i);
			if (inside)
			{
				if (c == q)
				{
					k = i+1;
					break;
				}
			
				value += c;
				continue;
			}

			v = data.charCodeAt(i);
			if (v <= 32) 
			{
				k = i+1;
				break;						
			} 
			
			value += c;
		}
	}

		this.add(name,value);
		if (k < 0) return;
		
		this.parse(data.substr(k));
}
//============================================================================================
//				html_dictionary$add
//============================================================================================
function html_dictionary$add(name,value)
{
	var i;

	name = this.trim(name.toLowerCase());
	i = this.findName(name);
	if (i >= 0)
	{
		this.values[i] = value;
		return i;
	}

	if (value == '') value = 'true';

	i = this.names.length;	
	this.names[i] = name;
	this.values[i] = value;

	return i;
}
//============================================================================================
//				html_dictionary$findName
//============================================================================================
function html_dictionary$findName(name)
{
	var i;
	
	name = this.trim(name.toLowerCase());
	for (i=0; i < this.names.length; ++i)
	{
		if (this.names[i] == name) return i;		
	}
	return -1;
}
//============================================================================================
//				html_dictionary$findValue
//============================================================================================
function html_dictionary$findValue(value)
{
	var i,temp;
	
	value = this.trim(value.toLowerCase());
	for (i=0; i < this.names.length; ++i)
	{
		temp = this.trim(this.values[i]);
		temp = temp.toLowerCase();
		if (temp == value) return i;		
	}
	return -1;
}
//============================================================================================
//			html$resize
//============================================================================================
function html$resize(pageWidth, pageLength)
{
	var width,height;

	this.pageWidth		= pageWidth;
	this.pageLength		= pageLength;
			
	this.body.offsetHeight	= 0;
	this.body.offsetWidth	= 0;
	
	this.body.offsetLeft	= this.marginLeft;
	this.body.offsetTop	= this.marginTop;

	this.body.offsetWidth	= 0; 
	this.body.offsetHeight	= 0;

	this.body.clientWidth	= 0;
	this.body.clientHeight	= 0;

	this.body.setActive();

	width = Math.round(this.pageWidth);
	width = width - (this.marginLeft + this.marginRight);

	height = Math.round(this.pageLength);
	height = height - (this.marginTop + this.marginBottom);

	this.body.active.maxHeight = 0;
	this.body.active.maxWidth = width;
	this.body.active.width = width;
	this.body.active.remain = width;

	this.body.place();
}
//============================================================================================
//				htmlElement$placeChildren
//============================================================================================
function htmlElement$placeChildren()
{
	var t,next,child,remain;
	
	t = this;

//	this.offsetWidth = 0;
//	this.offsetHeight = 0;
	this.clientHeight = 0;
	this.clientWidth = 0;

//	this.html.style.fontSize	= this.style.fontSize;
//	this.html.style.textAlign	= this.style.textAlign;
//	this.html.style.color	= this.style.color;
//	this.html.style.letterSpacing	= this.style.letterSpacing;
//	this.html.style.wordSpacing	= this.style.wordSpacing;

	next = this.firstChild;

	while (next != null)
	{
		child = next;
		next = child.nextSibling;
		child.place();
	}

	remain = this.html.body.active.maxWidth - this.xpos();
	
//	if (remain < this.offsetWidth) this.offsetWidth = remain;
//	this.justify_();
}
//============================================================================================
//			htmlElement$updateSize_
//============================================================================================
function htmlElement$updateSize_(h,w)
{
	var t;
	
	t = this;
	
	if (this.tagName == 'DIVIDE') return;

//	if (h < this.style.height) h = this.style.height;
//	if (w < this.style.width) w = this.style.width;

	if ((h > this.offsetHeight) && (! this.fixedHeight)) this.offsetHeight = h;
	if ((w > this.offsetWidth)  && (! this.fixedWidth)) this.offsetWidth = w;

	if (this.tagName == 'TABLE') return;
	if (this.tagName == 'TD') return;
	if (this.tagName == 'TH') return;
	if (this.tagName == 'TR') return;
	if (this.tagName == 'NUMERATOR') return;
	if (this.tagName == 'BY') return;
	if (this.tagName == 'RADICAL') return;
	if (this.tagName == 'EXPONENT') return;

	h = this.offsetTop + this.offsetHeight;
	w = this.offsetLeft + this.offsetWidth;

	if (this.parentNode == null) return;
	if (this.tagName == 'BODY') return;

	this.parentNode.updateSize_(h,w);
}
//============================================================================================
//			htmlElement$justify_
//============================================================================================
function htmlElement$justify_()
{
	var align,valign;
	
	align = '';
	valign = '';
	this.jx = 0;
	this.jy = 0;

	switch (this.tagName)
	{
		case "DIV":
			align = this.style.textAlign;
			break;
		case "P":
			align = this.style.textAlign;
			break;

		case "H1": align = this.style.textAlign; break;
		case "H2": align = this.style.textAlign; break;
		case "H3": align = this.style.textAlign; break;
		case "H4": align = this.style.textAlign; break;
		case "H5": align = this.style.textAlign; break;
		case "H6": align = this.style.textAlign; break;

		case "SPAN":
			align = this.style.textAlign;
			break;
		case "LI":
			align = this.style.textAlign;
			break;
		default: return;
	}

	if (align != '') 
	{
		if (this.align == undefined) return;
		align = this.align;
	}
	
	if (align != '') 
	{
//		this.xjust = this.align_dx(align,this.active.maxWidth,this.offsetWidth);
	}
}
//============================================================================================
//			htmlElement$dy
//============================================================================================
function htmlElement$dy()
{
	switch (this.tagName)
	{
	case "P":	return 10;
	case "OL":	return 10;
	case "UL":  return 10;
	case "BR":  return 8;
	}

	return 2;
}
//============================================================================================
//			htmlElement$setActive
//============================================================================================
function htmlElement$setActive()
{


	this.offsetHeight		= 0;
	this.offsetWidth		= 0;

	this.active.xpos		= 0;
	this.active.ypos		= 0;
	this.active.xmax		= 0;
	this.active.marginLeft		= 0;
	this.active.marginRight		= 0;
	this.active.leftBottom		= 0;
	this.active.rightBottom		= 0;
	this.active.rowHeight		= 0;
	this.active.remain		= 0;
	this.active.width		= 0;

	this.active.colCount		= 0;
	this.active.rowCount		= 0;
	this.active.rows		= new Array();
	
	this.active.Lcount		= 0;
	this.active.Rcount		= 0;
}
//============================================================================================
//			htmlElement$setSize
//============================================================================================
function htmlElement$setSize()
{
	var p,t;

	var NODE_TEXT = 3;
	var NODE_TAG  = 1;
	var height,width,t,scl,ch;
	var e,px,py,fixedHeight,fixedWidth,xwidth,tagName;

	height = 0;
	width = 0;
	
	this.offsetTop = 0;
	this.offsetLeft = 0;

	this.setActive();

	t = this;
	tagName = this.tagName;

	fixedHeight = false;
	fixedWidth = false;

	if (this.fixed_width) width = this.iwidth;
	if (this.fixed_height) height = this.iheight;
	if (this.percent_width) width = Math.round(this.parentNode.active.maxWidth * (this.iwidth / 100));
	if (this.percent_height) height = Math.round(this.parentNode.offsetHeight * (this.iheight / 100));

	if (this.fixed_width) fixedWidth = true;
	if (this.fixed_height) fixedHeight = true;
	if (this.percent_width) fixedWidth = true;
	if (this.percent_height) fixedHeight = true;

	if (width < 0) width = 0;
	if (height < 0) height = 0;

	this.fixedHeight = fixedHeight;
	this.fixedWidth = fixedWidth;

	xwidth = this.html.body.active.maxWidth;
	if (this.parentNode != null)
	{
		xwidth = this.parentNode.active.maxWidth;
		this.active.maxWidth = xwidth - (this.paddingLeft + this.paddingRight);
	}
	else
	{
		this.active.maxWidth = xwidth - (this.paddingLeft + this.paddingRight);
	
	}

	switch (this.tagName)
	{			
	case "IFRAME":
				    if ((height > 0) || (width > 0)) 
				    { 
						this.offsetHeight = height;
						this.offsetWidth  = width;
					}

				this.setMargin();
				return;					

	case "BODY":
				this.setMargin();
				return;					

	case "FRAMESET":
				if (this.parentElement != 'FRAMESET') 
				{
					if (fixedWidth) 
					{
						 this.offsetWidth = width;
					}
					else this.offsetWidth = xwidth;
					
					if (fixedHeight) 
					{
						this.offsetHeight = height;
					}
					else this.offsetHeight = this.html.body.offsetHeight;
				}
				this.setMargin();
				return;					

	case "INPUT":
				this.offsetHeight = height + this.paddingTop + this.paddingBottom;
				this.offsetWidth  = width + this.paddingLeft + this.paddingRight;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					

	case "TEXTAREA":
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					

	case "SELECT":
				this.offsetHeight = height + 4;
				this.offsetWidth  = width;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					

	case "IMG":
				if (this.imageSize == null)
				{
					if (width <= 0) width = 28;
					if (height <= 0) height = 30;
					this.font.size = 6;
					this.html.setFontName('arial');
					width += this.wordWidth(this.alt) + 4;
				}

				if (this.imageSize != null)
				{
					if ((height > 0) || (width > 0))
					{ 
	
						if ((width > 0) && (height <= 0))
						{
							scl = this.imageSize.width / this.imageSize.height;
							height = Math.round(width / scl);		
						}
						else
						if ((width <= 0) && (height > 0))
						{
								scl = this.imageSize.width / this.imageSize.height;
								width = Math.round(height * scl);
						}
					}
					else
					{
						height = this.imageSize.height;
						width = this.imageSize.width;				
					}
				}	
	
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.maxWidth = width;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					

	case "GRAPHIC": 
				if ((this.style.position == 'relative' || this.style.position == 'absolute'))
				{
					this.offsetHeight = 0;
					this.offsetWidth  = 0;
				}
				else				
				if ((height > 0) || (width > 0))
					{
						this.offsetHeight = height;
						this.offsetWidth  = width;
					}
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					

	case "DIV":	
				this.fixedHeight = fixedHeight;
				this.fixedWidth = fixedWidth;
		
				this.offsetHeight = height;			
			
				if (width == 0) width = this.parentNode.active.maxWidth;
				this.offsetWidth = width;
				if (this.style.float == 'left') this.offsetWidth = 0;
				if (this.style.float == 'right') this.offsetWidth = 0;

				this.active.width = width;
				this.active.remain = width;
				this.active.maxWidth = width;

				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);

				return;					
	case "LABEL":	
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;

				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					

	case "P":	
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;

				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					

	case "A":	
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;
				this.setMargin();
//				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					


	case "DIVIDE":
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;

				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					

	case "CALENDAR":

//				if (width == 0) width = this.parentNode.offsetWidth;
//				if (height == 0) Math.round(this.parentNode.offsetHeight);
				
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;

				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					
	case "TIMELINE":
				if (width == 0) width = this.parentNode.active.maxWidth;
				if (height == 0) height = Math.round(this.parentNode.offsetHeight);
				
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					
	case "SCHEDULE":
				if (width == 0) width = this.parentNode.offsetWidth;
				if (height == 0) height = Math.round(this.parentNode.offsetHeight);
				
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					
	case "NUMERATOR":
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;
				this.active.remain = width;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					
	case "BY":
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;
				this.active.remain = width;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					

	case "SPAN":
				this.fixedHeight = fixedHeight;
				this.fixedWidth = fixedWidth;
			
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;
				this.active.remain = width;

				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;

	case "EVAL":
				this.fixedHeight = fixedHeight;
				this.fixedWidth = fixedWidth;
			
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;
				this.active.remain = width;

				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;

	case "SUB":
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;
				this.active.remain = width;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;
	case "SUP":
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;
				this.active.remain = width;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;

	case "ROOT":
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;
				this.active.remain = width;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;

	case "INTEGRAL":
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;
				this.active.remain = width;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;

	case "QUANTITY":
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;
				this.active.remain = width;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;

	case "COLUMN":
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;
				this.active.remain = width;
				this.active.maxWidth = width;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;

	case "MATRIX":
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;

	case "EXPONENT":
				width = 9999999;
				this.offsetHeight = height;
				this.offsetWidth  = 0;
				this.active.width = width;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;

	case "RADICAL":
				this.offsetHeight = height;
				this.offsetWidth  = 0;
				this.active.width = 0;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;

	
	case "TABLE":
//				this.fixedWidth = false;
				this.fixedHeight = false;

				this.offsetHeight = 0;
				this.offsetWidth  = width;
				this.active.width = width;
				this.active.maxWidth = width;
				this.active.remain = width;

				this.setMargin();
//				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;
			
	  case "TR": 
				this.offsetHeight = height;
				this.fixedWidth = false;
				break;
	  case "TD","TH": 
				this.offsetHeight = height;
				this.active.remain = width;
				break;					

//				this.fixedWidth = false;
//			this.fixedHeight = false;
				break;
			
	case "FONT":
				this.offsetHeight = 0;
				this.offsetWidth  = 0;
				this.active.maxWidth = width;
				this.active.width = width;
				this.setMargin();
				return;					
	case "CENTER":
				this.active.maxWidth = this.parentNode.active.maxWidth;
				this.offsetHeight = 0;
				this.offsetWidth  = this.active.maxWidth;
				this.active.width = width;
				this.setMargin();
				return;					


	case "HR":   
				if (width == 0) width = this.parentNode.active.maxWidth;
				this.offsetHeight = 0;   // 4
				this.offsetWidth  = width;
				this.active.width = width;
				this.active.maxWidth = width;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					

	case "BLOCKQUOTE":
				width = this.parentNode.active.maxWidth - 20;
				this.offsetHeight = 0;
				this.offsetWidth  = width;
				this.active.width = width;
				this.active.maxWidth = width;
				this.setMargin();
				return;					

	case "H1":
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					

	case "H2":
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					

	case "H3":
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					

	case "H4":
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					

	case "H5":
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					

	case "H6":
				this.offsetHeight = height;
				this.offsetWidth  = width;
				this.active.width = width;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;	

	case "UL":
				this.offsetHeight = 0;
				this.offsetWidth  = 0;
				this.active.width = width;
				this.active.maxWidth = xwidth - 20;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					
	case "OL":
				this.offsetHeight = 0;
				this.offsetWidth  = 0;
				this.active.width = width;
				this.active.maxWidth = xwidth - 20;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					
	case "LI":
				this.offsetHeight = 0;
				this.offsetWidth  = width;
				this.active.width = width;
				this.active.maxWidth -= 20;
				this.setMargin();
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					

	case "BR":
				this.offsetHeight = this.parentNode.font.size * 1.2;
				this.offsetWidth  = 0;
				this.updateSize_(this.offsetHeight,this.offsetWidth);
				return;					
	}

	this.offsetWidth  = 0;
	this.active.width = width;
	this.active.remain = width;
	this.setMargin();
//				this.updateSize_(this.offsetHeight,this.offsetWidth);

	return;
}
//============================================================================================
//			htmlElement$setMargin
//============================================================================================
function htmlElement$setMargin()
{	
	var e,b;
	
	e = this;
	if (! this.style) return;

	b = this.getBorder_();

	this.marginLeft   = this.html.getSize(this.style.marginLeft,this);
	this.marginRight  = this.html.getSize(this.style.marginRight,this);
	this.marginTop    = this.html.getSize(this.style.marginTop,this);
	this.marginBottom = this.html.getSize(this.style.marginBottom,this);

//	this.marginLeft	= (this.marginLeft / this.html.bpi) * 72;
//	this.marginRight	= (this.marginRight / this.html.bpi) * 72;
//	this.marginTop		= (this.marginTop / this.html.bpi) * 72;
//	this.marginBottom	= (this.marginBottom / this.html.bpi) * 72;
	
	this.paddingLeft   = this.html.getSize(this.style.paddingLeft,this);
	this.paddingRight  = this.html.getSize(this.style.paddingRight,this);
	this.paddingTop    = this.html.getSize(this.style.paddingTop,this);
	this.paddingBottom = this.html.getSize(this.style.paddingBottom,this);

//	this.paddingLeft	= (this.paddingLeft / this.html.bpi) * 72;
//	this.paddingRight	= (this.paddingRight / this.html.bpi) * 72;
//	this.paddingTop	= (this.paddingTop / this.html.bpi) * 72;
//	this.paddingBottom	= (this.paddingBottom / this.html.bpi) * 72;
	
	this.borderLeft	= b.sizeLeft;
	this.borderRight	= b.sizeRight;
	this.borderTop		= b.sizeTop;
	this.borderBottom	= b.sizeBottom;

//	this.borderLeft	= (this.borderLeft / this.html.bpi) * 72;
//	this.borderRight	= (this.borderRight / this.html.bpi) * 72;
//	this.borderTop		= (this.borderTop / this.html.bpi) * 72;
//	this.borderBottom	= (this.borderBottom / this.html.bpi) * 72;
	
	this.active.maxWidth -= this.marginRight + this.marginLeft + this.paddingLeft + this.paddingRight + this.borderLeft + this.borderRight;

	this.offsetWidth  += this.borderLeft + this.borderRight;
	this.offsetHeight += this.borderTop + this.borderBottom;	

	if (this.active.width > this.active.maxWidth) this.active.width = this.active.maxWidth;
	this.active.remain  = this.active.maxWidth;

	this.active.ypos = 0;
	this.active.xpos = 0;
}
//============================================================================================
//			htmlElement$place
//============================================================================================
function htmlElement$place()
{
	var e,c,p;
	var tagName,text;
	
	e = this;

	if (e.style)
	if (e.style.display == 'none')
	{
		e.offsetHeight = 0;
		e.offsetWidth = 0;
		return;
	}

	tagName = e.tagName;

	this.setSize();

	switch (this.tagName)
	{	
		case "PAGEBREAK": 
					  this.html.body.placeDone_();
					  this.html.body.setActive();
					  return;

		case "#TEXT":
					text = this.text;
					  this.place_text();
					  return;
					  
		case "IMG":   this.place_IMG(); 
					  return;

		case "P":	  
					  this.place_P();
					  this.placeChildren();
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					
					  this.placeDone_();	
					  return;

		case "EVAL":	
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  this.placeDone_();	
					  return;

		case "DIV":
					  this.placeChildren();
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  this.placeDone_();	
					  return;

		case "LABEL":
					  this.placeChildren();
					  
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  this.placeDone_();	
					  return;
					  
	case "GRAPHIC":   this.place_GRAPHIC(); 
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  this.placeDone_();
					  return;

	  case "GROUP":   this.place_GROUP(); 
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  this.placeDone_();
					  return;

		case "BR":	  this.place_BR(); 
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  this.placeDone_();
					  return;

	case "REPORT":
					  this.parentNode.newRow_();
					  break; 

		case "HR":    this.place_HR();
					  return;

	  case "INPUT":   this.place_INPUT(); 
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  this.placeDone_();
					  return;

     case "SELECT":   this.place_SELECT(); 
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  this.placeDone_();
					  return;

   case "TEXTAREA":   this.place_TEXTAREA(); 
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  this.placeDone_();
					  return;

		case "TR":	  return;

		case "TD":	  return;
		case "TH":    return;

	case "FRAME":	  this.place_FRAME();
					  return;

	case "IFRAME":	  this.place_IFRAME();	
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  return;

	case "TABLE":
					  this.initTable();
					  this.place_TABLE();	
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  return;

	case "DIVIDE":  this.placeChildren();
					  this.place_DIVIDE();
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  this.placeDone_();
					  return;

	case "COLUMN":  this.placeChildren();
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  this.placeDone_();
					  return;

	case "RAISE":	  this.placeChildren();
					  this.place_RAISE();
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  this.placeDone_();
					  return;

	case "FRAMESET":  this.place_FRAMESET();
					  return;

	case "CALENDAR":
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  return;

	case "TIMELINE":  this.placeChildren();
					  this.place_TIMELINE();
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  this.placeDone_();
					  return;

	case "SCHEDULE":  this.placeChildren();
					  this.place_SCHEDULE();
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  this.placeDone_();
					  return;

	case "ROOT":  this.placeChildren();
					  this.place_ROOT();
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  this.placeDone_();
					  return;

	case "QUANTITY":  this.placeChildren();
					  this.place_QUANTITY();
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  this.placeDone_();
					  return;

	case "MATRIX": this.placeChildren();
					  this.place_MATRIX();
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  this.placeDone_();
					  return;

	case "INTEGRAL":  this.placeChildren();
					  this.place_INTEGRAL();
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  this.placeDone_();
					  return;

	case "SUMMATION":  this.placeChildren();
					  this.place_SUMMATION();
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  this.placeDone_();
					  return;

		case "LI":   this.placeChildren();
					  this.place_LI();
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  this.placeDone_();
					  return;

		case "SUB":   this.placeChildren();
					  this.place_SUB();
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  this.placeDone_();
					  return;

		case "SUP":   this.placeChildren();
					  this.place_SUP();
					  if (this.parentNode != null) this.parentNode.positionChild_(this);
					  this.placeDone_();
					  return;

	case "BLOCKQUOTE":    this.place_BLOCKQUOTE(); 
					  break;
		case "OL":    this.place_UL(); 
					  break;
		case "UL":    this.place_UL(); 
					  break;

		case "H1":    this.font.size = 16; 
					  break;
		case "H2":    this.font.size = 14; 
					  break;
		case "H3":    this.font.size = 12; 
					  break;
		case "H4":    this.font.size = 12; 
					  break;
		case "H5":    this.font.size = 11; 
					  break;
		case "H6":    this.font.size = 24; 
					  break;
	}

	this.placeChildren();
	if (! this.isNode()) return;
	if (this.parentNode != null) this.parentNode.positionChild_(this);
	this.placeDone_();	
}
//============================================================================================
//			htmlElement$place_SUB
//============================================================================================
function htmlElement$place_SUB()
{
	var e,n,d,p,ch,dy;

	p = this.parentNode;
	e = this;
	
	ch = this.charHeight();
	dy = ch - Math.round(ch * 0.25);

	e.baseY = (ch - dy);
	e.offsetHeight = this.active.rowHeight + dy;
	e.offsetWidth  = this.active.xmax;
}
//============================================================================================
//			htmlElement$place_SUP
//============================================================================================
function htmlElement$place_SUP()
{
	var e,n,d,p,ch,dy;

	p = this.parentNode;
	e = this;

	ch = this.charHeight();
	dy = ch - Math.round(ch * 0.3);

	e.baseY			= (ch - dy);
	e.offsetHeight  = this.active.rowHeight + (ch - dy);
	e.offsetWidth   = this.active.xmax;
}
//============================================================================================
//		htmlElement$place_CALENDAR
//============================================================================================
function htmlElement$place_CALENDAR()
{
}
//============================================================================================
//		htmlElement$place_TIMELINE
//============================================================================================
function htmlElement$place_TIMELINE()
{
}
//============================================================================================
//		htmlElement$place_P
//============================================================================================
function htmlElement$place_P()
{
	var p;

	p = this.parentNode;
	if (p.active.colCount > 0)
	{
		p.newRow_();
	}

	if (p.active.rows.length > 0) this.marginTop = this.font.size;
		
//	if ((this.style.margin == '') && (this.style.marginBottom == '')) this.marginBottom = this.font.size;
//	if ((this.style.margin == '') && (this.style.marginTop == '')) this.marginTop = this.font.size;
}
//============================================================================================
//		htmlElement$place_SCHEDULE
//============================================================================================
function htmlElement$place_SCHEDULE()
{
	var e,n,d,p;

	p = this.parentNode;
	e = this;
}
//============================================================================================
//		htmlElement$place_FRAME
//============================================================================================
function htmlElement$place_FRAME()
{
	var e;
	
	e = this;

	if (e.frameBorder > 0) 
	{
		e.style.borderLeft		= '1 solid black';
		e.style.borderRight	= '1 solid black';
		e.style.borderTop		= '1 solid black';
		e.style.borderBottom	= '1 solid black';
	}

	this.setMargin();
}
//============================================================================================
//		htmlElement$place_IFRAME
//============================================================================================
function htmlElement$place_IFRAME()
{
}
//============================================================================================
//			html$place_FRAMESET
//============================================================================================
function htmlElement$place_FRAMESET()
{
	var list;
	var i,j,obj,width,used,usedCount;
	var size,list,n,scale;
	var height, xpos,ypos,def;
	var e,frame;
	var text,value,remain;

	e = this;

	width = this.parentNode.offsetWidth;
	height = this.parentNode.offsetHeight;
	if (height == 0) height = this.html.body.active.maxHeight;
	if (height < 100) height = 10.5 * 72;

	if (this.offsetWidth == 0) this.offsetWidth = width;
	if (this.offsetHeight == 0) this.offsetHeight = height;

	this.offsetWidth = Math.round(this.offsetWidth);
	this.offsetHeight = Math.round(this.offsetHeight);
	
	this.values = new Array();		

	used = 0;
	if (this.rowText != '')		// by row
	{
		this.byColumn = false;
		list = this.rowText.split(',');
		size = this.offsetHeight;
	}
	else						// by column
	{
		this.byColumn = true;
		list = this.colText.split(',');
		size = this.offsetWidth;
	}	

//----------------------------------------

	used = 0;
	usedCount = 0;
	for (i=0; i < this.frames.length; ++i)
	{
		obj = new Object();
		obj.value = 0;
		obj.fixed = false;
		this.values[i] = obj;

		if (i >= list.length) continue;
		text = list[i];
		if (text == '') continue;
		if (text == '*') continue;
		value = parseInt(text);
		if (isNaN(value)) continue;

		obj.fixed = true;
		if (text.indexOf('%') >= 0) 
			obj.value = Math.floor(height * (value / 100));
		else	obj.value = value;
		used += obj.height;
	}
		
	remain = size - used;
	if (remain < 0)
	{
		scale = size / (-used);
		for (i=0; i < this.values.length; ++i)
		{
			obj = this.values[i];
			obj.value = Math.floor(obj.value * scale);
		}
		used = size;
	}

	n = this.values.length - usedCount;
	if (n > 0)
	{
		def = Math.floor(remain / n);
		for (i=0; i < this.values.length; ++i)
		{
			obj = this.values[i];
			if (obj.fixed) continue;
			obj.value = def;
		}
	}		

//------------------------ set columns ---------------------------

	if (this.byColumn)
	{
		xpos = 0;
		for (i=0; i < this.frames.length; ++i)
		{
			frame = this.frames[i];
			obj = this.values[i];
			frame.offsetHeight = this.offsetHeight;
			frame.offsetWidth = obj.value;
			frame.offsetTop = 0;
			frame.offsetLeft = xpos;
			xpos = frame.offsetLeft + frame.offsetWidth;
			if (frame.tagName == 'FRAME') frame.place_FRAME();
			if (frame.tagName == 'FRAMESET') frame.place_FRAMESET();
		}
	}
	else
	{
		ypos = 0;
		for (i=0; i < this.frames.length; ++i)
		{
			frame = this.frames[i];
			obj = this.values[i];
			frame.offsetHeight = obj.value;
			frame.offsetWidth = this.offsetWidth;
			frame.offsetTop = ypos;
			frame.offsetLeft = 0;
			ypos = frame.offsetTop + frame.offsetHeight;
			if (frame.tagName == 'FRAME') frame.place_FRAME();
			if (frame.tagName == 'FRAMESET') frame.place_FRAMESET();
		}	
	}
}
//============================================================================================
//		htmlElement$place_DIVIDE
//============================================================================================
function htmlElement$place_DIVIDE()
{
	var e,n,d,p,ch;
	var maxHeight,maxWidth;
	var nw,nh;
	var dw,dh;
	var height,dy,dx;

	p = this.parentNode;
	e = this;
	n = e.numerator;
	d = e.by;

	if (e.numerator == null && e.by == null) return;
	
	nw = 0;
	nh = 0;
	dw = 0;
	dh = 0;

	if (e.numerator   != null) nw = n.offsetWidth;
	if (e.numerator   != null) nh = n.offsetHeight;

	if (e.by != null) dw = e.by.offsetWidth;
	if (e.by != null) dh = e.by.offsetHeight;

	maxWidth = Math.max(nw,dw);
	maxHeight = Math.max(nh,dh);

	height = nh + dh + 4 + e.lineWeight;
	dy = nh + 2;
	ch = this.charHeight();

	e.offsetHeight = height;
	e.offsetWidth = maxWidth;

	e.topYpos = Math.round(ch * 0.75);
	e.botYpos = height - ch;
	e.baseYpos = nh + (ch * 0.5);
	e.lineYpos = nh + 2 + e.lineWeight;
	
	if (e.numerator != null)
	{
		dx = Math.round(maxWidth - nw) / 2;
		e.numerator.offsetLeft = dx;
		e.numerator.offsetTop = 0;
		e.numerator.offsetHeight = nh;
	}

	if (e.by != null)
	{
		dx = Math.round(maxWidth - dw) / 2;
		e.by.offsetLeft = dx;
		e.by.offsetTop = dy + 2 + e.lineWeight;
		e.by.offsetHeight = dh;
	}
}
//============================================================================================
//		htmlElement$place_RAISE
//============================================================================================
function htmlElement$place_RAISE()
{
	var e,n,d,p;
	var child,ch;
	var dy,offset,basey;

	p = this.parentNode;
	e = this;
	n = this.numerator;

	this.offsetWidth = n.offsetWidth + this.paddingLeft;
	this.offsetHeight = n.offsetHeight;


	child = this.firstChild;
	offset = 0;

//--------------------- raise --------------------
	
	while (child != null)
	{
		if (child.tagName == 'POWER')
		{
			dy = child.offsetHeight;
			offset += dy;
		
			child.offsetLeft = this.offsetWidth;
			child.offsetTop = 0;
			this.offsetWidth = child.offsetLeft + child.offsetWidth;
		}
	
		child = child.nextSibling;
	}	

//--------------------- adjust all --------------------

	child = this.firstChild;
	this.offsetHeight += offset;
	this.numerator.offsetTop = offset;
	
	this.basey = this.offsetHeight;
	
}
//============================================================================================
//			htmlElement$place_ROOT
//============================================================================================
function htmlElement$place_ROOT()
{
	var e,n,d,p,pnt,size;
	var maxHeight,maxWidth;
	var nw,nh;
	var dw,dh,ch,ew,eh;
	var width,height,dy,dx;
	var xoff_exp,yoff_exp;
	var xoff_num,yoff_num;
	var exph,expw,dye;
	var numh,numw,h;
	var exp_height,rad_height;
	var exp,num;
	var dx1,dx2,dx3,dx4,dx5;
	var dy1,dy2,dy3,dy4,i;
	
	p = this.parentNode;
	e = this;

	exp = e.exp;
	num = e.radical;
	
	expw = 0;
	exph = 0;

	if (e.exp   != null) 
	{	
		expw = e.exp.active.xmax + e.exp.paddingLeft + e.exp.paddingRight;
		exph = e.exp.active.rowHeight + e.exp.paddingTop + e.exp.paddingBottom;
	}

	numw = e.radical.offsetWidth + 10;
	numh = e.radical.offsetHeight;

	ch = this.charHeight();
	if (e.size > 0) ch = size;

	dy = ch * 0.5;
	exp_height = dy + exph;
	xoff_exp = 0;

	xoff_num = ch;
	if (expw > ch * 0.75) xoff_num = expw + ch * 0.50;

	dy = e.lineWeight;
	
	yoff_num = dy;
	height = numh + dy;
	rad_height = height;

	yoff_exp = rad_height - exp_height;
	if (yoff_exp < 0) yoff_num = exp_height - rad_height;
	if (yoff_exp < 0) height = exp_height;

	yoff_exp = height - exp_height;
	yoff_num = height - numh;

	width = numw + xoff_num;

	e.offsetHeight = height;
	e.offsetWidth  = width;

//------------------------- Position --------------------------

	e.topYpos = Math.round(ch * 0.75);
	e.botYpos = height - ch;
	e.baseYpos = nh + 2 + (ch / 2);

	e.radical.offsetLeft = xoff_num;
	e.radical.offsetTop = yoff_num;
	e.radical.offsetHeight = numh;

	if (e.exp != null)
	{
		e.exp.offsetLeft = xoff_exp;
		e.exp.offsetTop = yoff_exp;
		e.exp.offsetHeight = exph;
	}
	
//----------------- Radical -----------------------------------------------

	e.radicalXOffset = width - (numw + ch);
	e.radicalYOffset = yoff_num + numh;
	e.radicalHeight  = rad_height; 
	e.radicalWidth   = numw;
	e.radicalSize	 = ch;
	
//	dx = e.radicalXOffset;
//	dy = e.radicalYOffset;

	dx = 2;
	dy = e.lineWeight;

	dy1 = Math.round(ch * 0.2) + 2;
	dy2 = Math.round(ch * 0.5) + 2;
	dy3 = 2;
	dy4 = numh + 2;

	dx1 = 2;
	dx2 = 2 + (ch * 0.1);
	dx3 = 2 + (ch * 0.3);
	dx4 = 2 + (ch * 0.6);
	dx5 = xoff_num + numw + 2;

	e.line			= new Array();
	pnt = new Object();
	pnt.x			= dx1;
	pnt.y			= numh - dy1;
	e.line[0] = pnt;

	pnt = new Object();
	pnt.x			= dx2;
	pnt.y			= numh - dy2;
	e.line[1] = pnt;
	
	pnt = new Object();
	pnt.x			= dx3;
	pnt.y			= numh - dy3;
	e.line[2] = pnt;
	
	pnt = new Object();
	pnt.x			= dx4;
	pnt.y			= numh - dy4;
	e.line[3] = pnt;
	
	pnt = new Object();
	pnt.x			= dx5;
	pnt.y			= numh - dy4;
	e.line[4] = pnt;
	
	for (i=0; i < e.line.length; ++i)
	{
		pnt = e.line[i];
		pnt.x = pnt.x / 110 * 72;
		pnt.y = pnt.y / 110 * 72;
	}
	
}
//============================================================================================
//			htmlElement$place_QUANTITY
//============================================================================================
function htmlElement$place_QUANTITY()
{
	var e,n,d,p,pnt;
	var child,ch,height;
	var padLeft,padRight;

	e = this;

	e.char = new Object;
	e.char.left = new Object();
	e.char.right = new Object();

	switch (e.type)
	{
	case "bracket":
			e.char.left.top	= parseInt('351',8);
			e.char.left.center	= parseInt('352',8);
			e.char.left.bottom	= parseInt('353',8);
			e.char.left.filler	= parseInt('352',8);

			e.char.right.top	= parseInt('371',8);
			e.char.right.center	= parseInt('372',8);
			e.char.right.bottom	= parseInt('373',8);
			e.char.right.filler	= parseInt('372',8);
			
			e.char.left.text	= String.fromCharCode(parseInt('133',8));
			e.char.right.text	= String.fromCharCode(parseInt('135',8));
			break;

	case "absolute":
			e.char.left.top	= parseInt('275',8);
			e.char.left.center	= parseInt('275',8);
			e.char.left.bottom	= parseInt('275',8);
			e.char.left.filler	= parseInt('275',8);

			e.char.right.top	= parseInt('275',8);
			e.char.right.center	= parseInt('275',8);
			e.char.right.bottom	= parseInt('275',8);
			e.char.right.filler	= parseInt('275',8);
			
			e.char.left.text	= String.fromCharCode(parseInt('364',8));
			e.char.right.text	= String.fromCharCode(parseInt('364',8));
			break;

	case "set":
			e.char.left.top	= parseInt('354',8);
			e.char.left.center	= parseInt('355',8);
			e.char.left.bottom	= parseInt('356',8);
			e.char.left.filler	= parseInt('357',8);

			e.char.right.top	= parseInt('374',8);
			e.char.right.center	= parseInt('375',8);
			e.char.right.bottom	= parseInt('376',8);
			e.char.right.filler	= parseInt('357',8);

			e.char.left.text	= String.fromCharCode(parseInt('173',8));
			e.char.right.text	= String.fromCharCode(parseInt('175',8));

			break;

	case "quantity":
	default:
			e.char.left.top	= parseInt('354',8);
			e.char.left.center	= parseInt('357',8);
			e.char.left.bottom	= parseInt('356',8);
			e.char.left.filler	= parseInt('357',8);

			e.char.right.top	= parseInt('374',8);
			e.char.right.center	= parseInt('357',8);
			e.char.right.bottom	= parseInt('376',8);
			e.char.right.filler	= parseInt('357',8);

			e.char.left.text	= String.fromCharCode(parseInt('50',8));
			e.char.right.text	= String.fromCharCode(parseInt('51',8));

			break;
	}			

	this.font.fontName = 'symbol';
	
	if (e.firstChild == null) return;

	child = e.firstChild;
	ch = this.font.size;
	height = child.offsetHeight;

	if (height < ch) height = ch;

	padLeft = height * 0.3;
	padRight = height * 0.3;
	if (e.char.right == null) padRight = 0;

	this.offsetRight = padLeft + child.offsetWidth;

	this.offsetWidth = padLeft + child.offsetWidth + padRight;
	this.offsetHeight = height;

	child.offsetLeft = padLeft;
}
//============================================================================================
//			htmlElement$loadCell
//============================================================================================
function htmlElement$loadCell(ele)
{
	var i,j,r,c,cell;
	var heigth,width,value;

	for (i=0; i < ele.rows.length; ++i)
	{
		r = ele.rows[i] - 1;
		for (j=0; j < ele.cols.length; ++j)
		{
			c = ele.cols[j] - 1;
			if ((ele.diagonal) && (r != c)) continue;
			
			cell = this.grid.rows[r].cells[c];
			if ((cell.type != 'empty') && (! this.changeValue)) continue;
			
			if (ele.values != null)
			{
				if (j < ele.values.length)
					 value = this.html.trim(ele.values[j]);
				else value = '';
			
				if (value == '') continue;
	
				cell.type  = 'value';
				cell.value = value;

				cell.height = this.charHeight();
				cell.width = this.wordWidth(cell.value);

				if (! this.clip)
				{			
					if (cell.width > this.grid.cellWidth) this.grid.cellWidth = cell.width;
					if (cell.height > this.grid.cellHeight) this.grid.cellHeight = cell.height;
				}
			}
			else
			{
				cell.type = 'element';
				cell.element = ele;
				if (! this.clip)
				{
					if (ele.offsetWidth > this.grid.cellWidth) this.grid.cellWidth = ele.offsetWidth;
					if (ele.offsetHeight > this.grid.cellHeight) this.grid.cellHeight = ele.offsetHeight;
				}
			}
		}
	}
}
//============================================================================================
//			htmlElement$place_MATRIX
//============================================================================================
function htmlElement$place_MATRIX()
{
	var e,p;
	var r,c,ch;
	var i,j,etype,row,cell;
	var height,width,value;
	var padLeft,padRight;
	
	e = this;
	
	this.grid = new Object();
	this.grid.rows = new Array();
	this.grid.cellHeight = this.cellHeight;
	this.grid.cellWidth = this.cellWidth;

	if (this.style.paddingLeft	== '') this.paddingLeft  = 2;
	if (this.style.paddingRight	== '') this.paddingRight = 2;
	if (this.style.paddingTop	== '') this.paddingTop  = 2;
	if (this.style.paddingBottom	== '') this.paddingBottom = 2;
	
//-------------------- initialize Grid --------------

	for (r=0; r < this.rowCount; ++r)
	{
		row = new Object();
		this.grid.rows[r] = row;

		row.cells = new Array();
		
		for (c=0; c < this.colCount; ++c)
		{
			cell = new Object();
			row.cells[c] = cell;
			cell.type = 'empty';
		}
	}

//--------------------------------------------------

	if (this.identity)
	{
		height = this.charHeight();
		width = this.wordWidth('1');
		if (! this.clip)
		{
			if (height > this.grid.cellHeight) this.grid.cellHeight = height;
			if (width > this.grid.gridWidth) this.grid.cellWidth = width;
		}

		for (i=0; i < this.grid.rows.length; ++i)
		{
			row = this.grid.rows[i];
			for (j=0; j < row.cells.length; ++j)
			{
				if (j != i) continue;
				cell = row.cells[i];
				cell.type = 'value';
				cell.value = '1';
				cell.width = width;
				cell.height = height;
			}
		}
	}

//---------------------- load cells -------------

	for (i=0; i < this.cells.length; ++i)
	{
		cell = this.cells[i];
		this.loadCell(cell);
	}

//---------------------- fill empty cells ------------------

	if ((this.emptyCell != null) || (this.emptyValue != ''))
	{
		if (this.emptyCell == null)
		{
			etype  = 'value';
			value = this.emptyValue;
			height = this.charHeight();
			width  = this.wordWidth(value);
		}
		else
		{
			etype  = 'element';
			value  = this.emptyCell;
			height = value.offsetHeight;
			width  = value.offsetWidth;
		}

		if (! this.clip)
		{
			if (height > this.grid.cellHeight) this.grid.cellHeight = height;
			if (width > this.grid.cellWidth) this.grid.cellWidth = width;
		}

		for (i=0; i < this.grid.rows.length; ++i)
		{
			row = this.grid.rows[i];
			for (j=0; j < row.cells.length; ++j)
			{
				cell = row.cells[j];
				if (cell.type == 'empty') 
				{
					cell.type  = etype;
					cell.value = value;
					cell.height = height;
					cell.width = width;
				}
			}
		}
	}

//-------------------- size grid ------------------

	this.place_QUANTITY();		// set matrix symbols ("Absolute" as default)

	ch = this.charHeight();
	padLeft = ch * 0.6;
	padRight = ch * 0.6;
	if (e.char.right == null) padRight = 0;

	this.offsetHeight = (this.grid.cellHeight * this.rowCount) + (this.cellspacing * (this.rowCount-1)) + this.paddingTop + this.paddingBottom;
	this.offsetWidth  = (this.grid.cellWidth * this.colCount) + (this.cellspacing * (this.colCount-1)) + padLeft + padRight;

	this.valign = 'center';
	this.baseY = this.offsetHeight / 2;

	this.offsetRight = this.offsetWidth - padRight;
	this.paddingLeft = padLeft;
	this.paddingRight = padRight;

}
//============================================================================================
//			htmlElement$place_INTEGRAL
//============================================================================================
function htmlElement$place_INTEGRAL()
{
	var e,n,d,p,pnt;
	var maxHeight,maxWidth;
	var nw,nh,w;
	var dw,dh,ch,ew,eh;
	var width,height,dy,dx;
	var xoff_exp,yoff_exp;
	var xoff_num,yoff_num;
	var exph,expw,dye;
	var numh,numw,child;
	var exp_height,rad_height;
	var minw,minh,maxw,maxh,padSymbol,padLeft,padRight;
	
	p = this.parentNode;
	e = this;


	minw = 0;
	minh = 0;
	maxw = 0;
	maxh = 0;

	if (e.min   != null) 
	{	
		minw = e.min.active.xmax + e.min.paddingLeft + e.min.paddingRight;
		minh = e.min.active.rowHeight + e.min.paddingTop + e.min.paddingBottom;
	}

	if (e.max != null)
	{
		maxw = e.max.active.xmax + e.max.paddingLeft + e.max.paddingRight;
		maxh = e.max.active.rowHeight + e.max.paddingTop + e.max.paddingBottom;
	}

	ch = this.charHeight();
	
	e.char = new Object;
	e.char.left = new Object();

	e.char.left.top	= parseInt('363',8);
	e.char.left.center	= parseInt('364',8);
	e.char.left.bottom	= parseInt('365',8);
	e.char.left.filler	= parseInt('364',8);

	e.char.left.text	= String.fromCharCode(parseInt('362',8));
		
	e.char.right = null;

	this.font.fontName = 'symbol';
	
	if (e.firstChild == null) return;

//----------------- node (content) ----------------

	child = e.firstChild;
	ch = this.font.size;
	height = child.offsetHeight + minh + maxh;

	if (height < (ch * 2)) height = ch * 2;

	dy = Math.round((height - child.offsetHeight) / 2);

	padSymbol = height * 0.3;
	padLeft = (padSymbol + Math.max(minw,maxw)) * 1.5 ;
	padRight = 0;

	this.offsetRight = padLeft + child.offsetWidth;

	this.offsetWidth = padLeft + child.offsetWidth + padRight;
	this.offsetHeight = height;

	child.offsetLeft = padLeft;
	child.offsetTop  = dy;

//-------------------- min ---------------------------

	if (e.min != null)
	{
		e.min.offsetLeft = padSymbol;
		e.min.offsetTop = height - minh;
	}		

	if (e.max != null)
	{
		e.max.offsetLeft = padSymbol;
		e.max.offsetTop = 0;
	}		
}
//============================================================================================
//			htmlElement$place_SUMMATION
//============================================================================================
function htmlElement$place_SUMMATION()
{
	var e,n,d,p,pnt;
	var maxHeight,maxWidth;
	var nw,nh;
	var dw,dh,ch,ew,eh;
	var width,height,dy,dx;
	var xoff_exp,yoff_exp;
	var xoff_num,yoff_num;
	var exph,expw,dye;
	var numh,numw;
	var exp_height,rad_height;
	var rangew,rangwh;
	var rangeh,child,padSymbol,padLeft,padRight;
	
	p = this.parentNode;
	e = this;

	rangew = 0;
	rangeh = 0;

	if (e.range   != null) 
	{	
		rangew = e.range.active.xmax + e.range.paddingLeft + e.range.paddingRight;
		rangwh = e.range.active.rowHeight + e.range.paddingTop + e.range.paddingBottom;
	}

	ch = this.charHeight();

	e.text = String.fromCharCode(parseInt('345',8));
	this.font.fontName = 'symbol';
	
	if (e.firstChild == null) return;

//----------------- node (content) ----------------

	child = e.firstChild;
	ch = this.font.size;
	height = child.offsetHeight;

	if (height < ch) height = ch;

	dy = Math.round((height - child.offsetHeight) / 2);

	padSymbol = height * 1.1;
	padLeft = Math.max(padSymbol,rangew)+4;
	padRight = 0;

	this.offsetRight = padLeft + child.offsetWidth;

	this.offsetWidth = padLeft + child.offsetWidth + padRight;
	this.offsetHeight = height + rangeh;
	this.font.size    = height;

	child.offsetLeft = padLeft;
	child.offsetTop  = 0;

//-------------------- RANGE ---------------------------

	if (e.range != null)
	{
		e.range.offsetLeft = 0;
		e.range.offsetTop = height + rangeh;
	}		
	
}
//============================================================================================
//	htmlElement$findColumn
//============================================================================================
function htmlElement$findColumn(colIndex)
{
	var i,cell;
	
	for (i=0; i < this.cells.length; ++i)
	{
		cell = this.cells[i];
		if (cell.colIndex == colIndex) return cell;
		if (cell.colIndex > colIndex) return null;
	}
	
	return null;
}
//============================================================================================
//			htmlElement$avail
//============================================================================================
function htmlElement$widthAvail(fixedWidth)
{
	var i,size,count,dx,remain,skipA,skipB,col;
	var used,n,gutter,two;
		
	two = 2;
	if (this.collapse) two = -1;
	
	used = (this.border * two) + (this.cellspacing * 2);
	
	gutter = this.cellspacing + (this.cellpadding * 2);
	if (this.border > 0) gutter += 1;

	used += this.colWidths.length * gutter;
	count = 0;

	if (this.colWidths.length == 1) return fixedWidth - ((this.border * two) + (this.cellspacing * 2));

	for (i=0; i < this.colWidths.length; ++i)
	{
		col = this.colWidths[i];
		if (col.fixed || col.percent)
		{
			used += col.width;
		}
		else
		{	
			count += 1;	
		}
	}

	if (count == 0) return 0;
	remain = fixedWidth - used;
	if (remain <= 0) return 0;

	dx = Math.floor(remain / count);
	if (dx < 0) dx = 0;
	
	return dx;
}
//============================================================================================
//			htmlElement$place_TABLE
//============================================================================================
function htmlElement$place_TABLE()
{
	var i,text;
	var row,cell,j,col;
	
	this.place_TABLE_A();

	text = 'Table ID = ' + this.id + '  width: '  + this.offsetWidth + ' height: ' + this.offsetHeight;
	for (i=0; i < this.colWidths.length; ++i)
	{
		col = this.colWidths[i];
		text += '\r\n';
		text += i + ') width: ' + col.width + ' fixed: ' + col.fixed + ' scanned: ' + col.scanned;
	}
	
	for (i=0; i < this.rows.length; ++i)
	{
		row = this.rows[i];
		for (j=0; j < row.cells.length; ++j)
		{
			cell = row.cells[j];
			text += '\r\n';
			text += i + '.' + j + ') height: ' + cell.offsetHeight + ' Width: ' + cell.offsetWidth;
			
		}
	}	
	
}
//============================================================================================
//			htmlElement$place_TABLE
//============================================================================================
function htmlElement$place_TABLE_A()
{
	var e,row,cell,i,width,j,max,wid;
	var w,pad,loopCount,n;
	var ypos,height,gutter,w,k,n,xrow,xcell;
	var re_adjust,obj,defaultWidth,fixedWidth;
	var adjust_columns,need,dw,count;
	var h,w,added,border,size,dx,avail,xcol,xpos;
	var ID,remain,used,col,scale,xmax,adjustSize;
	var fixedTableSize,maxWidth,two;
	var rcount,xmax,xwidth,xxmax;
	var avail,lastavail;
	
	e = this;
	
	ID = this.id;

//-------------------------- Define default Column Widths --------------------

	this.setActive();
	width = this.parentNode.active.maxWidth;

	fixedWidth = width;
	defaultWidth = 0;
	fixedTableSize = false;

	xwidth = this.width;
	if (this.style.width != '') xwidth = this.style.width;

	if (xwidth != '') 
	{
		width = this.html.getSize(xwidth,this);
		this.offsetWidth = width;
		defaultWidth = width;
		fixedTableSize = true;
		fixedWidth = width;
	}
	
	if (width < 0) width = 5;
	this.active.maxWidth = width;
	remain = this.offsetWidth;

	if (! e.collapse) remain = remain - (this.borderLeft + this.borderRight + (this.cellspacing * (e.colWidths.length+1)));

	if (remain < 0)
	{
		this.offsetWidth += -remain;
		remain = 0;
	}

	used = 0;

//----------- determine columns width sizes ---------

	count = 0;
	rcount = 0;

	n = e.colWidths.length;
	if (n < 1) n = 1;
	xmax = Math.floor(this.active.maxWidth / n) + 0 ;


	for (i=0; i < e.colWidths.length; ++i)
	{
		col = e.colWidths[i];
		col.scanned = false;
		xxmax = xmax;
		
		if (col.fixed || col.percent) 
		{
			width = col.width;
			count += 1;
	
			if (col.percent && (width > 0))
			{
				width = Math.floor(fixedWidth * (width / 100));
				if (width > remain && remain > 0) width = remain;
				xxmax = width;
			}

			width -= (this.cellspacing + this.borderLeft + this.borderRight)

			if ( (i == (e.colWidths.length-1)) && (count == e.colWidths.length) && (remain > width)) width = remain;
	
			col.width = width;
			col.fixed = true;
			col.xmax = this.active.maxWidth;
			col.xmax = xxmax;

			col.scanned = true;
			this.placeColumn_nocolspan(i,col,col.xmax);
			col.scanned = true;

			width = col.width;
			used   += width;
			remain -= width;

			continue;
		}
		else
		{
			j = i;
			rcount += 1;
		}
	}
//----------- calculate a seed width ---------

	if (remain <= 0) remain = 0;
	if (rcount == 1 && fixedTableSize)
	{
		count += 1;
		col = e.colWidths[j];
		col.width = remain;
		col.fixed = true;
		col.used = true;
		col.xmax = remain;
		used += remain;
		remain = 0;
	}
//------------------ place cell children --------------------

	border = 0;
	if (this.border > 0) border = 1;

	maxWidth = 0;

//z

	two = 2;
	if (this.collapse) two = 1;
	pad = (this.cellspacing * 2) + (border * two);

	xmax = this.active.maxWidth - (pad * this.colWidths.length);

	if (this.colWidths.length == 1)
	{
		col = this.colWidths[0];
		if ((this.fixed_width) || (this.percent_width))
			 col.width = this.offsetWidth - ((border*two) + (this.cellpadding * 2));

		if (col.width < 0) col.width = 0;
		col.scanned = true;

		this.placeColumn_nocolspan(0,col,xmax);
		col.fixed = true;
		used = col.width;

	}

//--------------------------- scan non-spanned fixed width columns  ---------------------------

	for (i=0; i < this.colWidths.length; ++i)
	{
		if (! this.colWidths[i].fixed) this.colWidths[i].xmax = xmax;		
		this.colWidths[i].adjusted = false;
	}

	loopCount = 0;
	lastavail = -99;

	while (true)
	{
		if (avail == lastavail) break;
		lastavail = avail;
	
		loopCount += 1;
		if (loopCount > 120) break;		// infinite loop;

		avail = 0;
		used = 0;
		j = -1;
		count = 0;
		adjustSize = 0;

		for (i=0; i < this.colWidths.length; ++i)
		{
			col = this.colWidths[i];
			if (! col.fixed) 
			{
				avail += 1;
				if (j < 0) j = i;
				continue;
			}

			if (! col.scanned)
			{
				col.scanned = true;
				this.placeColumn_nocolspan(i,col,col.xmax);
				col.scanned = true;
				count = count + 1;
			}
	
			used += col.width;
			if (col.adjusted) adjustSize += col.width;
		}

//------------------------- can a variable column -----------------------------

		remain = xmax - used;

		if (remain < 0)
		{
			if (adjustSize == 0) 
			{
//				this.active.maxWidth += (-remain); // need to enlarge table size;
//				this.offsetWidth = this.active.maxWidth + this.borderLeft + this.borderRight + (this.cellspacing * 2);
//				used = this.active.maxWidth;
//				xmax = this.active.maxWidth - ((this.cellspacing * 2) + this.borderLeft + this.borderRight + (pad * this.colWidths.length));

			}
			scale = this.active.maxWidth / used ;

			for (i=0; i < this.colWidths.length; ++i)
			{
				col = this.colWidths[i];
				if (! col.scanned) continue;
				if (col.adjusted)
				{
					col.xmax = Math.floor(col.width * scale);
					col.width = col.xmax;
				}

				col.scanned = false;
			}			
		}
	
		if (avail == 0) break; 


		col = this.colWidths[j];
		col.width = 0;
		col.fixed = true;
		col.adjusted = true;

		if (avail == 1) 
		{

		if (fixedTableSize)
		{
			col.width = remain;
			col.fixed = true;
			col.xmax = col.width;
		}

		}

	}
			
//------------------------ adjust width pass ------------------------
	
	for (i=0; i < this.rows.length; ++i)
	{
		row = this.rows[i];
		
		for (j = 0; j < row.cells.length; ++j)
		{
			cell = row.cells[j];
			if (cell.colspan > 1) continue;

			col = this.colWidths[cell.colIndex];
			
//			if (cell.active.maxWidth == col.width) continue;
			
			cell.setActive();
			cell.active.maxWidth = col.width - (border*two);
			if (col.width <= 0) cell.active.maxWidth = fixedWidth - used;
			cell.active.width = 0;

			cell.placeChildren();
			cell.placeDone_();

			cell.clientWidth  = cell.offsetWidth;
			cell.clientHeight = cell.offsetHeight;
	
			cell.offsetWidth = col.width;
			cell.active.maxWidth = cell.offsetWidth;
		}
	}		

//------------------ spanned cells --------------------

	this.adjustSpannedColumns();

//---------------- calculate table width ----------
	
	width = 0;
	count = 0;

	for (i=0; i < e.colWidths.length; ++i)
	{
		col = e.colWidths[i];
		col.xpos = width;
		width += col.width;

		if (col.width > 0) 
		{
			count += 1;
//			width += this.border * two;
			if ((i < e.colWidths.length-1)) width += this.cellspacing;
		}
	}

	if (! this.collapse) width += this.borderLeft + this.borderRight + (this.cellspacing * 2);	

	if (count == 0)
	{
		if (fixedTableSize) width = defaultWidth;
		fixedTableSize = false;
	}

	if (fixedTableSize)
	{
		adjust_columns = new Array();

		if (width < defaultWidth)
		{
			need = defaultWidth - width;
			width = defaultWidth;
			dw = Math.floor(need / count);
			for (i=0; i < this.colWidths.length; ++i)
			{
				col = this.colWidths[i];
				if (col.width > 0) 
				{
					col.width += dw;
					adjust_columns[adjust_columns.length] = i;
				}
			}

			this.adjustColumn(adjust_columns);
			this.adjustSpannedColumns();

			width = 0;
			count = 0;
		
			for (i=0; i < e.colWidths.length; ++i)
			{
				col = e.colWidths[i];
				col.xpos = width;
		
				width += col.width;
				if (col.width > 0) 
				{
					count += 1;
//					width += this.border * two;
					if ((i < e.colWidths.length-1)) width += this.cellspacing;
				}
			}

			if (! this.collapse) width += this.borderLeft + this.borderRight + (this.cellspacing * 2);
		}
	}

	e.offsetWidth		= width;
	e.active.width		= width;
	e.active.remain		= width;

//------------------ adjust cell heights ------------------

	this.adjustTableHeight();

	h = this.offsetTop + this.offsetHeight;
	w = this.offsetLeft + this.offsetWidth;

	this.parentNode.updateSize_(h,w);

}
//=================================================================
//				htmlElement$placeColumn_nocolspan
//=================================================================
function htmlElement$placeColumn_nocolspan(colIndex,col,xmax)
{
	var i,j,row,cell,border;
	var size,filler,width,w,n;
	var two,used,first;
	
	border = 0;
	if (this.border > 0) border = 1;

	col.fixed = true;
	col.scanned = true;
	
	two = 2;
	if (this.collapse) two = -1;

	for (i=0; i < this.rows.length; ++i)
	{
		row = this.rows[i];
		width = this.borderLeft + this.cellspacing;
		used = 0;
		filler = (this.border * two) + (this.cellspacing * 2);
		first = true;
		
		for (j = 0; j < row.cells.length; ++j)
		{
			cell = row.cells[j];
			if (this.rows.length == 1) cell.colspan = 1;
	
			if (cell.colIndex != colIndex) continue;
			if (cell.colIndex + cell.colspan > this.colWidths.length)
			{
				n = this.colWidths.length - cell.colIndex;
				cell.colspan = n;
			}

			if (cell.colspan > 1) break;
			
			col.used = true;
			size = col.width;
			if (size == 0) size = xmax;
			size = xmax;

			if (cell.iheight > row.iheight)
			{
				 row.iheight = cell.iheight;
				 row.fixed_height = true;
			}
			
			cell.iheight = 0;
			cell.height = 0;

			cell.setActive();
			cell.active.maxWidth = size - ((this.cellpadding * 2) + (border*two));
			cell.active.maxWidth = size;

			cell.active.width = 0;
			if (cell.active.maxWidth < 0) cell.active.maxWidth = 0;

			cell.paddingLeft   = this.cellpadding;
			cell.paddingRight  = this.cellpadding;
			cell.paddingTop    = this.cellpadding;
			cell.paddingBottom = this.cellpadding;

			cell.placeChildren();
			cell.placeDone_();

//			cell.offsetWidth += (border + this.cellpadding);
			cell.offsetWidth += (border * 2);

			cell.clientWidth  = cell.offsetWidth;
			cell.clientHeight = cell.offsetHeight;

//			if (! this.collapse) cell.offsetWidth = cell.offsetWidth + (border + this.cellpadding);

			w = cell.offsetWidth;
			if (w > col.width) col.width = w;
			cell.active.maxWidth = col.width ;
//			if (xmax < col.width) xmax = col.width;
		}
		
	}

}
//=================================================================
//				htmlElement$adjustSpannedColumns
//=================================================================
function htmlElement$adjustSpannedColumns()
{
	var a,i,j,k,c,adjust_columns;
	var need,row,cell,found,col;
	var width,remain,last,border;
	var xrow,n,height,obj,two,dx;

	if (! this.spanned_col) return;
	
//------------- calculate / adjust spanned column widths ----------

	adjust_columns = new Array();

	two = 1;
	if (this.collapse) two = 0;
	border = this.borderLeft + this.borderRight;
	if (this.collapse) border = 1;
//xx
	for (i=0; i < this.rows.length; ++i)
	{
		row = this.rows[i];
	
		for (j = 0; j < row.cells.length; ++j)
		{
			cell = row.cells[j];
			if (this.rows.length == 1) cell.colspan = 1;

			col = this.colWidths[cell.colIndex];

			if (cell.colspan > 1)
			{
				width = 0;
				if (this.collapse) width = 0;
				last = cell.colIndex + cell.colspan - 1;
				for (k=cell.colIndex; k <= last ; ++k)
				{
					if (k >= this.colWidths.length) 
					{
						obj = new Object();
						obj.fixed = false;
						obj.percent = false;
						obj.width = 0;
						this.colWidths[k] = obj;
					}
					if (k < last) width += (this.cellspacing * 2) + (this.border * two);
					width += this.colWidths[k].width;
				}

				remain = width - (cell.offsetWidth - 2);

				if (remain >= 0)
				{
					cell.setActive();
					cell.active.maxWidth = width - this.cellpadding;
					cell.offsetHeight = 0;
					cell.offsetWidth = width - this.cellpadding;
					cell.active.remain = cell.active.maxWidth;
					cell.active.width = cell.active.maxWidth;
					cell.active.xmax = 0;
					cell.active.ypos = 0;

					cell.placeChildren();
					cell.placeDone_();

				
					height = cell.active.rowHeight + cell.active.ypos;

					cell.offsetHeight = height + cell.paddingTop + cell.paddingBottom + 3;

					cell.clientWidth  = cell.offsetWidth;
					cell.clientHeight = cell.offsetHeight;

					cell.offsetWidth = width;

				}
				else
				{

					need = -remain;
					last = cell.colIndex + cell.colspan - 1;
					dx = Math.floor(need / cell.colspan);
					for (k=cell.colIndex; k <= last ; ++k)
					{
						if (k == last) dx += need - dx + 2 ;
					    this.colWidths[k].width += dx;
						need -= dx;

						found = false;
						for (a=0; a < adjust_columns.length; ++a)
						{
	
							if (adjust_columns[a] == k) 
							{
								found = true;
								break;
							}
						}
					
						if (! found) adjust_columns[adjust_columns.length] = k;
					}					
				}
			}					
		}
	}

//--------------------------- adjust required columns ----------------

	this.adjustColumn(adjust_columns);

}
//=================================================================
//		htmlElement$adjustColumn
//=================================================================
function htmlElement$adjustColumn(adjust_columns)
{
	
	var i,row,found,col,cell,j,k;
	
	if (adjust_columns.length == 0) return;

	for (i=0; i < this.rows.length; ++i)
	{
		row = this.rows[i];
	
		for (j = 0; j < row.cells.length; ++j)
		{
			cell = row.cells[j];
			found = false;
	
			for (k=0; k < adjust_columns.length; ++k)
			{
				if (cell.colIndex == adjust_columns[k])
				{
					found = true;
					break;
				}
			}
				
			if (! found) continue;
			
			col = this.colWidths[cell.colIndex];
			if (cell.offsetWidth == col.width) continue;

			cell.setActive();
			cell.active.maxWidth = col.width - this.cellpadding;
			cell.offsetHeight = 0;
			cell.offsetWidth = 0;

			cell.placeChildren();
			cell.placeDone_();
		
			cell.clientWidth  = cell.offsetWidth;
			cell.clientHeight = cell.offsetHeight;
		}
	}	
}
//=================================================================
//		htmlElement$adjustTableHeight
//=================================================================
function htmlElement$adjustTableHeight()
{
	var i,row,two;
	var ymax,gutter;
	var remain,cell;
	var text;
	

	for (i = 0; i < this.rows.length; ++i)
	{
		row = this.rows[i];
		this.adjustRowHeight(row);
	}

	if (this.spanned_row)
	{
		for (i = 0; i < this.rows.length; ++i)
		{
			row = this.rows[i];
			this.adjustSpannedRowHeight(row);
		}
	}

//-----------------	

	two = 2;
	if (this.collapse) two = -1;

	ymax = this.borderTop + this.cellspacing; 
	gutter = this.border + this.cellspacing; 
	if (this.collapse) 
	{
		ymax = 0;
		gutter = 0;
	}

	for (i = 0; i < this.rows.length; ++i)
	{
		row = this.rows[i];
		row.offsetTop = ymax;
		row.offsetLeft = 0;
		if (! this.collapse) row.offsetLeft = this.borderLeft + this.cellspacing;
//		row.offsetWidth = this.offsetWidth - ((this.border * two) + (this.cellspacing * 2));
		ymax += row.offsetHeight;
		if (this.collapse) continue;
			
		if (i == (this.rows.length-1))
		{
		     ymax += this.border + this.cellspacing;
		}
		else
		{
			ymax += gutter; 
		}
	}
	
	this.offsetHeight = ymax;
}
//=================================================================
//		htmlElement$adjustRowHeight
//=================================================================
function htmlElement$adjustRowHeight(row)
{
	var i,height,remain,cell,xrow;
	var j,n,c,col;

	height = 0;
	remain = this.rows.length - (row.rowIndex);
	row.spanned = false;
	row.offsetHeight = 0;

	if (row.fixed_height)
	{
		height = row.iheight;
	}

//-------------------- set row height --------------------------

	for (i=0; i < row.cells.length; ++i)
	{

		cell = row.cells[i];

		if (cell.rowspan > remain) cell.rowspan = remain;
		
		if (cell.rowspan <= 1)
		{
			if (cell.offsetHeight > height) height = cell.offsetHeight;
		}
		else row.spanned = true;
	}

	row.offsetHeight = height; // + this.borderTop + this.borderBottom + this.cellspacing;

	for (i=0; i < row.cells.length; ++i)
	{
		cell = row.cells[i];
		col = this.colWidths[cell.colIndex];
		if (cell.colspan <= 1) cell.offsetWidth = col.width;
	
		height = row.offsetHeight;
		if (cell.rowspan > 1) continue;					
		cell.justifyCell(row,height);
		
		cell.offsetHeight = row.offsetHeight;
		cell.offsetLeft = col.xpos;
	}
}
//=================================================================
//				htmlElement$adjustSpannedRowHeight
//=================================================================
function htmlElement$adjustSpannedRowHeight(row)
{
	var i,k,cell,xrow,n,need,modified;
	var gutter,h;

	if (! row.spanned) return;
	gutter = this.borderTop + this.cellspacing;

	for (i=0; i < row.cells.length; ++i)
	{
		cell = row.cells[i];
		if (cell.rowspan <= 1) continue;

		h = row.offsetHeight;
		for (k = row.rowIndex+1; k < (row.rowIndex + cell.rowspan); ++k)
		{
			xrow = this.rows[k];
			h += xrow.offsetHeight;
		}

		cell.justifyCell(row,h);

		if (cell.offsetHeight <= h)
		{
			cell.offsetHeight = h;
		}
		else
		{
			need = h - cell.offsetHeight;
			n = row.rowIndex + (cell.rowspan - 1);

			xrow = this.rows[n];
			xrow.offsetHeight += need;	
		}			
	}

}
//============================================================================================
//			htmlElement$placeDone_
//============================================================================================
function htmlElement$placeDone_()
{
	var NODE_TEXT = 3;
	var NODE_TAG  = 1;

	var c,p,t,r,x,y,baseY,h,used;
	var dx,dy,valign,align;
	var i,j,height,xmax;
	var row,ele,bx,height,ypos;

	if (this.typeNode == NODE_TEXT) return;
	if (this.active.rows.length == 0) return;
	if (this.tagName == 'DIVIDE') return;

//	if (this.tagName == 'TD') return;
	if (this.tagName == 'TR') return;
	
	if (this.iheight > this.offsetHeight) this.offsetHeight = this.iheight;

	if (! ((this.style.float == 'left') || (this.style.float == 'right')))
	{	
		switch (this.tagName)
		{
		case "P":
			this.offsetWidth = this.parentNode.offsetWidth;
		}
	}
			
	t = this;

//------------------- Align Children ----------

	align = '' + this.align;
	if (align == undefined) align = '';
	var type = typeof(this.style);
	if (type == 'object' && this.style.textAlign != '') align = this.style.textAlign;
	if (align == 'left') align = '';


	if (this.tagName == 'CENTER') align = 'center';
	
	valign = this.valign;
	if (this.style) 
	{
		if (this.style.verticalAlign != '') valign = this.style.verticalAlign;
	}

	if (valign == undefined) valign = '';
	if (valign == 'top') valign = 'top';
	if (valign == '') valign = 'center';

//------------------ Adjust Rows --------------

	for (r = 0; r < this.active.rows.length; ++r)
	{
		row = this.active.rows[r];

		baseY = 0;
		height = 0;
	
		for (c = 0; c < row.cells.length; ++c)
		{
			ele = row.cells[c];
			y = ele.baseY;
			if (ele.offsetHeight > 0) height = ele.offsetHeight;
			if (ele.nodeType == NODE_TEXT)
			{
				y = Math.round(ele.offsetHeight * 0.75);
//				y = Math.round(ele.offsetHeight * 0.5);
			}
			else
			if (ele.tagName == 'DIVIDE')
			{
				y = ele.baseYpos;
				if (ele.valign == 'center') y = ele.baseYpos;
				if (ele.valign == 'middle') y = ele.baseYpos;
				if (ele.valign ==    'top') y = ele.topYpos;
				if (ele.valign == 'bottom') y = ele.botYpos;			
			}
			else
			if (ele.tagName == 'ROOT')
			{
				y = ele.botYpos;
				if (ele.valign == 'center') y = ele.baseYpos;
				if (ele.valign == 'middle') y = ele.baseYpos;
				if (ele.valign ==    'top') y = ele.topYpos;
				if (ele.valign == 'bottom') y = ele.botYpos;			
			}
			else
			if (ele.tagName == 'SUP')
			{
				y = ele.offsetHeight - ele.baseY;
			}
			else
			{
				y = 0;
				if (ele.valign == 'center') y = ele.offsetHeight / 2;
				if (ele.valign == 'middle') y = ele.offsetHeight / 2;
				if (ele.valign ==    'top') y = 0;
				if (ele.valign == 'bottom') y = ele.offsetHeight;
			}
			if (y > baseY) baseY = y;
		}

		if (baseY >  0)
		{
			for (c = 0; c < row.cells.length; ++c)
			{
				ele = row.cells[c];
				if (ele.nodeType == NODE_TEXT)
				{
					ele.offsetTop = ele.offsetTop + baseY;
					ele.offsetHeight = height;
				}
				if (ele.tagName == "SUB")
				{
					h = (ele.offsetHeight - baseY) + 2;
					ele.offsetTop = ele.offsetTop + h;
					ele.offsetHeight = height + 2;
				}
				if (ele.tagName == "SUP")
				{
					h = (ele.offsetHeight - baseY) - 2;
					ele.offsetTop = ele.offsetTop - h;
					ele.offsetHeight = height + 2;
				}
			}
		}

	if ((align == '') && (valign == '')) continue;

		xmax = this.offsetWidth;
		used = (this.active.maxWidth - row.remain) + (this.paddingLeft + this.paddingRight);
		dx = 0;
		if (align == 'center') dx = Math.floor((xmax - used) / 2);
		if (align == 'right') dx = (xmax - used) - 2;
		if (dx < 0) dx = 0;

		for (c = 0; c < row.cells.length; ++c)
		{
			ele = row.cells[c];
		    dy =  this.align_dy(valign,ele.offsetHeight,row.height);
//		    dx =  this.align_dx(align,ele.offsetWidth,xmax);

			ele.xjust = dx;
			ele.yjust = dy;
		}
	}
}
//============================================================================================
//			htmlElement$place_BR
//============================================================================================
function htmlElement$place_BR()
{
	var p,text,t;
	var stype;
	var name;
	var h,w,obj;

	t = this;

	h = this.charHeight() * 1.0;
	w = 0;

	this.width		= w;
	this.height		= h;
	this.fixed_height	= true;
	this.fixed_width	= true;
	this.iheight		= h;
	this.iwidth		= w;

	this.active.maxWidth	= 0;
	this.offsetHeight	= h;
	this.offsetWidth	= w + this.marginLeft + this.marginRight;
}
//============================================================================================
//			htmlElement$place_INPUT
//============================================================================================
function htmlElement$place_INPUT()
{
	var h,w,height,width,obj;
	var e;
	
	e = this;

	this.parentElement.font.size = 8;
	
	h = parseFloat(this.height);
	w = parseFloat(this.width);
	if (isNaN(h)) h = 0;
	if (isNaN(w)) w = 0;
	if (h <= 0) h = 0;
	if (w <= 0) w = 0;

	switch (this.type)
	{
	case 'button': 
				if (this.PDF_onClick == '') this.PDF_onClick= "app.ale" + "rt('No PDF Click Event specified')";
				if (h == 0) h = 16;
				width = this.wordWidth(this.value);
				if (w < (width+20)) w = width + 20;
				break;
	case 'reset': 
				if (h == 0) h = 16;
				width = this.wordWidth(this.value,this);
				if (w < (width+12)) w = width + 12;		
				break;
	case 'submit':	
				if (h == 0) h = 16;
				width = this.wordWidth(this.value,this);
				if (w < (width+12)) w = width + 12;
				break;
	case 'radio': w = 12;
				  h = 12;
				break;
	case 'checkbox': w = 12;
				     h = 12;
				break;
	case 'image':
				this.obj = null;
				if ((h == 0) || (w == 0))
				{
					this.obj = this.html.getImageSize(this.src);
					if (this.obj != null)
					{
						if (h == 0) h = obj.height;
						if (w == 0) w = obj.width;
					}
				}
				if (h == 0) h = 12;
				if (w == 0) w = 12;
				break;

	default: h = 22;
			 w = 120;
			 if (this.size > 0) w = this.size * 4;
	}

	if (this.style.marginLeft == '') this.marginLeft = 5;
	if (this.style.marginRight == '') this.marginRight = 5;

	this.width	= w;
	this.height	= h;
	this.fixed_height = true;
	this.fixed_width = true;
	this.iheight = h;
	this.iwidth = w;

	this.active.maxWidth = w - (this.marginLeft + this.marginRight);
	this.offsetHeight = h;
	this.offsetWidth = w + this.marginLeft + this.marginRight;
}
//============================================================================================
//			htmlElement$place_TEXTAREA
//============================================================================================
function htmlElement$place_TEXTAREA()
{
}
//============================================================================================
//			htmlElement$place_SELECT
//============================================================================================
function htmlElement$place_SELECT()
{
}
//============================================================================================
//			htmlElement$place_HR
//============================================================================================
function htmlElement$place_HR()
{
	var p,text,t;
	var stype,dx;
	var name;
	var h,obj;

	t = this;
	p = this.parentNode;
	p.newRow_();
	p.active.ypos += 6;
	p.positionChild_(this);
	p.newRow_();
	p.active.ypos += 6;

//	this.html.pages[this.html.pages.length] = p.active.ypos;

	if (this.width == 0) return;
	dx = p.offsetWidth - this.width;
	if (dx <= 0) return;
	
	this.offsetLeft += Math.round(dx / 2);
}
//============================================================================================
//			htmlElement$place_UL
//============================================================================================
function htmlElement$place_UL()
{
	var t,image;

	t = this;

	this.parentNode.newRow_();
	if (this.style.marginLeft == '') this.marginLeft = 20;

	if (this.style.float == 'left') this.offsetWidth = this.marginLeft + this.marginRight;

	this.active.counter = 0;
	this.fontName = '';
}
//============================================================================================
//			htmlElement$place_BLOCKQUOTE
//============================================================================================
function htmlElement$place_BLOCKQUOTE()
{
	var t;

	t = this;

	this.parentNode.newRow_();
	this.marginLeft += 20;	
	this.fontName = '';
}
//============================================================================================
//			htmlElement$place_LI
//============================================================================================
function htmlElement$place_LI()
{
	var p,text,t,x,xp,y;
	var stype,padLeft,padRight;
	var name,dx;
	var h,obj;
	var width,pad,height;
	var image,child;
	var depth,pad;

	t = this;
	this.imageHeight = 0;
	this.imageWidth = 0;

	p = this.parentNode;
	p.active.counter += 1;
	this.count = p.active.counter;

	this.bullet = null;
	
	if (! ((this.style.float == 'left') || (this.style.float == 'right')) )  p.newRow_();

	stype = p.style.listStyleType;
	if (stype == 'none') return;

	this.bullet = new Object();

	this.bullet.src		= '';
	this.bullet.text		= '';
	this.bullet.fontName		= '';
	this.bullet.offsetTop		= 0;
	this.bullet.offsetHeight	= 0;
	this.bullet.offsetWidth		= 0;
	this.bullet.offsetLeft		= 0;
	this.bullet.imageSize		= null;
	this.bullet.size		= this.font.size;

	if ((stype == '') && (p.tagName != 'OL'))
	{					
		name = this.type;
		this.bullet.text = String.fromCharCode(108);
		if (this.depth == 2) this.bullet.text = String.fromCharCode(109);
		if (this.depth > 2) this.bullet.text = String.fromCharCode(110);

		if (name ==  'circle') this.bullet.text = String.fromCharCode(109);
		if (name ==     'box') this.bullet.text = String.fromCharCode(110);
		if (name ==   'check') this.bullet.text = String.fromCharCode(51);
		if (name ==    'star') this.bullet.text = String.fromCharCode(72);
		if (name ==   'arrow') this.bullet.text = String.fromCharCode(225);
	
		if (name ==   'heart') this.bullet.text = String.fromCharCode(170);
		if (name ==   'spade') this.bullet.text = String.fromCharCode(171);
		if (name ==    'club') this.bullet.text = String.fromCharCode(168);
		if (name == 'diamond') this.bullet.text = String.fromCharCode(169);
		this.bullet.fontName = 'dingbat';
		
		this.bullet.size = this.bullet.size - 4;
		if (this.bullet.size < 2) this.bullet.size = 1;
		
	}
	else
	{
		this.bullet.text = this.countText_(stype);
		this.bullet.fontName = this.font.fontName;
	}

	width = Math.round(this.wordWidth(this.bullet.text));
	height = Math.round(this.font.size);

//	this.baseY = height * 0.75;
	y = height * 1;
	this.bullet.offsetTop  = y;

	this.bullet.imageSize = null;
	this.bullet.src = '';

	image = this.style.listStyleImage;
	if (image != '') 
	{
		this.bullet.src = this.html.imageFilename(image);
		this.bullet.imageSize = this.html.getImageSize(this.bullet.src);
		if (this.bullet.imageSize == null) 
		{
			this.bullet = null;
			return;
		}
		
		this.bullet.text = '';
		width = this.bullet.imageSize.width;	
		height = this.bullet.imageSize.height;
		this.bullet.offsetTop = 0;
		this.baseY = height;
	}


	if (height > this.offsetHeight) this.offsetHeight = height;

	padLeft = 0;
	padRight = 10;
//	if ((p.tagName == 'OL') || (p.tagName == "UL")) padLeft = 20;

	this.bullet.offsetWidth		= width;
	this.bullet.offsetHeight	= height;
	this.bullet.offsetLeft		= padLeft;

	this.active.width	+= width + padLeft + padRight;
	this.offsetWidth	= this.active.width;

//---------------- offset child text ---------

	child = this.firstChild;
	while (child != null)
	{
		child.xjust = width + padLeft + padRight;
		child = child.nextSibling;
	}
	
}
//============================================================================================
//			htmlElement$place_text
//============================================================================================
function htmlElement$place_text()
{
	var align,i,dx,p,h,w,t;
	var pe;

	t = this;

	pe = this.parentElement;
	if (pe.style.textTransform == 'uppercase') this.text = this.text.toUpperCase();
	if (pe.style.textTransform == 'lowercase') this.text = this.text.toLowerCase();

	p = this.parentNode;
	this.html.setFontName(p.font.fontName);

	this.parts = new Array();
	p.place_text_A(this.text,this.parts,this.parentElement);

	this.active.xmax = 0;
	this.active.ymax = 0;
	this.offsetHeight = 0;
	this.offsetWidth = 0;

	for (i=0; i < this.parts.length; ++i)
	{
	
		w = this.parts[i].offsetLeft + this.parts[i].offsetWidth;
		h = this.parts[i].offsetTop + this.parts[i].offsetHeight;

		if (w > this.active.xmax) this.active.xmax = w;
		if (h > this.offsetHeight) this.offsetHeight = h;
	}

	h = this.offsetHeight;
	w = this.active.xmax;

	this.offsetWidth = w;
	this.active.ymax = h;
	
	this.parentNode.updateSize_(h,w);
}
//============================================================================================
//			htmlElement$align_dx
//============================================================================================
function htmlElement$align_dx(align,width,maxWidth)
{
	var dx,s;

	if (width < 0) return 0;

	if (width >= maxWidth) return 0;
	if (align == '') return 0;
	if (align == 'left') return 0;

	dx = maxWidth - width;
	if (align == 'center') return Math.floor(dx / 2);
	if (align == 'right') return dx;

	return 0;	
}
//============================================================================================
//			htmlElement$align_dy
//============================================================================================
function htmlElement$align_dy(align,height,maxHeight)
{
	var dy,s;

	s = this.html.style;

	if (height >= maxHeight) return 0;
	if (align == '') return 0;
	if (align == 'top') return 0;

	dy = maxHeight - height;

	if (align == 'center') return Math.floor(dy / 2);
	if (align == 'middle') return Math.floor(dy / 2);
	if (align == 'bottom') return dy;

	return 0;	
}
//============================================================================================
//			htmlElement$place_text_A
//============================================================================================
function htmlElement$place_text_A(text,parts,parent)
{
	var i,c,w,width,p,k,kwidth,word,x,y,dx,t,dy;
	var height,zwidth,temp,twidth;
	var iwidth;

	t = this;

	height = parent.charHeight() * 1.1;
	width  = parent.wordWidth(text);
		
	if (this.width == undefined) this.width = 0;
	if (this.active.maxWidth == 0) this.active.maxWidth = this.width;
	this.active.remain = this.active.maxWidth - (this.padWidth() + this.active.xpos);

//--------------------- fits ----------------

	twidth = width;

	if (width <= this.active.remain)
	{		
		this.place_text_B(parts,text,height,width);
		return;	
	}

//-------------------- nowrap ---------------

	if (this.html.nowrap)
	{
		temp = '';
		width = parent.charWidth(46) + 2;
		for (i=0; i < text.length; ++i)
		{
			c = text.charCodeAt(i);
			width += parent.charWidth(c);

			if (width > this.active.remain)
			{
				if (i == 0) iwidth = width;
				if (i == 0) i = 1;		// always 1 character 
				temp = text.substr(0,i) + '...';
				this.place_text_B(parts,temp,height,iwidth);
				return;	

			}
			
			iwidth = width;
		}

		this.place_text_B(parts,text,height,width);
		return;	
	}

//-------------------- wrap ---------------------------
	
	k = -1;
	kwidth = 0;
	width = 0;

	for (i=0; i < text.length; ++i)
	{
		c = text.charCodeAt(i);
		if ((c <= 32))
		{
			 k = i;
			 kwidth = width;
		}

		zwidth = width;
		width += parent.charWidth(c);

		if ((width <= (this.active.remain-2)) || ((c > 32) && (k < 0)) ) continue;
		
		if (k >= 0)
		{
				word = text.substr(0,k);
				text = text.substr(k+1);

				this.place_text_B(parts,word,height,kwidth);
				this.newRow_();
				this.place_text_A(text,parts,parent);
				return;
		}

		if (this.active.columns > 0) 
		{
			this.newRow_(parent);
			continue;
		}

		word = text.substr(0,i+1);
		text = text.substr(i+1);
		this.place_text_B(parts,word,height,zwidth);
		this.newRow_();
		this.place_text_A(text,parts,parent);
		return;

	}

	this.place_text_B(parts,text,height,width);
	return;	

}
//============================================================================================
//			htmlElement$place_text_B
//============================================================================================
function htmlElement$place_text_B(parts,text,height,width)
{
	var p;
	var NODE_TEXT = 3;
	var NODE_TAG  = 1;

	p = new Object();
	p.tagName		= '#TEXT';
	p.nodeType		= NODE_TEXT;
	p.offsetTop		= 0;
	p.offsetLeft		= 0;
	p.offsetWidth		= Math.round(width);
	p.offsetHeight		= Math.round(height);
	p.text			= text;

	p.marginTop		= 0;
	p.marginBottom		= 0;
	p.marginLeft		= 0;
	p.marginRight		= 0;

	p.paddingTop		= 0;
	p.paddingBottom		= 0;
	p.paddingLeft		= 0;
	p.paddingRight		= 0;

	p.borderTop		= 0;
	p.borderBottom		= 0;
	p.borderLeft		= 0;
	p.borderRight		= 0;

	p.xjust			= 0;
	p.yjust			= 0;

	this.positionChild_(p);
	parts[parts.length] = p;

}
//============================================================================================
//			htmlElement$place_IMG
//============================================================================================
function htmlElement$place_IMG()
{
	var dx,dy,align,p;

	this.offsetLeft = 0;
	this.offsetTop  = 0;
	
	this.parentNode.addImage_(this);
}
//============================================================================================
//			htmlElement$place_DIV
//============================================================================================
function htmlElement$place_DIV()
{
	var dx,dy,align,p;

	this.offsetLeft = 0;
	this.offsetTop  = 0;
}
//============================================================================================
//			htmlElement$place_LABEL
//============================================================================================
function htmlElement$place_LABEL()
{
	var dx,dy,align,p;

	this.offsetLeft = 0;
	this.offsetTop  = 0;
}
//============================================================================================
//			htmlElement$place_GRAPHIC
//============================================================================================
function htmlElement$place_GRAPHIC()
{
	var dx,dy,align,p,a;

//	if (this.height > this.parentNode.active.rowHeight) this.parentNode.active.rowHeight = this.height;
//	if (this.height > this.active.rowHeight) this.active.rowHeight = this.height;
//	a = this;
	
//	this.parentNode.addImage_(this);
}
//============================================================================================
//			htmlElement$place_GROUP
//============================================================================================
function htmlElement$place_GROUP()
{
	var dx,dy,align,p,a;

	this.offsetLeft = 0;
	this.offsetTop  = 0;

}
//============================================================================================
//			htmlElement$addImage_
//============================================================================================
function htmlElement$addImage_(c)
{
	var size,t,dx,height;

	if (! this.active.aligned) this.flushRow_();

	if (c.align == '')
	{
		this.positionChild_(c);
		return;
	}


	c.offsetLeft = this.active.xpos + this.padLeft();
	c.offsetTop  = this.active.ypos + this.padTop();

	height = c.offsetTop + c.offsetHeight;
	if (height > this.offsetHeight) this.offsetHeight = height;
	if (height > this.rowHeight) this.rowHeight = height;
	
	t = this;
	size = c.offsetLeft + c.offsetWidth; 
	if (size > this.offsetWidth) 
	{
		if (size > this.html.maxWidth) size = this.html.maxWidth;
		this.offsetWidth = size;
		this.active.width = this.offsetWidth - (this.active.marginLeft + this.active.marginRight);
	}
		
	if (c.align == 'right')
	{
		this.pushRight_();
		dx = this.offsetWidth - (this.active.marginRight + c.offsetWidth);
		if (dx < 0) dx = 0;
		c.offsetLeft = dx;
		this.active.marginRight += c.offsetWidth + 4;
		if (this.active.marginRight > this.active.width)  this.active.marginRight = this.active.width - this.active.marginLeft;
		this.active.rightBottom = this.active.ypos + c.offsetHeight;
		this.active.width = this.offsetWidth - this.padWidth();
		this.active.remain = this.active.width;
		
		this.active.aligned = true;
		return;
	}

	if (c.align == 'left')
	{
		this.pushLeft_();
		this.active.xpos = 0;
		this.active.marginLeft = c.offsetLeft + c.offsetWidth + 4;
	
		if ((this.active.marginLeft + this.activemarginRight) > this.active.width)  this.active.marginLeft = this.active.width - this.active.marginLeft;
		this.active.leftBottom = this.active.ypos + c.offsetHeight;
		this.active.width = this.offsetWidth - this.padWidth();
		this.active.remain = this.active.width;
		this.active.aligned = true;
		return;
	}

	this.flushRow_();
	this.parentNode.positionChild_(this);
}
//============================================================================================
//			htmlElement$pushLeft_
//============================================================================================
function htmlElement$pushLeft_()
{
	var obj;

	obj = new Object;
	obj.marginLeft  = this.active.marginLeft;
	obj.leftBottom  = this.active.leftBottom;
	this.active.Lstack[this.active.Lcount] = obj;
	this.active.Lcount += 1;
}
//============================================================================================
//			htmlElement$pushRight_
//============================================================================================
function htmlElement$pushRight_()
{
	var obj;

	obj = new Object;
	obj.marginRight  = this.active.marginRight;
	obj.rightBottom  = this.active.rightBottom;
	this.active.Rstack[this.active.Rcount] = obj;
	this.active.Rcount += 1;
}
//============================================================================================
//			htmlElement$padWidth
//============================================================================================
function htmlElement$padWidth()
{
	var x;

	x =   this.active.marginLeft + this.active.marginRight + 
			this.marginLeft + this.marginRight + 
			this.paddingLeft + this.paddingRight;
			
	x = html$i4(x);
			
	return x;
}
//============================================================================================
//			htmlElement$padLeft
//============================================================================================
function htmlElement$padLeft()
{
	var x;

	x =	this.active.marginLeft +  
		this.marginLeft +  
		this.paddingLeft +
		this.borderLeft;

	x = html$i4(x);
					
	return x;
}
//============================================================================================
//			htmlElement$padRight
//============================================================================================
function htmlElement$padRight()
{
	var x;

	x =	this.marginRight +  
		this.paddingRight +
		this.borderRight;

	x = html$i4(x);
		
	return x;
}
//============================================================================================
//			htmlElement$padTop
//============================================================================================
function htmlElement$padTop()
{
	var x;

	x =	this.marginTop +  
		this.paddingTop + 
		this.borderTop;

	x = html$i4(x);
	
	return x;
}
//============================================================================================
//			htmlElement$padBottom
//============================================================================================
function htmlElement$padBottom()
{
	var x;

	x =	this.marginBottom +  
		this.paddingBottom +
		this.borderBottom;
							
	x = html$i4(x);
	return x;
}
//============================================================================================
//			htmlElement$newRow_
//============================================================================================
function htmlElement$newRow_()
{
	var n,p;

	p = this;

	if (this.active.colCount == 0) return;			// no data yet;

	this.active.ypos = this.active.ypos + this.active.rowHeight + 1;
	this.active.xpos = 0;
	this.active.remain = this.active.width;
	this.active.rowHeight = 0;
	this.active.colCount = 0;

	if (! this.active.aligned) return;

//------------- left margin ---------
	
	while ((this.active.Lcount > 0) && (this.active.ypos >= this.active.leftBottom))
	{
		this.active.Lcount = this.active.Lcount - 1;
		n = this.active.Lcount;
		this.active.marginLeft = this.active.Lstack[n].marginLeft;
		this.active.leftBottom = this.active.Lstack[n].leftBottom;
		this.active.width = this.offsetWidth - this.padWidth();
		this.active.remain = this.active.width;
	}

//------------- right margin ---------
	
	while ((this.active.Rcount > 0) && (this.active.ypos >= this.active.rightBottom))
	{
		this.active.Rcount = this.active.Rcount - 1;
		n = this.active.Rcount;
		this.active.marginRight = this.active.Lstack[n].marginRight;
		this.active.rightBottom = this.active.Lstack[n].rightBottom;
		this.active.width = this.offsetWidth - this.padWidth();
		this.active.remain = this.active.width - this.active.xpos;
	}

	this.updateSize_();
	if ((this.active.Lcount > 0) || (this.active.Rcount > 0)) return;

	this.active.aligned = false;
	this.active.Rcount = 0;
	this.active.Lcount = 0;
	this.active.Rstack = new Array();
	this.active.Lstack = new Array();

	this.active.marginRight = 0;
	this.active.rightBottom = 0;
	this.active.marginLeft = 0;
	this.active.leftBottom = 0;
	
	this.active.width  = this.offsetWidth - this.padWidth();
	this.active.remain = this.active.maxWidth - this.padWidth();

}
//============================================================================================
//			htmlElement$flushRow_
//============================================================================================
function htmlElement$flushRow_()
{
	var n;
	
	if (! this.active.aligned) return;

	this.active.xpos  = 0;
	this.active.remain = this.active.maxWidth - this.padWidth();

//------------- left margin ---------
	
	while (this.active.Lcount > 0)
	{
		this.active.Lcount = this.active.Lcount - 1;
		n = this.active.Lcount;
		this.active.marginLeft = this.active.Lstack[n].marginLeft;
		this.active.leftBottom = this.active.Lstack[n].leftBottom;
		this.active.width = this.offsetWidth - this.padWidth();			
		this.active.remain = this.active.width;
	}

//------------- right margin ---------
	
	while (this.active.Rcount > 0)
	{
		this.active.Rcount = this.active.Rcount - 1;
		n = this.active.Rcount;
		this.active.marginRight = this.active.Lstack[n].marginRight;
		this.active.rightBottom = this.active.Lstack[n].rightBottom;
		this.active.width = this.offsetWidth - this.padWidth();
		this.active.remain = this.active.width;

	}

	this.active.aligned = false;
	this.active.Rcount = 0;
	this.active.Lcount = 0;
	this.active.Rstack = new Array();
	this.active.Lstack = new Array();
	this.active.marginLeft = 0;
	this.active.marginRight = 0;
	this.active.leftBottom = 0;
	this.active.rightBottom = 0;
	this.active.width = this.offsetWidth - this.padWidth();
	this.active.remain = this.active.width;

}
//============================================================================================
//			htmlElement$positionChild_
//============================================================================================
function htmlElement$positionChild_(c)
{
	var remain,h,w,size,t,x,row,height,width,dy;
	var top,left,float,need;
	var offsetLeft,offsetTop;
	
	if (c.tagName == 'TR') return;
	if (this.tagName == 'TR') return;

	t = this;

	c.offsetHeight = Math.round(c.offsetHeight);
	c.offsetWidth = Math.round(c.offsetWidth);

	

	if (c.style)
	if (c.style.position == 'absolute')
	{
		c.offsetLeft = this.html.getSize(c.style.left,c);
		c.offsetTop  = this.html.getSize(c.style.top,c);

		w = c.offsetLeft + c.offsetWidth + this.padLeft() + this.padRight();
		h = c.offsetTop + c.offsetHeight + this.padBottom();
		this.updateSize_(h,w);
		return;
	}

	float = '';
	if (c.style)
	{
		float = c.style.float;
		if (! ((float == 'left') || (float == 'right'))) float = '';
		c.style.float = float;
	}
	
	if (float != '')
	{
		need = this.active.xpos + this.padWidth() + c.offsetWidth;
//		if (this.active.maxWidth < need) this.active.maxWidth = need;
	}

			
	if (this.active.maxWidth == 0) this.active.maxWidth = this.active.width;

	this.active.remain = this.active.maxWidth - (this.padWidth() + this.active.xpos + c.offsetWidth);
	if ((this.active.colCount > 0) && (this.active.remain < 0)) this.newRow_();

	if (float == 'right') this.active.xpos = this.active.maxWidth - c.offsetWidth;
	
	if (this.active.colCount == 0)
	{
		if (c.offsetWidth > this.active.width)
		{
			this.active.width = c.offsetWidth;
			this.active.remain = this.active.width - (this.active.xpos + c.offsetWidth);
		}	
	}

	offsetLeft = this.active.xpos;
	offsetTop  = this.active.ypos;

	c.offsetLeft = offsetLeft + this.padLeft();
	c.offsetTop  = offsetTop + this.padTop();

	this.active.xpos += c.offsetWidth;

	height = c.offsetHeight;
	if (float != '') height = 0;
	if (height > this.active.rowHeight) this.active.rowHeight = height;
	
	this.active.colCount += 1;

	if (this.active.colCount == 1)
	{
		this.active.rowCount += 1;
		row = new Object();
		row.cells = new Array();
		this.active.rows[this.active.rowCount-1] = row;
	}

	this.active.remain = this.active.maxWidth - this.active.xpos; // ccc

	row = this.active.rows[this.active.rowCount-1];
	row.remain = this.active.remain - (this.padRight() + this.padLeft());
	row.height = this.active.rowHeight;
	row.cells[this.active.colCount-1] = c;
	
	if (this.active.xpos > this.active.xmax) this.active.xmax = this.active.xpos;

	w = c.offsetLeft + c.offsetWidth + this.padRight();	
	h = c.offsetTop + c.offsetHeight + this.padBottom(); 

	if (c.tagName == 'TABLE') this.newRow_();
	if (c.tagName == 'P') this.newRow_();
	if (c.tagName == 'BR') this.newRow_();
	if (c.tagName == 'DIV') this.newRow_();

	this.updateSize_(h,w);
}

//============================================================================================
//		htmlstorage$
//============================================================================================
function htmlstorage$(html)
{
	this.html = html;
	
	this.find		= htmlstorage$find;	
	this.bins		= new Array();
}
//============================================================================================
//			htmlstorage$find
//============================================================================================
function htmlstorage$find(id)
{
	var bin,i;
	
	id = id.toLowerCase();
	
	for (i=0; i < this.bins.length; ++i)
	{
		bin = this.bins[i];
		if (bin.id == id) return bin;
	}

	bin = new htmlstorageBin$(this);
	bin.id = id;
	this.bins[this.bins.length] = bin;

	return bin;
}
//============================================================================================
//		htmlstorageBin$
//============================================================================================
function htmlstorageBin$()
{
	
	this.find		= htmlstorageBin$find;
	this.clear		= htmlstorageBin$clear;

	this.clear();

}
//============================================================================================
//			htmlstorageBin$
//============================================================================================
function htmlstorageBin$clear()
{

	this.list		= new Array();
	this.names		= new Array();
	this.hasValue		= false;

	this.value		= '';
	this.type		= 'number';
	this.used		= new Array();
	this.ref		= new Array();
	this.last		= '<no previsous reference>';

	this.refCount		= 0;
	this.cur		= -1;
	this.pos		= 0;
}
//============================================================================================
//			htmlstorageBin$find
//============================================================================================
function htmlstorageBin$find(name)
{
	var i;
		
	name = name.toLowerCase();

	for (i=0; i < this.names.length; ++i)
	{
		if (this.names[i].toLowerCase() == name.toLowerCase()) return i;
	}
		
	return -1;
}
//============================================================================================
//			htmlmacro$
//============================================================================================
function htmlmacro$(html,tag)
{
	var data;
	var i,a,x,y,value,list;
	var b,text;

	this.html		= html;

	this.id		= '' + tag.value("id");
	this.id			= this.id.toLowerCase();
	this.name		= '';
	this.bin		= html.storage.find(this.id);
	this.used		= new Array();

	this.clear		= tag.bool('clear');
	if (this.clear) this.bin.clear();

	this.command		= tag.name.toLowerCase();

//------------------- Methods -------------------------

	this.execute		= htmlmacro$execute;
	this.excluded		= htmlmacro$excluded;
	this.resolve		= htmlmacro$resolve;
	this.run		= htmlmacro$run;
	this.pie		= htmlmacro$pie;
	this.table		= htmlmacro$table;

	this.storeValue		= htmlmacro$storeValue;

	this.random		= random$execute;
	this.randomList		= random$randomList;
	this.randomNumber	= random$randomNumber;
	this.randomIndex	= random$randomIndex;

	this.rawValue		= tag.rawValue("value");
	this.rawName		= tag.rawValue("name");

	this.task		= tag.value("command").toLowerCase();


//------------------ Store -------------------------------

	if (this.command == 'store')
	{
		this.bin.cur	= -1;
		this.value	= tag.value("value");
		this.name	= tag.value("name").toLowerCase();
		
		if (tag.exists('point'))
		{
			text = tag.value('point');
			a = text.split(',');
			x = parseFloat(a[0]);
			if (isNaN(x)) x = 0;
			y = parseFloat(a[1]);
			if (isNaN(y)) y = 0;
			this.value = Math.round(x * 10000) / 10000 + ':' + Math.round(y * 10000) / 10000;
		}
					
		return;
	}

//------------------ Assign -------------------------------

	if (this.command == 'assign')
	{
		this.value	= tag.value("value");

		this.sql	= tag.value("sql");
		this.rawSql	= tag.rawValue("sql");

		if (tag.exists("list"))
		{
			data = tag.value("list");
			this.bin.list	= html.fromCsv(data,',');
			this.type	= 'list';
			this.min	= 0;
			this.max	= this.bin.list.length  - 1;
			return;
		}

		if (tag.exists('sql')) 
		{
			if (tag.value('all') == 'true')
			{ 
				 this.value = html.sqlValueAll(this.sql);
			}
			else
			{
				 this.value = html.sqlValue(this.sql);
			}
		}

		if (this.task == '')
		{
			this.bin.value = this.value;
			return;
		}
		
		a = parseFloat(this.bin.value);
		if (isNaN(a)) a = 0;
		b = parseFloat(this.value);
		if (isNaN(b)) b = 0;
		if (this.task == 'increment') b = 1;
		if (this.task == 'decrement') b = -1;
		if (this.task ==       'sub') b = -b;
		if (this.task ==  'subtract') b = -b;
		this.bin.value = a + b;

	}

//------------------ Random -------------------------------

	if (this.command == 'random')
	{
		this.min		= html$i4(tag.value("min"));
		this.max		= html$i4(tag.value("max"));
		this.precision		= html$i4(tag.value("precision"));
		this.decimals		= html$i4(tag.value("decimals"));
		this.divisions		= html$i4(tag.value("divisions"));
		this.modulus		= html$i4(tag.value("modulus"));
	
		this.compare		= tag.keyword('compare');
		
		this.singleValue	= tag.bool('single-value');
		this.hasValue		= false;
	
		if (this.modulus <= 0) this.modulus = 0;

		if (this.decimals < 0) this.decimals = 0;
		if (this.decimals > 14) this.decimals = 14;
		
		if (this.precision < -10) this.precision = 0;
		if (this.precision >  10) this.precision = 0;

		this.unique		= tag.bool('unique');
		this.type = 'number';

		data = tag.value("exclude");
		data = data.toLowerCase();

		if (data == '')
			 this.excludeList = new Array();
		else this.excludeList = html.fromCsv(data,',');

		if (tag.exists("list"))
		{
			data = tag.value("list");
			this.list	= html.fromCsv(data,',');
			this.type	= 'list';
			this.min	= 0;
			this.max	= this.list.length  - 1;
			if (this.singleValue) this.execute('');
			return;
		}
	
		if (tag.exists("sql"))
		{
			this.sql	= tag.value("sql");
			this.list	= html.sqlList(this.sql);
			this.type	= 'list';
			this.min	= 0;
			this.max	= this.list.length  - 1;
			if (this.singleValue) this.execute('');
			return;
		}

		if (this.singleValue) this.execute('');

	}
}
//============================================================================================
//				htmlmacro$table
//============================================================================================
function htmlmacro$table(columns)
{
	var i,html,count,rows,value,r,c,w, num;
	var pdf;
	
	if (! this.bin) return '';
	if (! this.bin.list) return '';
	if (this.bin.list.length == 0) return '';

	if (isNaN(columns)) columns = 1;
	if (columns <= 0) columns = 1;
	
	count = this.bin.list.length;
	rows = Math.ceil(count / columns);

	html = '<table style="width:100%">';

	pdf = this.html.pdf;
	w = Math.floor((pdf.xmax - pdf.xmin) / 72 * 110);

	w = w - ((columns*40) + 4);
	if (w < 20) w = 20;
	w = Math.floor(w / columns);

	for (r=0; r < rows; ++r)
	{
		html += '<tr>';
		for (c=0; c < columns; ++c)
		{
			value = '';
			num = '&nbsp;';
			j = (r * columns) + c;
			if (j < this.bin.list.length) 
			{
				value = this.bin.list[j];
				num = (j + 1) + ')';
			}
			if (value == '') value = '&nbsp;';
			
			html += '<td width=40 align=right>' + num + ' </td><td width=' + w + '>' + value + '</td>';
		}
		html += '</tr>';
	}

	html += '</table>';

	return html;

}
//============================================================================================
//				htmlmacro$run
//============================================================================================
function htmlmacro$run(html)
{
	var name,value,n,sql,t,r8,nam;
	var a,b;

	t = this;


	name = html.resolve(this.rawName);
	value = html.resolve(this.rawValue);

	if (this.clear) this.bin.clear();

//-------------------------- store --------------------------------------

	if (this.command == 'store')
	{
		
		if (this.task != '')
		{
			r8 = parseFloat(value);
			if (isNaN(r8)) r8 = 0;

			n = this.bin.find(name);
			if (n < 0)
			{
				n = this.bin.list.length;
				this.bin.list[n]  = 0;
				this.bin.names[n] = name;
			}
			nam = typeof(this.bin.list[n]);
			if (nam != 'number') this.bin.list[n] = parseFloat(this.bin.list[n]);
			if (isNaN(this.bin.list[n])) this.bin.list[n] = 0;

			if (this.task == 'increment') this.bin.list[n] += 1;
			if (this.task == 'decrement') this.bin.list[n] -= 1;
			if (this.task == 'count') this.bin.list[n] += 1;
			if (this.task == 'add')   this.bin.list[n] += r8;
			return;
		}
		else
		{
			this.bin.list[this.bin.list.length] = value;		
			this.bin.names[this.bin.names.length] = name;
			return;
		}
	}

//--------------------- Assign --------------------------------

	if (this.command == 'assign')
	{
		if (this.rawSql != '') 
		{
			sql	    = html.resolve(this.rawSql);
			if (this.all) 
			{
				 this.bin.value = html.sqlValueAll(sql);
			}
			else
			{
				 this.bin.value = html.sqlValue(sql);
			}
			return;
		}


		if (this.task == '')
		{
			this.bin.value = this.value;
			return;
		}
		
		a = parseFloat(this.bin.value);
		if (isNaN(a)) a = 0;
		b = parseFloat(this.value);
		if (isNaN(b)) b = 0;

		if (this.task == 'increment') b = 1;
		if (this.task == 'decrement') b = -1;
		if (this.task ==       'sub') b = -b;
		if (this.task ==  'subtract') b = -b;
		this.bin.value = a + b;

		return;
	}
}
//============================================================================================
//				htmlmacro$pie
//============================================================================================
function htmlmacro$pie(args)
{
	var i,text,total,name,labeled;
	var percent,color,list,remain;

	list = args.split(',');
	color = list[0];
	if (color == '') color = 'lightrandom';
	labeled = true;

	if (list.length > 1)
	{
		labeled = false;
		if (list[1] == 'true') labeled = true;
	}

	total = 0;

	for (i=0; i < this.bin.list.length; ++i)
		total += parseFloat(this.bin.list[i]);

	if (total == 0) return '';

	text = '';
	remain = 100;

	for (i=0; i < this.bin.list.length; ++i)
	{
		name = '';
		color = this.html.colorByCount(i);
		if (i < this.bin.names.length)  name = this.bin.names[i];

		percent = (parseFloat(this.bin.list[i]) / total) * 100;
		percent = Math.round(percent * 100) / 100;

		if (i < this.bin.list.length-1) 
			 remain = remain - percent;
		else percent = remain;

		percent = Math.round(percent * 100) / 100;
	
		if (text != '') text += ',';
		text += percent + ':' + color;
		if ((name != '') && labeled) text += ':' + name;
//		if ((name != '') && labeled) text += ':' + name + ' ' + percent + '%';
	}

	return text;
}
//============================================================================================
//				htmlmacro$resolve
//============================================================================================
function htmlmacro$resolve(args)
{
	var i,index,name,value,x,n;

//------------------------ last --------------------------

	args = args.toLowerCase();

	if (args == 'last') return this.bin.last;
	if (args == 'join') return this.bin.list.join(',');
	if (args == 'text') return this.bin.list.join('');

	if (args == 'pie') 
	{
		value = this.pie('');
		return value;
	}
	if (args == 'raw') return this.rawValue;
	if (args == 'length') return this.rawValue.length;

	if (args == 'radian')
	{
		x = parseFloat(this.bin.value);
		if (isNaN(x)) x = 0;
		x = x / 180 * Math.PI;
		return x;
	}

//----------------------- table -----------------------------

	if (args.substr(0,5) == 'table')
	{
		n = 0;
		i = args.indexOf('(');
		if (i < 0) i = args.length;
		value = args.substr(i+1);
		n = parseInt(value);
		if (isNaN(n)) n = 1;	
		return this.table(n);
	}

//----------------------- used -----------------------------

	i = args.indexOf('[');
	if (i < 0) return '';

	name = args.substr(0,i);
	args = args.substr(i+1);
	if (args.substr(args.length-1,1) == ']') args = args.substr(0,args.length-1);

	index = html$i4(args);
	if (isNaN(index)) return '';
	if ((this.bin.list != null) && (name == 'used') && (index < this.bin.list.length))
	{
		value = this.bin.list[index];
		for (i=0; i < this.bin.used.length; ++i)
		{
			if (this.bin.used[i] == index) return i + 1;
		}
		return value;
	}

	if ((this.bin.list != null) && (index < this.bin.list.length))
	{
		value = this.bin.list[index];
		return value;
	}

	return '';
}
//============================================================================================
//				htmlmacro$excluded
//============================================================================================
function htmlmacro$excluded(value)
{
	var i,wholeNumbers,v;

	value = '' + value;
	value = value.toLowerCase();

	wholeNumbers = false;
	if (this.compare ==  'whole-number') wholeNumbers = true;
	if (this.compare == 'whole-numbers') wholeNumbers = true;
	if (this.compare ==   'wholenumber') wholeNumbers = true;
	if (this.compare ==  'wholenumbers') wholeNumbers = true;
	
	if (wholeNumbers)
	{
		value = parseFloat(value);
		if (isNaN(value)) value = 0;
		value = Math.floor(value);	
	}
			
	for (i=0; i < this.excludeList.length; ++i)
	{
		if (wholeNumbers)
		{
			v = parseFloat(this.excludeList[i]);
			if (isNaN(v)) v = 0;
			v = Math.floor(v);	
			if (v == value) return true;
			continue;
		}

		if (this.excludeList[i] == value) return true;
	}
	
	return false;		

}
//============================================================================================
//				htmlmacro$execute
//============================================================================================
function htmlmacro$execute(args)
{
	var value;

	value = '';
	if (this.command == 'random') value = this.random(args);
	if (this.command == 'assign') value = this.bin.value;
	if (this.command ==  'store') value = this.storeValue(args);

	this.bin.last = value;
	this.refCount += 1;
	this.bin.hasValue = true;
	return value;
}
//============================================================================================
//				htmlmacro$storeValue
//============================================================================================
function htmlmacro$storeValue(args)
{
	var value;
	value = '';

	if (this.bin.cur >= (this.bin.list.length-1)) return value;
	this.bin.cur += 1;
	value = this.bin.list[this.bin.cur];
	return value;	
}
//============================================================================================
//				random$execute
//============================================================================================
function random$execute(args)
{
	var value,count;

	if (this.singleValue && this.bin.hasValue) return this.bin.last;
	
	value = '';
	if (this.type ==   'list') value = this.randomList(args);
	if (this.type == 'number') value = this.randomNumber(args);

	return value;
}
//============================================================================================
//				random$randomList
//============================================================================================
function random$randomList(args)
{
	var count,index,value,name;

	name = this.name;

	count = 0;	
	while (true)
	{
		index = this.randomIndex();
		value = this.list[index];

		if (! this.excluded(value)) return value;
		count = count + 1;
		if (count > 20) return value;
	}
}	
//============================================================================================
//				random$randomNumber
//============================================================================================
function random$randomNumber(args)
{
	var count,index,power,value,n,found,dx,i;

	dx = (this.max - this.min);
	count = 0;

//	power = Math.pow(10,this.precision);

	while (true)
	{
		value = Math.floor((Math.random() * dx) % dx) + this.min;				

		if (this.decimals > 0)
		{
			value += Math.random();
			if (value > this.max) value = this.max;
		}
	
		if (this.modulus > 1) 
		{
			n = Math.round(value / this.modulus);
			value = n * this.modulus;
		}	
		
		power = Math.pow(10,this.decimals);
		value = Math.round(value * power) / power;

		if (count > 50) return value;
		count = count + 1;

		if (this.excluded(value)) continue;
		if (! this.unique) return value;

		found = false;
	
		for (i=0; i < this.used.length; ++i)
		{
			if (this.used[i] == value) 
			{
				found = true;
				break;
			}
		}

		if (! found) 
		{
			this.used[this.used.length] = value;
			return value;
		}
			
	}
}	
//============================================================================================
//				random$randomIndex
//============================================================================================
function random$randomIndex()
{
	var count,found,i,index;
	var t,dx;
	
	t = this;
	
	dx = (this.max - this.min) + 1;
	
	count = 0;

	while (true)
	{
		index = (Math.round(Math.random() * dx) % dx) + this.min;				


		if (count > 20) return index;
		count = count + 1;

		if (! this.unique) return index;	

		found = false;
		for (i=0; i < this.used.length; ++i)
		{
			if (this.used[i] == index) 
			{
				found = true;
				break;
			}
		}

		if (! found) 
		{
			this.used[this.used.length] = index;
			return index;
		}
			
	}
}
//====================================================================
//		html$fromCsv
//====================================================================
function html$fromCsv(data,sep)
{
	var list;
	
	if (typeof(sep) == 'undefined') sep = ',';
	list = new Array();
	this.fromCsv_A(data,list,sep);
	return list;
}
//====================================================================
//		html$fromCsv_A
//====================================================================
function html$fromCsv_A(data,list,sep)
{
	var c,q,first,value,n,skip,inside,i;

	data = this.trim(data);	
	if (data == '') 
	{
		list[list.length] = '';
		return;
	}

	value = '';
	inside = false;
	first = true;
	skip = false;

	for (i=0; i < data.length; ++i)
	{
		if (skip)
		{
			skip = false;
			continue;
		}
	
		c = data.substr(i,1);
		if (c == sep && (! inside))
		{
			list[list.length] = value;
			data = data.substr(i+1);
			this.fromCsv_A(data,list,sep);
			return;
		}

//--------------- inside Quotes ----------------

		if (inside)
		{
			if (c != q)
			{
				value += c;
				continue;
			}
			
			n = '';
			if (i+1 < data.length) n = data.substr(i+1,1);
			if (n == q)
			{
				value += q;
				skip = true;
				continue;
			}
			
			inside = false;
			continue;
		}

//----------------- outside quotes ------------

		if (c == '"' || c == "'")
		{
			q = c;
			inside = true;
			continue;			
		}

		value += c;
	}	

	list[list.length] = value;
	return;
}
//===========================================================================
//				htmlDocument$
//===========================================================================
function htmlDocument$(html,url)
{
	var list,i;
	
	this.html		= html;
	this.resolve		= htmlDocument$resolve;
	this.resolve_A		= htmlDocument$resolve_A;
	this.read		= htmlDocument$read;
	
//-------------------------------------------------------


	url = this.html.trim(url);
	if (url.indexOf('://') < 0) url = 'http://' + url;

	this.url		= url;
	this.arguments		= '';
	this.root		= '';
	this.href		= '';		// load file read

	list = url.split('?',2);
	if (list.length == 2)
	{
		this.arguments = list[1];
		url = this.html.trim(list[0]);
	}
	
	this.root = url;

	list = url.split('://',2);
	this.access = list[0].toLowerCase();

	url = this.html.trim(list[1]);

	if (! ( (this.access == 'http') || 
			(this.access == 'https') ||
			(this.access == 'file') ||
			(this.access == 'ftp')))  throw "Invalid URL: " + url;


	i = url.lastIndexOf('/');
	if (i < 0) i = url.length;
	
	this.root = url.substr(0,i);
	this.file = url.substr(i+1);
}
//===========================================================================
//			htmlDocument$resolve
//===========================================================================
function htmlDocument$resolve(url)
{
	var test;
	
	url = this.html.trim(url);
	if (url == '') return '';

	test = url.substr(0,8).toLowerCase();
	if (test.substr(0,7) == 'http://') return url;
	if (test.substr(0,8) == 'https://') return url;
	if (test.substr(0,7) == 'file://') return url;
	if (test.substr(0,6) == 'ftp://') return url;

	return this.resolve_A(this.root,url);
}
//===========================================================================
//			htmlDocument$resolve_A
//===========================================================================
function htmlDocument$resolve_A(root,url)
{
	var i;
	
	if (url.substr(0,1) == '/')
	{
		i = root.indexOf('/');
		if (i < 0) i = root.length;
		root = root.substr(0,i);
		url = url.substr(1);
		return this.resolve_A(root,url);
	}

	if (url.substr(0,3) == '../')
	{
		i = root.lastIndexOf('/');
		if (i < 0) return '';
		root = root.substr(0,i);
		url = url.substr(3);
		return this.resolve_A(root,url);
	}
	
	if (url.substr(0,3) == './')
	{
		url = url.substr(2);
		return this.resolve_A(root,url);
	}
	
	
	return this.access + '://' + root + '/' + url;
	
}
//===========================================================================
//			htmlDocument$read
//===========================================================================
function htmlDocument$read(url)
{
	var http;
	var fs,f,text;

	this.href = '';
	
	if (arguments.length == 0)
	{
		url = this.url;
	}
	else
	{
		url = this.resolve(url);
		if (url == '') return '';
	}

	return this.html.sys.readUrl(url);
	
}
//=======================================================================
//			htmlGrid$
//=======================================================================
function htmlGrid$(html,out,ele,x,y)
{
	var height,n,width,filler;

	this.html = html;
	this.ele  = ele;
	this.out  = out;

	this.pageLength			= (out.ymax - out.ymin) / 72 * 110;
	
	this.columns			= ele.columns;
	if (this.columns < 1) this.columns = 1;

	this.x				= x;
	this.y				= y;
	this.xpos			= 0;
	this.ypos			= 0;
	this.maxWidth			= ele.active.maxWidth;
	this.maxHeight			= this.pageLength - this.y;
	this.cellspacing		= ele.cellspacing;
	this.columnHeight		= ele.columnHeight;
	this.clipCell			= ele.clipCell;
	this.count			= 0;
	this.maxRowHeight		= 0;
	this.moved			= false;

	if (ele.fixed_width) this.maxWidth = ele.iwidth;
	if (ele.fixed_height) this.maxHeight = 99999999;
	
	this.offsetHeight		= 0;
	this.offsetWidth		= 0;
	
	this.row			= 1;
	this.col			= 1;
	
	this.columnOrder		= ele.columnOrder;

	filler = this.cellspacing * (this.columns - 1); 
	width  = this.maxWidth - filler;
	this.columnWidth = Math.floor(width / this.columns);

	if (ele.columnWidth != '')
	{
		width = parseInt(ele.columnWidth);
		if (isNaN(width)) width = this.columnWidth;
		this.columnWidth = width;
	}

	this.write			= htmlGrid$write;
	this.write_A			= htmlGrid$write_A;
	this.writeFull			= htmlGrid$writeFull;
	this.fit			= htmlGrid$fit;

	this.pageBreak			= htmlGrid$pageBreak;
	this.columnBreak		= htmlGrid$columnBreak;
	this.updateSize			= htmlGrid$updateSize;

	this.pos			= htmlGrid$pos;
	this.reset			= htmlGrid$reset;

	this.start			= htmlGrid$start;
	this.end			= htmlGrid$end;
	this.done			= htmlGrid$done;
}
//============================================================================================
//			html$pos
//============================================================================================
function htmlGrid$pos(height)
{
	if (! this.moved) return;

	if ((this.ypos + height) > this.maxHeight) this.columnBreak(height);
	this.moved = false;
}
//============================================================================================
//			html$reset
//============================================================================================
function htmlGrid$reset()
{
	this.col = 1;
	this.row = 1;

	this.ypos += this.maxRowHeight;
	this.maxRowHeight = 0;
	
	this.y = this.ypos + this.y;
	this.maxHeight		= this.pageLength - this.y;

	this.ypos	= 0;
	this.xpos	= 0;
	this.count	= 0;
	this.moved	= false;
}
//============================================================================================
//			html$done
//============================================================================================
function htmlGrid$done()
{

	this.ypos		= 0;
	this.xpos		= 0;
	this.x			= 0;
	this.y		= this.offsetHeight;
	this.maxWidth	= this.ele.active.maxWidth;
	this.maxHeight	= this.pageLength - this.y;

	this.row		= 1;
	this.col		= 1;
	this.count		= 0;
}
//============================================================================================
//			html$write
//============================================================================================
function htmlGrid$write(data)
{
	var xmin,xmax,ymin,ymax,height;
	var xhtml,width;
	var t,px,py;
	
	t = this;
	if (data == '') return;

	data = this.html.resolve(data);	
	if (data == '') return;

	width = this.columnWidth;
	if (this.columnOrder) width = this.ele.active.maxWidth;

	this.xhtml[0].init(10);
	this.xhtml[0].parse(data);
	this.xhtml[0].resize(width,99999);

	height = this.xhtml[0].body.offsetHeight;
	width = this.xhtml[0].body.offsetWidth;
	
	height += this.ele.paddingTop + this.ele.paddingBottom + this.ele.borderTop + this.ele.borderBottom;
	width += this.ele.paddingLeft + this.ele.paddingRight + this.ele.borderLeft + this.ele.borderRight;

	if ((this.ypos + height) > this.maxHeight) this.columnBreak(height);

	this.start(height);

	xmin = this.xpos + this.x;
	ymin = this.ypos + this.y;
	xmax = xmin + this.columnWidth;
	ymax = ymin + height + this.ele.paddingTop + this.ele.paddingBottom + this.ele.borderTop + this.ele.borderBottom; 

	px = this.xpos + this.x + this.ele.borderLeft + this.ele.paddingLeft;
	py = this.ypos + this.y + this.ele.borderTop + this.ele.paddingBottom;

	this.ele.writeBackground(this.out,xmin,ymin,xmax,ymax);
	this.ele.writeBorder(this.out,xmin,ymin,xmax,ymax);

	this.xhtml[0].body.write(this.out,px,py);

	this.updateSize(xmax,ymax);

	this.end(height);

}
//============================================================================================
//			htmGridl$write_A
//============================================================================================
function htmlGrid$write_A(data,width)
{
	var xmin,xmax,ymin,ymax,height;
	var xhtml;
	var t;
	
	t = this;


	if (data == '') return;

	data = this.html.resolve(data);	
	if (data == '') return;


	this.xhtml[0].init(10);
	this.xhtml[0].parse(data);
	this.xhtml[0].resize(width,99999);

	height = this.xhtml[0].body.offsetHeight;	
	if ((this.ypos + height) > this.maxHeight) this.columnBreak(height);

	xmin = this.xpos + this.x;
	ymin = this.ypos + this.y;
	xmax = xmin + this.xhtml[0].body.offsetWidth;
	ymax = ymin + this.xhtml[0].body.offsetHeight; 

	this.xhtml[0].body.write(this.out,xmin,ymin);
	height = this.xhtml[0].body.offsetHeight;
	this.ypos += height;
	if (height > this.maxRowHeight) this.maxRowHeight = height;
	
	this.updateSize(xmax,ymax);
}
//============================================================================================
//			html$writeFull
//============================================================================================
function htmlGrid$writeFull(data)
{
	if (data == '') return;

	if (this.ypos > this.maxRowHeight) this.maxRowHeight = this.ypos;

	this.xpos = 0;
	this.x = 0;
	this.ypos = this.maxRowHeight;
	this.maxRowHeight = 0;

	this.row = 1;
	this.col = 1;
	
	this.write_A(data,this.maxWidth);
	
	this.y = this.maxRowHeight;
	this.maxRowHeight = 0;

	this.ypos = 0;
	this.xpos = 0;
	this.row  = 1;
	this.col  = 1;
	this.maxHeight	= this.pageLength - this.y;

}
//==================================================================================
//			updateSize
//==================================================================================
function htmlGrid$updateSize(width,height)
{
	if (width > this.offsetWidth) this.offsetWidth = width;
	if (height > this.offsetHeight) this.offsetHeight = height;
}
//==================================================================================
//			fit
//==================================================================================
function htmlGrid$fit(height)
{
	var remain;
	
	if (height <= 0) return true;
	if (this.ypos + height > this.maxHeight) return false;
	return true;
}
//==================================================================================
//				pageBreak
//==================================================================================
function htmlGrid$pageBreak()
{

	this.out.pageBreak(0,true);

	this.ypos		= 0;
	this.xpos		= 0;
	this.y			= 0;
	this.x			= 0;
	this.count		= 0;
	this.maxHeight	= this.pageLength;
	this.pageHeight		= 0;

	this.offsetHeight	= 0;
	this.offsetWidth	= 0;

	this.row		= 1;
	this.col		= 1;
}
//==================================================================================
//			columnBreak
//==================================================================================
function htmlGrid$columnBreak(height)
{
	var height;

	if (this.ypos + height > this.maxHeight)
	{
		this.pageBreak();
		return;
	}

	if (this.col >= this.columns) 
	{
		this.col = 1;
		this.row = 1;
		this.xpos = 0;
		if (this.count > 1) this.pageBreak();
	}
	else
	{
		height = this.ypos + this.y;
		if (height > this.pageHeight) this.pageHeight = height;
		this.col	+= 1;
		this.xpos	= (this.col - 1) * (this.columnWidth + this.cellspacing);
	}

	this.ypos   = 0;
	this.count  = 1;
	this.row	= 1;
	this.atTop	= true;
}
//============================================================================================
//				htmlGrid$end
//============================================================================================
function htmlGrid$end(height)
{
	if (this.clipCell)
	{
		this.out.plot.clipEnd();
		this.out.plot.clip = false;
	}

	this.moved = true;
	
	if (this.columnOrder)
	{	

		this.col += 1;
		if (this.col > this.columns) 
		{
			this.row += 1;
			this.col  = 1;
			this.ypos += this.maxRowHeight;
			this.maxRowHeight = 0;
		}
		else
		{
			if (height > this.maxRowHeight)  this.maxRowHeight = height;
		}

		this.xpos = (this.col-1) * (this.columnWidth + this.cellspacing);
	}
	else
	{
		if (height > this.maxRowHeight)  this.maxRowHeight = height;
		this.ypos += this.maxRowHeight;
		this.maxRowHeight = 0;
		this.row += 1;
	}
}
//============================================================================================
//				htmlGrid$start
//============================================================================================
function htmlGrid$start(height)
{

	var x1,y1,x2,y2;

	this.count += 1;
	this.height = height;	

//----------------- Column order ------------------
	
	if (this.columnOrder)
	{
		if ((this.ypos + height) > this.maxHeight) this.columnBreak(height);
		if (height > this.maxRowHeight) this.maxRowHeight = height;
	}
	
//----------------- Row order ----------------
	else
	{
		if ((this.ypos + height) > this.maxHeight) this.columnBreak(height);
		this.maxRowHeight = height;
	}
	
	if (! this.clipCell) return;

	x1 = this.html.pixelToInch_x(this.xpos);
	y1 = this.html.pixelToInch_y(this.ypos);
	x2 = this.html.pixelToInch_x(x1 + this.width);
	y2 = this.html.pixelToInch_y(y1 + this.height);
		
	this.out.plot.clip = true;
	this.out.plotclipBegin(x1,y1,x2,y2);
}
//=========================================================================================
//			html$parseXml_
//=========================================================================================
function html$parseXml_(data)
{
	var text,i,tag,tagData;
	var body,a,xml;

	data = this.trim(data);

	xml = new Object();
	xml.tagName		= 'XML';
	xml.tag		= null;
	xml.value		= '';
	xml.parentNode		= null;
	
	xml.firstChild		= null;
	xml.nextSibling		= null;
	xml.lastChild		= null;

	this.activeNode		= xml;

//--------------- strip comments ----------

	while (true)
	{
		i = data.indexOf('<' + '!--');
		if (i < 0) break;
		a = data.substr(0,i);
		data = data.substr(i+4);
		i = data.indexOf('-->');
		if (i < 0) i = data.length;
		data = a + data.substr(i+3);
	}
	
	while (data != '')
	{
		i = data.indexOf('<');
		if (i < 0) break;
		
		text = data.substr(0,i);

		data = data.substr(i+1);
		i = data.indexOf('>');
		if (i < 0) i = data.length;
		
		tagData = data.substr(0,i);
		data = data.substr(i+1);

		tag = this.parseTag_(tagData);

		if (tag.start) this.startXml_(tag,text);
		if (tag.end) this.endXml_(tag,text);
	}

	return xml;
}
//=========================================================================================
//				html$endXml_
//=========================================================================================
function html$endXml_(tag,text)
{
	var p;

	p = this.activeNode;

	while (p.parentNode != null)
	{
		if (p.tagName == tag.name)
		{
			this.activeNode.value = escape(text);
			this.activeNode = p.parentNode;
			return;
		}
		p = p.parentNode;
	}

	this.activeNode = p;
}
//=========================================================================================
//				html$startXml_
//=========================================================================================
function html$startXml_(tag)
{
	var p,e;

	p = this.activeNode;

	e = new Object();
	e.tagName = tag.name.toUpperCase();
	e.tag = tag;
	e.value = '';
	e.parentNode = p;
	
	e.firstChild = null;
	e.nextSibling = null;
	e.lastChild = null;

	if (p.firstChild == null)
	{
		p.firstChild = e;
		p.lastChild = e;
	}
	else
	{
		p.lastChild.nextSibling = e;
		p.lastChild = e;
	}	
	this.activeNode = e;
}	
//=========================================================================================
//				html$mathML
//=========================================================================================
function html$mathML(node,hold)
{
	var text;
	text = '';

	if (node == null) return text;

	if (node.tagName == 'XML')
	{
//		text = '<SPAN class=mathml>' + this.mathML(node.firstChild,false) + '</SPAN>';

		text = this.mathML(node.firstChild,false);
		return text;
	}

	switch (node.tagName)
	{
	case       "MI": text = this.mathML_decode(node.value) ; break;
	case       "MO": text = this.mathML_decode(node.value) ; break;
	case       "MN": text = this.mathML_decode(node.value) ; break;
	case    "MTEXT": text = this.mathML_decode(node.value) ; break;
	case     "NONE": text = '' ; break;
	case   "MSTYLE": text = '' ; break;
	case  "MPADDED": text = '' ; break;

//-------- fixed arguments ---------

	case    "MFRAC": text = this.mathML_A(node,'<divide>#1<by>#2</divide>',true); break;
	case  "MSUBSUP": text = this.mathML_A(node,'#1|ss#2,#3|',true); break;
	case     "MSUB": text = this.mathML_A(node,'#1|v#2|',true); break;
	case     "MSUP": 
		if (this.mathML_simpleChildren(node,2))
		{
			 text = this.mathML_A(node,'#1|^#2|',true);
		}
		else
		{	
			text = this.mathML_A(node,'<raise>#1<power><font size=2>#2</font></raise>',true);
		}
	break;

	case    "MOVER": text = this.mathML_A(node,'#1<span style="border-top:#2">#3</span>',true); break;
	case   "MUNDER": text = this.mathML_A(node,'#1<span style="border-bottom:#2">#3</span>',true); break;

//--------- variable arguments --------

	case "MENCLOSE": text = this.mathML_A(node,'<span>#1</span>\r\n',false); break;
	case "MPHANTOM": text = this.mathML_A(node,'<span style="visibility:hidden">#1</span>\r\n',false); break;

	case    "MSQRT": text = this.mathML_A(node,'<root>#1</root>\r\n',false);  break;
	case     "MROW": text = this.mathML_A(node,'#1',false); break;

	case   "MTABLE": text = this.mathML_A(node,'<TABLE>#1</TABLE?',false); break;
	case      "MTR": text = this.mathML_A(node,'<TR>#1</TR>',false); break;
	case      "MTD": text = this.mathML_A(node,'<TD>#1</TD>',false); break;

	case  "MFENCED": text = this.mathML_A(node,'<quantity>#1</quantity>\r\n',false); break;

	default: text = node.tagName + ' = ' + node.value + '\r\n';
	}

	if (hold) return text;

	if (node.nextSibling != null) text += this.mathML(node.nextSibling,false);

	return text;

}
//=========================================================================================
//				html$mathML_A
//=========================================================================================
function html$mathML_A(node,template,hold)
{
	var child,i,n,list;
	
	list = new Array();
	child = node.firstChild;

	n = 0;
	
	while (true)
	{
		n += 1;
		if (child == null) return template;
		i = template.indexOf('#' + n);
		if (i < 0) return template;
		template = template.substr(0,i) + this.mathML(child,hold) + template.substr(i+2);
		child = child.nextSibling;
	}

	return template;
}

//=========================================================================================
//					html$mathML_decode
//=========================================================================================
function html$mathML_simpleChildren(node,count)
{
	var child,count;
	
	if (node.firstChild == null) return false;
	
	child = node.firstChild;
	while (true)
	{
		count = count - 1;
		if (! ((child.tagName == 'MO') ||
			   (child.tagName == 'MI') ||
			   (child.tagName == 'MN') ||
			   (child.tagName == 'MTEXT') ||
			   (child.tagName == 'NONE') ||
			   (child.tagName == 'MI') ||
			   (child.tagName == 'MI'))) return false;
		
		if (count <= 0) return true;
		child = child.nextSibling;
		if (child == null) return false;
	}
			
}
//=========================================================================================
//				html$mathML_decode
//=========================================================================================
function html$mathML_decode(text)
{
	var i,j,a,b,c,unicode,n,value;

	var unicodes = ['2212','03B4','00B1','2062'];
	var chars    = ['|-|','|lambda|','|+-|',''];

	var names = ['times','equals','invisibletimes'];
	var nameValues = ['|*|',' = ',''];
	
	text = unescape(text);
	text = this.trim(text);
		
	i = text.indexOf('&');
	if (i < 0) return text;

	a = text.substr(0,i);

	b = text.substr(i+1);
	j = b.indexOf(';');
	if (j < 0) return text;
	
	value = b.substr(0,j);
	c = b.substr(j+1);

	if (value.substr(0,1) == '#')
	{
		value = value.substr(1);
		if (value.substr(0,1).toUpperCase() == 'X')
		{
			value = value.substr(1);
			n = parseInt(value,16);
		}
		else n = parseInt(value);
		
		if (isNaN(n)) 
		{
			return text;
		}	

		unicode = n.toString(16);
		unicode = unicode.toUpperCase();
		if (unicode.length == 1) unicode = '000' + unicode;
		if (unicode.length == 2) unicode =  '00' + unicode;
		if (unicode.length == 3) unicode =   '0' + unicode;
	
		for (i=0; i < unicodes.length; ++i)
		{
			if (unicode == unicodes[i]) 
			{
				text = a + chars[i] + c;
				return this.mathML_decode(text);
			}
		}
	}
	else
	{
		value = value.toLowerCase();
		for (i=0; i < names.length; ++i)
		{
			if (value == names[i])
			{
				text = a + nameValues[i] + c;
				return this.mathML_decode(text);
			}
		}	
	}
	
	return text;	
}
//=====================================================================
//			 html$initializeForeignOutput
//=====================================================================
function html$initializeForeignOutput(obj)
{

	this.fake				= html$fake;
		
//----------------- pdf properties used by CollinsHTML ----------------

	obj.xmin				= 0;				// 8.5 X 11 Inch Page Size (points)
	obj.xmax				= 8.5 * 72;		
	obj.ymin				= 9;
	obj.ymax				= 11 * 72;
	
	obj.xpos				= 0;				// pdf origin is TOP / LEFT
	obj.ypos				= obj.ymax;

	obj.marginLeft				= 0;
	obj.marginRight				= 0;
	obj.marginTop				= 0;
	obj.marginBottom			= 0;
	obj.drawMargin				= false;

//-------------------- pdf functions called by CollinsHTML -----------------------

	obj.setPageSize				= this.fake;		// dummy routines
	obj.setPageBackgroundColor		= this.fake;
	obj.setPageMarginColor			= this.fake;
	obj.setLandscape			= this.fake;
	obj.setmarginLeft			= this.fake;
	obj.setmarginRight			= this.fake;
	obj.setmarginTop			= this.fake;
	obj.setmarginBottom			= this.fake;
	obj.setFontColor			= this.fake;
	obj.setFontSize				= this.fake;
	
	obj.setWatermark			= this.fake;
	obj.setFontName				= this.fake;
	obj.setOpacity				= this.fake;
	
	obj.drawBorder				= this.fake;
	obj.setGraphicFillColor			= this.fake;
	obj.setGraphicColor			= this.fake;
	obj.drawRectangle			= this.fake;
	obj.tileImage				= this.fake;

	obj.setLetterSpacing			= this.fake;
	obj.setWordSpacing			= this.fake;
	obj.setFontRender			= this.fake;
	obj.setFontSkew				= this.fake;
	obj.setFontScale			= this.fake;
	obj.setFont				= this.fake;
	obj.placeImage				= this.fake;		

	obj.setFont				= this.fake;
	obj.setClip				= this.fake;

	obj.pageBreak				= this.fake;
	obj.placeText				= this.fake;

	obj.clipBegin				= this.fake;
	obj.clipEnd				= this.fake;
	obj.charHeight				= this.fake;
	obj.drawTableBox			= this.fake;

	obj.placeFormInput			= this.fake;
	obj.placeFormSelect			= this.fake;
	obj.placeFormText			= this.fake;
	
	obj.drawChar				= this.fake;
	obj.setGraphicLineWeight		= this.fake;
	obj.setGraphicLineStyle			= this.fake;
	obj.drawLinestring2			= this.fake;

	obj.drawLine				= this.fake;
	obj.placeGraphic			= this.fake;

	obj.placeHotspot			= this.fake;
}
//==================================================================================
//		html$fake
//==================================================================================
function html$fake()
{
	return null;
}
//==================================================================================
//		html$getImageSize
//==================================================================================
function html$getImageSize(filename)
{
	var obj;

try
{
	obj = this.getImageSize_A(filename);
	if (obj == null) return null;
	
	if (obj.height <= 0) return null;
	if (obj.width  <= 0) return null;
	if (obj.size   <= 0) return null;

	return obj;
}
catch (e) { return null; }

}
//==================================================================================
//		html$jpegSize
//==================================================================================
function html$jpegSize(filename)
{	
	var data,obj,a,where;

	obj = CollinsPDF().jpegsize(filename,where);
	if (obj == null) return null;

	obj.angle = 0;
	obj.is3D = false;

	if (isNaN(obj.width) || isNaN(obj.height) || isNaN(obj.size)) obj = null;
	return obj;
}
//==================================================================================
//				html$getImageSize_A
//==================================================================================
function html$getImageSize_A(filename)
{	
	var obj,i,j,list,a,element,data,id,name;
	var temp,list,height,width,ext,value,text;		

	obj = null;
	if (filename == '') return null;

	if (filename.substr(0,6).toUpperCase() == 'MACRO:')
	{
		name = filename.substr(6);
		filename = this.resolveTag(name);
	}


	if ((filename.substr(0,7).toUpperCase() == 'BASE64,') || (filename.substr(0,4).toUpperCase() == 'HEX,') || (filename.substr(0,8).toUpperCase() == 'ASCII85,')) 
	{
		i = filename.indexOf(':');
		if (i < 0) return null;
			
		temp = filename.substr(0,i);		
		data = filename.substr(i+1);
		
		filename = temp;
		list = temp.split(',');
		if (list.length < 3) return null;
		
		value = list[0];
		id = this.trim(value.toUpperCase());
		
		width = parseInt(list[1]);
		height = parseInt(list[2]);

		obj = new Object();
		obj.format = 'hex';
		obj.height = height;
		obj.width = width;
		return obj;		
	}

	if (filename.substr(0,7).toUpperCase() == 'CANVAS:')
	{
		id = filename.substr(7);
		element = document.getElementById(id);
		if (element == null) return null;
	
		data = element.toDataURL("image/jpeg");
		i = data.indexOf(',');
		data = data.substr(i+1);
		
		obj = new Object();
		obj.format = 'hex';
		obj.height = element.offsetHeight;
		obj.width = element.offsetWidth;
		return obj;		
	}

	if ((filename.substr(0,5).toUpperCase() == 'FILE,'))
	{
		i = filename.indexOf(':');
		if (i < 0) return null;
		
		text = filename.substr(0,i);
		list = text.split(',');
		obj = new Object();
		obj.format = '';

		obj.height = 0;
		obj.width = 0;
		obj.size = 0;
		obj.is3D = false;
		obj.ext = '.jpg';
		obj.filename = 'inline' + this.images.length;
		obj.isData = false;

		obj.size  = filename.length - (i+1);
		if (obj.format == 'hex') obj.size += 1;
		if (obj.format == 'hex85') obj.size += 2;		

		for (i=1; i < list.length; ++i)
		{
			value = list[i];
			if (this.trim(value) == '') continue;
			a = value.split('=');
			if (a.length != 2) continue;
			
			name = a[0];
			name = this.trim(name.toLowerCase());
			value = parseInt(this.trim(a[1]));
			if (name == 'name') obj.filename = value;
			if (name == 'format') obj.format = a[1].toLowerCase();

			if (isNaN(value)) continue;
			if (name == 'width') obj.width = value;
			if (name == 'height') obj.height = value;
		}
		return obj;
	}		
	
	i = filename.lastIndexOf('.');
	ext = filename.substr(i);

	ext = ext.toLowerCase();
	if (filename.toLowerCase().indexOf('_jpg8.txt') >= 0) ext = '.jpg8';
	if (filename.toLowerCase().indexOf('_jpgx.txt') >= 0) ext = '.jpgx';
	if (filename.toLowerCase().indexOf('_u3dx.txt') >= 0) ext = '.u3dx';
	if (filename.toLowerCase().indexOf('_u3d8.txt') >= 0) ext = '.u3d8';
	if (filename.toLowerCase().indexOf('_prcx.txt') >= 0) ext = '.prcx';
	if (filename.toLowerCase().indexOf('_prc8.txt') >= 0) ext = '.prc8';
	if (filename.toLowerCase().indexOf('_u3d.txt')  >= 0) ext = '.u3d';
	if (filename.toLowerCase().indexOf('_prc.txt')  >= 0) ext = '.prc';

	if (ext == '.jpg') 
	{
		obj = this.jpegSize(filename);
		if (obj == null) return null;
		obj.ext = '.jpg';
		obj.is3D = false;
		obj.filename = filename;
		obj.format = '';
		obj.isData = false;

		return obj;
	}
	
	if ((ext == '.jpgx') || (ext == '.jpg8')) 
	{		
		obj = new Object();
		obj.ext = ext;
		obj.format = 'hex';
		obj.filename = filename;
		obj.is3D = false;
		obj.isData = false;

		if (ext == '.jpg8') obj.format = 'hex85';
		
		this.filename_size(filename,obj);		
		return obj;
	}

	if ((ext == '.u3dx') || (ext == '.u3d8') || (ext == '.u3d')) 
	{		
		obj = new Object();
		obj.ext = ext;
		obj.format = 'none';
		obj.filename = filename;
		obj.size = this.sys.fileSize(filename);
		obj.is3D	= true;
		obj.subtype	= 'U3D';
		obj.isData = false;

		if (ext == '.u3dx') obj.format = 'hex';
		if (ext == '.u3d8') obj.format = 'hex85';

		if (obj.format != 'none') this.filename_size(filename,obj);		
		obj.height = 8 * 72;
		obj.width  = 8 * 72;
		
		return obj;
	}


	if ((ext == '.prcx') || (ext == '.prc8') || (ext == '.prc')) 
	{		
		obj = new Object();
		obj.ext = ext;
		obj.format = 'none';
		obj.filename = filename;
		obj.size = this.sys.fileSize(filename);
		obj.isData = false;
	
		obj.is3D	= true;
		obj.subtype	= 'PRC';

		if (ext == '.prcx') obj.format = 'hex';
		if (ext == '.prc8') obj.format = 'hex85';

		if (obj.format != 'none') this.filename_size(filename,obj);		
		obj.height  = 8 * 72;
		obj.width   = 8 * 72;
		
		return obj;
	}

	return null;
}
//===================================================================================
//				html$filename_size
//===================================================================================
function html$filename_size(filename,obj)
{
		var i,j,text,c,name,value;
		
		obj.size = 0;
		obj.height = 0;
		obj.width = 0;

		name = filename;

		i = name.lastIndexOf('/');
		j = name.lastIndexOf('\\');
		if (j > i) i = j;
		if (i >= 0) name = name.substr(i+1);
	
		i = name.indexOf('.');
		text = name.substr(0,i);
		text = text.toLowerCase();

		i = text.lastIndexOf('_');		// strip type
		if ( i < 0) return;
		text = text.substr(0,i);

		i = text.lastIndexOf('_');
		if ( i < 0) return;
		text = text.substr(i+1);
		
		value = '';
		for (i=text.length-1; i >= 0; --i)
		{
			c = text.charAt(i).toLowerCase();
			if (c >= '0' && c <= '9') 
			{
				value = c + value;
				continue;
			}
			if (c == 'w') 
			{
				obj.width = parseInt(value);
				value = '';
				continue;
			}
			if (c == 'h') 
			{
				obj.height = parseInt(value);
				value = '';
				continue;
			}
			if (c == 's') 
			{
				obj.size = parseInt(value);
				value = '';
				continue;
			}
			break;
		} 
}
var syslog = '';
//==========================================================================================
//	Author: Clifford L. Collins				Date: Jan 2013
//-----------------------------------------------------------------------------------------
//	Collins Software
//	7710 Janak Drive, Houston Texas 77055
//	http://CollinsSoftware.com
//=========================================================================================

//==================================================================
//							log
//==================================================================
function log(text)
{
	if (arguments.length == 0) return syslog;

	if (syslog != '') syslog += '\r\n';
	syslog += text;
}
//==================================================================
//			client$ (client)
//==================================================================
function client$()
{	
	this.name			= 'microsoft';
	this.pdf			= null;

	this.init			= client$init;
	this.init();

	this.isServer			= false;
	this.isClient			= true;

	this.startSend			= client$client_startSend;
	this.endSend			= client$client_endSend;
	this.send			= client$client_send;
	this.sqlRead			= client$sqlRead;
	
	this.email			= client$client_email;
}
//==================================================================
//			client$sqlRead
//==================================================================
function client$sqlRead(sql)
{
	return null;
}
//==================================================================
//			client$init
//==================================================================
function client$init()
{
	this.http			= null;
	this.currentDate		= 1 * new Date();	

	this.fileRead			= client$fileRead;
	this.fileWrite			= client$fileWrite;
	this.fileSize			= client$fileSize;
	this.fileExists			= client$fileExists;
	this.fileSend			= client$fileSend;
	this.writeToStream		= client$writeToStream;
	this.uploadStream		= client$uploadStream;
	this.uploadFile			= client$uploadFile;
	this.createTextFile		= client$createTextFile;

	this.readFile			= client$readFile;
	this.readUrl			= client$readUrl;
	this.httpInit_			= client$httpInit_;
	this.isUrl_			= client$isUrl_;

	this.date_			= client$date_;
		
	this.streamValue		= client$streamValue;
	this.hexEncode			= client$hexEncode;

	this.copyDate			= 2 * this.currentDate;
}
//==================================================================
//			client$hexEncode
//==================================================================
function client$hexEncode(stream)
{
	var i,value;
	var xlen,a,c,xchr;
	
	value = "";
	xlen = 0;

	stream.Position = 0;		// set to text mode
	stream.Type = 2;

	for (i=0; i < stream.size; ++i)
	{
			if (xlen == 128)
			{
				value += "\n";
				xlen = 0;
			}
			xlen += 1;

			stream.Position = i;
			xchr = stream.readText(1);
			c = xchr.charCodeAt(0);
			c = c & 255;			// unicode to byte

			a = c.toString(16).toUpperCase();
			
			if (a.length == 0) a = '00';
			if (a.length == 1) a = '0' + a;			
			value += a;	
	}
	value += '>';	
	return value;	
}
//==========================================================================================
//			client$date_
//==========================================================================================
function client$date_()
{
	var y,m,d,h,min,sec,xdate,text;

	xdate = new Date();
	y = xdate.getFullYear();
	m = xdate.getMonth() + 1;
	d = xdate.getDate();
	h = xdate.getHours();
	min = xdate.getMinutes();
	sec = xdate.getSeconds();
	
	if (m < 10) m = '0' + m;
	if (d < 10) d = '0' + d;
	if (h < 10) h = '0' + h;
	if (min < 10) min = '0' + min;
	if (sec < 10) sec = '0' + sec;

	text = '' + y + m + d + h + min + sec;
	return text;
}
//==================================================================
//			client$client_startSend
//==================================================================
function client$client_startSend(filename,as,download)
{

}
//==========================================================================================
//			client$client_send
//==========================================================================================
function client$client_send(text)
{

}
//==================================================================
//			client$client_endSend
//==================================================================
function client$client_endSend()
{
}
//==================================================================
//			client$createTextFile
//==================================================================
function client$createTextFile(filename)
{
}
//==================================================================
//			client$fileRead
//==================================================================
function client$fileRead(filename)
{
	return this.readUrl(filename);
}
//===========================================================================
//			client$fileWrite
//===========================================================================
function client$fileWrite(data,filename)
{
	var fs,f;
}
//==============================================================================
//                   client$fileSize
//==============================================================================
function client$fileSize(filename)
{	
	var buffer;

	buffer = CollinsPDF().readBuffer(filename);
	return buffer.length;

}
//==============================================================================
//                   client$fileExists
//==============================================================================
function client$fileExists(filename)
{	
	var text;

	text = '' + this.readUrl(filename);
	if (text.length > 0) return true;
	return false;
}
//================================================================
//                   client$fileSend (toClient)
//=================================================================
function client$fileSend(filename)
{ 

}
//====================================================================================
//				client$streamValue
//====================================================================================
function client$streamValue(stream,pos) 
{
	var c;

	c = stream.charCodeAt(pos);
	c = c & 255;			// unicode to byte

	return c;
}
//==========================================================================================
//			client$writeToStream
//==========================================================================================
function client$writeToStream()
{
	return null;
}
//====================================================================================
//			client$uploadStream
//====================================================================================
function client$uploadStream(server,stream,filename)
{
}
//====================================================================================
//			client$uploadFile
//====================================================================================
function client$uploadFile(server,filename)
{	
}
//=================================================================
//			client$client_email
//=================================================================
function client$client_email(command)
{
	var cmd;	

try
{
	return CollinsPDF_Email(this.collinsPDF,command);
}

catch (e) {}

	cmd = 'Command=email';
	cmd += '&to=' + escape(command.to);
	cmd += '&from=' + escape(command.from);
	cmd += '&subject=' + escape(command.subject);
	cmd += '&message=' + escape(command.message);
	cmd += '&attachment=' + escape(command.attachment);
	cmd += '&filename=' + encodeURIComponent(command.filename);
	cmd += '&server=' + escape(command.server);
	cmd += '&pdf=' + encodeURIComponent(this.toString());

try
{
	this.httpInit_();
	this.http.open('POST',this.pdf.emailUrl,false);
	this.http.setRequestHeader('Content-Type','application/x-www-form-urlencoded');
	this.http.send(cmd);

	return this.http.responseText;	

}
catch (e) 
	{ 
		alert('EMAIL Failed to ' + command.to + ' ' + e.message); 
		return "EMail Failed -- " + this.emailURL + ' ' + e.message;  
	}

}
//==================================================================
//			client$readUrl
//==================================================================
function client$readUrl(filename)
{ 

try
{
		this.httpInit_();
		this.http.open("GET",filename,false);
		this.http.send();
		if (this.http.status == 200) return this.http.responseText;

		return "";
}
    catch (e) { alert(e); return (""); }
		
}
//==================================================================
//			client$readFile
//==================================================================
function client$readFile(filename)
{ 

	return this.readUrl(filename);

}
//==========================================================================================
//                      client$httpInit_
//==========================================================================================
function client$httpInit_()
{
	if (this.http != null) return this.http;

	try 
	{ 
		this.http = new XMLHttpRequest(); 
		return this.http; 
	} 
		catch (e) {};
	try
	{ 
		this.http = window.createRequest(); 
		return this.http; 
	} 
		catch (e) {};

	throw new Error( "This browser does not support XMLHttpRequest" );
}
//===================================================
//                   client$isUrl_
//===================================================
function client$isUrl_(filename)
{ 
	return true;
}
//==========================================================================================
//	Author: Clifford L. Collins				Date: Jan 2013
//-----------------------------------------------------------------------------------------
//	Collins Software
//	7710 Janak Drive, Houston Texas 77055
//	http://CollinsSoftware.com
//=========================================================================================


//========================================================
//					f$
//========================================================
function f$(object,method)
{
	var i,args;
	
	args = new Array();
	args[0] = null;  // save room for the event object
	
	for (i=2; i < arguments.length; ++i) args[i-1] = arguments[i];

	return function(e)
	{

		if (!e) e = event;		// windows
		args[0] = e;
		if (e)
		{
			object.srcElement = e.srcElement;
			if (e.target) object.scrElement = e.target;
		}
		
		return method.apply(object,args);
	}
}
//=================================================================
//			canvasPlot.js
//=================================================================
function canvasPlot$(canvasName,graphicView)
{

	this.graphicView		= graphicView;
		
	this.canvas			= document.getElementById(canvasName);
	this.context			= this.canvas.getContext('2d');
	this.height			= this.canvas.offsetHeight;
	this.width			= this.canvas.offsetWidth;

	this.context.translate(0.5, 0.5);
	
	this.default_fontSize		= 10;
	this.default_fontName		= 'arial';

	this.color			= -1;
	this.fillColor			= 0;
	this.grayscale			= 0;
	this.lineWeight			= 1;
	this.lineStyle			= 'solid';
	this.backgroundColor		= 'white';
	this.blur			= '';

	this.fontSize			= 10;
	this.fontColor			= 'Black';
	this.fontName			= 'arial';
	
	this.clip			= false;	
	this.blur			= '';

	this.lineCap			= 2;			// Extended Lines;
	this.images			= new Array();

	this.debug = true;
	
//----------- public methods ----------------------

	this.line			= canvasPlot$line;
	this.linestring			= canvasPlot$linestring;
	this.rectangle			= canvasPlot$rectangle;
	this.polygon			= canvasPlot$polygon;

	this.cone			= canvasPlot$cone;
	this.arc			= canvasPlot$arc;
	this.circle			= canvasPlot$circle;
	this.symbol			= canvasPlot$symbol;
	this.marker			= canvasPlot$marker;
	this.text			= canvasPlot$text;
	this.textbox			= canvasPlot$textbox;
	this.image			= canvasPlot$image;
	this.video			= canvasPlot$video;

	this.setFontColor		= canvasPlot$setFontColor;
	this.setFontSize		= canvasPlot$setFontSize;
	this.setFontName		= canvasPlot$setFontName;

	this.setBlur			= canvasPlot$setBlur;
	this.setFillColor		= canvasPlot$setFillColor;
	this.setLineColor		= canvasPlot$setLineColor;
	this.setLineStyle		= canvasPlot$setLineStyle;
	this.setLineWeight		= canvasPlot$setLineWeight;
	this.setStyle			= canvasPlot$setStyle;
	this.textWidth			= canvasPlot$textWidth;

	this.attachEvents		= canvasPlot$attachEvents;
	
//--------- internal methods ---------

	this.clipBegin			= canvasPlot$clipBegin;
	this.clipEnd			= canvasPlot$clipEnd;
	
	this.shapeStyle			= canvasPlot$shapeStyle;
	this.shapeStyleEnd		= canvasPlot$shapeStyleEnd;

	this.shape_			= canvasPlot$shape_;
	this.map			= canvasPlot$map;

	this.clear			= canvasPlot$clear;
	
	this.parseColor_		= canvasPlot$parseColor_;
	this.getColor			= canvasPlot$getColor;
	this.rgba			= canvasPlot$rgba;	
	this.makeFillet			= canvasPlot$makeFillet;
	this.angle_			= canvasPlot$angle_;
	
	this.clear();
}
//======================================================================
//			   plot$angle_
//======================================================================
function canvasPlot$angle_(x1,y1,x2,y2)
{
	var dir,dx,dy,ESP;
	ESP = 0.00001

	dir = 0;
	dx = x2 - x1;
	dy = y2 - y1;
	if (Math.abs(dx) >= ESP)
	{
	   d = dy / dx;
	   dir = Math.atan(d);
	   if (isNaN(dir)) dir = 0;
	   if (Math.abs(dir) < ESP) dir = 0;

	   if (dx < 0 && dy < 0) dir = dir + Math.PI;
	   if (dx < 0 && dy >= 0) dir = dir + Math.PI;
	}
	else
	{
		dir = Math.PI / 2 * 3;
		if (y2 > y1) dir = Math.PI / 2;
		if (Math.abs(y2-y1) < ESP) dir = 0;
	}

	return dir;
}

//==========================================================================================
//				canvasPlot$map
//==========================================================================================
function canvasPlot$map(x,y)
{
	var p;
	
	p = new Object();
	p.x = Math.floor(x);
	p.y = Math.floor(y);
	
	return p;	
}
//==========================================================================================
//				canvasPlot$textWidth
//==========================================================================================
function canvasPlot$textWidth(text)
{
	var m;
	
	m = this.context.measureText(text);
	return m.width;
}
//==========================================================================================
//				canvasPlot$clear
//==========================================================================================
function canvasPlot$clear(ele)
{

	if (ele) this.backgroundColor = ele.style.backgroundColor;
	this.setStyle('',0,'solid','white');
//	this.rectangle(0,0,this.width,this.height);
	this.setStyle('black',1,'solid','');
	
}
//==========================================================================================
//				canvasPlot$setStyle
//==========================================================================================
function canvasPlot$setStyle(color,weight,style,fillcolor)
{
	this.setLineColor(color);

	this.setFillColor(fillcolor);
	this.setLineWeight(weight);
	this.setLineStyle(style);
}
//==========================================================================================
//				canvasPlot$text
//==========================================================================================
function canvasPlot$text(x,y,text,url,angle,just)
{
	var p;
	p = this.map(x,y);

	p.y += this.fontSize;
	this.setFontColor(this.fontColor);

	this.context.textAlign = "";
	if (just == 'CC') this.context.textAlign = "center";
	if (just == 'LC') this.context.textAlign = "center";
	if (just == 'UC') this.context.textAlign = "center";

	if (just == 'CR') this.context.textAlign = "right";
	if (just == 'LR') this.context.textAlign = "right";
	if (just == 'UR') this.context.textAlign = "right";

	this.context.fillText(text,p.x,p.y); 
}
//==========================================================================================
//				canvasPlot$image
//==========================================================================================
function canvasPlot$image(x,y,filename,width,height,angle,alpha)
{
	var p,img;
	
	p = this.map(x,y);

    img = new Image();    
    img.onload	= f$(this,canvasPlotEvent_ImageLoaded);
	img.px		= p.x;
	img.py		= p.y;
	img.width	= width;
	img.height	= height;
	img.angle	= angle;	
    img.src	= filename;
    img.alpha	= alpha;
    
}
//==========================================================================================
//				canvasPlot$video
//==========================================================================================
function canvasPlot$video(x,y,filename,width,height,angle,alpha)
{
	var p,img;
	
	p = this.map(x,y);

	this.videoElement = document.createElement("video");
	this.videoDiv = document.createElement('div');
	document.body.appendChild(this.videoDiv);

	this.videoDiv.appendChild(this.videoElement);
	this.videoDiv.setAttribute("style", "display:none;");
	this.videoElement.setAttribute("src", filename);
	this.videoElement.addEventListener("canplaythrough",f$(this,canvasPlotEvent_VideoLoaded),false);

    this.videoElement.onload	= f$(this,canvasPlotEvent_ImageLoaded);
	this.videoElement.px		= p.x;
	this.videoElement.src		= filename;
	this.videoElement.py		= p.y;
	this.videoElement.width	= width;
	this.videoElement.height	= height;
	this.videoElement.angle		= angle;	
    this.videoElement.alpha		= alpha;
}
//==========================================================================================
//				canvasPlot$symbol
//==========================================================================================
function canvasPlot$symbol(x,y,char,angle)
{
	var p;
	
	p = this.map(x,y);

}
//==========================================================================================
//				canvasPlot$marker
//==========================================================================================
function canvasPlot$marker(x,y,name,size)
{
	var p;
	
	p = this.map(x,y);

}
//==========================================================================================
//				canvasPlot$textbox
//==========================================================================================
function canvasPlot$textbox(tbox)
{
	var x,y,height,width;
	var dx,dy,drop;
	var p;

	x = tbox.point.x;
	y = tbox.point.y;
	
	height = tbox.height;
	width  = tbox.width;
	
	drop = true;
	dx = parseFloat(tbox.dropx);
	dy = parseFloat(tbox.dropy);
	if (isNaN(dx)) drop = false;
	if (isNaN(dy)) drop = false;
		
	if (drop) 
	{
		this.placeTextbox(x,y,height,width,tbox.text,tbox.align,tbox.valign,tbox.shape,dx,dy);
	}
	else this.placeTextbox(x,y,height,width,tbox.text,tbox.align,tbox.valign);
}
//==========================================================================================
//				canvasPlot$line
//==========================================================================================
function canvasPlot$line(x1,y1,x2,y2)
{
	var p1,p2;
	
	p1 = this.map(x1,y1);
	p2 = this.map(x2,y2);

	this.shapeStyle(false);
	this.context.moveTo(p1.x,p1.y);
	this.context.lineTo(p2.x,p2.y);
	this.shapeStyleEnd(true);
}
//==========================================================================================
//				canvasPlot$rectangle
//==========================================================================================
function canvasPlot$rectangle(x1, y1, x2, y2)
{
	var p1,p2;
	var xmin,ymin,xmax,ymax,height,width;
	
	p1 = this.map(x1,y1);
	p2 = this.map(x2,y2);

	xmin = Math.min(p1.x,p2.x);
	ymin = Math.min(p1.y,p2.y);
	xmax = Math.max(p1.x,p2.x);
	ymax = Math.max(p1.y,p2.y);
	
	width =  xmax - xmin;
	height = ymax - ymin;

	this.shapeStyle(true);
	this.context.rect(xmin,ymin,width,height);
	this.shapeStyleEnd(true);
}
//==========================================================================================
//				canvasPlot$linestring
//==========================================================================================
function canvasPlot$linestring(pnts)
{
	this.shape_(pnts,false);
}
//==========================================================================================
//				canvasPlot$polygon
//==========================================================================================
function canvasPlot$polygon(pnts)
{
	this.shape_(pnts,true);
}
//==========================================================================================
//				canvasPlot$shape_
//==========================================================================================
function canvasPlot$shape_(pnts,closed)
{
	var p,p2,i,x,y,code,hasCode,t,j,k,tpnts;

	if (pnts.length <= 1) return;
	this.shapeStyle(closed);

	p = this.map(pnts[0].x,pnts[0].y);
	this.context.moveTo(p.x,p.y);

	hasCode = false;
	t = typeof(pnts[0].code)
	if (t != 'undefined') hasCode = true;

	for (i=1; i < pnts.length; ++i)
	{
		p = this.map(pnts[i].x,pnts[i].y);
		x = p.x;
		y = p.y;
		if (hasCode)
		{
			code = pnts[i].code;
			if (code == 'M') 
			{
				this.context.moveTo(x,y);
				continue;
			}
			if (code.substr(0,1) == 'F') 
			{
				j = i-1;
				k = i+1;
				if (j < 0) j = pnts.length-1;
				if (k >= pnts.length) k = 0;
				tpnts = this.makeFillet(pnts[j],pnts[i],pnts[k],code);
				for (j = 0; j < tpnts.length; ++j)
				{
					this.context.lineTo(tpnts[j].x,tpnts[j].y);
				}
				continue;
			}

		}
		this.context.lineTo(x,y);
	}

	this.shapeStyleEnd(closed);	
}
//==========================================================================================
//				canvasPlot$makeFillet
//==========================================================================================
function canvasPlot$makeFillet(p1,p2,p3)
{

	var i,pnts;
	var dx,dy,A,B,C,c;
	var a,cx,cy,a12,x12,y12,x13,y13,p,da,angle;
	var a21,a23,d;
	var tx,ty,radius,dir,x2,y2, Cangle, Aangle;
	
	pnts = new Array();

	dx = p1.x - p2.x;
	dy = p1.y - p2.y;
	A = Math.sqrt(dx*dx + dy*dy);

	dx = p2.x - p3.x;
	dy = p2.y - p3.y;
	B = Math.sqrt(dx*dx + dy*dy);

	dx = p3.x - p1.x;
	dy = p3.y - p1.y;
	C = Math.sqrt(dx*dx + dy*dy);

	dir = this.angle_(p1.x,p1.y,p2.x,p2.y);

	x2 = p2.x - p1.x;
	y2 = p2.y - p1.y;
	
	tx = Math.cos(-dir) * x2 - Math.sin(-dir) * y2;
	ty = Math.sin(-dir) * x2 + Math.cos(-dir) * y2;

	c = (A*A + B*B - C*C) / (2 * A * B);
	c = Math.acos(c);

	Cangle = c * 180 / Math.PI;
	radius = 10;
	
	if (A < radius) radius = A - 4;
	if (B < A) radius = B - 4;

	if (radius < 5) 
	{
		pnts[0] = p2;
		return pnts;
	}

	a21 = this.angle_(p2.x,p2.y,p1.x,p1.y);
	a23 = this.angle_(p2.x,p2.y,p3.x,p3.y);

	a = a21 + (c / 2);
	Aangle = a * 180 / Math.PI;

	d = radius / Math.sin(c / 2);

	cx = Math.cos(-a) * d + p2.x;
	cy = Math.sin(-a) * d + p2.y;

	ac1 = this.angle_(cx,cy,p1.x,p1.y);

	da = Math.PI / 14;
	angle = 0;

	for (i=0; i < 15; ++i)
	{
		p = new Object();
		p.x = Math.cos(ac1) * radius + cx;
		p.y = Math.sin(ac1) * radius + cy;
		pnts[pnts.length] = p;	
		ac1 += da;
	}
		
	return pnts;
	
}
//==========================================================================================
//				canvasPlot$circle
//==========================================================================================
function canvasPlot$circle(cx,cy,radius)
{
	var p;

	p = this.map(cx,cy);


	this.shapeStyle(true);
	this.context.arc(p.x,p.y,radius,0, 2 * Math.PI, false);
	this.shapeStyleEnd(true);
}
//==========================================================================================
//				canvasPlot$arc
//==========================================================================================
function canvasPlot$arc(cx,cy,radius,start,sweep)
{
	var p, end;
	p = this.map(cx,cy);

	if (sweep < 0)
	{
		start = start + sweep;
		sweep = - sweep;
	}

	start = (start + 360) % 360;
	if (sweep < 0) sweep = (sweep + 360) % 360;
	
	end = start+sweep;
	
//	start = start / 180 * Math.PI;
//	end = end / 180 * Math.PI;
	
	this.shapeStyle(true);
	this.context.arc(p.x, p.y, radius, start, end, true);
	this.shapeStyleEnd(true);
}
//==========================================================================================
//				canvasPlot$cone
//==========================================================================================
function canvasPlot$cone(cx,cy,radius,start,sweep)
{
	var x1,y1,x2,y2;
	var sdir,edir;	
	var p;

	p = this.map(cx,cy);
	
	if (sweep < 0)
	{
		start = start + sweep;
		sweep = - sweep;
	}

	start = (start + 360) % 360;
	if (sweep < 0) sweep = (sweep + 360) % 360;

	sdir = start / 180 * Math.PI;
	edir = (start + sweep) / 180 * Math.PI;
	
	x1 = p.x + (Math.cos(sdir) * radius);
	y1 = p.y + (Math.sin(sdir) * radius);

	x2 = p.x + (Math.cos(edir) * radius);
	y2 = p.y + (Math.sin(edir) * radius);

	this.shapeStyle(true);

	this.context.moveTo(p.x, p.y);
	this.context.lineTo(x1,y1);
	this.context.arc(p.x, p.y, radius, start, start+sweep, true);
	this.context.moveTo(x2,y2);
	this.context.lineTo(p.x,p.y);

	this.shapeStyleEnd(true);
}
//==========================================================================================
//				canvasPlot$grid
//==========================================================================================
function canvasPlot$grid(x1, y1, x2, y2, row, cols)
{
	var weight;
	var text,dy,dx,color;
	var dr,dc,r,c,tx,ty;

	var p1,p2;
	
	p1 = this.map(x1,y1);
	p2 = this.map(x2,y2);
	x1 = p1.x;
	y1 = p1.y;
	x2 = p2.x;
	y2 = p2.y;
	
	x1 = Math.round(x1 * 1000) / 1000;
	y1 = Math.round(y1 * 1000) / 1000;
	
	x1 = Math.round(x1 * 1000) / 1000;
	y1 = Math.round(y1 * 1000) / 1000;

	x2 = Math.round(x2 * 1000) / 1000;
	y2 = Math.round(y2 * 1000) / 1000;
	
	dx = x2 - x1;
	dy = y2 - y1;

	this.shapeStyle(true);
	this.rectangle(x1,y1,x2,y2);

	if (cols < 1) cols = 1;
	if (rows < 1) rows = 1;

	dr = dy / rows;
	dc = dx / cols;
	
	ty = y1;
	tx = x1;

	for (r = 0; r < rows; ++r)
	{
		ty += dr;
		this.line(x1,ty,x2,ty);
	}

	for (c = 0; c < cols; ++c)
	{
		tx += dc;
		this.line(tx,y1,tx,y2);
	}

	this.shapeStyleEnd(true);
}
//==========================================================================================
//				canvasPlot$shapeStyle
//==========================================================================================
function canvasPlot$shapeStyle(closed)
{
	var pattern, a ,value;
	
	this.context.beginPath();


	if (! closed) this.context.fillStyle = '';
    if (  closed) this.context.fillStyle = this.getColor(this.fillColor);
	if (this.blur == '')
	{	
		this.context.shadowBlur = 0;
		this.context.shadowColor = '';
	}
	else
	{	
		a = this.blur.split(':');
		value = 10;
		if (a.length > 1) value = parseInt(a[1]);
		if (isNaN(value)) value = 10;
		this.context.shadowBlur = value;
		this.context.shadowColor = a[0];
	}
	
	pattern = [];
	if (this.lineStyle == 'dash') pattern = [5,10];
	if (this.lineStyle == 'dot') pattern = [2,4];
	if (this.lineStyle == 'dashdot') pattern = [6,4,2,4];

	if ( this.context.setLineDash !== undefined )   this.context.setLineDash(pattern);
	if ( this.context.mozDash !== undefined )       this.context.mozDash = pattern;

	this.context.lineWidth = this.lineWeight;
    this.context.strokeStyle = this.getColor(this.color);

}
//==========================================================================================
//				canvasPlot$shapeStyleEnd
//==========================================================================================
function canvasPlot$shapeStyleEnd(closed)
{
	if (closed && this.fillColor != '') this.context.fill();
	if (this.lineWeight > 0) this.context.stroke();
}
//==========================================================================================
//				canvasPlot$setLineStyle
//==========================================================================================
function canvasPlot$setLineStyle(value)
{
	this.lineStyle = "" + value;
	this.lineStyle = this.lineStyle.toLowerCase();
}
//==========================================================================================
//				canvasPlot$setBlur
//==========================================================================================
function canvasPlot$setBlur(value)
{
	this.blur = "" + value;
	this.blur = this.blur.toLowerCase();
}
//==========================================================================================
//				canvasPlot$setLineColor
//==========================================================================================
function canvasPlot$setLineColor(value)
{
	this.color = value;
}
//==========================================================================================
//				canvasPlot$setFillColor
//==========================================================================================
function canvasPlot$setFillColor(value)
{
	this.fillColor = value;
}
//==========================================================================================
//				canvasPlot$setLineWeight
//==========================================================================================
function canvasPlot$setLineWeight(value)
{
	if (value == '') value = -1;
	value = parseInt(value);
	if (isNaN(value)) value = -1;
	this.lineWeight = value;
}
//==========================================================================================
//				canvasPlot$clipBegin
//==========================================================================================
function canvasPlot$clipBegin(x1, y1, x2, y2)
{
}
//==========================================================================================
//				canvasPlot$clipEnd
//==========================================================================================
function canvasPlot$clipEnd()
{
}
//==========================================================================================
//				canvasPlot$setFontSize
//==========================================================================================
function canvasPlot$setFontSize(size)
{
	this.fontSize = parseFloat(size);
	if (isNaN(this.fontSize)) this.fontSize = 10;
	
	this.context.font = this.fontSize + 'px ' + this.fontName;
}
//==========================================================================================
//				canvasPlot$setFontColor
//==========================================================================================
function canvasPlot$setFontColor(color)
{
	this.fontColor = color;
    this.context.fillStyle = this.getColor(color);
}
//==========================================================================================
//				canvasPlot$setFontName
//==========================================================================================
function canvasPlot$setFontName(name)
{
	this.fontName = name;
	this.context.font = this.fontSize + 'px ' + this.fontName;
}

//==========================================================================================
//				canvasPlot$parseColor_
//==========================================================================================
function canvasPlot$parseColor_(c)
{
	var color,i,name,colorNames,colorValues,lightValues,R,G,B,A;
	var list,t,c, obj;
	
	colorNames = new Array('AliceBlue','AntiqueWhite','Aqua','Aquamarine','Azure','Beige','Bisque','Black','BlanchedAlmond',
	'Blue','BlueViolet','Brown','BurlyWood','CadetBlue','Chartreuse','Chocolate','Coral','CornflowerBlue','Cornsilk','Crimson',
	'Cyan','DarkBlue','DarkCyan','DarkGoldenRod','DarkGray','DarkGrey','DarkGreen','DarkKhaki','DarkMagenta','DarkOliveGreen',
	'Darkorange','DarkOrchid','DarkRed','DarkSalmon','DarkSeaGreen','DarkSlateBlue','DarkSlateGray','DarkSlateGrey','DarkTurquoise',
	'DarkViolet','DeepPink','DeepSkyBlue','DimGray','DimGrey','DodgerBlue','FireBrick','FloralWhite','ForestGreen','Fuchsia','Gainsboro',
	'GhostWhite','Gold','GoldenRod','Gray','Grey','Green','GreenYellow','HoneyDew','HotPink','IndianRed ','Indigo ','Ivory','Khaki',
	'Lavender','LavenderBlush','LawnGreen','LemonChiffon','LightBlue','LightCoral','LightCyan','LightGoldenRodYellow','LightGray',
	'LightGrey','LightGreen','LightPink','LightSalmon','LightSeaGreen','LightSkyBlue','LightSlateGray','LightSlateGrey','LightSteelBlue',
	'LightYellow','Lime','LimeGreen','Linen','Magenta','Maroon','MediumAquaMarine','MediumBlue','MediumOrchid','MediumPurple',
	'MediumSeaGreen','MediumSlateBlue','MediumSpringGreen','MediumTurquoise','MediumVioletRed','MidnightBlue','MintCream','MistyRose',
	'Moccasin','NavajoWhite','Navy','OldLace','Olive','OliveDrab','Orange','OrangeRed','Orchid','PaleGoldenRod','PaleGreen','PaleTurquoise',
	'PaleVioletRed','PapayaWhip','PeachPuff','Peru','Pink','Plum','PowderBlue','Purple','Red','RosyBrown','RoyalBlue','SaddleBrown','Salmon',
	'SandyBrown','SeaGreen','SeaShell','Sienna','Silver','SkyBlue','SlateBlue','SlateGray','SlateGrey','Snow','SpringGreen','SteelBlue','Tan',
	'Teal','Thistle','Tomato','Turquoise','Violet','Wheat','White','WhiteSmoke','Yellow','YellowGreen');
	
	colorValues = new Array(0xF0F8FF,0xFAEBD7,0x00FFFF,0x7FFFD4,0xF0FFFF,0xF5F5DC,0xFFE4C4,0x000001,0xFFEBCD,0x0000FF,0x8A2BE2,0xA52A2A,
	0xDEB887,0x5F9EA0,0x7FFF00,0xD2691E,0xFF7F50,0x6495ED,0xFFF8DC,0xDC143C,0x00FFFF,0x00008B,0x008B8B,0xB8860B,0xA9A9A9,0xA9A9A9,0x006400,
	0xBDB76B,0x8B008B,0x556B2F,0xFF8C00,0x9932CC,0x8B0000,0xE9967A,0x8FBC8F,0x483D8B,0x2F4F4F,0x2F4F4F,0x00CED1,0x9400D3,0xFF1493,0x00BFFF,
	0x696969,0x696969,0x1E90FF,0xB22222,0xFFFAF0,0x228B22,0xFF00FF,0xDCDCDC,0xF8F8FF,0xFFD700,0xDAA520,0x808080,0x808080,0x008000,0xADFF2F,
	0xF0FFF0,0xFF69B4,0xCD5C5C,0x4B0082,0xFFFFF0,0xF0E68C,0xE6E6FA,0xFFF0F5,0x7CFC00,0xFFFACD,0xADD8E6,0xF08080,0xE0FFFF,0xFAFAD2,0xD3D3D3,
	0xD3D3D3,0x90EE90,0xFFB6C1,0xFFA07A,0x20B2AA,0x87CEFA,0x778899,0x778899,0xB0C4DE,0xFFFFE0,0x00FF00,0x32CD32,0xFAF0E6,0xFF00FF,0x800000,
	0x66CDAA,0x0000CD,0xBA55D3,0x9370D8,0x3CB371,0x7B68EE,0x00FA9A,0x48D1CC,0xC71585,0x191970,0xF5FFFA,0xFFE4E1,0xFFE4B5,0xFFDEAD,0x000080,
	0xFDF5E6,0x808000,0x6B8E23,0xFFA500,0xFF4500,0xDA70D6,0xEEE8AA,0x98FB98,0xAFEEEE,0xD87093,0xFFEFD5,0xFFDAB9,0xCD853F,0xFFC0CB,0xDDA0DD,
	0xB0E0E6,0x800080,0xFF0000,0xBC8F8F,0x4169E1,0x8B4513,0xFA8072,0xF4A460,0x2E8B57,0xFFF5EE,0xA0522D,0xC0C0C0,0x87CEEB,0x6A5ACD,0x708090,
	0x708090,0xFFFAFA,0x00FF7F,0x4682B4,0xD2B48C,0x008080,0xD8BFD8,0xFF6347,0x40E0D0,0xEE82EE,0xF5DEB3,0xFFFFFF,0xF5F5F5,0xFFFF00,0x9ACD32);

	lightValues = new Array(0xFAEBD7,0x7FFFD4,0xF5F5DC,0xFFE4C4,0xFFEBCD,
	0x7FFF00,0xFFF8DC,
	0xFFFAF0,0xDCDCDC,
	0xDAA520,0xADFF2F,
	0xF0FFF0,0xFF69B4,0xFFFFF0,0xF0E68C,0xE6E6FA,0xFFF0F5,0xFFFACD,0xADD8E6,0xE0FFFF,0xFAFAD2,
	0x90EE90,0xFFB6C1,0xFFA07A,0x87CEFA,
	0xFFFFE0,0xFAF0E6,
	0xF5FFFA,0xFFE4E1,0xFFE4B5,0xFFDEAD,
	0xFDF5E6,
	0xEEE8AA,0x98FB98,0xAFEEEE,0xFFEFD5,0xFFDAB9,
	0xFFC0CB,
	0xF4A460,0xFFF5EE,0x87CEEB,
	0xFFFAFA,0xD2B48C,0xD8BFD8,0xEE82EE,0xF5DEB3,0xF5F5F5,0x9ACD32);

	c = "" + c;

	obj = new Object();
	obj.color = 0;
	obj.opaque = 1;

	i = c.indexOf('.');
	if (i >= 0)
	{
		t = c.substr(i);
		c = c.substr(0,i);
		t = parseFloat(t);
		if (isNaN(t)) t = 1;
        obj.opaque = t;
	}

//----------- Integer --------

	
	c = c.replace(/^\s+|\s+$/g,'');
	if (c == '') return obj;

	if (!isNaN(c)) {
	    obj.color = parseInt(c);
	    return obj;
	}

	c = "" + c;
	color = c.toLowerCase();
	if (color.length == 0) return obj;

//----------- rgb (r,g,b) ----------

	i = color.indexOf('(');

	if (i > 0)
	{
		name = color.substr(0,i);
		color = color.substr(i+1);
		i = color.indexOf(')');
		if (i < 0) i = color.length;
		color = color.substr(0,i);
		list = color.split(',');
		R = 0;
		G = 0;
		B = 0;
		A = 255;
		R = parseInt(list[0]);
		if (list.length > 1) G = parseInt(list[1]);
		if (list.length > 2) B = parseInt(list[2]);
		if (list.length > 2) A = parseInt(list[3]);
		if (isNaN(R)) R = 0;
		if (isNaN(G)) G = 0;
		if (isNaN(B)) B = 0;
		if (isNaN(A)) A = 0;
				
		if (R > 255) R = 255;
		if (G > 255) G = 255;
		if (B > 255) B = 255;
		if (A > 255) A = 255;

		if (R < 0) R = 255;
		if (G < 0) G = 255;
		if (B < 0) B = 255;
		if (A < 0) A = 255;
				
		color = Math.round((R * 256 * 256) + (G * 256) + B);
		obj.color = color;
		return obj;
		
	}

//----------- #HEX --------

	if (color.substr(0,1) == '#') 
	{
		if (color.length == 4)
		{
		color = '#' + color.substr(1,1) + '0' +color.substr(2,1) + '0' + color.substr(3,1) + '0';
		}
		obj.color = parseInt(color.substr(1), 16);
		return obj;
	}
//---------- Random --------

	if (color == 'random')
	{
		i = Math.floor(Math.random() * colorValues.length);
		obj.color = colorValues[i];
		return obj;
	}

//---------- LightRandom --------

	if (color == 'lightrandom')
	{
		i = Math.floor(Math.random() * lightValues.length);
		obj.color =  lightValues[i];
		return obj;
	}

//---------- Names --------
	for (i=0; i < colorNames.length; ++i)
	{
		name = colorNames[i];
		if (color != name.toLowerCase()) continue;
		obj.color = colorValues[i];
		return obj;
	}
	return obj;
}
//==================================================================================
//								graphicView$getColor
//==================================================================================
function canvasPlot$getColor(color)
{
	var a,list,text,grad,shape,transparent;
	var grad,i,colors,gradient,stop;
	
	color = '' + color;
	color = trim(color);
	if (color == '') return '';

//----------------------- gradient shape ---------------

	shape = new Array();

	i = color.indexOf('(');
	if (i >= 0)
	{
		grad = color.substr(i+1);
	
		color = color.substr(0,i);
		i = grad.indexOf(')');
		if (i < 0) i = grad.length;
		grad = grad.substr(0,i);
		
		shape = grad.split(':');
	}


//------------------------ colors -------------------
		
	list = color.split('-');
	if (list.length == 1)
	{
		text = trim(list[0]);
		a = text.split('.');
		transparent = 1;
				
		if (a.length > 1) 
		{
			transparent = parseFloat('.' + a[1]);
			if (isNaN(transparent)) transparent = 1;
		}
	
		text = this.rgba(a[0],transparent);
		return text;		
	}
	

//--------------------------- gradiant colors -------------------

	colors = new Array();

	for (i=0; i < list.length; ++i)
	{
		text = trim(list[i]);
		if (text == '') continue;
		
		a = text.split('.');
		stop = -1;
		transparent = 1;
				
		if (a.length > 1) 
		{
			transparent = parseFloat('.' + a[1]);
			if (isNaN(transparent)) transparent = 1;
		}

		if (a.length > 2) 
		{
			stop = parseInt(a[2]);
			if (isNaN(stop )) stop = -1;
		}
				
		color = new Object();
		color.value = this.rgba(a[0],transparent);
		color.stop  = stop;
		colors[colors.length] = color;
	}

	if (shape.length < 1) shape[0] = '0';
	if (shape.length < 2) shape[1] = '0';
	if (shape.length < 3) shape[2] = '0';
	if (shape.length < 4) shape[3] = '200';
	
	if (shape.length < 6)
	{
		gradient = this.context.createLinearGradient(shape[0], shape[1], shape[2], shape[3]);	
	}	
	else
	{
		gradient = this.context.createRadialGradient(shape[0], shape[1], shape[2], shape[3], shape[4], shape[5]);	
	}

	if (colors.length < 0) return '';
	if (colors.length == 1) return colors[0].value;

	ds = 1 / (colors.length - 1);
	stop = 0;
	for (i=0; i < colors.length; ++i)
	{
		color = colors[i];
		if (color.stop >= 0) stop = color.stop;
		
		if (stop > 1) stop = 1;
		gradient.addColorStop(stop,colors[i].value);
		stop += ds;
	}

	return gradient;
}
//==================================================================================
//								canvasPlot$rgba
//==================================================================================
function canvasPlot$rgba(color,transparent)
{
	var r,g,b,text,obj;
	
	obj = this.parseColor_(color);
    
	transparent = parseFloat(transparent);
	if (isNaN(transparent)) transparent  = 1;

	r = (obj.color / 65536) % 256;	
	r = Math.floor(r);

	g = (obj.color / 256) % 256;
	g = Math.floor(g);

	b = obj.color % 256;
	b = Math.floor(b);
  
	text = 'rgba(' + r + ',' + g + ',' + b + ',' + obj.opaque + ')';
	
	return text; 
}
//==========================================================================================
//				canvasPlotEvent_ImageLoaded
//==========================================================================================
function canvasPlotEvent_ImageLoaded(event)
{
	var img,angle,alpha;	

	img = this.srcElement;	

	alpha = parseFloat(img.alpha);
	if (isNaN(alpha)) alpha = 0;

	angle = parseFloat(img.angle);
	if (isNaN(angle)) angle = 0;
	
	if (angle == 0 && alpha == 0)
	{
		this.context.drawImage(img,img.px,img.py,img.width,img.height);
		return;
	}
	
	angle = angle / 180 * Math.PI;
	
	this.context.save();
	this.shapeStyle(true);
	this.context.rotate(angle);

//	this.context.setTransform(1, Math.cos(angle), Math.sin(angle), 1, -80, 0);

    this.context.globalAlpha = alpha;
	this.context.drawImage(img,img.px,img.py,img.width,img.height);
	this.context.restore();
}
//==========================================================================================
//				canvasPlotEvent_VideoLoaded
//==========================================================================================
function canvasPlotEvent_VideoLoaded(event)
{

	this.videoElement.play();
	setInterval(f$(this,canvasPlotEvent_VideoDraw),33);
}
//=========================================================================================
//				canvasPlotEvent_VideoDraw
//=========================================================================================
function  canvasPlotEvent_VideoDraw() 
{
	var video,angle,alpha,task;	

	
	video = this.srcElement;
	if (video.ended) video.play();


	alpha = parseFloat(video.alpha);
	if (isNaN(alpha)) alpha = 0;

	angle = parseFloat(video.angle);
	if (isNaN(angle)) angle = 0;
	
	angle = angle / 180 * Math.PI;

	this.context.save();
	this.shapeStyle(true);
//	this.context.rotate(angle);

//Background
    this.context.fillStyle = '#ffffaa';
    this.context.fillRect(0, 0, this.width, this.height);
//Box
	this.context.strokeStyle = '#000000';
	this.context.strokeRect(5,  5, this.width-10, this.height-10);

//video

	this.context.globalAlpha = alpha;
	this.context.drawImage(video,5,  5, this.width-10, this.height-10);
	this.context.restore();
}
//==================================================================================
//								canvasPlot$attchEvents
//==================================================================================
function canvasPlot$attachEvents()
{
	
	this.mousedown = false;
	this.drawing   = false;
	this.canvas.onmousemove		= f$(this,canvasEvent_onMouseMove);
	this.canvas.onmousedown		= f$(this,canvasEvent_onMouseDown);
	this.canvas.onmouseup		= f$(this,canvasEvent_onMouseUp);
try
{
	this.canvas.addEventListener ("mousewheel", f$(this,canvasEvent_onMouseWheel), true);
}
catch (e) { this.canvas.onmousewheel = f$(this,canvasEvent_onMouseWheel); }

}
//==================================================================================
//			canvasEvent_onMouseWheel
//==================================================================================
function canvasEvent_onMouseWheel(event)
{
	var rolled,screendistance;

	event.stopPropagation();
    event.preventDefault();
    event.cancelBubble = false;

	if (this.drawing) return false;
	
	rolled = event.wheelDelta;

	dx = rolled / 100;		
	if (Math.abs(dx) < 1) return false;
	
	this.drawing = true;
	this.graphicView.setScreenDistance(dx);	
	this.drawing = false;
	return false;	
}
//==================================================================================
//			canvasEvent_onMouseMove
//==================================================================================
function canvasEvent_onMouseMove(event)
{
	var dx,dy;

	if (! this.mouseDown) return;
	if (this.drawing) return;

	dx = event.clientX - this.clientX;
	dy = event.clientY - this.clientY;
		
	if ((Math.abs(dx) < 5) && (Math.abs(dy) < 5)) return;
	this.drawing = true;

try
{	
	this.clientX = event.clientX;
	this.clientY = event.clientY;

	this.graphicView.rotateEye(dy,dx,0);
	this.drawing = false;
	return;	
}
catch (e) { alert(e); this.drawing = false; }
}
//==================================================================================
//			canvasEvent_onMouseDown
//==================================================================================
function canvasEvent_onMouseDown(event)
{		
	this.clientX = event.clientX;
	this.clientY = event.clientY;
	this.drawing  = false;
	this.mouseDown = true;
}
//==================================================================================
//			canvasEvent_onMouseUp
//==================================================================================
function canvasEvent_onMouseUp(event)
{
	this.mouseDown = false;
	this.drawing  = false;
}
//==============================================================
//                     trim
//==============================================================
function trim(value) 
{ 
	value = '' + value;
	value = value.replace(/^[\s]+/,"");
	value = value.replace(/[\s]+$/, '');
	return value;
}
//================================================================
//			f2
//================================================================
function f2(value)
{
	value = parseFloat(value);
	if (isNaN(value)) return 0;
	return Math.round(value * 100) / 100;	
}
//================================================================
//			I
//================================================================
function I(value)
{
	value = parseInt(value);
	if (isNaN(value)) return 0;
	return Math.round(value);
}
//==================================================================================
//			graphicCs2$
//==================================================================================
function graphicCg2$(plot,sys)
{
	
	this.plot		= plot;
	this.sys		= sys;
	this.draw		= graphicCg2$draw;
	this.getRange		= graphicCg2$getRange;
	
	this.draw_A		= graphicCg2$draw_A;
		
	this.add		= graphicCg2$add;
	this.clear		= graphicCg2$clear;	
	this.getGraphic		= graphicCg2$getGraphic;
	this.stringToGraphic	= graphicCg2$stringToGraphic;
	this.split		= graphicCg2$split;
		
	this.clear();
}
//==================================================================================
//				graphicCg2$clear
//==================================================================================
function graphicCg2$clear()
{
	this.records = new Array();
}
//==================================================================================
//				graphicCg2$draw
//==================================================================================
function graphicCg2$draw()
{
	var i,rec,text;
	
	for (i=0; i < this.records.length; ++i)
	{
		rec = this.records[i];
		text = rec.graphic.draw(rec);
		if (typeof(text) != 'string') continue;
		{
			this.draw_A(text,0);
		}
	}
}
//==================================================================================
//				graphicCg2$getRange
//==================================================================================
function graphicCg2$getRange()
{
	var i,rec,range,p1,p2,rng;
	
	range = new graphicRange$();
	range.cx = 0;
	range.cy = 0;
	range.cz = 0;
	
	for (i=0; i < this.records.length; ++i)
	{
		rec = this.records[i];
		rng = rec.graphic.getRange();
		range.addRange(rng);
	}

	if (! range.set) return range;

	p1 = this.graphicView.map(range.xmin,range.ymin,range.zmin);
	p2 = this.graphicView.map(range.xmax,range.ymax,range.zmax);
	
	range.set = false;
	range.addPoint(p1);
	range.addPoint(p2);

	range.cx = (range.xmin + range.xmax) / 2;
	range.cy = (range.ymin + range.ymax) / 2;
	range.cz = (range.zmin + range.zmax) / 2;

	range.radius = Math.max(range.cx,range.cy);
	range.radius = Math.max(range.radius,range.cz) * 2;

	return range;
}
//==================================================================================
//				graphicCg2$split
//==================================================================================
function graphicCg2$split(data)
{
	var value,i,c,q,inside,pos,list;
	
	list = new Array();
	pos = 0;
	value = '';
	while (pos < data.length)
	{
		c = data.charAt(pos);
		pos = pos + 1;
		if (c <= ' ') c = ' ';
		
		if (inside) 
		{
			if (c == q)
			{
				if (pos+1 >= data.length)
				{
					value += c;
					break;
				}
			
				if (data.charAt(pos) == q)
				{
					value += c + c;
					pos += 1;
					continue;
				}
			}
			
			value += c;
			inside = false;	
			continue;
		}
			
		if (c == '"' || c == "'") 
		{
			inside = true;
			q = c;
			value += c;
			continue;
		}
			
		if (c == ';')
		{
			value = trim(value)
			if (value != '') list[list.length] = value;
			value = '';
			continue;
		}
			
		value += c;
	}

	value = trim(value);
	if (value != '') list[list.length] = value;

	return list;
}

//==================================================================================
//				graphicCg2$draw_A
//==================================================================================
function graphicCg2$draw_A(data,level)
{
	var i,list,rec,text;
	
	if (level > 4) return;
	
	list = this.split(data);

	for (i=0; i < list.length; ++i)
	{
		text = trim(list[i]);
		if (text == '') continue;
		rec = this.stringToGraphic(text);
		if (rec == null) continue;
		
		text = rec.graphic.draw(this.plot);
		if (typeof(text) != 'string') continue;
		if (text == '') continue;
		this.draw_A(text,level + 1);
	}	
}
//==================================================================================
//				graphicCg2$add
//==================================================================================
function graphicCg2$add(data)
{
	var list,i,text,r;
	var record;
	
	list = this.split(data);

	record = null;
	for (i=0; i < list.length; ++i)
	{
		r = this.stringToGraphic(list[i]);
		if (r == null)  continue;
		this.records[this.records.length] = r;
		record = r;
	}

	return record;
}
//==================================================================================
//				graphicCg2$stringToGraphic
//==================================================================================
function graphicCg2$stringToGraphic(data)
{
	var i,j,list,record,name,text,gra;
	
	data = trim(data);
	if (data == '') return null;

	j = data.indexOf(',');
	if (j < 0) j = data.length;
	name = data.substr(0,j);
	name = trim(name).toLowerCase();
	if (name == '')  return null;
		
	gra = this.getGraphic(name);
	if (gra == null) return null;

	text = '';

	if (typeof(gra.schema) == 'string') text = gra.schema;
	if (typeof(gra.schema) == 'function') text = gra.schema();
	if (text == '') text = 'style:name=value,origin:(x:r8+y:r8+z:r8),size:(width:r8,height:r8,depth:r8)';	

	text = '*define:' + name + ',' + text;
	
	record = new graphicCg2Record$(text);
	record.graphic  = gra;
	gra.record		= record;

	gra.value		= graphicCg2Proxy$value;
	gra.styleExists		= graphicCg2Proxy$styleExists;
	gra.toString		= graphicCg2Proxy$toString;
	
	gra.setLineStyle	= graphicProxy$setLineStyle;
	gra.setFontStyle	= graphicProxy$setFontStyle;
	gra.arcToPoints		= graphicProxy$arcToPoints;
	gra.rectangleToPoints	= graphicProxy$rectangleToPoints;
	gra.lineToPoints	= graphicProxy$lineToPoints;
	gra.getImageSize	= graphicProxy$getImageSize;
	gra.getTextRange	= graphicProxy$getTextRange;
	gra.mode		= graphicProxy$mode;
	gra.unmap		= graphicProxy$unmap;
	
	gra.setRange		= graphicProxy$setRange;
	gra.drawLine		= graphicProxy$drawLine;
	gra.drawRectangle	= graphicProxy$drawRectangle;
	gra.drawArc		= graphicProxy$drawArc;
	gra.drawCircle		= graphicProxy$drawCircle;	
	gra.drawPolygon		= graphicProxy$drawPolygon;	
	gra.drawCone		= graphicProxy$drawCone;	
	gra.drawText		= graphicProxy$drawText;
	gra.drawSymbol		= graphicProxy$drawSymbol;	
	gra.drawImage		= graphicProxy$drawImage;	
	gra.drawVideo		= graphicProxy$drawVideo;	
	gra.drawTextbox		= graphicProxy$drawTextbox;	
	gra.drawProtractor	= graphicProxy$drawProtractor;
	gra.drawGrid		= graphicProxy$drawGrid;
	gra.graphicCg2		= this;

	gra.range		= new Object();
	gra.range.set		= false;

	record.parse(data);	
	return record;
}
//==================================================================================
//			graphicCg2$getGraphic
//==================================================================================
function graphicCg2$getGraphic(name)
{
	var obj,pname,text;

	pname = name.substr(0,1).toUpperCase() + name.substr(1).toLowerCase();

	try { 
		obj = eval('new graphic' + pname + '$()');
		return obj;
	} catch (e) { }			

	try { 
		obj = eval('new ' + name + '()');
		return obj;
	} catch (e) { }			

	return null;	

try
{
	eval(text);
}
catch (e) { return null; }

	try { 
		obj = eval('new graphic' + pname + '$()');
		return obj;
	} catch (e) { }			

	try { 
		obj = eval('new ' + name + '()');
		return obj;
	} catch (e) { }			
	
	return null;

}
//==================================================================================
//			graphicCg2Record$
//==================================================================================
function graphicCg2Record$(data,graphicCg2)
{
	var list,i,j,name,fmt,text,field;

	this.graphicCg2	= graphicCg2;

	this.toString		= graphicCg2Record$toString;
	this.parse		= graphicCg2Record$parse;
	this.style		= graphicCg2Record$style;
	this.toForm		= graphicCg2Record$toForm;
	this.fromForm		= graphicCg2Record$fromForm;

//------------------ private methods --------------------------------

	this.addField		= graphicCg2Record$addField;
	this.getI4		= graphicCg2Record$getI4;
	this.getString		= graphicCg2Record$getString;
	this.getValue		= graphicCg2Record$getValue;
	this.getField		= graphicCg2Record$getField;

	this.fieldValueToString = graphicCg2Record$fieldValueToString;
	this.fieldToString	= graphicCg2Record$fieldToString;
	this.formatValue	= graphicCg2Record$formatValue;
	
	this.fieldToForm	= graphicCg2Record$fieldToForm;
	this.getEditValue	= graphicCg2Record$getEditValue;
	this.clear		= graphicCg2Record$clear;
	this.clearField		= graphicCg2Record$clearField;
	
//---------------------- parse fields -------------------------------

	this.fields	= new Array();
	this.styleField = new Object();
	this.styleField.field = null;

	list = data.split(',');	

	name = list[0];
	i = name.indexOf(':');
	this.name = name.substr(i+1);
	this.name = trim(this.name).toLowerCase();

	for (i=1; i < list.length; ++i)
	{
		text = trim(list[i]);
		if (text == '') continue;
		field = this.addField(this.fields,text);
		if (field.name == 'style') this.styleField.field = field;
	}
}
//==================================================================================
//				graphicCg2Record$toForm
//==================================================================================
function graphicCg2Record$fromForm(element)
{
	var element,row,cell,name,ele,i,j;
	var text,field;
	var list,temp,a,b;

	if (element.tagName != 'TABLE') element = element.firstChild;
	if (element.tagName != 'TABLE') return this.name;

	text = this.name;	
	table = element;
	for (i=0; i < this.fields.length; ++i)
	{
		field = this.fields[i];
		if (i+1 >= table.rows.length) break;
		row = table.rows[i+1];
		if (row.cells.length != 2) break;
		cell = row.cells[0];
		name = cell.innerText;
		cell = row.cells[1];
		ele  = cell.firstChild;

		text += ',';

		if (ele.tagName == 'INPUT')
		{
			text += ele.value;
			continue;
		}
													
		if (ele.tagName == 'TEXTAREA')
		{
			temp = ele.value;
			list = temp.split('\n');
			a = new Array();
			for (j=0; j < list.length; ++j)
			{
				b = trim(list[j]);
				if (b == '') continue;
				a[a.length] = b;
			}
			
			if (field.fmt == 'countArray') 
			{
				text += a.length;
				if (a.length > 0) text += ',';
			}
			
			text += a.join(',');
		}
	}
	
	text += ';';
	return text;

}
//==================================================================================
//				graphicCg2Record$getField
//==================================================================================
function graphicCg2Record$getField(name)
{
	var i,text,field;

	name = trim(name).toLowerCase();
	for (i=0; i < this.fields.length; ++i)
	{
		field = this.fields[i];
		if (field.name == name) return field;
	}	
	return null;
}
//==================================================================================
//				graphicCg2Record$toForm
//==================================================================================
function graphicCg2Record$toForm()
{
	var i,text,field;

	text = '';
	text = '<table border=1>'

	text += '<tr><td align="center" valign=middle colspan=2><b>' + this.name + '</b></td></tr>';

	for (i=0; i < this.fields.length; ++i)
	{
		field = this.fields[i];
		text += this.fieldToForm(field);
	}	

	text += '</table>';
	return text;

}

//==================================================================================
//				graphicCg2Record$clear
//==================================================================================
function graphicCg2Record$clear()
{
	var i,field;
	
	for (i=0; i < this.fields.length; ++i)
	{
		field = this.fields[i];
		this.clearField(field);
	}	

}
//==================================================================================
//				graphicCg2Record$clearField
//==================================================================================
function graphicCg2Record$clearField(field)
{
	var i;
	if (field.isArray) field.values = new Array();
	if (field.fmt == 'name=value')
	{
		if (field.value == null) return;
		field.value.names = new Array();
		field.value.values = new Array();
	}

	field.value = '';
}

//==================================================================================
//				graphicCg2Record$fieldToForm
//==================================================================================
function graphicCg2Record$fieldToForm(field)
{
	var text, value;
	text = '<tr><td align="right" valign="top" width=110>' + field.name + '</td><td>';

	value = this.getEditValue(field);	
	if (field.isArray)
	{
		text += '<textarea rows=5 cols=50>' + value + '</textarea>';
	}
	else
	{
		text += '<input type=text size=50 value="' + value + '">';
	}

	text += "</td></tr>";
	return text;
}
//==================================================================================
//				graphicCg2Record$getEditValue
//==================================================================================
function graphicCg2Record$getEditValue(field)
{
	var text,i;
	
	text = '';

	if (field.isArray)
	{
		for (i=0; i < field.values.length; ++i)
		{
			if (text != '') text += '\r\n';
			text += this.fieldValueToString(field.fields,field.values[i]);
		}
		
		return text;
	}

	text = this.fieldToString(field);
	return text;
}
//==================================================================================
//				graphicCg2Record$style
//==================================================================================
function graphicCg2Record$style(name)
{
	var value,i;
	
	name = '' + name;
	name = trim(name).toLowerCase();
	
	for (i=0; i < this.styleField.field.value.names.length; ++i)
	{
		if (name != this.styleField.field.value.names[i]) continue;
		return '' + this.styleField.field.value.values[i];
	}

	return '';	
}
//==================================================================================
//				graphicCg2Record$parse
//==================================================================================
function graphicCg2Record$parse(data)
{
	var object,pos,i,j,n, name, field;
	
	this.pos = 0;
	this.data = '' + data;

	name = this.getString();			// should be same as object name;

	for (i=0; i < this.fields.length; ++i)
	{
		field = this.fields[i];
		field.value = '';
		field.values = null;

		if (field.isArray)
		{
			n = field.arraySize;
			if (field.fmt == 'countArray') n = this.getI4();
			field.values = new Array();
			if (field.fmt == 'eolArray') n = 9999999;

			for (j=0; j < n; ++j)						
			{
				if (field.fmt != 'fixedArray' && this.pos >= this.data.length) break;			
				field.values[j] = this.getValue(field);
			}
			continue;
		}

		field.value = this.getValue(field);
	}
}

//==================================================================================
//				graphicCg2Record$toString
//==================================================================================
function graphicCg2Record$toString()
{
	var i,field,text;

	text = this.name;		

	for (i=0; i < this.fields.length; ++i)
	{
		field = this.fields[i];
		text += ',' + this.fieldToString(field);
	}

	text += ';';
	return text;
}
//==================================================================================
//				graphicCg2Record$fieldToString
//==================================================================================
function graphicCg2Record$fieldToString(field)
{
	var i,f, text,value,name;

	if (field.fmt == 'name=value')
	{
		text = '';
		for (i=0; i < field.value.names.length; ++i)
		{
			name  = field.value.names[i];
			value = field.value.values[i];
			if (text != '') text += ' ';
			text += name;
			if (value != '') text += '=' + value;
		}
		return text;
	}
	

	if (! field.isArray) return this.fieldValueToString(field.fields,field.value);
	
	text = field.values.length;
	if (field.fmt != 'countArray') text = '';

	for (i=0; i < field.values.length; ++i)
	{
		if (text += '') text += ',';
		text += this.fieldValueToString(field.fields,field.values[i]);
	}

	return text;
}
//==================================================================================
//				graphicCg2Record$fieldValueToString
//==================================================================================
function graphicCg2Record$fieldValueToString(fields,value)
{
	var i,text,field;

	if (fields == null)
	{
		
		if (typeof(value) == 'number') return value;
		if (typeof(value) == 'boolean') return value;


		if (value == null) return '';
		if (typeof(value) == 'undefined') return '';
	
		if (value.indexOf(',') >= 0 ||
			value.indexOf("'") >= 0 ||
			value.indexOf('"') >= 0 ||
			value.indexOf(':') >= 0 ||
			value.indexOf(';') >= 0) value = "'" + value.replace(/\'/g,"''") + "'";

		return value;

	}

	text = '';
	for (i=0; i < fields.length; ++i)
	{
		field = fields[i];
		if (i > 0) text += ':';
		text += this.fieldValueToString(null, value[field.name]) ;
	}
	
	return text;
}
//==================================================================================
//				graphicCg2Record$getValue
//==================================================================================
function graphicCg2Record$getValue(field)
{
	var value,i,obj,list,text,f,v,a;
	
	value = this.getString();

	if (field.fields != null)
	{
		
		list = value.split(':');
		obj = new Object();
		for (i=0; i < field.fields.length; ++i)
		{
			text = '';
			if (i < list.length) text = list[i];
			f = field.fields[i];
			v = this.formatValue(f,text);
			obj[f.name] = eval(v);
		}
		return obj;
	}

	v = this.formatValue(field,value);
	a = eval('(' + v + ')');
	return a;
	
}
//==================================================================================
//				graphicCg2Record$formatValue
//==================================================================================
function graphicCg2Record$formatValue(field,text)
{
	var value, names,values,i,j,first,list,a,name;
	
	if (field.fmt == 'i4') 
	{
		value = parseInt(text);
		if (isNaN(value)) value = 0;
		return value;
	}

	if (field.fmt == 'r8') 
	{
		value = parseFloat(text);
		if (isNaN(value)) value = 0;
		return value;
	}

	first = true;
	if (field.fmt == 'name=value') 
	{
		names = 'names:[';
		values = 'values:[';
		list = text.split(' ');
		for (i=0; i < list.length; ++i)
		{
			a = trim(list[i]);
			if (a == '') continue;
			
			j = a.indexOf('=');
			if (j < 0) j = a.length;
			name = trim(a.substr(0,j));
			if (name == '') continue;

			value = trim(a.substr(j+1));
			name = name.toLowerCase();

			if (! first) 
			{
				names += ',';
				values += ',';
			}

			first = false;
			
			names += "'" + name + "'";
			values += "'" + value + "'";
		}
	
		value = '({' + names + '],' + values + ']})';
		return value;
	}
	
	text = text.replace(/\'/g,"\\'");
	return "'" + text + "'";

}
//==================================================================================
//				graphicCg2Record$getI4
//==================================================================================
function graphicCg2Record$getI4()
{
	var value;
	
	value = this.getString();
	if (value == '') value = 0;
	value = parseInt(value);
	if (isNaN(value)) value = 0;
	return value;
}
//==================================================================================
//				graphicCg2Record$getString
//==================================================================================
function graphicCg2Record$getString()
{
	var value,c,q,last,n;
	var inside,skip,blank;
	
	value = '';
	
	inside = false;
	skip = false;
	blank = false;

	c = ' ';
	
	while (true)
	{
		if (this.pos >= this.data.length) return value;
		last = c;
		c = this.data.charAt(this.pos);
		this.pos += 1;
		
		if (inside)
		{
			if (c != q)
			{
				value += c;
				continue;
			}
			
			if (this.pos >= this.data.length) return value;
			c = this.data.charAt(this.pos);
			if (c == q)
			{
				value += c;
				this.pos += 1;
				continue;
			}
	
			inside = false;
			continue;
		}

		if (c == ',')
		{
			return value;
		}
	

		if (c == '"' || c == "'")
		{
			blank = false;
			inside = true;
			q = c;
			continue;
		}
		
		n = c.charCodeAt(0);		
		if (n <= 32) c = ' ';	
		if (c == ' ' && value == '') continue;		
		if (c == ' ')
		{
			blank = true;
			continue;
		}

		if (blank) value += ' ';
		blank = false;		
		value += c;		
	}			
}
//==================================================================================
//				graphicCg2Record$addField
//==================================================================================
function graphicCg2Record$addField(fields,text)
{
	var field,i,name,fmt,list;

	i = text.indexOf(':');
	if (i < 0) i = text.length;

	name = trim(text.substr(0,i)).toLowerCase();
	fmt  = trim(text.substr(i+1)).toLowerCase();
	if (fmt == '') fmt = 'a';

	field = new Object();
	field.name		= name.toLowerCase();
	field.fmt		= fmt;
	field.fields		= null;
	field.isArray		= false;
	field.arraySize		= 0;

	fields[fields.length] = field;

	i = name.indexOf('(');
	if (i < 0) i = name.length;
	
	field.name = name.substr(0,i);
	text = name.substr(i+1);

// --------------------- Array ----------------------

	i = text.indexOf(')');
	if (i >= 0)
	{
		text = trim(text.substr(0,i)).toLowerCase();
		if (text == 'count') 
		{
			field.isArray = true;
			field.fmt = 'countArray';
		}
		else
		if (text == 'eol' || text == '' || text == '*')
		{
			field.isArray = true;
			field.fmt = 'eolArray';
		}
		else
		{
			field.isArray = true;
			field.arraySize = parseInt(text);
			if (isNaN(field.arraySize)) field.arraySize = 0;
			field.fmt = 'fixedArray';
		}
	}
	
//------------------- Format --------------------------

	if (fmt.substr(0,1) == '(')
	{
		fmt = fmt.substr(1,fmt.length-2);
		list = fmt.split('+');
		field.fields = new Array();

		for (i=0; i < list.length; ++i)
		{
			text = trim(list[i]);
			if (text == '') continue;
			this.addField(field.fields,text);			
		}
	}	

	return field;
}

//==================================================================================
//graphicProxy$setRange
//==================================================================================
function graphicProxy$setRange(range,p1)
{
	var i,p;
		
	if (typeof(p1) == 'object')
	{
		if (typeof(p1.length) == 'number')
		{
			for (i=0; i < p1.length; ++i)
			{
				p = p1[i];
				this.setRange(range,p);
			}
			return;
		}
	
		if (! range.set)
		{
			range.xmin = p1.x;
			range.ymin = p1.y;
			range.zmin = p1.z;

			range.xmax = p1.x;
			range.ymax = p1.y;
			range.zmax = p1.z;
			range.set = true;
		}
		else
		{
			if (p1.x < range.xmin) range.xmin = p1.x;
			if (p1.y < range.ymin) range.ymin = p1.y;
			if (p1.x < range.zmin) range.zmin = p1.z;
			
			if (p1.x > range.xmax) range.xmax = p1.x;
			if (p1.y > range.ymax) range.ymax = p1.y;
			if (p1.x > range.zmax) range.zmax = p1.z;
		}
					
	}	
}
//==================================================================================
//graphicProxy$getImageSize
//==================================================================================
function graphicProxy$getImageSize(src,width,height)
{		
	var size;

	if (width > 0 && height > 0)
	{
		size = new Object();
		size.phywidth = 0;
		size.phyheight = 0;
	
		size.width = width;
		size.height = height;
		size.adjusted = true;
		return size;
	}
	
	size = CollinsPDF().jpegSize(src);
	if (size == null) return null;
	if (size.width <= 0 || size.height <= 0) return null;

	size.phywidth = size.width;
	size.phyheight = size.height;
	
	if (width <= 0 && height <= 0) return size;
	
	size.adjusted = true;
	if (width > 0)
	{
		height = size.height * (width / size.width);
		size.height = height;
		size.width = width;
		return size;
	}

	if (height > 0)
	{
		width = size.width * (height / size.height);
		size.width = width;
		size.height = height;
	}
	
	return size;
}
//==================================================================================
//graphicProxy$getTextRange
//==================================================================================
function graphicProxy$getTextRange(origin,text,angle,just)
{		
	var size,width,height,range;

	size = this.graphicCg2.graphicView.plot2d.fontSize;
	if (size <= 0) size = 12;
	height = size;

	if (this.mode() == '3D')
	{
		width = this.graphicCg2.graphicView.plot3d.textWidth(text,size);
	}
	else
	{
		width = this.graphicCg2.graphicView.plot2d.textWidth(text);
	}

	range = new Object();
	range.set = true;
	range.xmin = origin.x;
	range.ymin = origin.y;
	range.xmax = (origin.x + width);
	range.ymax = (origin.y + height);
	return range;
}
//==================================================================================
//graphicProxy$setLineStyle
//==================================================================================
function graphicProxy$setLineStyle(p1)
{		
	var name,style,i,value;
	
	name = 'style';
	if (typeof(p1) == 'string' && p1 != '') name = p1;

	style = this.value(name);
	
	this.graphicCg2.graphicView.plot2d.setLineStyle('solid');
	this.graphicCg2.graphicView.plot2d.setLineColor('black');
	this.graphicCg2.graphicView.plot2d.setLineWeight('1');
	this.graphicCg2.graphicView.plot2d.setFillColor('');
	this.graphicCg2.graphicView.plot2d.setBlur('');

	if (typeof(style) != 'object') return;
	
	for (i=0; i < style.names.length; ++i)
	{
		name  = style.names[i];
		value = style.values[i];

		if (name ==      'style') this.graphicCg2.graphicView.plot2d.setLineStyle(value);
		if (name ==  'linestyle') this.graphicCg2.graphicView.plot2d.setLineStyle(value);

		if (name ==  'linecolor') this.graphicCg2.graphicView.plot2d.setLineColor(value);

		if (name ==      'color') this.graphicCg2.graphicView.plot2d.setLineColor(value);
		if (name ==      'color') this.graphicCg2.graphicView.plot2d.setFillColor(value);
		
		if (name ==       'fill') this.graphicCg2.graphicView.plot2d.setFillColor(value);
		if (name ==  'fillcolor') this.graphicCg2.graphicView.plot2d.setFillColor(value);

		if (name ==     'weight') this.graphicCg2.graphicView.plot2d.setLineWeight(value);
		if (name == 'lineweight') this.graphicCg2.graphicView.plot2d.setLineWeight(value);
		if (name ==      'width') this.graphicCg2.graphicView.plot2d.setLineWeight(value);

		if (name ==      'blur') this.graphicCg2.graphicView.plot2d.setBlur(value);
	}
}
//==================================================================================
//				graphicProxy$setFontStyle
//==================================================================================
function graphicProxy$setFontStyle(p1)
{		
	var name,style,value,bvalue,i,ivalue;
	
	name = 'style';
	if (typeof(p1) == 'string' && p1 != '') name = p1;

	style = this.value(name);

	if (typeof(style) != 'object') return;

	for (i=0; i < style.names.length; ++i)
	{
		name = style.names[i];
		value = style.values[i];
		bvalue = true;
		
		if ((name == 'size') || (name == 'fontsize')) 
		{
			value = value * this.graphicCg2.graphicView.g.scale;			
		}
		if (value == 'false') bvalue = false;
		if (value ==    'no') bvalue = false;
		if (value ==   'off') bvalue = false;
	
		if (name ==      'font') this.graphicCg2.graphicView.plot2d.setFontName(value);
		if (name ==  'fontname') this.graphicCg2.graphicView.plot2d.setFontName(value);

		if (name == 'fontcolor') this.graphicCg2.graphicView.plot2d.setFontColor(value);
		if (name ==     'color') this.graphicCg2.graphicView.plot2d.setFontColor(value);
		
		if (name ==       'size') this.graphicCg2.graphicView.plot2d.setFontSize(value);
		if (name ==   'fontsize') this.graphicCg2.graphicView.plot2d.setFontSize(value);

		if (name ==       'bold') this.graphicCg2.graphicView.plot2d.setBold(bvalue);
		if (name ==     'italic') this.graphicCg2.graphicView.plot2d.setItalic(bvalue);
		if (name ==  'underline') this.graphicCg2.graphicView.plot2d.setUnderline(bvalue);

		if (name ==      'blur') this.graphicCg2.graphicView.plot2d.setBlur(value);
	}
}
//==================================================================================
//				graphicProxy$mode
//==================================================================================
function graphicProxy$mode()
{		

	if (this.styleExists('2d')) return '2D';
	if (this.styleExists('3d')) return '3D';
	return this.graphicCg2.graphicView.viewdef.mode;
}
//==================================================================================
//				graphicProxy$rectangleToPoints
//==================================================================================
function graphicProxy$rectangleToPoints(x1, y1, x2, y2) {
	var points, p;

	points = new Array();

	p = new Object();
	p.x = x1;
	p.y = y1;
	p.z = 0;
	points[points.length] = p;

	p = new Object();
	p.x = x1;
	p.y = y2;
	p.z = 0;
	points[points.length] = p;

	p = new Object();
	p.x = x2;
	p.y = y2;
	p.z = 0;
	points[points.length] = p;

	p = new Object();
	p.x = x2;
	p.y = y1;
	p.z = 0;
	points[points.length] = p;

	p = new Object();
	p.x = x1;
	p.y = y1;
	p.z = 0;
	points[points.length] = p;

	return points;

}
//==================================================================================
//				graphicProxy$lineToPoints
//==================================================================================
function graphicProxy$lineToPoints(x1, y1, x2, y2)
{
	var points, p;

	points = new Array();

	p = new Object();
	p.x = x1;
	p.y = y1;
	p.z = 0;
	points[points.length] = p;

	p = new Object();
	p.x = x2;
	p.y = y2;
	p.z = 0;
	points[points.length] = p;

	return points;
}

//==================================================================================
//				graphicProxy$arcToPoints
//==================================================================================
function graphicProxy$arcToPoints(center,radius,startAngle,sweepAngle,cone)
{		
	var points,angle,sweep,da,i,p,n;

	points = new Array();
	if (radius <= 0.001) return points;

	angle = startAngle / 180 * Math.PI;
	sweep = sweepAngle / 180 * Math.PI;

	n = 40;

	da  = sweep / (n-1);

	if (cone)
	{
		p = new Object();
		p.x = center.x
		p.y = center.y
		p.x = center.z
		points[points.length] = p;
	}
	
	for (i=0; i < n; ++i)
	{
		p = new Object();
		p.x = (Math.cos(angle) * radius) + center.x;
		p.y = (Math.sin(angle) * radius) + center.y;
		p.z =  center.z;

		angle += da;
		
		points[points.length] = p;
	}

	if (cone)
	{
		p = new Object();
		p.x = center.x
		p.y = center.y
		p.x = center.z
		points[points.length] = p;
	}
	
	return points;	
}
//==================================================================================
//				graphicProxy$drawLine
//==================================================================================
function graphicProxy$drawLine(points)
{		
	
	points = this.graphicCg2.graphicView.map(points);

	if (this.mode() == '3D')
	{
		points = this.graphicCg2.graphicView.plot3d.to2D(points);
	}

	this.graphicCg2.graphicView.plot2d.linestring(points);
}
//==================================================================================
//				graphicProxy$drawPolygon
//==================================================================================
function graphicProxy$drawPolygon(points)
{		
	var n,p,dx,dy,dz;
	
	points = this.graphicCg2.graphicView.map(points);

	if (points.length > 3)
	{
		n = points.length-1;
		dx = points[0].x - points[n].x;
		dy = points[0].y - points[n].y;
		dz = points[0].z - points[n].z;
		if (! (dx == 0 && dy == 0 && dz == 0))
		{
			p = new Object();
			p.x = points[0].x;
			p.y = points[0].y;
			p.z = points[0].z;
			points[points.length] = p;
		}						
	}	
	

	if (this.mode() == '3D')
	{
		points = this.graphicCg2.graphicView.plot3d.to2D(points);
	}

	this.graphicCg2.graphicView.plot2d.polygon(points);
}
//==================================================================================
//				graphicProxy$drawCone
//==================================================================================
function graphicProxy$drawCone(center,radius,startAngle,sweepAngle)
{		
	
	var cen,rad,right,p, points;

	if (this.mode() == '3D')
	{
		points = this.arcToPoints(center,radius,startAngle,sweepAngle,true);
		this.drawPolygon(points);
		return;
	}

	cen = this.graphicCg2.graphicView.map(center);

	right = new Object();
	right.x = center.x + radius;
	right.y = center.y;
	right.z = center.z;

	p = this.graphicCg2.graphicView.map(right);

	rad = Math.abs(p.x - cen.x);

	this.graphicCg2.graphicView.plot2d.cone(cen.x,cen.y,rad,startAngle,sweepAngle);
}

//==================================================================================
//				graphicProxy$drawRectangle
//==================================================================================
function graphicProxy$drawRectangle(origin,size)
{		
	var topRight;

	topRight= new Object();
	topRight.x = origin.x + size.width;
	topRight.y = origin.y + size.height;
	topRight.z = origin.z + size.depth;
	
	origin = this.graphicCg2.graphicView.map(origin);
	topRight = this.graphicCg2.graphicView.map(topRight);

	if (this.mode() == '3D')
	{
		origin   = this.graphicCg2.graphicView.plot3d.to2D(origin);
		topRight = this.graphicCg2.graphicView.plot3d.to2D(topRight);
	}

	this.graphicCg2.graphicView.plot2d.rectangle(origin.x,origin.y,topRight.x,topRight.y);
}
//==========================================================================================
//graphicProxy$drawGrid
//==========================================================================================
function graphicProxy$drawGrid(p1,p2, rows, cols) {
	var weight;
	var text, dy, dx, color;
	var dr, dc, r, c, tx, ty;
	var x1, y1, z1, x2, y2, z2, t1, t2;
	var points;
	
	this.view = this.graphicCg2.graphicView;
	
	this.plot = this.view.plot2d;
	this.plot3d = this.view.plot3d;
	
	x1 = p1.x;
	y1 = p1.y;
	z1 = p1.z;
	
	x2 = p2.x;
	y2 = p2.y;
	z2 = p2.z;
	
	dx = x2 - x1;
	dy = y2 - y1;
	if (cols < 1) cols = 1;
	if (rows < 1) rows = 1;
	
	dr = dy / rows;
	dc = dx / cols;
	
	ty = y1;
	tx = x1;


	points = this.rectangleToPoints(x1, y1, x2, y2);
	this.drawPolygon(points);

//	this.plot.rectangle(x1, y1, x2, y2);
	
	for (r = 0; r <= rows; ++r) {
		points = this.lineToPoints(x1, ty, x2, ty);
		this.drawLine(points);
//	    this.plot.line(x1, ty, x2, ty);
	    ty += dr;
	}
	
	for (c = 0; c <= cols; ++c) {
		points = this.lineToPoints(tx, y1, tx, y2);
		this.drawLine(points);
//		this.plot.line(tx, y1, tx, y2);
	    tx += dc;
	}
}

//==========================================================================================
//graphicProxy$drawProtractor
//==========================================================================================
function graphicProxy$drawProtractor() {
	var cx, cy, i, j, text, xdir, center, list;
	var cx, cy, x, xcos, xsin, start, sweep, value;
	var d1, d2, d3, d4, tx1, ty1, tx2, ty2;
	var da, ta, a1, a2, rx, ry, d, a, ch, right,p;
	var rx1, ry1, rx2, ry2, angle, tx, ty, dx, dy;
	var dir, ticSize, ticSize2, fontsize, pro, divisions;
	var text_d1, text_d2, radius, tic_d1, tic_d2, radius3;
	var x1, y1, x2, y2, x3, y3, x4, y4, radius2, centerRadius;
	
	this.view = this.graphicCg2.graphicView;
	
	this.plot   = this.view.plot2d;
	this.plot3d = this.view.plot3d;
	
	this.plot.setFontSize(8);
	
	pro = new Object();
	pro.center = this.value('center');
	pro.radius = this.value('radius');
	pro.start  = this.value('startAngle');
	pro.sweep = this.value('sweepAngle');
	pro.divisions = this.value('divisions');
	pro.tics = this.value('ticMarks');
	pro.lineColor = this.value('lineColor');
	pro.labeled = this.value('labeled');
	
	list = this.value('showAngles').split(' ');
	pro.showAngles = new Array();
	
	for (i = 0; i < list.length; ++i)
	{
	    text = trim(list[i]);
	    if (text == '') continue;
	    value = parseInt(text);
	    if (isNaN(value)) continue;
	    pro.showAngles[pro.showAngles.length] = value;
	}
	
	this.plot.setLineColor(pro.lineColor);
	
	right = new Object();
	right.x = pro.center.x + pro.radius;
	right.y = pro.center.y;
	right.z = pro.center.z;
	
	p = this.view.map(right);
	
	center = this.view.map(pro.center);
	cx = center.x;
	cy = center.y;
	
	  pro.radius = Math.abs(p.x - cx);
	
	this.plot.arc(cx, cy, pro.radius, pro.start, pro.sweep);
	
	radius2 = Math.round(pro.radius * 0.5);
	this.plot.arc(cx, cy, radius2, pro.start, pro.sweep);
	
	start = pro.start / 180 * Math.PI;
	sweep = pro.sweep / 180 * Math.PI;
	
	divisions = pro.divisions;
	ticSize = 10;
	ticSize2 = 6;
	
	da = pro.sweep / pro.divisions;
	ta = da / (pro.tics + 1);
	
	a1 = 0;
	a2 = pro.sweep;
	
	d1 = pro.radius;
	d2 = pro.radius - (ticSize / 2);
	d3 = pro.radius - (ticSize * 0.75);
	d4 = pro.radius - (ticSize);
	
	ch = 10;

    //------------------- Draw Inside Bottom Line ----------------

	if (pro.sweep < 360) {
	    xcos = Math.cos(start);
	    xsin = Math.sin(start);
	    x1 = xcos * radius2 + cx;
	    y1 = xsin * radius2 + cy;
	
	    xcos = Math.cos(start + sweep);
	    xsin = Math.sin(start + sweep);
	    x2 = xcos * radius2 + cx;
	    y2 = xsin * radius2 + cy;
	
	    this.plot.line(cx, cy, x1, y1);
	    this.plot.line(cx, cy, x2, y2);
	}
	
	//------------------- Very Bottom Line ----------------
	
	if (pro.sweep == 180) {
	    xcos = Math.cos(start);
	    xsin = Math.sin(start);
	
	    dx = pro.radius;
	    dy = 0;
	    x1 = ((xcos * dx) - (xsin * dy)) + cx;
	    y1 = ((xsin * dx) + (xcos * dy)) + cy;
	
	    dx = pro.radius;
	    dy = -10;
	    x2 = ((xcos * dx) - (xsin * dy)) + cx;
	    y2 = ((xsin * dx) + (xcos * dy)) + cy;
	
	    dx = -pro.radius;
	    dy = -10;
	    x3 = ((xcos * dx) - (xsin * dy)) + cx;
	    y3 = ((xsin * dx) + (xcos * dy)) + cy;
	
	    dx = -pro.radius;
	    dy = 0;
	    x4 = ((xcos * dx) - (xsin * dy)) + cx;
	    y4 = ((xsin * dx) + (xcos * dy)) + cy;
	
	    this.plot.line(x1, y1, x2, y2);
	    this.plot.line(x2, y2, x3, y3);
	    this.plot.line(x3, y3, x4, y4);
	}
	
	//---------------- Text Seperator Arc -----------------------
	
	this.plot.lineWeight = 1;
	
	text_d1 = pro.radius - (ticSize + ch);
	
	radius = text_d1 - ((ticSize2 / 2) + 4);
	
	tic_d1 = radius + (ticSize2 / 2);
	tic_d2 = radius - (ticSize2 / 2);
	text_d2 = tic_d2 - ch;
	
	if (pro.labeled) this.plot.arc(cx, cy, radius, pro.start, pro.sweep);
	
	//-------------------- Origin -----------------------------
	
	centerRadius = 3;
	this.plot.circle(cx, cy, centerRadius);
	
	//----------------------- Tic Marks -------------------------		
	
	x = pro.radius;
	
	for (i = 0; i <= pro.divisions; ++i) {
	
	    angle = a1 + pro.start;
	
	    dir = angle / 180 * Math.PI;
	    xcos = Math.cos(dir);
	    xsin = Math.sin(dir);
	
	    rx = xcos * pro.radius + cx;
	    ry = xsin * pro.radius + cy;
	
	    rx2 = xcos * d4 + cx;
	    ry2 = xsin * d4 + cy;
	
	    this.plot.line(rx, ry, rx2, ry2);
	
	    x1 = xcos * tic_d1 + cx;
	    y1 = xsin * tic_d1 + cy;
	    x2 = xcos * tic_d2 + cx;
	    y2 = xsin * tic_d2 + cy;
	    if (pro.label) this.plot.line(x1, y1, x2, y2);
	
	    //---------- Draw Tics -----------------------
	
	    if (i < pro.divisions) {
	        for (j = 1; j <= pro.tics; ++j) {
	            d = d2;
	            if ((j % 5) == 0) d = d3;
	
	            a = angle + (ta * j);
	            a = a / 180 * Math.PI;
	
	            tx1 = (Math.cos(a) * d1) + cx;
	            ty1 = (Math.sin(a) * d1) + cy;
	
	            tx2 = (Math.cos(a) * d) + cx;
	            ty2 = (Math.sin(a) * d) + cy;
	            this.plot.line(tx1, ty1, tx2, ty2);
	        }
	    }
	
	    //------------------- Labels ----------------------
	
	    if (pro.labeled && (!((i == pro.divisions) && (pro.sweep == 360)))) {
	        tx = xcos * text_d1 + cx;
	        ty = xsin * text_d1 + cy;
	        text = Math.round(a1);
	        xdir = angle - 90;
	        this.plot.text(tx, ty, text, '', xdir, 'LC');
	
	        tx = xcos * text_d2 + cx;
	        ty = xsin * text_d2 + cy;
	
	        text = Math.round(a2);
	        this.plot.text(tx, ty, text, '', xdir, 'LC');
	    }
	
	    //--------------- Label Angle -------------
	
	    a1 += da;
	    a2 -= da;
	}

    //------------------------------ Marked Angles --------------------


//    this.setGraphicColor(pro.markColor);
//    this.setGraphicLineWeight(pro.markWeight);
//    this.setGraphicLineStyle(pro.markStyle);
//    this.setFontColor(pro.markColor);

    this.plot.setFontSize(10);
    radius = pro.radius;
    radius3 = Math.round(radius * 1.1);

    for (i = 0; i < pro.showAngles.length; ++i) {
        angle = pro.showAngles[i] + pro.start;
        angle = angle / 180 * Math.PI;
        x1 = (Math.cos(angle) * (centerRadius + 1)) + cx;
        y1 = (Math.sin(angle) * (centerRadius + 1)) + cy;

        x2 = (Math.cos(angle) * (radius2 - 1)) + cx;
        y2 = (Math.sin(angle) * (radius2 - 1)) + cy;
        this.plot.line(x1, y1, x2, y2);

        x1 = (Math.cos(angle) * (radius + 1)) + cx;
        y1 = (Math.sin(angle) * (radius + 1)) + cy;

        x2 = (Math.cos(angle) * radius3) + cx;
        y2 = (Math.sin(angle) * radius3) + cy;
        this.plot.line(x1, y1, x2, y2);

        angle = (pro.showAngles[i] + pro.start) - 90;
        this.plot.symbol(x2, y2, 'Z163', angle);
    }
}

//==================================================================================
//				graphicProxy$drawText
//==================================================================================
function graphicProxy$drawText(origin,text,angle,just)
{
	var org,range,right,p, points, size, save;
	var dx,dy,a,b,x,y,width,height,url,gsize;

	save = this.graphicCg2.graphicView.plot2d.fontSize

	gsize = this.graphicCg2.graphicView.plot2d.fontSize;
	size = this.graphicCg2.graphicView.g.scale * gsize;
	this.graphicCg2.graphicView.plot2d.fontSize = size;
	
	if (this.mode() == '3D')
	{
		points = this.graphicCg2.graphicView.plot3d.textToPoints(origin,text,gsize);
		this.drawLine(points);
		return;
	}

	org = this.graphicCg2.graphicView.map(origin);
	range = this.getTextRange(org,text,angle,just);
		
	p = new Object();
	p.x = range.xmin;
	p.y = range.ymin;
	p.z = range.zmin;

	width = range.xmax - range.xmin;
	height = range.ymax - range.ymin;

	just += 'LL';
	just = just.toUpperCase();

	a = just.substr(0,1);
	b = just.substr(1,1);

	dx = 0;
	dy = 0;
	if (a == 'L') dy = 0;
	if (a == 'C') dy = height / 2;
	if (a == 'U') dy = height;

	if (a == 'L') dx = 0;
	if (a == 'C') dx = width / 2;
	if (a == 'R') dx = width;
	
	if (just == 'LC') dx = width / 2;
	if (just == 'CC') dy = height / 2;

	if (just == 'UC') dx = width / 2;
	if (just == 'CC') dy = height / 2;

	x = org.x - dx;
	y = org.y - dy;

	url = '';
	
	this.graphicCg2.graphicView.plot2d.text(x,y,text,url,angle,'',size);

	this.graphicCg2.graphicView.plot2d.fontSize = save;

}
//==================================================================================
//				graphicProxy$drawTextbox
//==================================================================================
function graphicProxy$drawTextbox(origin,size,text,drop)
{
	var org,range,right,p, points, angle,url,just;
	var height,width,dx,dy,tbox;

	angle = 0;
	url   = '';
	just  = 'LL';

	isize = this.graphicCg2.graphicView.map(size);

	if (this.mode() == '3D')
	{
		size = 24;
		points = this.graphicCg2.graphicView.plot3d.textboxToPoints(origin,text,isize,drop);
		this.drawLine(points);
		return;
	}

	org = this.graphicCg2.graphicView.map(origin);
	range = this.getTextRange(org,text,angle,just);
	
	p = new Object();
	p.x = range.xmin;
	p.y = range.ymin;
	p.z = range.zmin;

	width = range.xmax - range.xmin;
	height = range.ymax - range.ymin;

	dx = this.graphicCg2.graphicView.map(drop.x);
	dy = this.graphicCg2.graphicView.map(drop.y);

}
//==================================================================================
//				graphicProxy$unmap
//==================================================================================
function graphicProxy$unmap(value)
{
	value = this.graphicCg2.graphicView.map(value);
	return value;
}
//==================================================================================
//				graphicProxy$drawImage
//==================================================================================
function graphicProxy$drawImage(origin,size,src,angle)
{
	var org,width,height,alpha,y;

	org = this.graphicCg2.graphicView.map(origin);

	size  = this.getImageSize(src,size.width,size.height);
	if (size == null) return;
	
	width = size.width;
	height = size.height;
	
	if (size.adjusted)
	{
		width = this.unmap(width);
		height = this.unmap(height);
	}

	alpha = this.value('style.opacity');

	y = org.y + height;
	
	this.graphicCg2.graphicView.plot2d.image(org.x,y,src,width,height,angle,alpha);
}
//==================================================================================
//				graphicProxy$drawVideo
//==================================================================================
function graphicProxy$drawVideo(origin,size,src,angle)
{
	var org,width,height,alpha;

	org = this.graphicCg2.graphicView.map(origin);

//	size  = this.getImageSize(src,size.width,size.height);
//	if (size == null) return;
	
	width = parseInt(size.width);
	if (isNaN(width)) width = 100;
	if (width < 1) width = 100;
	height = parseInt(size.height);
	if (isNaN(height)) height = 100;
	if (height < 1) height = 100;

	alpha = this.value('style.opacity');
	this.graphicCg2.graphicView.plot2d.video(org.x,org.y,src,width,height,angle,alpha);
}

//==================================================================================
//				graphicProxy$drawSymbol
//==================================================================================
function graphicProxy$drawSymbol(center,name,size,angle,just)
{
	var cen,isize,points;

	cen  = this.graphicCg2.graphicView.map(center);
	isize = this.graphicCg2.graphicView.g.scale * size;

	points = this.graphicCg2.graphicView.plot3d.symbolToPoints(cen,name,isize,angle,just);

	if (this.mode() == '3D')
	{
		points = this.graphicCg2.graphicView.plot3d.to2D(points);
	}

	this.graphicCg2.graphicView.plot2d.polygon(points);
}
//==================================================================================
//				graphicProxy$drawArc
//==================================================================================
function graphicProxy$drawArc(center,radius,startAngle,sweepAngle)
{
	var cen,rad,right,p, points;

	if (this.mode() == '3D')
	{
		points = this.arcToPoints(center,radius,startAngle,sweepAngle);
		this.drawLine(points);
		return;
	}

	cen = this.graphicCg2.graphicView.map(center);

	right = new Object();
	right.x = center.x + radius;
	right.y = center.y;
	right.z = center.z;

	p = this.graphicCg2.graphicView.map(right);

	rad = Math.abs(p.x - cen.x);

	this.graphicCg2.graphicView.plot2d.arc(cen.x,cen.y,rad,startAngle,sweepAngle);
}
//==================================================================================
//				graphicProxy$drawCircle
//==================================================================================
function graphicProxy$drawCircle(center,radius)
{
	var cen,rad,right,p, points;

	if (this.mode() == '3D')
	{
		points = this.arcToPoints(center,radius,0,360);
		this.drawLine(points);
		return;
	}

	cen = this.graphicCg2.graphicView.map(center);

	right = new Object();
	right.x = center.x + radius;
	right.y = center.y;
	right.z = center.z;

	p = this.graphicCg2.graphicView.map(right);

	rad = Math.abs(p.x - cen.x);
	this.graphicCg2.graphicView.plot2d.circle(cen.x,cen.y,rad);
}

//==================================================================================
//				cs2Proxy$toString
//==================================================================================
function graphicCg2Proxy$toString(name)
{
	var field;
		
	if (arguments.length == 0) return this.graphicCg2.toString();

	field = this.graphicCg2.getField(name);
	if (field == null) return '';
	return this.graphicCg2.fieldToString(field);
}
//==================================================================================
//			graphicCg2Proxy$styleExists
//==================================================================================
function graphicCg2Proxy$styleExists(name)
{
	var field,list,index,text,temp,nam,value,i;

	field = this.record.getField('style');
	if (field == null) return false;

	name = name.toLowerCase();
	value = field.value;

	for (i=0; i < value.names.length; ++i)
	{
		if (name == value.names[i]) 
		{
			if (value.values[i].toLowerCase() == 'false') return false;
			return true;			
		}
	}

	return false;
}

//==================================================================================
//			cs2Proxy$value
//==================================================================================
function graphicCg2Proxy$value(name)
{
	var field,list,index,text,temp,nam,value,i;

	name = trim(name.toLowerCase());

	list = name.split('.');
	nam = list[0];

	index = -1;
	i = name.indexOf('[');
	if (i > 0)
	{
		text = nam.substr(i+1);
		nam  = nam.substr(0,i);
		index = parseInt(text);
		if (isNaN(index)) index = -1;
	}
		
	field = this.record.getField(nam);
	if (field == null) return '';

	value = field.value;
	if (field.isArray)
	{
		if (index < 0) return field.values;
		value = field.values[index];

		if (list.length <= 1) return value;
		return value[list[1]];
		
	}

	if (field.fmt == 'name=value')
	{
		if (list.length > 1)
		{
			name = trim(list[1]).toLowerCase();
			for (i=0; i < value.names.length; ++i)
			{
				if (name == value.names[i])
				{
					 return value.values[i];
				}
			}
			
			return '';			
		}

		return value;
	}

	if (list.length > 1) value = value[list[1]];

	if (field.fmt == 'i4')
	{
		value = parseInt(value);
		if (isNaN(value)) value = 0;
		return value;
	}

	if (field.fmt == 'r8')
	{
		value = parseFloat(value);
		if (isNaN(value)) value = 0;
		return value;
	}

	return value;
}
//===========================================================================================
//			graphicLine$
//============================================================================================
function graphicLine$()
{
	this.schema = 'style:name=value,points():(x:r8+y:r8+z:r8+code)';
	this.getRange   = function () { this.range.set = false; this.setRange(this.range, this.value('points')); return this.range; };
	this.draw		= function () { this.setLineStyle(); this.drawLine(this.value('points')); };	
}
//===========================================================================================
//			graphicPolygon$
//============================================================================================
function graphicPolygon$()
{
	this.schema = 'style:name=value,points():(x:r8+y:r8+z:r8+code)';
	this.getRange   = function () { this.range.set = false; this.setRange(this.range, this.value('points')); return this.range; };
	this.draw		= function () { this.setLineStyle(); this.drawPolygon(this.value('points')); };	
}
//===========================================================================================
//			graphicRectangle$
//============================================================================================
function graphicRectangle$()
{
	this.schema = 'style:name=value,origin:(x:r8+y:r8+z:r8),size:(width:r8+height:r8+depth:r8)';
	this.draw		= function () { this.setLineStyle(); this.drawRectangle(this.value('origin'),this.value('size')); };	
	this.getRange   = graphicRectangle$getRange;
}
//===========================================================================================
//			graphicRectangle$getRange
//============================================================================================
function graphicRectangle$getRange()
{
	var origin,size,topRight;

	origin = this.value('origin');
	size = this.value('size');

	topRight= new Object();
	topRight.x = origin.x + size.width;
	topRight.y = origin.y + size.height;
	topRight.z = origin.z + size.depth;

	this.range.set = false; 
	this.setRange(this.range, origin); 
	this.setRange(this.range, topRight);
	return this.range;
}
//===========================================================================================
//			graphicTextbox$
//============================================================================================
function graphicTextbox$()
{
	this.schema = 'style:name=value,origin:(x:r8+y:r8+z:r8),size:(width:r8+height:r8+depth:r8),text:a,drop:(x:r8+y:r8+z:r8)';
	this.draw		= function () { this.setLineStyle(); this.drawTextbox(this.value('origin'),this.value('size'),this.value('text'),this.value('drop') ); };	

	this.getRange   = graphicTextbox$getRange; 
}
//===========================================================================================
//			graphicTextbox$getRange
//============================================================================================
function graphicTextbox$getRange()
{
	var origin,size,topRight,drop;

	origin = this.value('origin');
	size = this.value('size');
	drop = this.value('drop');

	topRight= new Object();
	topRight.x = origin.x + size.width;
	topRight.y = origin.y + size.height;
	topRight.z = origin.z + size.depth;

	this.range.set = false; 
	this.setRange(this.range, origin); 
	this.setRange(this.range, topRight); 
	this.setRange(this.range, drop);

	return this.range;
}
//===========================================================================================
//			graphicGrid$
//============================================================================================
function graphicGrid$() {

    this.schema = 'style:name=value,lowerLeft:(x:r8+y:r8+z:r8),upperRight:(x:r8+y:r8+z:r8),rows:i4,columns:i4';
    this.draw = function () { this.setLineStyle(); this.drawGrid(this.value('lowerLeft'), this.value('upperRight'), this.value('rows'), this.value('columns')); };

    this.getRange = graphicGrid$getRange;
}
//===========================================================================================
//			graphicGrid$getRange
//============================================================================================
function graphicGrid$getRange() {
    var points;
    this.range.set = false;
    this.setRange(this.range, this.value('p1'));
    this.setRange(this.range, this.value('p2'));
    return this.range;
}

//===========================================================================================
//			graphicProtractor$
//============================================================================================
function graphicProtractor$() {

    this.schema = 'style:name=value,center:(x:r8+y:r8+z:r8),radius:r8,startAngle:r8,sweepAngle:r8,divisions:i4,ticMarks:i4,showAngles,lineColor,labeled:bool';
    this.draw = function () { this.setLineStyle(); this.setFontStyle(); this.drawProtractor(); };

    this.getRange = graphicProtractor$getRange;
}
//===========================================================================================
//			graphicProtractor$getRange
//============================================================================================
function graphicProtractor$getRange() {
    var points;
    this.range.set = false;
    points = this.arcToPoints(this.value('center'), this.value('radius'), this.value('startAngle'), this.value('sweepAngle'));
    this.setRange(this.range, points);
    return this.range;
}
//===========================================================================================
//			graphicArc$
//============================================================================================
function graphicArc$()
{
	this.schema = 'style:name=value,center:(x:r8+y:r8+z:r8),radius:r8,startAngle:r8,sweepAngle:r8';
	this.draw  = function () { this.setLineStyle(); this.drawArc(this.value('center'), this.value('radius'), this.value('startAngle'), this.value('sweepAngle')); };	
	this.getRange = graphicArc$getRange;
}
//===========================================================================================
//			graphicArc$getRange
//============================================================================================
function graphicArc$getRange()
{
	var points;
	this.range.set = false;			
	points = this.arcToPoints(this.value('center'), this.value('radius'), this.value('startAngle'), this.value('sweepAngle'));
	this.setRange(this.range, points); 
	return this.range; 
}
//===========================================================================================
//			graphicCone$
//============================================================================================
function graphicCone$()
{
	this.schema = 'style:name=value,center:(x:r8+y:r8+z:r8),radius:r8,startAngle:r8,sweepAngle:r8';
	this.draw  = function () { this.setLineStyle(); this.drawCone(this.value('center'), this.value('radius'), this.value('startAngle'), this.value('sweepAngle')); };	
	this.getRange = graphicCone$getRange;
}
//===========================================================================================
//			graphicCone$getRange
//============================================================================================
function graphicCone$getRange()
{
	var points;
	this.range.set = false;			
	points = this.arcToPoints(this.value('center'), this.value('radius'), this.value('startAngle'), this.value('sweepAngle'), true);
	this.setRange(this.range, points); 
	return this.range; 
}
//===========================================================================================
//			graphicCircle$
//============================================================================================
function graphicCircle$()
{
	this.schema   = 'style:name=value,center:(x:r8+y:r8+z:r8),radius:r8';
	this.draw     = function () { this.setLineStyle(); this.drawCircle(this.value('center'), this.value('radius')); };	
	this.getRange = graphicCircle$getRange;
}
//===========================================================================================
//			graphicCircle$getRange
//============================================================================================
function graphicCircle$getRange()
{
	var center,radius,p;
	this.range.set = false;			
	center = this.value('center');
	radius = this.value('radius');
	p   = new Object();
	p.x = center.x - radius;
	p.y = center.y - radius;
	p.z = center.z;
	this.setRange(this.range, p); 
	p.x = center.x + radius;
	p.y = center.y + radius;
	p.z = center.z;
	this.setRange(this.range, p); 
	return this.range; 
}
//===========================================================================================
//			graphicText$
//============================================================================================
function graphicText$()
{
	var size;

	this.schema = 'style:name=value,origin:(x:r8+y:r8+z:r8),text,angle:r8,justify';

	this.draw  = function () { 
		this.setFontStyle(); 
		var origin	= this.value('origin');
		var text	= this.value('text');
		var angle	= this.value('angle');
		var just	= this.value('justify');
		this.drawText(origin , text, angle, just); 
	};	
	
	this.getRange   = graphicText$getRange;
}
//===========================================================================================
//			graphicText$getRange
//============================================================================================
function graphicText$getRange()
{
	var origin,radius,p,angle,just,text;

	this.setLineStyle(); 

	this.range.set = false;			
	origin = this.value('origin');
	text   = this.value('text');
	angle  = this.value('angle',0);
	just   = this.value('justify');
	this.range = this.getTextRange(origin,text,angle,just);

	return this.range; 
}
//===========================================================================================
//			graphicSymbol$
//============================================================================================
function graphicSymbol$()
{
	this.schema = 'style:name=value,origin:(x:r8+y:r8+z:r8),name,size:r8,angle:r8,just:a';
	this.draw  = function () { this.setLineStyle(); this.drawSymbol(this.value('origin'), this.value('name'), this.value('size'), this.value('angle'), this.value('just')); };	
	this.getRange   = graphicSymbol$getRange;
}
//===========================================================================================
//			graphicSymbol$getRange
//============================================================================================
function graphicSymbol$getRange()
{
	var center,radius,p,angle,just,text,origin;

	this.range.set = false;			
	origin = this.value('origin');
	text   = this.value('text');
	angle  = this.value('angle',0);
	just   = this.value('just');
	this.range = this.getTextRange(origin,text,angle,just);
	return this.range; 
}
//===========================================================================================
//			graphicImage$
//============================================================================================
function graphicImage$()
{
	this.schema = 'style:name=value,origin:(x:r8+y:r8+z:r8),size:(width:r8+height:r8),src,angle:r8';
	this.draw  = function () { this.setLineStyle(); this.drawImage(this.value('origin'), this.value('size'), this.value('src'), this.value('angle')  ); };	
	this.getRange   =  graphicImage$getRange;
}
//===========================================================================================
//			graphicImage$getRange
//============================================================================================
function graphicImage$getRange()
{
	var origin,radius,p,size,s,src;
				
	this.range.set = false;			
	origin = this.value('origin');
	size   = this.value('size');
	src    = this.value('src');
	s   = this.getImageSize(src,size.width,size.height);
	if (s == null) return this.range;
				
	p   = new Object();
	p.x = origin.x + this.unmap(s.width);
	p.y = origin.y + this.unmap(s.height);
	p.z = origin.z;
	this.setRange(this.range, p); 
	return this.range; 
}
//===========================================================================================
//			graphicVideo$
//============================================================================================
function graphicVideo$()
{
	this.schema = 'style:name=value,origin:(x:r8+y:r8+z:r8),size:(width:r8+height:r8),src,angle:r8';
	this.draw  = function () { this.setLineStyle(); this.drawVideo(this.value('origin'), this.value('size'), this.value('src'), this.value('angle')  ); };	
	this.getRange   = graphicVideo$getRange;
}
//===========================================================================================
//			graphicVideo$getRange
//============================================================================================
function graphicVideo$getRange()
{
	var origin,radius,p,size,s,src;
				
	this.range.set = false;			
	origin = this.value('origin');
	size   = this.value('size');
	src    = this.value('src');
	s   = this.getImageSize(src,size.width,size.height);
	if (s == null) return this.range;
				
	p   = new Object();
	p.x = origin.x + this.unmap(s.width);
	p.y = origin.y + this.unmap(s.height);
	p.z = origin.z;
	this.setRange(this.range, p); 
	return this.range; 
}
//==========================================================================================
//			graphicView$
//==========================================================================================
function graphicView$(index,viewdef,plot2d,graphicCg2)
{
	
//------------------------- Public Methods ------------------------------------

	this.draw		= graphicView$draw;
	this.map		= graphicView$map;
	this.unmap		= graphicView$unmap;

	this.rotateEye		= graphicView$rotateEye;
	this.setScreenDistance	= graphicView$setScreenDistance;

//------------------------------- Private Methods --------------------------------
	
	this.defineMap		= graphicView$defineMap;
	this.map_A		= graphicView$map_A;
	this.draw_A		= graphicView$draw_A;
	
//--------------------------------- Properties ------------------------------------

	this.graphicCg2		= graphicCg2;
	graphicCg2.graphicView	= this;

	this.index		= index;
	this.viewdef		= viewdef;
	this.plot2d		= plot2d;
	this.plot3d		= new plot3d$(this);


	if (viewdef.ele.dynamic) 
	{
try
{
		this.plot2d.attachEvents();
}
 catch (e) { }
	}

	this.plot2d.graphicView = this;	
	this.defineMap();
	
}
//==========================================================================================
//				graphicView$defineMap
//==========================================================================================
function graphicView$defineMap()
{
	var i,obj,x,y,z,dx,dy,dz;
	var h, w, a, b, c, r, mapScale;
	var p1,p2,p,cx,cy,cz;
	var i,list,text;	
	var x2,y2;
	var xmin,ymin,zmin,xmax,ymax,zmax,scale,xscale,yscale,zscale;
	
	if (isNaN(this.viewdef.height)) this.viewdef.height = 500;
	if (isNaN(this.viewdef.width))  this.viewdef.width = 500;
	if (isNaN(this.viewdef.angle))  this.viewdef.angle = 0;

	if (this.viewdef.height <= 0) this.viewdef.height = 500;
	if (this.viewdef.width <= 0)  this.viewdef.width = 500;

	this.height = this.viewdef.height;
	this.width  = this.viewdef.width;

	xmin = 0;
	ymin = 0;
	zmin = 0;
	xmax = this.viewdef.width-1;
	ymax = this.viewdef.height-1;
	zmax = 0;
	scale = 1;
	mapScale = 72 / 110;

	list = this.viewdef.ele.range.split(',');
	if (list.length >= 2)
	{
		
		if (list.length == 4)
		{
			xmin = parseFloat(list[0]);
			ymin = parseFloat(list[1]);
			xmax = parseFloat(list[2]);
			ymax = parseFloat(list[3]);
		}
		else
		{
			a = list[0].split(':');
			xmin = parseFloat(a[0]);
			if (a.length > 1) ymin = parseFloat(a[1]);
			if (a.length > 2) zmin = parseFloat(a[2]);

			a = list[1].split(':');
			xmax = parseFloat(a[0]);
			if (a.length > 1) ymax = parseFloat(a[1]);
			if (a.length > 2) zmax = parseFloat(a[2]);
		}
	

		if (isNaN(xmin)) xmin = 0;
		if (isNaN(ymin)) ymin = 0;
		if (isNaN(zmin)) zmin = 0;

		if (isNaN(xmax)) xmax = 500;
		if (isNaN(ymax)) ymax = 500;
		if (isNaN(zmax)) zmax = 0;
	
		dx = xmax - xmin;
		dy = ymax - ymin;
		dz = zmax - zmin;

		xscale = 0;
		yscale = 0;
		zscale = 0;
		if (dy > 0) yscale = this.viewdef.height / dy;	
		if (dx > 0) xscale = this.viewdef.width / dx;	
		scale = xscale;
		if (yscale < xscale) scale = yscale;
		mapScale = 1;
	}

	this.g = new Object();
	this.g.xorg = xmin;
	this.g.yorg = ymin;
	this.g.zorg = zmin;
	this.g.scale = scale;

	this.g.xmin = this.viewdef.x;
	this.g.xmax = this.viewdef.x + this.viewdef.width - 1;
	this.g.ymin = this.viewdef.y;
	this.g.ymax = this.viewdef.y + this.viewdef.height - 1;

	this.g.zmin = zmin;
	this.g.zmax = zmax;

	this.g.width  = this.viewdef.width;
	this.g.height = this.viewdef.height;
	this.g.depth  = zmax - zmin;
	
	this.viewdef.ele.origin = this.viewdef.ele.origin.toLowerCase();
	this.g.topLeft = false;
	this.g.center  = false;

	this.g.top = ymax;
	this.g.cx = (xmax + xmin) / 2;
	this.g.cy = (ymax + ymin) / 2;
	this.g.cz = (zmax + zmin) / 2;
	
	if (this.viewdef.ele.origin == 'top-left') this.g.topLeft = true;
	if (this.viewdef.ele.origin ==      'top') this.g.topLeft = true;
	if (this.viewdef.ele.origin ==   'center') this.g.center  = true;

	list = this.viewdef.ele.origin.split(':');
	if (list.length > 1)
	{
		cx = parseFloat(list[0]);
		if (isNaN(cx)) cx = 0;
		cy = parseFloat(list[1]);
		if (isNaN(cy)) cy = 0;

		cz = 0;	
		if (list.length > 2) cz = parseFloat(list[2]);
		if (isNaN(cz)) cz = 0;

		this.g.cx = cx;
		this.g.cy = cy;
		this.g.cz = cz;
		this.g.center  = true;

	}

	p1 = this.map(xmin,ymin,zmin);
	p2 = this.map(xmax,ymax,zmax);

	this.g.scale = this.g.scale * mapScale;
	this.xmin = p1.x;
	this.ymin = p1.y;
	this.zmin = p1.z;
	
	this.xmax = this.xmin + this.viewdef.width - 1;
	this.ymax = this.ymin + this.viewdef.height - 1;
	this.zmax = this.zmin;		
}
//==================================================================================
//				graphicView$rotateEye
//==================================================================================
function graphicView$rotateEye(ax,ay,az)
{
	this.plot3d.rotateEye(ax,ay,az);
	this.plot3d.setEye();
	this.draw_A();
}
//==================================================================================
//				graphicView$setScreenDistance
//==================================================================================
function graphicView$setScreenDistance(dx)
{
	var screendistance;
	
	screendistance = this.plot3d.screenDistance + dx;
	if (screendistance < 1) return;
	
	this.plot3d.screenDistance += dx;
	this.plot3d.setEye();
	this.draw_A();
}
//==========================================================================================
//				graphicView$map
//==========================================================================================
function graphicView$map(p1,p2,p3,p4)
{
	var points,x,y,z,p,i;
	
	if (arguments.length == 1)
	{
		if (typeof(p1) == 'object')
		{
			if (typeof(p1.length) == 'number')
			{
				points = new Array();
				for (i=0; i < p1.length; ++i)
				{
					points[i] = this.map(p1[i]);
				}
				return points;
			}

			p = this.map_A(p1.x,p1.y,p1.z);
			if (typeof(p1.code) != 'undefined') p.code = p1.code;
			return p;			
		}
		
		x = parseFloat(p1);
		if (isNaN(x)) x = 0;
		y = 0;
		z = 0;
		p = this.map_A(x,y,z);
		return p.x;	
	}

	if (arguments.length == 2)
	{
		x = parseFloat(p1);
		if (isNaN(x)) x = 0;
		y = parseFloat(p2);
		if (isNaN(y)) y = 0;
		z = 0;
		p = this.map_A(x,y,z);
		return p;		
	}

	if (arguments.length >= 3)
	{
		x = parseFloat(p1);
		if (isNaN(x)) x = 0;
		y = parseFloat(p2);
		if (isNaN(y)) y = 0;
		z = parseFloat(p3);
		if (isNaN(z)) z = 0;
		p = this.map_A(x,y,z);
		if (arguments.length > 3) p.code = p4;
		return p;		
	}
}
//==========================================================================================
//				graphicView$unmap
//==========================================================================================
function graphicView$unmap(value)
{

	value = value / this.g.scale;

	return value;
}
//==========================================================================================
//				graphicView$map_A
//==========================================================================================
function graphicView$map_A(x,y,z)
{
	var point;
	
	point = new Object();	

	if (!z) z = 0;

	if (this.g.topLeft) y = this.g.top - (y - this.g.yorg);
	if (this.g.center)
	{
		 x =  x + this.g.cx;
		 y =  y + this.g.cy;
	}
		
	x = (x - this.g.xorg) * this.g.scale;
	y = (y - this.g.yorg) * this.g.scale;
	z = (z - this.g.zorg) * this.g.scale;
	
	point.x = (x + this.g.xmin);
	point.y = (y + this.g.ymin);
	point.z = (z + this.g.zmin);

	return point;
}
//==========================================================================================
//				graphicView$draw
//==========================================================================================
function graphicView$draw(data)
{	
	var cx, cy, cz, radius, ax, ay, az, fx, fy, fz;
	var tx, ty, tz;

	this.data = data;
	this.graphicCg2.graphicView = this;
	this.graphicCg2.clear();
	this.graphicCg2.add(this.data);

	if (true)
	{
		cx = this.width / 2;
		cy = this.height / 2;
		cz = 0;
		this.range = this.graphicCg2.getRange();
		
		radius = this.range.radius;
		if (isNaN(radius)) radius = 40;
		this.plot3d.screenDistance = radius / 3;

		if (this.viewdef.lookfrom.screenDistance > 0) this.plot3d.screenDistance = this.viewdef.lookfrom.screenDistance;

		fx = 0;
		fy = 0;
		fz = radius / 2;

		if (this.viewdef.ele.lookfrom != '')
		{
			fx = this.viewdef.lookfrom.x;
			fy = this.viewdef.lookfrom.y;
			fz = this.viewdef.lookfrom.z;
		}

		tx = 0;
		ty = 0;
		tz = 0;

		if (this.viewdef.ele.tilt != '')
		{
			tx = this.viewdef.lookfrom.tiltx;
			ty = this.viewdef.lookfrom.tilty;
			tz = this.viewdef.lookfrom.tiltz;
		}
		
		ax = cx;
		ay = cy;
		az = cz;		

		if (this.viewdef.ele.lookat != '') {
			ax = this.viewdef.lookat.x;
			ay = this.viewdef.lookat.y;
			az = this.viewdef.lookat.z;
		}


		this.plot3d.setLookFrom(fx, fy, fz);
		this.plot3d.setLookAt(ax, ay, az);
		this.plot3d.setTilt(tx, ty, tz);
		this.plot3d.setView(this.width, this.height, radius);
		this.plot3d.setEye();
	}

	this.draw_A();
	
	if (this.viewdef.ele.animateFunction  && this.viewdef.ele.animateFunction != '')
	{
		var a;
		a = f$(this,eval(this.viewdef.ele.animateFunction));
		this.timer = setInterval(a,this.viewdef.ele.animateEvery );
//		this.timeEvent = setTimeout(this.viewdef.ele.animateFunction,this.viewdef.ele.animateEvery );
	}
	
}
//==========================================================================================
//				graphicView$draw_A
//==========================================================================================
function graphicView$draw_A()
{	

	this.plot2d.clear();

	this.plot2d.clip = this.viewdef.clip;
	this.plot2d.clipBegin(this.xmin,this.ymin,this.xmax,this.ymax,this.viewdef.angle);

	this.graphicCg2.draw();

	this.plot2d.clipEnd();
}

//==================================================================================
//								graphicRange$
//==================================================================================
function graphicRange$()
{
	this.set = false;
	this.count =  0;
	this.xmin  =  1.0E128;
	this.ymin  =  1.0E128;
	this.zmin  =  1.0E128;
	this.xmax  = -1.0E128;
	this.ymax  = -1.0E128;
	this.zmax  = -1.0E128;

	this.addPoint	= graphicRange$addPoint;
	this.addPoints	= graphicRange$addPoints;
	this.addRange	= graphicRange$addRange;

	this.add	= graphicRange$add;
	this.center	= graphicRange$center;

}
//==================================================================================
//				graphicRange$addRange
//==================================================================================
function graphicRange$addRange(range)
{

	if (! range.set) return;

	this.add(range.xmin,range.ymin,range.zmin);
	this.add(range.xmax,range.ymax,range.zmax);
	
}
//==================================================================================
//				graphicRange$center
//==================================================================================
function graphicRange$center()
{
	var point;

	point = new Object();
	point.x = 0;
	point.y = 0;
	point.z = 0;
	if (! this.set) return point;

	point.x = (this.xmax + this.xmin) / 2;
	point.y = (this.ymax + this.ymin) / 2;
	point.z = (this.zmax + this.zmin) / 2;

	return point;
}
//==================================================================================
//				graphicRange$add
//==================================================================================
function graphicRange$addPoint(point)
{	
	this.add(point.x,point.y,point.z);
}
//==================================================================================
//				graphicRange$add
//==================================================================================
function graphicRange$add(x,y,z)
{
	if (! this.set)
	{
		this.set = true;
		this.count = 1;
		this.xmin = x;
		this.ymin = y;
		this.zmin = z;	

		this.xmax = x;
		this.ymax = y;
		this.zmax = z;	
		return;
	}

	this.count += 1;
	
	if (x < this.xmin) this.xmin = x;
	if (x > this.xmax) this.xmax = x;

	if (y < this.ymin) this.ymin = y;
	if (y > this.ymax) this.ymax = y;

	if (z < this.zmin) this.zmin = z;
	if (z > this.zmax) this.zmax = z;	
}
//==================================================================================
//				graphicRange$addPoints
//==================================================================================
function graphicRange$addPoints(points)
{
	var i;

	this.count += 1;
	this.set = true;
	
	for (i=0; i < points.length; ++i)
	{
		this.addPoint(points[i]);
	}
}

//==========================================================================================
//				viewdef$
//==========================================================================================
function viewdef$(index,x,y,width,height,ele)
{
	var a,b,c,i,name,value;
		
//--------------------------- Methods --------------------------------

	this.toString		= viewdef$toString;
	this.init		= viewdef$init;
	this.ele		= ele;

//-------------------------- Properties -------------------------------

	this.data		= '';

	this.index		= index;
	this.x			= x;
	this.y			= y;
	this.width		= width;
	this.height		= height;
	
	this.init(ele);

}
//==========================================================================================
//				viewdef$init
//==========================================================================================
function viewdef$init(ele)
{
	var list,style,i,n,f,text,a,dis;

	this.mode = '2D';
	if (ele.is3D) this.mode = '3D';

	this.timeout = 100;
	this.clip	= ele.clip;

	this.lookat = new Object();
	this.lookat.x = 0;
	this.lookat.y = 0;
	this.lookat.z = 0;

	this.lookfrom = new Object();
	this.lookfrom.x = 0;
	this.lookfrom.y = 0;
	this.lookfrom.z = 0;

	this.lookfrom.tiltx = 0;
	this.lookfrom.tilty = 0;
	this.lookfrom.tiltz = 0;

	if (typeof(ele.lookat) != 'undefined' &&  ele.lookat != '')
	{
		text = ele.lookat;
		a = text.split(',');
		n = parseFloat(a[0]);
		if (! isNaN(n)) this.lookat.x = n;
		if (a.length > 1) n = parseFloat(a[1]);
		if (! isNaN(n)) this.lookat.y = n;
		if (a.length > 2) n = parseFloat(a[2]);
		if (!isNaN(n)) this.lookat.z = n;
	}	


	if (typeof(ele.lookfrom) != 'undefined' &&  ele.lookfrom != '')
	{
		text = ele.lookfrom;
		a = text.split(',');
		n = parseFloat(a[0]);
		if (! isNaN(n)) this.lookfrom.x = n;
		if (a.length > 1) n = parseFloat(a[1]);
		if (! isNaN(n)) this.lookfrom.y = n;
		if (a.length > 2) n = parseFloat(a[2]);
		if (!isNaN(n)) this.lookfrom.z = n;
		if (a.length > 3)
		{
			dis = parseFloat(a[3]);
			if (!isNaN(dis)) this.lookfrom.screenDistance = dis;
		}
	}	

	if (typeof (ele.tilt) != 'undefined' && ele.tilt != '') {
		text = ele.tilt;
		a = text.split(',');
		n = parseFloat(a[0]);
		if (!isNaN(n)) this.lookfrom.tiltx = n;
		if (a.length > 1) n = parseFloat(a[1]);
		if (!isNaN(n)) this.lookfrom.tilty = n;
		if (a.length > 2) n = parseFloat(a[2]);
		if (!isNaN(n)) this.lookfrom.tiltz = n;
	}

}
//==========================================================================================
//				viewdef$toString
//==========================================================================================
function viewdef$toString(dx,dy)
{
	var text,style,top,left;
	
	if (arguments.length == 0)
	{
		dx = 0;
		dy = 0;
	}

	left = this.x + dx;
	top = this.y + dy;
	
	style = 'position:absolute;left:' + Math.round(left) + 'px;top:' + Math.round(top) + 'px;';	
	text = '<canvas id="canvas' + this.index + '" height="' + Math.round(this.height) + '" width="' + Math.round(this.width) + '" style="' + style + '">Your Broweser does not support HTML5 Canvas</canvas>';
	return text; 
}

//==================================================================================
//				pdf_matrix3D$
//==================================================================================
function pdf_matrix3D$()
{
	var r;

	this.v	= new Array(4);

	for (r = 0; r < 4; ++r)
	{
		this.v[r] = new Array(0,0,0,0);
		this.v[r][r] = 1;
	}

	this.toString   = pdf_matrix3D$toString;
	this.rotate	= pdf_matrix3D$rotate;
	this.scale	= pdf_matrix3D$scale;
	this.move	= pdf_matrix3D$move;
	this.cross	= pdf_matrix3D$cross;
}
//==================================================================================
//				pdf_matrix3D$cross
//==================================================================================
function pdf_matrix3D$cross(b)
{
	var temp,c,i,j,k;

	c = new pdf_matrix3D$();
	
	temp = new Array();
	for (i = 0; i < 4; ++i)
	{
		for (k=0; k < 4; ++k)
		{
			temp[k] = 0;
			for (j = 0; j < 4; ++j)
				temp[k] = (this.v[i][j] * b.v[j][k]) + temp[k];
		}
		for (j = 0; j < 4; ++j)
			c.v[i][j] = temp[j];
	}

	for (i = 0; i < 4; ++i)
	{
		for (j=0; j < 4; ++j)
		{
			this.v[i][j] = c.v[i][j];
		}
	}
}
//==================================================================================
//				pdf_matrix3D$move
//==================================================================================
function pdf_matrix3D$move(x,y,z)
{
	var temp,mov;

	mov = new pdf_matrix3D$();

	mov.v[3][0] =  x;
	mov.v[3][1] =  y;
	mov.v[3][2] =  z;

	this.cross(mov);
}
//==================================================================================
//				pdf_matrix3D$rotate
//==================================================================================
function pdf_matrix3D$rotate(angle,axis)
{
	var temp,mov,rot,m,cos,sin,one;
	var leftHanded = false;

	angle = angle % 360;
//	if (Math.abs(angle) < 0.001) return mat;

	rot = new pdf_matrix3D$();
	angle = (angle % 360);
	if (leftHanded) angle = -angle		// clock-wise
	
	angle = angle / 180 * Math.PI;
	cos		= Math.cos(angle);
	sin		= Math.sin(angle);
	
	one = 1;
	if (leftHanded) one = -1;
	
	switch (axis.toLowerCase())
	{
	case 'x':
			rot.v[1][1] =  cos;
			rot.v[1][2] = -sin * one;
			rot.v[2][1] =  sin * one;
			rot.v[2][2] =  cos;
			break;
	case 'y': 
			rot.v[0][0] =  cos;
			rot.v[0][2] = -sin * one;
			rot.v[2][0] =  sin * one;
			rot.v[2][2] =  cos;
			break;
	case 'z': 
			rot.v[0][0] =  cos;
			rot.v[0][1] = -sin * one;
			rot.v[1][0] =  sin * one;
			rot.v[1][1] =  cos;
			break;
	}
	this.cross(rot);
}
//==================================================================================
//				pdf_matrix3D$scale
//==================================================================================
function pdf_matrix3D$scale(sx,sy,sz)
{
	var mov,scl,m;

	scl = new pdf_matrix3D$();
	scl.v[0][0] = sx;
	scl.v[1][1] = sy;
	scl.v[2][2] = sz;
	this.cross(scl);
}
//==================================================================================
//				pdf_matrix3D$toString
//==================================================================================
function pdf_matrix3D$toString()
{
	var text,r,c ;
	
	text = "";

	for (r=0; r < 4; ++ r)
	{
		for (c=0; c < 3; ++c)
		{	
			if (c > 0) text += ' ';
			text += Math.round(this.v[r][c] * 1000) / 1000;
		}
		
		text += ' ';
	}
	return text;	
}

//==================================================================================
//					plot3d$
//==================================================================================
function plot3d$(owner)
{

	this.count = 0;

	this.lookAt		= new Object();
	this.lookFrom		= new Object();

	this.lookFrom.x	= 0;
	this.lookFrom.y	= 0;
	this.lookFrom.z	= 10;
	this.lookFrom.tiltx	= 0;
	this.lookFrom.tilty	= 0;
	this.lookFrom.tiltz	= 0;

	this.view		= new Object();
	this.view.scale		= 1;
	this.view.xorigin	= 0;
	this.view.yorigin	= 0;

	this.owner		= null;	
	this.font		= null;
	this.symbolFont		= null;

	if (arguments.length > 0) this.owner = owner;
	
//------------------- Methods (public) -----------------

	this.to2D		= plot3d$to2D;
	this.setLookAt		= plot3d$setLookAt;
	this.setLookFrom	= plot3d$setLookFrom;
	this.setTilt		= plot3d$setTilt;
	this.rotateEye		= plot3d$rotateEye;
	this.textToPoints	= plot3d$textToPoints;
	this.symbolToPoints	= plot3d$symbolToPoints;

	this.textWidth		= plot3d$textWidth;

//------------------Methods (private) ------------------

	this.cross		= plot3d$cross;
	
	this.move		= plot3d$move;
	this.rotate		= plot3d$rotate;
	
	this.scale		= plot3d$scale;
	this.transform		= plot3d$transform;

	this.setEye		= plot3d$setEye;
	this.setView		= plot3d$setView;

	this.point		= plot3d$point;	
	this.clear		= plot3d$clear;
	this.symbols		= plot3d$symbols;

	this.angle_		= plot3d$angle_;
	this.angleCos_		= plot3d$angleCos_;
	
	this.viewEye		= plot3d$viewEye;	
	
//------------------------------------------------

	this.screenDistance	= 3;

	this.clear();
}
//==================================================================================
//				graphic$rotateEye
//==================================================================================
function plot3d$rotateEye(ax,ay,az)
{
	this.tiltx += ax;
	this.tiltx = this.tiltx % 360;
	this.tilty += ay;
	this.tilty = this.tilty % 360;
	this.tiltz += az;
	this.tiltz = this.tiltz % 360;

	this.setTilt(this.tiltx,this.tilty,this.tiltz);
}
//==================================================================================
//				plot3d$to2D
//==================================================================================
function plot3d$to2D(points)
{
	var i,p1,p2,p;

//------------------------ 1 point -------------------

	var a = typeof(points.length);
	
	if (typeof(points.length) != 'number')
	{
		p = this.viewEye(points,this.eye);
		return p;
	}    

//------------------------- list of points -------------------
    
    p = new Array();
    
	for (i=0; i < points.length; ++i)
	{
		p[i] = this.viewEye(points[i],this.eye);
	}

	return p;	
}
//==================================================================
//				plot3d$angleCos_
//==================================================================
function plot3d$angleCos_(A,B,C)
{
	if (Math.abs(A) < 0.0001) return 0;
	if (Math.abs(B) < 0.0001) return 0;
	
	acos = (A*A + B*B - C*C) / (2 * A * B);
	
	dir = Math.acos(acos);
	return dir;	
}

//======================================================================
//			   plot3d$angle_
//======================================================================
function plot3d$angle_(x1,y1,x2,y2)
{
	var dir,dx,dy,ESP,d;
	ESP = 0.00001;

	dir = 0;
	dx = x2 - x1;
	dy = y2 - y1;
	if (Math.abs(dx) >= ESP)
	{
	   d = dy / dx;
	   dir = Math.atan(d);
	   if (isNaN(dir)) dir = 0;
	   if (Math.abs(dir) < ESP) dir = 0;

	   if (dx < 0 && dy <  0) dir = dir + Math.PI;
	   if (dx < 0 && dy >= 0) dir = dir + Math.PI;
	}
	else
	{
		dir = Math.PI / 2 * 3;
		if (y2 > y1) dir = Math.PI / 2;
		if (Math.abs(y2-y1) < ESP) dir = 0;
	}
	
	if (dir < 0) dir = dir + (Math.PI * 2);
	
	return dir;
}
//==================================================================================
//				plot3d$clear
//==================================================================================
function plot3d$clear()
{

	this.cx		= 0;
	this.cy		= 0;
	this.cz		= 0;
	
	this.tiltx	= 0;
	this.tilty	= 0;
	this.tiltz	= 0;
		
	this.mat	= new plot3dMatrix$();
	this.eye	= new plot3dMatrix$();

	this.setLookAt(0,0,0);
	this.setLookFrom(0, 0, 100);
	this.setTilt(0, 0, 0);
}
//==================================================================================
//				plot3d$point
//==================================================================================
function plot3d$point(x,y,z)
{
	p = new Object();
	p.x = parseFloat(x);
	p.y = parseFloat(y);
	p.z = parseFloat(z);
	return p;
}
//==================================================================================
//				plot3d$view
//==================================================================================
function plot3d$viewEye(point,matrix)
{
	var pnt,typ;
	var i,j,t,value,p;
		
	t = new Array();
	p = new Array();
		
	p[0] = point.x;
	p[1] = point.y;
	p[2] = point.z;
	p[3] = 1;
		
	for (i =0; i < 4; ++i)
	{
		t[i] = 0;

		for (j=0; j < 4; ++j)
		{				
			t[i] = p[j] * matrix.v[j][i] + t[i];
		}		
	}

	pnt = this.transform(t[0],t[1],t[2]);
	if (typeof(point.code) != 'undefined') pnt.code = point.code;
	return pnt;
	
}
//==================================================================================
//				plot3d$setTilt
//==================================================================================
function plot3d$setTilt(xangle, yangle, zangle)
{
	this.lookFrom.tiltx = xangle % 360;
	this.lookFrom.tilty = yangle % 360;
	this.lookFrom.tiltz = zangle % 360;
}

//==================================================================================
//				plot3d$setView
//==================================================================================
function plot3d$setView(width,height, radius)
{
	var scale,xscale,yscale;

	if (radius < 0.000001) radius = 1;
	xscale = width / radius;
	yscale = height / radius;
	scale = xscale;
	if (yscale < xscale) scale = yscale;
 
	this.view.scale = scale * 5;
	this.view.xorigin = width / 2;;
	this.view.yorigin = height / 2;
}
//==================================================================================
//				plot$setEye
//==================================================================================
function plot3d$setEye()
{
	var x,y,z,alpha,beta,angle,dist;
	var lefthanded,atan,btan,dir;
	var ESP = 0.0001;
	
	lefthanded = true;
			
	this.eye = new plot3dMatrix$();
		
//------------------ Tilt -----------------
	
	this.cx = 0;
	this.cy = 0;
	this.cz = 0;

	this.eye = this.move(this.eye,-this.lookAt.x,-this.lookAt.y,-this.lookAt.z);	

	this.eye = this.rotate(this.eye,this.lookFrom.tiltx,'x');
	this.eye = this.rotate(this.eye,this.lookFrom.tilty,'y');
	this.eye = this.rotate(this.eye,this.lookFrom.tiltz,'z');

//----------------------- Eye ------------------------

	x = this.lookFrom.x;
	y = this.lookFrom.y;
	z = this.lookFrom.z;
	
	this.eye = this.move(this.eye,x,y,z);	

	this.cx = 0;
	this.cy = 0;
	this.cz = 0;
	
	angle = 90;
	this.eye = this.rotate(this.eye,angle,'x',lefthanded);

	dir = Math.atan(y / x);	
	if ((Math.abs(x) < 0.0001) && (y >= 0 )) dir = Math.PI / 2;
	if ((Math.abs(x) < 0.0001) && (y < 0 )) dir = Math.PI / 2 * 3;
	
	atan = dir;
    if (isNaN(dir)) dir = 0;		
	alpha = dir * 180 / Math.PI;
	this.eye = this.rotate(this.eye, alpha+90,'y',lefthanded);

	dist = Math.sqrt(x*x + y*y);
	beta = Math.atan(z / dist);
	if ((Math.abs(dist) < 0.0001) && (z >= 0)) dir = Math.PI / 2;
	if ((Math.abs(dist) < 0.0001) && (z <  0)) dir = Math.PI / 2 * 3;

	btan = beta;
	beta = beta * 180 / Math.PI;
	this.eye = this.rotate(this.eye,-beta,'x',lefthanded);

	this.eye = this.scale(this.eye,1,1,-1);
	
	dist = this.screenDistance;
	this.eye = this.scale(this.eye,dist,dist,1);
}
//==================================================================================
//				plot3d$setLookAt
//==================================================================================
function plot3d$setLookAt(x,y,z)
{

	this.lookAt.x = parseFloat(x);
	this.lookAt.y = parseFloat(y);
	this.lookAt.z = parseFloat(z);

	if (isNaN(this.lookAt.x)) this.lookAt.x = 0;
	if (isNaN(this.lookAt.y)) this.lookAt.y = 0;
	if (isNaN(this.lookAt.z)) this.lookAt.z = 0;

}
//==================================================================================
//				plot3d$setLookFrom
//==================================================================================
function plot3d$setLookFrom(x,y,z,screenDistance)
{

	this.lookFrom.x = parseFloat(x);
	this.lookFrom.y = parseFloat(y);
	this.lookFrom.z = parseFloat(z);
	
	if (isNaN(this.lookFrom.x)) this.lookFrom.x = 0;
	if (isNaN(this.lookFrom.y)) this.lookFrom.y = 0;
	if (isNaN(this.lookFrom.z)) this.lookFrom.z = 0;

	if (arguments.length > 3) this.screenDistance  = parseFloat(screenDistance);
}
//==================================================================================
//				plot3d$setTilt
//==================================================================================
function plot3d$setTilt(x, y, z) {

	this.lookFrom.tiltx = parseFloat(x);
	this.lookFrom.tilty = parseFloat(y);
	this.lookFrom.tiltz = parseFloat(z);

	if (isNaN(this.lookFrom.tiltx)) this.lookFrom.tiltx = 0;
	if (isNaN(this.lookFrom.tilty)) this.lookFrom.tilty = 0;
	if (isNaN(this.lookFrom.tiltz)) this.lookFrom.tiltz = 0;
}

//==================================================================================
//				plot3d$transform
//==================================================================================
function plot3d$transform(x,y,z)
{
	var p;
	
	p = new Object();
	p.x = 0;
	p.y = 0;
	
	if (Math.abs(z) > 0.0000001) 
	{
		p.x = x / z;
		p.y = y / z;
	}
		
	p.x = (p.x * this.view.scale) + this.view.xorigin;
	p.y = (p.y * this.view.scale) + this.view.yorigin;
		
	return p;
}
//==================================================================================
//				plot3d$cross
//==================================================================================
function plot3d$cross(a,b)
{
	var temp,c,i,j,k;

	c = new plot3dMatrix$();
	
	temp = new Array();
	for (i = 0; i < 4; ++i)
	{
		for (k=0; k < 4; ++k)
		{
			temp[k] = 0;
			for (j = 0; j < 4; ++j)
				temp[k] = (a.v[i][j] * b.v[j][k]) + temp[k];
		}
		for (j = 0; j < 4; ++j)
			c.v[i][j] = temp[j];
	}
	
	return c;
}
//==================================================================================
//				plot3d$move
//==================================================================================
function plot3d$move(mat,x,y,z)
{
	var temp,mov;

	mov = new plot3dMatrix$();

	mov.v[3][0] =  x;
	mov.v[3][1] =  y;
	mov.v[3][2] =  z;

	mov = this.cross(mat,mov);
	return mov
}
//==================================================================================
//				plot3d$rotate
//==================================================================================
function plot3d$rotate(mat,angle,axis,leftHanded)
{
	var temp,mov,rot,m,cos,sin,one;

	angle = angle % 360;
//	if (Math.abs(angle) < 0.001) return mat;

	mov = new plot3dMatrix$();
	rot = new plot3dMatrix$();

	mov.v[3][0] = -this.cx;
	mov.v[3][1] = -this.cy;
	mov.v[3][2] = -this.cz;

	m = this.cross(mat,mov);

	angle = (angle % 360);
	
	if (leftHanded) angle = -angle		// clock-wise
	
	angle = angle / 180 * Math.PI;
	cos		= Math.cos(angle);
	sin		= Math.sin(angle);
	
	one = 1;
	if (leftHanded) one = -1;
	
	switch (axis.toLowerCase())
	{
	case 'x':
			rot.v[1][1] =  cos;
			rot.v[1][2] = -sin * one;
			rot.v[2][1] =  sin * one;
			rot.v[2][2] =  cos;
			break;
	case 'y': 
			rot.v[0][0] =  cos;
			rot.v[0][2] = -sin * one;
			rot.v[2][0] =  sin * one;
			rot.v[2][2] =  cos;
			break;
	case 'z': 
			rot.v[0][0] =  cos;
			rot.v[0][1] = -sin * one;
			rot.v[1][0] =  sin * one;
			rot.v[1][1] =  cos;
			break;
	}
	
	m = this.cross(mat,rot);


	mov.v[3][0] = this.cx;
	mov.v[3][1] = this.cy;
	mov.v[3][2] = this.cz;

	m = this.cross(m,mov);
	return m;
}
//==================================================================================
//				plot3d$scale
//==================================================================================
function plot3d$scale(mat,sx,sy,sz)
{
	var mov,scl,m;

	mov = new plot3dMatrix$();
	scl = new plot3dMatrix$();

	mov.v[3][0] = -this.cx;
	mov.v[3][1] = -this.cy;
	mov.v[3][2] = -this.cz;

	m = this.cross(mat,mov);
	
	scl.v[0][0] = sx;
	scl.v[1][1] = sy;
	scl.v[2][2] = sz;

	m = this.cross(m,scl);

	mov.v[3][0] = this.cx;
	mov.v[3][1] = this.cy;
	mov.v[3][2] = this.cz;

	m = this.cross(m,mov);
	return m;
}

//======================================================================================
//				plot3d$arialFont
//======================================================================================
function plot3d$arialFont()
{
	this.scale   = 0.047619047619047616;
	this.xorigin = 65;
	this.yorigin = 90;
	this.widths  = 'SCIPOSUCHHKSCSCSOFOOPONOONCCQSQMVQOPONNPOAKOMQOQOQOOOOQUOQOHOHQSCMMMMMIMLCGLAWLNMMILILMQLNLFAFS';
	this.heights = 'VVHa^VVGaaMSFACaVVVVVVVVVVJMSGSVVVVVVVVVVVVVVVVVVXVVVVVVVVVaYaOAFOVOVOVVVW^VVOOOVVOOVOOOOVOaaaG';
	this.chars   = [ /* blank */ '',
 /* ! */ 'BBBP +BUAVBWCVBU',
 /* " */ 'ABAI +IBII',
 /* # */ 'I>B^ +O>H^ +BKPK +AQOQ',
 /* $ */ 'F>F[ +J>J[ +OEMCJBFBCCAEAGBICJEKKMMNNOOQOTMVJWFWCVAT',
 /* % */ 'SBAW +FBHDHFGHEICIAGAEBCDBFBHCKDNDQCSB +OPMQLSLUNWPWRVSTSRQPOP',
 /* & */ 'UKUJTISIRJQLOQMTKVIWEWCVBUASAQBOCNJJKILGLEKCIBGCFEFGGJIMNTPVRWUKUJTISIRJQLOQMTKVIWEWCVBUASAQBOCNJJKILGLEKCIBGCFEFGGJIMNTPVRWTWUVUU',
 /* ' */ 'BDACBBCCCEBGAH',
 /* ( */ 'H>F@DCBGALAPBUDYF\\H^',
 /* ) */ 'A>C@ECGGHLHPGUEYC\\A^',
 /* * */ 'FHFT +AKKQ +KKAQ',
 /* + */ 'JEJW +ANSN',
 /* , */ 'CSBTASBRCSCUAW',
 /* - */ 'ANSN',
 /* . */ 'BRASBTCSBR',
 /* / */ 'S>A^',
 /* 0 */ 'GBDCBFAKANBSDVGWIWLVNSONOKNFLCIBGB',
 /* 1 */ 'AFCEFBFW',
 /* 2 */ 'BGBFCDDCFBJBLCMDNFNHMJKMAWOW',
 /* 3 */ 'CBNBHJKJMKNLOOOQNTLVIWFWCVBUAS',
 /* 4 */ 'KBAPPP +KBKW',
 /* 5 */ 'MBCBBKCJFIIILJNLOOOQNTLVIWFWCVBUAS',
 /* 6 */ 'MELCIBGBDCBFAKAPBTDVGWHWKVMTNQNPMMKKHJGJDKBMAP',
 /* 7 */ 'OBEW +ABOB',
 /* 8 */ 'FBCCBEBGCIEJIKLLNNOPOSNUMVJWFWCVBUASAPBNDLGKKJMINGNEMCJBFB',
 /* 9 */ 'NIMLKNHOGODNBLAIAHBEDCGBHBKCMENINNMSKVHWFWCVBT',
 /* : */ 'BKALBMCLBK +BRASBTCSBR',
 /* ; */ 'BKALBMCLBK +CSBTASBRCSCUAW',
 /* < */ 'QEANQW',
 /* = */ 'AKSK +AQSQ',
 /* > */ 'AEQNAW',
 /* ? */ 'AGAFBDCCEBIBKCLDMFMHLJKKGMGP +GUFVGWHVGU',
 /* @ */ 'PJOHMGJGHHGIFLFOGQIRLRNQOO +JGHIGLGOHQIR +PGOOOQQRSRUPVMVKUHTFPJOHMGJGHHGIFLFOGQIRLRNQOO +JGHIGLGOHQIR +PGOOOQQRSRUPVMVKUHTFRDPCMBJBGCEDCFBHAKANBQCSEUGVJWMWPVRUST +QGPOPQQR',
 /* A */ 'IBAW +IBQW +DPNP',
 /* B */ 'ABAW +ABJBMCNDOFOHNJMKJL +ALJLMMNNOPOSNUMVJWAW',
 /* C */ 'PGOEMCKBGBECCEBGAJAOBRCTEVGWKWMVOTPR',
 /* D */ 'ABAW +ABHBKCMENGOJOONRMTKVHWAW',
 /* E */ 'ABAW +ABNB +ALIL +AWNW',
 /* F */ 'ABAW +ABNB +ALIL',
 /* G */ 'PGOEMCKBGBECCEBGAJAOBRCTEVGWKWMVOTPRPO +KOPO',
 /* H */ 'ABAW +OBOW +ALOL',
 /* I */ 'ABAW',
 /* J */ 'KBKRJUIVGWEWCVBUARAP',
 /* K */ 'ABAW +OBAP +FKOW',
 /* L */ 'ABAW +AWMW',
 /* M */ 'ABAW +ABIW +QBIW +QBQW',
 /* N */ 'ABAW +ABOW +OBOW',
 /* O */ 'GBECCEBGAJAOBRCTEVGWKWMVOTPRQOQJPGOEMCKBGB',
 /* P */ 'ABAW +ABJBMCNDOFOINKMLJMAM',
 /* Q */ 'GBECCEBGAJAOBRCTEVGWKWMVOTPRQOQJPGOEMCKBGB +JSPY',
 /* R */ 'ABAW +ABJBMCNDOFOHNJMKJLAL +HLOW',
 /* S */ 'OEMCJBFBCCAEAGBICJEKKMMNNOOQOTMVJWFWCVAT',
 /* T */ 'HBHW +ABOB',
 /* U */ 'ABAQBTDVGWIWLVNTOQOB',
 /* V */ 'ABIW +QBIW',
 /* W */ 'ABFW +KBFW +KBPW +UBPW',
 /* X */ 'ABOW +OBAW',
 /* Y */ 'ABILIW +QBIL',
 /* Z */ 'OBAW +ABOB +AWOW',
 /* [ */ 'A>A^ +B>B^ +A>H> +A^H^',
 /* \ */ 'ABOZ',
 /* ] */ 'G>G^ +H>H^ +A>H> +A^H^',
 /* ^ */ 'I@AN +I@QN',
 /* _ */ 'A^S^',
 /* ` */ 'CGAIAKBLCKBJAK',
 /* a */ 'MIMW +MLKJIIFIDJBLAOAQBTDVFWIWKVMT',
 /* b */ 'ABAW +ALCJEIHIJJLLMOMQLTJVHWEWCVAT',
 /* c */ 'MLKJIIFIDJBLAOAQBTDVFWIWKVMT',
 /* d */ 'MBMW +MLKJIIFIDJBLAOAQBTDVFWIWKVMT',
 /* e */ 'AOMOMMLKKJIIFIDJBLAOAQBTDVFWIWKVMT',
 /* f */ 'IBGBECDFDW +AIHI',
 /* g */ 'MIMYL\\K]I^F^D] +MLKJIIFIDJBLAOAQBTDVFWIWKVMT',
 /* h */ 'ABAW +AMDJFIIIKJLMLW',
 /* i */ 'ABBCCBBAAB +BIBW',
 /* j */ 'EBFCGBFAEB +FIFZE]C^A^',
 /* k */ 'ABAW +KIAS +EOLW',
 /* l */ 'ABAW',
 /* m */ 'AIAW +AMDJFIIIKJLMLW +LMOJQITIVJWMWW',
 /* n */ 'AIAW +AMDJFIIIKJLMLW',
 /* o */ 'FIDJBLAOAQBTDVFWIWKVMTNQNOMLKJIIFI',
 /* p */ 'AIA^ +ALCJEIHIJJLLMOMQLTJVHWEWCVAT',
 /* q */ 'MIM^ +MLKJIIFIDJBLAOAQBTDVFWIWKVMT',
 /* r */ 'AIAW +AOBLDJFIII',
 /* s */ 'LLKJHIEIBJALBNDOIPKQLSLTKVHWEWBVAT',
 /* t */ 'DBDSEVGWIW +AIHI',
 /* u */ 'AIASBVDWGWIVLS +LILW',
 /* v */ 'AIGW +MIGW',
 /* w */ 'AIEW +IIEW +IIMW +QIMW',
 /* x */ 'AILW +LIAW',
 /* y */ 'BIHW +NIHWF[D]B^A^',
 /* z */ 'LIAW +AILI +AWLW',
 /* { */ 'F>D?C@BBBDCFDGEIEKCM +D?CACCDEEFFHFJELANEPFRFTEVDWCYC[D] +COEQF>D?C@BBBDCFDGEIEKCM +D?CACCDEEFFHFJELANEPFRFTEVDWCYC[D] +COEQESDUCVBXBZC\\D]F^',
 /* | */ 'A>A^',
 /* } */ 'A>C?D@EBEDDFCGBIBKDM +C?DADCCEBFAHAJBLFNBPARATBVCWDYD[C] +DOBQA>C?D@EBEDDFCGBIBKDM +C?DADCCEBFAHAJBLFNBPARATBVCWDYD[C] +DOBQBSCUDVEXEZD\\C]A^',
 /* ~ */ 'AQAOBLDKFKHLLONPPPROSM +AOBMDLFLHMLPNQPQRPSMSK'];
}
//======================================================================================
//				plot3d$symbols
//======================================================================================
function plot3d$symbols()
{
	var sym;
	
	this.scale   = 1 / 100;
	this.xorigin = 50;
	this.yorigin = 50;

	this.symbols = new Array();
	
	sym = new Object();
	sym.width = 100;
	sym.height = 100;
	sym.def = "0:0:M,0:100:L,100:100:L,100:0:L,0:0:L";
	this.symbols['box'] = sym;

	sym = new Object();
	sym.width = 100;
	sym.height = 100;
	sym.def = "0:0:M,50:100:L,100:0:L,0:0:L";
	this.symbols['triangle'] = sym;
	
	sym = new Object();
	sym.width = 100;
	sym.height = 60;
	sym.def = "0:20:M,0:80:L,100:50:L,0:20:L";
	this.symbols['arrow'] = sym;

}
//======================================================================================
//				plot3d$textWidth
//======================================================================================
function plot3d$textWidth(text,size)
{
	var dx,c,scale,width,move,weight;
	var i,j,cdef,xorg,yorg;
	
	if (this.font == null) this.font = new plot3d$arialFont();

	scale = this.font.scale * size
	xorg = 0;
  
	for (i=0; i < text.length; ++i)
	{
		c = text.charCodeAt(i);
		c = c - 32;

		if (c < 0) continue;
		if (c >= this.font.chars.length) continue;

		width = this.font.widths.charCodeAt(c);
		width = (width - this.font.xorigin + 5) * scale;
		
		xorg += width;
	}
	return xorg;
}
//======================================================================================
//				plot3d$textToPoints
//======================================================================================
function plot3d$textToPoints(origin,text,size)
{
	var dx,c,scale,width,move,weight;
	var i,j,cdef,xorg,yorg,points;
	var x,y,p;
	
	xorg = origin.x;
	yorg = origin.y;

	if (this.font == null) this.font = new plot3d$arialFont();

	scale = this.font.scale * size;
  
	points = new Array();

	for (i=0; i < text.length; ++i)
	{
		c = text.charCodeAt(i);
		c = c - 32;

		if (c < 0) continue;
		if (c >= this.font.chars.length) continue;

		width = this.font.widths.charCodeAt(c);
		width = (width - this.font.xorigin + 5) * scale;
		
		cdef = this.font.chars[c];
		move = true;
		for (j=0; j < cdef.length; j += 2)
		{
			x = cdef.charCodeAt(j);
			y = cdef.charCodeAt(j+1);

			if (x == 32)
			{
				move = true;
				continue;
			}
			
			p = new Object();
			p.x = ((x - this.font.xorigin) * scale) + xorg;
			p.y = ((this.font.yorigin - y) * scale) + yorg;
			p.z = origin.z;
			p.code = 'L';
			if (move) p.code = "M";
			points[points.length] = p;
			move = false;				
		}

		xorg += width;
	}

	return points;
}
//======================================================================================
//				plot3d$symbolToPoints
//======================================================================================
function plot3d$symbolToPoints(origin,name,size,angle,just)
{
	var dx,c,scale,width,move,weight;
	var i,j,cdef,xorg,yorg,points;
	var x,y,dir,cos,sin,tx,ty;
	var list,code,a,b,dx,dy,sym,p;
	
	xorg = origin.x;
	yorg = origin.y;

	if (this.symbolFont == null) this.symbolFont = new plot3d$symbols();

	scale = this.symbolFont.scale * size;

	dx = 0;

	dir = angle / 180 * Math.PI;
	cos = Math.cos(dir);
	sin = Math.sin(dir);

	points = new Array();
	
	name = '' + name;
	name =  name.toLowerCase();
	sym = this.symbolFont.symbols[name];
	if (! sym) return points;	

	dx = 0;
	dy = 0;
	a = just.substr(0,1);
	b = just.substr(1,1);
	if (a == 'L') dy = - sym.height / 2 * scale;
	if (a == 'C') dy = 0;
	if (a == 'U') dy = sym.height / 2 * scale;

	if (b == 'L') dx = - sym.width / 2 * scale;
	if (b == 'C') dx = 0;
	if (b == 'R') dx = sym.width / 2 * scale;

	list = sym.def.split(',');

	for (i=0; i < list.length; ++i)
	{
		a = list[i].split(':');
		if (a.length != 3) continue;
	
		x = parseInt(a[0]);
		y = parseInt(a[1]);
		code = a[2];

		tx = ((x - this.symbolFont.xorigin) * scale);
		ty = ((y - this.symbolFont.yorigin) * scale);
			
		p = new Object();
		p.x = ((cos * tx) - (sin * ty)) + xorg + dx;
		p.y = ((sin * tx) + (cos * ty)) + yorg + dy;	
		p.z = origin.z;
		p.code = code;
					
		points[points.length] = p;
	}

	return points;
}
//==================================================================================
//				plot3dMatrix$
//==================================================================================
function plot3dMatrix$()
{
	var r;

	this.v	= new Array();

	for (r = 0; r < 4; ++r)
	{
		this.v[r] = new Array(0,0,0,0);
		this.v[r][r] = 1;
	}

	this.toString = plot3dMatrix$toString;
	
}
//==================================================================================
//				plot3dMatrix$toString
//==================================================================================
function plot3dMatrix$toString()
{
	var text,r,c ;
	
	text = "<matrix>\r\n";

	for (r=0; r < 4; ++ r)
	{
		for (c=0; c < 4; ++c)
		{	
			if (c > 0) text += ' ';
			text += Math.round(this.v[r][c] * 1000) / 1000;
		}
		
		text += "\r\n";
	}
	
	text += "</matrix>";
	
	return text;		
}
</script>
</html>
