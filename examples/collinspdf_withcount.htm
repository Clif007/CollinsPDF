<html><body><pre>00001 &lt;html>
00002 &lt;!-- ===========================================================
00003 			CollinsPDF.txt
00004 ----------------------------------------------------------------
00005 
00006 Rename this file to CollinsPDF.htm to run as an all inclusive 
00007 HTML document. It will TEST the CollinsPDF functions.
00008 This file contains about 36,000 lines	
00009 
00010 You will need the ECHO.asp file if you want to use IFRAMES
00011 This file bounces the PDF data off the server (its binary)
00012 so the PDF can be viewed in an IFRAME target
00013 
00014 All lines in this file AFTER line 44 the &lt;SCRIPT> tag can be moved
00015 to a CollinsPDF.js file, Remove the last 2 lines &lt;/SCRIPT> and &lt;/HTML>
00016 
00017 ================================================================ -->
00018 &lt;title>CollinsPDF Example&lt;/title>
00019 
00020 &lt;body>
00021 
00022 Options:
00023     &lt;select id="option_as">
00024         &lt;option value="" selected>PDF&lt;/option>
00025         &lt;option value="string">string&lt;/option>
00026         &lt;option value="base64">base64&lt;/option>
00027         &lt;option value="dataurl">dataurl&lt;/option>
00028     &lt;/select>
00029 &lt;br />&lt;br />
00030 
00031 HTML file to convert to PDF&lt;br>
00032 &lt;input  size=80 id=myFile type="file" value="Select Local Html File" onChange="CollinsPDF('file=myFile as='+ option_as.value)">&lt;br>&lt;br>
00033 
00034 &lt;input  type="button" style="width:160px" value="Convert This File" onClick="CollinsPDF('url=pdf.htm  as=' + option_as.value)">&lt;br>&lt;br>
00035 
00036 &lt;input type="button" style="width:160px"  value="HTML text To PDF" onclick="CollinsPDF('id=myData as=' + option_as.value)">&lt;br>
00037 
00038 &lt;textarea id=myData style="width:100%" rows=5>&lt;center>Hello World&lt;/center>&lt;/textarea>
00039 
00040 &lt;br>
00041 &lt;center>
00042 &lt;a href="http://CollinsSoftware.com" title="CollinsPDF.js created by">Collins Software&lt;/a>
00043 &lt;/center>
00044 &lt;/body>
00045 &lt;script>
00046 <font color=blue>"use strict";
00047 //==========================================================================================
00048 //						 CollinsPDF.js
00049 //	Author: Clifford L. Collins		Date: Feb 2016
00050 //-----------------------------------------------------------------------------------------
00051 //	Collins Software
00052 //	7710 Janak Drive, Houston Texas 77055
00053 //	http://CollinsSoftwre.com
00054 //
00055 //	Copyright &#65533; 2016, Clifford L. Collins
00056 //	All Rights Reserved
00057 //
00058 //=========================================================================================
00059 
00060 //=========================================================
00061 //			CollinsPDF
00062 //=========================================================
00063 function CollinsPDF(cmd)
00064 {
00065 	if (! window.$$CollinsPDF) window.$$CollinsPDF = new CollinsPDF$();
00066 	if (arguments.length == 0) return window.$$CollinsPDF;
00067 	return window.$$CollinsPDF.execute(cmd,arguments);
00068 }
00069 //=========================================================
00070 //			CollinsPDF
00071 //=========================================================
00072 function CollinsPDF$()
00073 {
00074 	var agent;
00075 
00076 	this.clientPath	= '';
00077 	
00078 	this.execute		= CollinsPDF$execute;
00079 	this.read		= CollinsPDF$read;
00080 	this.readBuffer		= CollinsPDF$readBuffer;
00081 	this.readUrl		= CollinsPDF$readUrl;
00082 	this.readFiles		= CollinsPDF$readFiles;
00083 	this.readFile		= CollinsPDF$readFile;
00084 	this.echo		= CollinsPDF$echo;
00085 	this.serverEcho		= CollinsPDF$serverEcho;
00086 	this.parse		= CollinsPDF$parse;
00087 	this.mapPath		= CollinsPDF$mapPath;
00088 	this.jpegsize		= CollinsPDF$jpegsize;
00089 
00090 	this.make		= new make_client_full$(this);
00091 		
00092 	agent = navigator.userAgent.toLowerCase();
00093 	window.IE = (agent.indexOf("msie") != -1) || (agent.indexOf("trident") != -1)
00094 
00095 	this.files		= new Array();
00096 	this.bufferFiles	= false;
00097 
00098 	this.http = null;
00099 
00100 	try { this.http = new XMLHttpRequest(); } catch (e) { }
00101 	if (! this.http) try { this.http = window.createRequest(); } catch (e) {}
00102 }
00103 //=========================================================
00104 //		CollinsPDF$execute
00105 //=========================================================
00106 function CollinsPDF$execute(cmd,args)
00107 {
00108 	var command,self;
00109 	
00110 	self = this;
00111 	command = this.parse(cmd,args);
00112 	
00113 	if (command.fileButton != null) return this.readFile(command.fileButton);
00114 	if (command.url != '') return this.readUrl(command.url,onFileLoaded);
00115 	return this.make.execute(command,args,this);
00116 
00117 	function onFileLoaded(data)
00118 	{
00119 		command.data = data;
00120 		self.make.execute(command,args,self);
00121 	}
00122 	
00123 }
00124 //=========================================================
00125 //		CollinsPDF$mapPath
00126 //=========================================================
00127 function CollinsPDF$mapPath(url)
00128 {
00129 	return url;
00130 }
00131 //=========================================================
00132 //		CollinsPDF$parse
00133 //=========================================================
00134 function CollinsPDF$parse(cmd,args)
00135 {
00136 	var command,i,j,list,text,name,value,ele;
00137 
00138 	command = new Object();
00139 		
00140 	command.$name		= 'OPEN';
00141 	command.to		= 'client';	// or server
00142 	command.format		= 'html';
00143 	command.target		= '_blank';
00144 	command.id		= '';
00145 	command.data		= '';
00146 	command.file		= '';
00147 	command.as		= 'pdf';	// or string,dataurl,base64;
00148 	command.root		= '';
00149 	command.filename	= '';
00150 	command.button		= null;
00151 	command.url		= '';
00152 
00153 	if (args.length > 1) command.data = args[1];
00154 
00155 	list = cmd.split(' ');
00156 	for (i=0; i &lt; list.length; ++i)
00157 	{
00158 		text = pdf$trim(list[i]);
00159 		if (text == '') continue;
00160 		j = text.indexOf('=');
00161 		if (j &lt; 0)
00162 		{
00163 			if (text.toLowerCase() ==   'open') command.$name = 'OPEN';
00164 			if (text.toLowerCase() ==  'write') command.$name = 'WRITE';
00165 			if (text.toLowerCase() == 'return') command.$name = 'RETURN';
00166 			continue;
00167 		}
00168 		
00169 		name = pdf$trim(text.substr(0,j)).toLowerCase();
00170 		value = pdf$trim(text.substr(j+1));
00171 		command[name] = value;
00172 	}
00173 
00174 	if (command.id != '')
00175 	{
00176 		ele = document.getElementById(command.id);
00177 		if (ele) command.data = ele.value;
00178 	}
00179 
00180 	if (command.file != '')	command.fileButton = document.getElementById(command.file);
00181 	
00182 	if (command.url != '') command.data = this.read(command.url);
00183 	return command;
00184 }
00185 //=========================================================
00186 //			CollinsPDF$jpegsize
00187 //=========================================================
00188 function CollinsPDF$jpegsize(url)
00189 {
00190 	var i,file;
00191 	
00192 	url = url.toLowerCase();
00193 	if (this.bufferFiles)
00194 	{
00195 		this.read(url);
00196 		return null;
00197 	}
00198 
00199 	file == null;
00200 	for (i=0; i &lt; this.files.length; ++i)
00201 	{
00202 		file = this.files[i];
00203 		if (url == file.url) break;
00204 		file = null;
00205 	}
00206 	
00207 	if (file == null) return null;
00208 	return jpegsize_A(file.buffer);
00209 	
00210 //------------------ jpegsize_A ------------------------
00211 
00212 	function jpegsize_A(buffer)
00213 	{
00214 		var i,text;
00215 		var obj,n,a,b;
00216 		var block_length;
00217 		var a1,b1,a2,b2;
00218   
00219 		obj = new Object();
00220 		obj.height = 0;
00221 		obj.width = 0;
00222 		obj.angle = 0;
00223 		obj.size = buffer.length;
00224 		obj.is3D = false;
00225 
00226 		n = buffer[0];
00227 		n = buffer[1];
00228 		n = buffer[2];
00229 		n = buffer[3];
00230     
00231 		if (! ( buffer[0] == 0xFF && 
00232 			buffer[1] == 0xD8 && 
00233 			buffer[2] == 0xFF)) return null;
00234 
00235 	    if (buffer[3] == 0xE0)
00236 	    {
00237 	        if (buffer[6] != 74) return null;
00238 	        if (buffer[7] != 70) return null;
00239 	        if (buffer[8] != 73) return null;
00240 	        if (buffer[9] != 70) return null;
00241 	        if (buffer[10] != 0) return null;
00242 		}
00243 		else
00244 		{
00245 		   if (buffer[3] != 0xE1) return null;	
00246 		}
00247 
00248 		i = 4;
00249 
00250 	        while (i &lt; buffer.length + 9)
00251 	        {
00252 			a = buffer[i];
00253 			b = buffer[i+1];
00254 			
00255 			block_length =  a * 256 + b;
00256 			i += block_length;
00257 			if (i >= buffer.length) return null;
00258 			if (buffer[i] != 0xFF) return null;
00259 			
00260 			if ((buffer[i+1] == 0xC0) || (buffer[i+1] == 0xC2))
00261 			{
00262 			   a1 = buffer[i+5];
00263 			   b1 = buffer[i+6];
00264 			
00265 			   a2 = buffer[i+7];
00266 			   b2 = buffer[i+8];
00267 			
00268 			   obj.height = (a1 * 256) + b1;
00269 			   obj.width = (a2 * 256) + b2;
00270 			   return obj;
00271 			}
00272 
00273 			i += 2;
00274        
00275 	       }
00276 
00277 		return null;	         
00278 	}
00279 }
00280 //=========================================================
00281 //			CollinsPDF$read
00282 //=========================================================
00283 function CollinsPDF$read(url)
00284 {
00285 	var buffer,data,i;
00286 	
00287 	data = '';
00288 	buffer = CollinsPDF().readBuffer(url);
00289 	if (! buffer) return '';
00290 
00291 	for (i=0; i &lt; buffer.length; ++i) data += String.fromCharCode(buffer[i]);
00292 	return data;
00293 }
00294 //=========================================================
00295 //			CollinsPDF$readBuffer
00296 //=========================================================
00297 function CollinsPDF$readBuffer(url)
00298 {
00299 	var data,buffer,i,file;
00300 
00301 	url =  pdf$trim(url).toLowerCase();
00302 	
00303 	for (i=0; i &lt; this.files.length; ++i)
00304 	{
00305 		file = this.files[i];
00306 		if (file.url == url) break;
00307 		file = null;
00308 	}
00309 
00310 	if (! this.bufferFiles) 
00311 	{
00312 		if (file == null) return '';
00313 		if (! file.buffer) return '';
00314 		return file.buffer;
00315 	}
00316 	
00317 	if (file != null) return '';
00318 	file = new Object();
00319 	file.url = url;
00320 	this.files[this.files.length] = file;
00321 	return '';	
00322 }	
00323 //=========================================================
00324 //			CollinsPDF$readUrl
00325 //=========================================================
00326 function CollinsPDF$readUrl(url,onFileLoaded)
00327 {
00328 	var file;
00329 	
00330 	this.http.open('get',url,true);
00331 	this.http.responseType = '';
00332 	this.http.onreadystatechange = waitForFile;
00333 	this.http.send();
00334 
00335 	function waitForFile(e)
00336 	{
00337 		var data;
00338 		data = '';
00339 		if (this.readyState !=4) return;
00340 		if (this.status == 200) 
00341 		{
00342 			data = this.responseText;			
00343 		}
00344 		onFileLoaded(data);
00345 	}
00346 }
00347 //=========================================================
00348 //			CollinsPDF$readFiles
00349 //=========================================================
00350 function CollinsPDF$readFiles(pos,onFilesLoaded)
00351 {
00352 	var file,self;
00353 	
00354 	if (pos >= this.files.length) return onFilesLoaded();
00355 	
00356 	file = this.files[pos];
00357 	self = this;
00358 	
00359 	this.http.open('get',file.url,true);
00360 	this.http.responseType = 'arraybuffer';
00361 	this.http.onreadystatechange = waitForFile;
00362 	this.http.send();
00363 
00364 	function waitForFile(e)
00365 	{
00366 	    var temp, text, i;
00367 		if (this.readyState !=4) return;
00368 
00369 		if (this.status == 200)
00370 		{
00371 			file.buffer = new Uint8Array(this.response); 
00372 		}
00373 		else
00374 		{
00375 //		text = '';
00376 //		temp = new Uint8Array(this.response);
00377 //		for (i = 0; i &lt; temp.length; ++i) text += String.fromCharCode(temp[i]);
00378 		}
00379 		self.readFiles(pos+1,onFilesLoaded);	
00380 	}
00381 }
00382 //=========================================================
00383 //			CollinsPDF$readFile
00384 //=========================================================
00385 function CollinsPDF$readFile(input)
00386 {
00387 	if (input.files && input.files[0])
00388 	{
00389 		var reader = new FileReader();
00390 		reader.onload = function (e) 
00391 		{  
00392 			var output=e.target.result;
00393 			CollinsPDF('',output);
00394 		}
00395 
00396 		reader.readAsText(input.files[0]);
00397 	} 
00398 }
00399 //=========================================================
00400 //			CollinsPDF$serverEcho
00401 //=========================================================
00402 function CollinsPDF$serverEcho(filename,data,type,target)
00403 {
00404 
00405 }
00406 //=========================================================
00407 //			CollinsPDF$echo
00408 //=========================================================
00409 function CollinsPDF$echo(data,target,type)
00410 {
00411 	var link,contentType,e,blob,buffer,bytes,i,filename;
00412 	var doc,blobUrl,cmd,ext,list,link,win,url;
00413 
00414 	ext = 'txt';
00415 	if (type == 'application/pdf') ext = 'pdf';
00416 	filename = 'sample.' + ext;
00417 	
00418 	
00419 	if (target == '_blank') 
00420 	{
00421 	    //---------- chrome open PDF window ----
00422 		if (typeof (window) == 'object' && (!window.IE) && typeof (data) == 'object') 
00423 		{
00424 		    url = 'data:application/pdf;base64,' + pdf$toBase64(data);
00425 		    win = window.open(url);
00426 		    return;
00427 		}
00428 	}
00429 	
00430     //--------- create Blob -----
00431 	
00432 	if (typeof(data) == 'string' && data == '') data = ' ';
00433 	buffer = new ArrayBuffer(data.length);
00434 	bytes  = new Uint8Array(buffer);
00435 
00436 	if (typeof(data) == 'string')
00437 	{
00438 		for (i = 0; i &lt; data.length; i++) bytes[i] = data.charCodeAt(i);
00439 	}
00440 	else
00441 	{
00442 		for (i = 0; i &lt; data.length; i++) bytes[i] = data.buffer[i];
00443 	}
00444 	blob = new Blob([buffer], {type: type, endings: 'native' });
00445 
00446     //--------- IE open PDF window -----
00447 
00448     
00449 	if (target == '_blank')
00450 	{
00451 	    if (window.navigator.msSaveOrOpenBlob)
00452 	    {
00453 	       window.navigator.msSaveOrOpenBlob(blob, filename);
00454 	       return;
00455 	    }
00456 	}
00457    
00458 //--------------------- echo off server (iframe target) --------------------------
00459 
00460 	    if (!this.link) {
00461 	        this.link = document.createElement("form");
00462 	        this.link.style.display = 'none';
00463 	        this.link.method = 'POST';
00464 	        this.link.style.display = 'none';
00465 
00466 	        document.body.appendChild(this.link);
00467 	    }
00468 
00469 	cmd = 'echo.asp?command=get&type=' + type + '&filename=' + filename;
00470 	contentType = type;
00471 	this.link.target = target;
00472 	this.link.action = cmd;
00473 	link = this.link;
00474 
00475 	this.http.open("POST", 'echo.asp?command=keep', true);
00476 	this.http.contentType = '';
00477 	this.http.onreadystatechange = waitForUpload;
00478 	this.http.send(blob);
00479 
00480 	function waitForUpload(e)
00481 	{
00482 	if (this.readyState != 4) return;
00483 	if (this.status == 200) link.submit();
00484 	}
00485 
00486 }
00487 //=========================================================
00488 //			make (client)
00489 //=========================================================
00490 function make_client_full$()
00491 {
00492 	
00493 	this.execute		= make_client_full$execute;
00494 	this.executeEmail	= make_client_full$executeEmail;
00495 	
00496 	this.newPdf		= make_client_full$newPdf;
00497 	
00498 	this.html		= null;
00499 	this.pdf		= null;
00500 
00501 	this.html_pageHeader	= '';
00502 	this.html_pageFooter	= '';
00503 
00504 	this.location_echoUrl	= '';
00505 	this.sys		= new client$();
00506 }
00507 //=========================================================
00508 //		make_client_full$execute
00509 //=========================================================
00510 function make_client_full$execute(command,args,c)
00511 {
00512 	var htmlData,skip_second_parse,self,result;
00513 
00514 	self = this;
00515 	
00516 	if ((! this.html) || (! (command.$name == 'ADD' || command.$name == 'RETURN'))) 
00517 	{
00518 		this.html = new html$(this.sys);
00519 	}
00520 
00521 	if (command.$name == "RETURN")
00522 	{
00523 	    command.as = command.as.toUpperCase();
00524 	    if (command.as == 'OBJECT_PDF') return this.pdf;
00525 	    if (command.as == 'OBJECT_HTML') return this.html;
00526 	    if (command.as == 'ERROR MESSAGES') return this.output.messages;
00527 	}
00528 
00529 	c.files = new Array();
00530 	c.bufferFiles = true;
00531 	
00532 	htmlData = command.data;
00533 
00534 	this.newPdf(this.sys);
00535 	this.html.parse(htmlData);
00536 	c.bufferFiles = false;
00537 
00538 	if (c.files.length == 0)
00539 	{
00540 		skip_second_parse = true;
00541 		result =  execute_command(skip_second_parse);
00542 		return result;
00543 	}
00544 
00545 	this.html = new html$(this.sys);
00546 	this.html.pdf	= this.pdf;
00547 	this.pdf.html	= this.html;
00548 	this.output	= this.pdf;
00549 
00550 	c.readFiles(0,execute_command);
00551 	return;
00552 	
00553 //-------------------------- execute_command ---------------------------
00554 
00555 	function execute_command(skip_second_parse)
00556 	{
00557 		if (! skip_second_parse) self.html.parse(htmlData);
00558 
00559 		self.html.writeToPdf(self.pdf);
00560 	
00561 		switch (command.$name)
00562 		{
00563 		case "WRITE": 
00564 				self.output.writeToFile(command.to,command.as);
00565 				break;
00566 		case "OPEN": 
00567 				self.output.open(command.filename,command.target,command.as);
00568 				break;
00569 		case "RETURN": 
00570 				command.as = command.as.toUpperCase();
00571 				if (command.as ==  'BASE64') return self.pdf.toBase64(self.data);
00572 				if (command.as == 'DATAURL') return self.pdf.toDataURL();
00573 				if (command.as == 'OBJECT_PDF')	return self.pdf;
00574 				if (command.as == 'OBJECT_HTML') return self.html;
00575 				if (command.as == 'ERROR MESSAGES') return self.output.messages;
00576 				return self.output.toString();
00577 				break;	
00578 	
00579 		default: throw ("make -- unknown execution statement " + statement.command);
00580 
00581 		}
00582 	}
00583 }
00584 //==============================================================================
00585 //			make_client_full$newPdf
00586 //==============================================================================
00587 function make_client_full$newPdf(sys)
00588 {
00589 
00590 	this.pdf = new pdf$(sys);
00591 	this.html.pdf	= this.pdf;
00592 	this.pdf.html	= this.html;
00593 	this.output	= this.pdf;
00594 
00595 	this.pdf.parent = this;
00596 
00597 	if (this.location_echoUrl != '') this.pdf.echoUrl = this.location_echoUrl;
00598 
00599 	this.pdf.html_pageHeader	= this.html_pageHeader;
00600 	this.pdf.html_pageFooter	= this.html_pageFooter;
00601 	
00602 	this.pdf.onPageHeader		= make_client_full$onPageHeader;
00603 	this.pdf.onPageFooter		= make_client_full$onPageFooter;
00604 
00605 	this.reset					= false;
00606 }
00607 //==============================================================================
00608 //			make_client_full$executeEmail
00609 //==============================================================================
00610 function make_client_full$executeEmail(command)
00611 {
00612 try
00613 {
00614 		if (command.filename == '') command.filename = 'untitled.pdf';
00615 //		CollinsPDF().onEmail(command);
00616 		return;
00617 }
00618 catch (e) {}
00619 
00620 	command.server = ''
00621 	if (this.email_server != '')
00622 	{
00623 		command.server = this.pdf.encodeMany(this.email_server,
00624 			this.email.username,
00625 			this.email.password,
00626 			this.email.port);
00627 	}
00628 	
00629 	return this.output.email(command);
00630 }
00631 //==============================================================================
00632 //			make_client_full$onPageHeader
00633 //==============================================================================
00634 function make_client_full$onPageHeader(page,total,pdf)
00635 {
00636 	var text,html,dx,pageWidth;
00637 	var x1,y1,x2,y2;
00638 
00639 	if (pdf.html_pageHeader == '') return;
00640 	text = pdf.html_pageHeader;
00641 	text = text.replace(/\{page\}/gi,page);
00642 	text = text.replace(/\{pages\}/gi,total);
00643 	text = pdf.html.resolve(text);
00644 
00645 	html = new html$(pdf.sys,'',pdf.html);
00646 	html.pdf = pdf;
00647 	html.imagePath = pdf.imagePath;
00648 	html.parse(text);
00649 
00650 	html.writeToPdf(pdf);
00651 }
00652 //==============================================================================
00653 //			make_client_full$onPageFooter
00654 //==============================================================================
00655 function make_client_full$onPageFooter(page,total,pdf)
00656 {
00657 	var text,html,pageWidth,height,pageWidth;
00658 
00659 	if (pdf.html_pageFooter == '') return;
00660 
00661 	text = pdf.html_pageFooter;
00662 	text = text.replace(/\{page\}/gi,page);
00663 	text = text.replace(/\{pages\}/gi,total);
00664 	text = pdf.html.resolve(text);
00665 
00666 	pageWidth = (pdf.xmax - pdf.xmin) / 72 * 110;
00667 
00668 	html = new html$(pdf.sys,'',pdf.html);
00669 	html.pdf = pdf;
00670 	html.parse(text);
00671 
00672 	html.resize(pageWidth,0);
00673 	height = html.body.offsetHeight + html.body.marginTop + html.body.marginBottom + 0;
00674 
00675 	pdf.ymax = height + 2;
00676 	pdf.ypos = height + 2;
00677 
00678 	html.writeToPdf(pdf);
00679 }
00680 //==========================================================================================
00681 //			pdf$ (Constructor)
00682 //==========================================================================================
00683 function pdf$(sys)
00684 {
00685 	var name,i,units;
00686 
00687 	this.sys				= sys;
00688 	if (this.sys != null) this.sys.pdf	= this;
00689 
00690 	this.plot				= new pdfPlot$(this);
00691 	this.graphicCg2				= new graphicCg2$(this.plot,sys);
00692 
00693 	this.c					= 'n' + String.fromCharCode(0x65);
00694 	this.data				= new pdfBuffer$();
00695 
00696 	this.debug				= false;
00697 	this.hexEncodeImages			= false;
00698 	this.includeSignature			= false;
00699 		
00700 	this.watermark				= '';
00701 	this.server				= new pdfServer$(this);    //
00702 	this.landscape				= false;
00703 	this.subreport				= false;
00704 	this.characterMap			= null;
00705 	this.http				= null;
00706 	this.emailForm				= null;
00707 
00708 	this.opacity				= '';
00709 	this.view				= null;
00710 
00711 	this.echoUrl				= 'CollinsPDF.asp';
00712 	this.emailUrl				= 'CollinsPDF.asp';
00713 
00714 	this.email_server			= '';
00715 	this.email_username			= '';
00716 	this.email_password			= '';
00717 	this.email_port				= 25;
00718 
00719 	this.pageBackgroundColor		= '';
00720 	this.pageMarginLeftColor		= '';
00721 	this.pageMarginRightColor		= '';
00722 	this.pageMarginTopColor			= '';
00723 	this.pageMarginBottomColor		= '';
00724 	this.pageRotate				= '';
00725 
00726 	this.href_style				= true;
00727 	this.relative				= false;
00728 	this.byteToHex				= pdf$byteToHex;
00729 
00730 	this.b					= 'at';
00731 	this.a					= 'D' + this.b;
00732 
00733 	this.setUnits				= pdf$setUnits;
00734 	units = 'inch'; 
00735 	this.setUnits(units);
00736 	
00737 	this.setPageSize			= pdf$setPageSize;
00738 		
00739 	this.writeToFile			= pdf$writeToFile;
00740 	this.sendToClient			= pdf$sendToClient;	
00741 	this.downloadToClient			= pdf$downloadToClient;	
00742 	this.sendToServer			= pdf$sendToServer;	//
00743 	this.uploadFile				= pdf$uploadFile;	//
00744 	this.open				= pdf$open;
00745 
00746 	this.charWidth				= pdf$charWidth;
00747 	this.charHeight				= pdf$charHeight;
00748 	this.charVisible			= pdf$charVisible;
00749 	this.textWidth				= pdf$textWidth;
00750 	
00751 	this.lineBreak				= pdf$lineBreak;
00752 	this.pageBreak				= pdf$pageBreak;
00753 	
00754 	this.addHeader				= pdf$addHeader;
00755 	
00756 	this.onPageOpen				= pdf$onPageOpen;
00757 	this.onPageClose			= pdf$onPageClose;
00758 	this.onDocumentOpen			= pdf$onDocumentOpen;
00759 
00760 	this.onWillClose			= pdf$onWillClose;
00761 	this.onWillSave				= pdf$onWillSave;
00762 	this.onDidSave				= pdf$onDidSave;
00763 	this.onWillPrint			= pdf$onWillPrint;
00764 	this.onDidPrint				= pdf$onDidPrint;
00765 
00766 	this.addFormSubmit			= pdf$addFormSubmit;
00767 	this.addFormReset			= pdf$addFormReset;
00768 	this.addFormButton			= pdf$addFormButton;
00769 	this.addFormRadio			= pdf$addFormRadio;
00770 	this.addFormCheckbox			= pdf$addFormCheckbox;
00771 	this.addFormText			= pdf$addFormText;
00772 	this.addFormTextarea			= pdf$addFormText;
00773 	this.addFormPassword			= pdf$addFormPassword;
00774 	this.addFormImage			= pdf$addFormImage;
00775 	this.addFormFile			= pdf$addFormFile;
00776 	this.addFormSelect			= pdf$addFormSelect;
00777 	this.addFormListbox			= pdf$addFormListbox;
00778 
00779 	this.drawChar				= pdf$drawChar;
00780 	this.drawArc				= pdf$drawArc;
00781 	this.drawCone				= pdf$drawCone;
00782 	this.drawCircle				= pdf$drawCircle;
00783 	this.drawLine				= pdf$drawLine;
00784 	this.drawPolygon			= pdf$drawPolygon;
00785 	this.drawLinestring			= pdf$drawLinestring;
00786 	this.drawLinestring2			= pdf$drawLinestring2;
00787 	this.drawRectangle			= pdf$drawRectangle;
00788 	this.drawSymbol				= pdf$drawSymbol;
00789 	this.drawMarker				= pdf$drawMarker;
00790 	this.drawTableBox			= pdf$drawTableBox;
00791 	this.drawBox				= pdf$drawBox;
00792 	this.drawFontGrid			= pdf$drawFontGrid;
00793 
00794 	this.addFormHidden			= pdf$addFormHidden;
00795 
00796 	this.placeFormSubmit			= pdf$placeFormSubmit;
00797 	this.placeFormReset			= pdf$placeFormReset;
00798 	this.placeFormButton			= pdf$placeFormButton;
00799 	this.placeFormImage			= pdf$placeFormImage;
00800 	this.placeFormRadio			= pdf$placeFormRadio;
00801 	this.placeFormCheckbox			= pdf$placeFormCheckbox;
00802 	this.placeFormText			= pdf$placeFormText;
00803 	this.placeFormTextarea			= pdf$placeFormText;
00804 	this.placeFormPassword			= pdf$placeFormPassword;
00805 	this.placeFormFile			= pdf$placeFormFile;
00806 	this.placeFormSelect			= pdf$placeFormSelect;
00807 	this.placeFormListbox			= pdf$placeFormListbox;
00808 	this.placeFormInput			= pdf$placeFormInput;
00809 
00810 	this.formButtonSize			= pdf$formButtonSize;
00811 
00812 	this.addText				= pdf$addText;
00813 	this.placeText				= pdf$placeText;
00814 	this.placeText_A			= pdf$placeText_A;
00815 	this.justify_				= pdf$justify_;
00816 	this.textSplit				= pdf$textSplit;
00817 	this.textSplit_A			= pdf$textSplit_A;
00818 
00819 	this.centerText				= pdf$centerText;
00820 	this.leftText				= pdf$leftText;
00821 	this.rightText				= pdf$rightText;
00822 
00823 	this.toString				= pdf$toString;
00824 	this.toBase64				= pdf$toBase64;
00825 	this.toDataURL				= pdf$toDataURL;
00826 
00827 	this.addImage				= pdf$addImage;	//
00828 	this.placeImage				= pdf$placeImage;	//
00829 	this.placeImage_A			= pdf$placeImage_A;	//
00830 	this.placeMissingImage			= pdf$placeMissingImage;	//
00831 	this.imageSize				= pdf$imageSize;	//
00832 	this.imageSize_A			= pdf$imageSize_A;	
00833 	this.jpegSize				= pdf$jpegSize;	
00834 	this.findImage				= pdf$findImage;	
00835 	this.findU3d				= pdf$findU3d;	
00836 	this.findFontfile			= pdf$findFontfile;
00837 
00838 	this.addGraphic				= pdf$addGraphic;
00839 	this.placeGraphic			= pdf$placeGraphic;
00840 
00841 	this.placeHotspot			= pdf$placeHotspot;
00842 	this.hexSize				= pdf$hexSize;
00843 	
00844 	this.setFont				= pdf$setFont;
00845 	this.setFontColor			= pdf$setFontColor;
00846 	this.setFontSize			= pdf$setFontSize;
00847 	this.setBold				= pdf$setBold;
00848 	this.setItalic				= pdf$setItalic;
00849 	this.setUnderline			= pdf$setUnderline;
00850 	this.setFontName			= pdf$setFontName;
00851 	this.setFontName_A			= pdf$setFontName_A;
00852 	this.fontMode_				= pdf$fontMode_;
00853 
00854 	this.setSubscript			= pdf$setSubscript;
00855 	this.setSuperscript			= pdf$setSuperscript;
00856 	this.setLetterSpacing			= pdf$setLetterSpacing;
00857 	this.setWordSpacing			= pdf$setWordSpacing;
00858 	this.setFontRender			= pdf$setFontRender;
00859 	this.setFontSkew			= pdf$setFontSkew;
00860 	this.setFontScale			= pdf$setFontScale;
00861 	
00862 	this.setPageBackgroundColor		= pdf$setPageBackgroundColor;
00863 	this.setPageMarginColor			= pdf$setPageMarginColor;
00864 	this.setPageRotate			= pdf$setPageRotate;
00865 
00866 	this.makeFontCID			= pdf$makeFontCID;
00867 	this.makeFontTruetype			= pdf$makeFontTruetype;
00868 	this.makeFontType1			= pdf$makeFontType1;
00869 	this.makeFontClone			= pdf$makeFontClone;
00870 	
00871 	this.setMargins				= pdf$setMargins;
00872 	this.setMargin				= pdf$setMargin;
00873 	this.setMarginTop			= pdf$setMarginTop;
00874 	this.setMarginLeft			= pdf$setMarginLeft;
00875 	this.setMarginRight			= pdf$setMarginRight;
00876 	this.setMarginBottom			= pdf$setMarginBottom;
00877 
00878 	this.linesRemaining			= pdf$linesRemaining;
00879 	this.setBorderWidth			= pdf$setBorderWidth;
00880 	this.setRulerAlign			= pdf$setRulerAlign;	//
00881 
00882 	this.setWatermark			= pdf$setWatermark;
00883 	this.setLandscape			= pdf$setLandscape;			
00884 
00885 	this.setOpacity				= pdf$setOpacity;
00886 	this.setGraphic				= pdf$setGraphic;
00887 	this.setGraphic_A			= pdf$setGraphic_A;
00888 
00889 	this.setClipRegion			= pdf$setClipRegion;
00890 	this.tileImage				= pdf$tileImage;
00891 	this.resolve_text			= pdf$resolve_text;
00892 
00893 	this.reportInit				= pdf$reportInit;	//
00894 	this.reportCreateGroup			= pdf$reportCreateGroup;	//
00895 	this.reportAddDetail			= pdf$reportAddDetail;		//
00896 	this.reportAddText			= pdf$reportAddText;		//
00897 	this.reportColumns			= pdf$reportColumns;		//
00898 
00899 	this.setRuler				= pdf$setRuler;		//
00900 	this.read				= pdf$read;
00901 
00902 	this.addOutline				= pdf$addOutline;
00903 	
00904 	this.setGraphicColor			= pdf$setGraphicColor;
00905 	this.setGraphicLineWeight		= pdf$setGraphicLineWeight;
00906 	this.setGraphicFillColor		= pdf$setGraphicFillColor;
00907 	this.setGraphicLineStyle		= pdf$setGraphicLineStyle;
00908 	this.setGraphicTransparent		= pdf$setGraphicTransparent;
00909 
00910 //------------- private --------------
00911 
00912 	this.drawBorder				= pdf$drawBorder;
00913 	this.drawBorder_A			= pdf$drawBorder_A;
00914 	this.drawBottomLine			= pdf$drawBottomLine;
00915 	this.drawCalendar			= pdf$drawCalendar;
00916 	this.drawCalendarSimple			= pdf$drawCalendarSimple;
00917 	this.drawGrid				= pdf$drawGrid;
00918 	
00919 	this.drawTimeline			= pdf$drawTimeline;
00920 
00921 	this.trim				= pdf$trim;
00922 
00923 	this.setSize_				= pdf$setSize_;
00924 
00925 	this.putLine_				= pdf$putLine_;
00926 	this.put_				= pdf$put_;
00927 	this.putWord_				= pdf$putWord_;
00928 	this.width_				= pdf$width_;
00929 	this.escape_				= pdf$escape_;
00930 	this.isUrl_				= pdf$isUrl_;
00931 
00932 	this.clipText_				= pdf$clipText_;
00933 	this.toPoint_				= pdf$toPoint_;
00934 	this.toPoints_				= pdf$toPoints_;
00935 	this.base64ToAscii85_			= pdf$base64ToAscii85_;
00936 	this.base64ToHex_			= pdf$base64ToHex_;
00937 	this.hexToHex_				= pdf$hexToHex_;
00938 	this.hexToAscii85_			= pdf$hexToAscii85_;
00939 	this.ascii85_				= pdf$ascii85_;
00940 	this.ord_				= pdf$ord_;
00941 
00942 	this.drawMargin_			= pdf$drawMargin_;
00943 	this.addText_A				= pdf$addText_A;
00944 	this.addText_B				= pdf$addText_B;
00945 	this.addText_C				= pdf$addText_C;
00946 	this.addText_D				= pdf$addText_D;
00947 	this.addText_E				= pdf$addText_E;
00948 	this.addText_F				= pdf$addText_F;
00949 	this.addText_octal			= pdf$addText_octal;
00950 
00951 	this.flush_				= pdf$flush_;
00952 	this.write_				= pdf$write_;
00953 	this.index_				= pdf$index_;
00954 	this.properties_			= pdf$properties_;
00955 	
00956 	this.addObject_				= pdf$addObject_;
00957 	this.addObjectImage_			= pdf$addObjectImage_;	//
00958 	this.addObjectFontfile_			= pdf$addObjectFontfile_;	//
00959 	this.addObjectU3d_			= pdf$addObjectU3d_;	//
00960 	this.addObjectSignature_		= pdf$addObjectSignature_;	//
00961 	this.refText_				= pdf$refText_;
00962 	this.trailer_				= pdf$trailer_;
00963 	this.underline_				= pdf$underline_;
00964 	this.overline_				= pdf$overline_;
00965 
00966 	this.parseColor_			= pdf$parseColor_;
00967 	this.colorText_				= pdf$colorText_;
00968 	this.colorRGBText_			= pdf$colorRGBText_;
00969 	this.scriptText_			= pdf$scriptText_;
00970 	this.fontName_				= pdf$fontName_;
00971 
00972 	this.setHeader_				= pdf$setHeader_;
00973 	this.setFooter_				= pdf$setFooter_;
00974 	
00975 	this.getPos_				= pdf$getPos_;
00976 	this.setPos_				= pdf$setPos_;
00977 	
00978 	this.setView				= pdf$setView;	
00979 	this.setClip				= pdf$setClip;	
00980 	this.restoreView			= pdf$restoreView;	
00981 	this.setPosition			= pdf$setPosition;	
00982 	this.getPosition			= pdf$getPosition;
00983 	this.filename_size			= pdf$filename_size;
00984 
00985 	this.reportBeginGroup_			= pdf$reportBeginGroup_;	//
00986 	this.reportEndGroup_			= pdf$reportEndGroup_;		//
00987 	this.reportEnd_				= pdf$reportEnd_;		//
00988 	this.reportKeepTogether_		= pdf$reportKeepTogether_;	//
00989 	this.reportKeepTogether_A		= pdf$reportKeepTogether_A;	//
00990 	this.setReportGroup_			= pdf$setReportGroup_;		//
00991 	this.reportGroupKeys_			= pdf$reportGroupKeys_;		//
00992 	this.reportHeader_			= pdf$reportHeader_;		//
00993 	
00994 	this.headerSize_			= pdf$headerSize_;		//
00995 	this.footerSize_			= pdf$footerSize_;		//
00996 	
00997 	this.copyArray_				= pdf$copyArray_;
00998 	this.cid_				= pdf$cid_;
00999 	this.utf8				= pdf$utf8;
01000 
01001 	this.findFont_				= pdf$findFont_;
01002 	this.type1FontTemplate			= pdf$type1FontTemplate;
01003 
01004 	this.get3dLightingScheme		= pdf$get3dLightingScheme;
01005 	this.get3dRenderMode			= pdf$get3dRenderMode;
01006 	this.get3dMatrix			= pdf$get3dMatrix;
01007 
01008 	this.u3dCopy				= pdf$u3dCopy;
01009 	
01010 //---------------- event ----------------------------
01011 
01012 	this.onPageHeader	= null;		// page header / footer events
01013 	this.onPageFooter	= null;
01014 	this.onPagebreak	= null;
01015 	this.onBeforePagebreak	= null;
01016 
01017 //---------------- font encodings ------------------
01018 
01019 	this.encodingFonts = new Array();
01020 	this.encodingFonts[0] = 'MS-Mincyo';
01021 	this.encodingFonts[1] = 'MS-PMincyo';
01022 	this.encodingFonts[2] = 'MS-Gothic';
01023 	this.encodingFonts[3] = 'MS-PGothic';
01024 	
01025 	this.encodings = new Array();
01026 	this.encodings[this.encodings.length] = 'GB-EUC-H,Adobe-GB1-0';
01027 	this.encodings[this.encodings.length] = 'GB-EUC-V,Adobe-GB1-0';
01028 	this.encodings[this.encodings.length] = 'GBpc-EUC-H,Adobe-GB1-0';
01029 	this.encodings[this.encodings.length] = 'GBpc-EUC-V,Adobe-GB1-0';
01030 	this.encodings[this.encodings.length] = 'GBK-EUC-H,Adobe-GB1-2';
01031 	this.encodings[this.encodings.length] = 'GBK-EUC-V,Adobe-GB1-2';
01032 	this.encodings[this.encodings.length] = 'GBKp-EUC-H,Adobe-GB1-2';
01033 	this.encodings[this.encodings.length] = 'GBKp-EUC-V,Adobe-GB1-2';
01034 	this.encodings[this.encodings.length] = 'GBK2K-H,Adobe-GB1-4';
01035 	this.encodings[this.encodings.length] = 'GBK2K-V,Adobe-GB1-4';
01036 	this.encodings[this.encodings.length] = 'UniGB-UCS2-H,Adobe-GB1-4';
01037 	this.encodings[this.encodings.length] = 'UniGB-UCS2-V,Adobe-GB1-4';
01038 	this.encodings[this.encodings.length] = 'UniGB-UTF16-H,Adobe-GB1-4';
01039 	this.encodings[this.encodings.length] = 'UniGB-UTF16-V,Adobe-GB1-4';
01040 	this.encodings[this.encodings.length] = 'B5pc-H,Adobe-CNS1-0';
01041 	this.encodings[this.encodings.length] = 'B5pc-V,Adobe-CNS1-0';
01042 	this.encodings[this.encodings.length] = 'HKscs-B5-H,Adobe-CNS1-3';
01043 	this.encodings[this.encodings.length] = 'HKscs-B5-V,Adobe-CNS1-3';
01044 	this.encodings[this.encodings.length] = 'ETen-B5-H,Adobe-CNS1-0';
01045 	this.encodings[this.encodings.length] = 'ETen-B5-V,Adobe-CNS1-0';
01046 	this.encodings[this.encodings.length] = 'ETenms-B5-H,Adobe-CNS1-0';
01047 	this.encodings[this.encodings.length] = 'ETenms-B5-V,Adobe-CNS1-0';
01048 	this.encodings[this.encodings.length] = 'CNS-EUC-H,Adobe-CNS1-0';
01049 	this.encodings[this.encodings.length] = 'CNS-EUC-V,Adobe-CNS1-0';
01050 	this.encodings[this.encodings.length] = 'UniCNS-UCS2-H,Adobe-CNS1-3';
01051 	this.encodings[this.encodings.length] = 'UniCNS-UCS2-V,Adobe-CNS1-3';
01052 	this.encodings[this.encodings.length] = 'UniCNS-UTF16-H,Adobe-CNS1-4';
01053 	this.encodings[this.encodings.length] = 'UniCNS-UTF16-V,Adobe-CNS1-4';
01054 	this.encodings[this.encodings.length] = '83pv-RKSJ-H,Adobe-Japan1-1';
01055 	this.encodings[this.encodings.length] = '90ms-RKSJ-H,Adobe-Japan1-2';
01056 	this.encodings[this.encodings.length] = '90ms-RKSJ-V,Adobe-Japan1-2';
01057 	this.encodings[this.encodings.length] = '90msp-RKSJ-H,Adobe-Japan1-2';
01058 	this.encodings[this.encodings.length] = '90msp-RKSJ-V,Adobe-Japan1-2';
01059 	this.encodings[this.encodings.length] = '90pv-RKSJ-H,Adobe-Japan1-1';
01060 	this.encodings[this.encodings.length] = 'Add-RKSJ-H,Adobe-Japan1-1';
01061 	this.encodings[this.encodings.length] = 'Add-RKSJ-V,Adobe-Japan1-1';
01062 	this.encodings[this.encodings.length] = 'EUC-H,Adobe-Japan1-1';
01063 	this.encodings[this.encodings.length] = 'EUC-V,Adobe-Japan1-1';
01064 	this.encodings[this.encodings.length] = 'Ext-RKSJ-H,Adobe-Japan1-2';
01065 	this.encodings[this.encodings.length] = 'Ext-RKSJ-V,Adobe-Japan1-2';
01066 	this.encodings[this.encodings.length] = 'H,Adobe-Japan1-1';
01067 	this.encodings[this.encodings.length] = 'V,Adobe-Japan1-1';
01068 	this.encodings[this.encodings.length] = 'UniJIS-UCS2-H,Adobe-Japan1-4';
01069 	this.encodings[this.encodings.length] = 'UniJIS-UCS2-V,Adobe-Japan1-4';
01070 	this.encodings[this.encodings.length] = 'UniJIS-UCS2-HW-H,Adobe-Japan1-4';
01071 	this.encodings[this.encodings.length] = 'UniJIS-UCS2-HW-V,Adobe-Japan1-4';
01072 	this.encodings[this.encodings.length] = 'UniJIS-UTF16-H,Adobe-Japan1-5';
01073 	this.encodings[this.encodings.length] = 'UniJIS-UTF16-V,Adobe-Japan1-5';
01074 	this.encodings[this.encodings.length] = 'KSC-EUC-H,Adobe-Korea1-0';
01075 	this.encodings[this.encodings.length] = 'KSC-EUC-V,Adobe-Korea1-0';
01076 	this.encodings[this.encodings.length] = 'KSCms-UHC-H,Adobe-Korea1-1';
01077 	this.encodings[this.encodings.length] = 'KSCms-UHC-V,Adobe-Korea1-1';
01078 	this.encodings[this.encodings.length] = 'KSCms-UHC-HW-H,Adobe-Korea1-1';
01079 	this.encodings[this.encodings.length] = 'KSCms-UHC-HW-V,Adobe-Korea1-1';
01080 	this.encodings[this.encodings.length] = 'KSCpc-EUC-H,Adobe-Korea1-0';
01081 	this.encodings[this.encodings.length] = 'UniKS-UCS2-H,Adobe-Korea1-1';
01082 	this.encodings[this.encodings.length] = 'UniKS-UCS2-V,Adobe-Korea1-1';
01083 	this.encodings[this.encodings.length] = 'UniKS-UTF16-H,Adobe-Korea1-2';
01084 	this.encodings[this.encodings.length] = 'UniKS-UTF16-V,Adobe-Korea1-2';
01085 	this.encodings[this.encodings.length] = 'Identity-H,Adobe-Identity-0';
01086 	this.encodings[this.encodings.length] = 'Identity-V,Adobe-Identity-0';
01087 
01088 	this.echo				= null;
01089 	this.ruler				= null;
01090 	this.tabCharacter			= "\t";
01091 	this.isTextbox				= false;
01092 	this.columns				= 1;
01093 	this.gutterSize				= 0.0;
01094 	this.columnAlign			= 'left';
01095 	this.urlColor				= 'blue';
01096 
01097 	this.ref				= new Array();
01098 	this.fonts				= new Array();
01099 	this.images				= new Array();
01100 	this.u3ds				= new Array();
01101 	this.groups				= new Array();
01102 	this.textboxes				= new Array();
01103 	this.includes				= new Array();
01104 	this.fontfiles				= new Array();
01105 		
01106 //	this.fonts[0]				= new pdfFont$(0,'Helvetica','');
01107 //	this.fonts[1]				= new pdfFont$(1,'Helvetica','bold');
01108 //	this.fonts[2]				= new pdfFont$(2,'Helvetica','italic');
01109 //	this.fonts[3]				= new pdfFont$(3,'Helvetica','bolditalic');
01110 
01111 //	this.fonts[4]				= new pdfFont$(4,'Times','');
01112 //	this.fonts[5]				= new pdfFont$(5,'Times','bold');
01113 //	this.fonts[6]				= new pdfFont$(6,'Times','italic');
01114 //	this.fonts[7]				= new pdfFont$(7,'Times','bolditalic');
01115 
01116 //	this.fonts[8]				= new pdfFont$(8,'Courier','');
01117 //	this.fonts[9]				= new pdfFont$(9,'Courier','bold');
01118 //	this.fonts[10]				= new pdfFont$(10,'Courier','italic');
01119 //	this.fonts[11]				= new pdfFont$(11,'Courier','bolditalic');
01120 
01121 //	this.fonts[12]				= new pdfFont$(12,'ZapfDingbats','');
01122 //	this.fonts[13]				= new pdfFont$(13,'Symbol','');
01123 
01124 	this.default_fontName = 'helvetica';
01125 	this.default_fontSize = 10;
01126 
01127 	this.setFontName(this.default_fontName);
01128 	this.fontSize				= this.default_fontSize;
01129 	
01130 	this.fontColor				= 0;
01131 	this.letterSpacing			= 0;
01132 	this.wordSpacing			= 0;
01133 	this.fontRender				= 0;	// 0 = fill, 1 = stoke, 2 = stroke and Fill
01134 	this.fontSkew				= 0;
01135 	this.fontScaleX				= 1;
01136 	this.fontScaleY				= 1;
01137 	this.textAngle				= 0;
01138 	this.rowHeight				= 0;
01139 
01140 	this.graphicScale			= 1;
01141 
01142 	this.bold				= false;
01143 	this.underline				= false;
01144 	this.overline				= false;
01145 	this.italic				= false;
01146 	this.url				= '';
01147 	this.drawMargin				= false;
01148 	this.subscript				= false;
01149 	this.superscript			= false;
01150 
01151 	this.pageWidth				= this.paperWidth;
01152 	this.pageLength				= this.paperHeight;
01153 	if (this.landscape) this.pageWidth = this.paperHeight;
01154 	if (this.landscape) this.pageLength = this.paperWidth;
01155 
01156 	this.xmin				= 0;			// left margin
01157 	this.ymin				= 0;			// bottom Margin
01158 	this.ymax				= this.pageLength * 72;	// top margin;
01159 	this.xmax				= this.pageWidth * 72;	// right margin;
01160 	this.maxWidth				= this.pageWidth * 72;
01161 
01162 	this.marginTop				= 0;
01163 	this.marginBottom			= 0;
01164 	this.marginLeft				= 0;
01165 	this.marginRight			= 0;
01166 
01167 	this.xpos				= this.xmin;
01168 	this.ypos				= this.ymax;
01169 	this.xsize				= this.xmin;
01170 	this.ysize				= this.ymax;
01171 
01172 	this.line				= 1;
01173 	
01174 	this.html_pageHeader			= '';
01175 	this.html_pageFooter			= '';
01176 
01177 	this.margin				= false;
01178 	this.center				= false;
01179 	this.justify				= true;
01180 
01181 	this.clipRegion				= null;	
01182 	this.catalog				= null;
01183 
01184 	this.report				= new Object();
01185 	this.report.records			= 0;
01186 	this.report.row				= 0;
01187 	this.report.keepTogether		= false;
01188 	this.report.firstEndGroup		= 9999;
01189 	this.report.firstBeginGroup		= 9999;
01190 	this.report.firstRow			= true;
01191 	this.report.keys			= new Array();
01192 	this.report.urls			= new Array();
01193 	this.report.detailSize			= 0;
01194 	this.report.stack			= new Array();
01195 	this.report.keepTogether_row		= false;
01196 	this.report.hsize			= 0;
01197 
01198 	this.note				= '';
01199 	this.encoded				= true;
01200 	this.holdPage				= false;
01201 
01202 	this.subject				= '';
01203 	this.title				= '';
01204 	this.author				= '';
01205 	this.keywords				= '';
01206 
01207 	this.decodeMany				= pdf$decodeMany;
01208 	this.encodeMany				= pdf$encodeMany;
01209 	
01210 //--------------- set page size ------------------
01211 
01212 	this.setPageSize('letter');
01213 
01214 //----------- Add Space for Header / Footers ----------
01215 
01216 	if (this.onPageHeader != null) this.setMarginTop(1.0);
01217 	if (this.onPageFooter != null) this.setMarginBottom(1.0);
01218 	
01219 //----------- Order dependent (keep at bottom) ---------
01220 
01221 	this.catalog		= new pdfCatalog$(this);
01222 	this.catalog.addPage();
01223 }
01224 //======================================================================================
01225 //				pdf$get3dMatrix
01226 //=======================================================================================
01227 function pdf$get3dMatrix(camera,cameratilt,obj)
01228 {
01229 	var cx,cy,cz;
01230 	var tx,ty,tz;
01231 	var list,m,len;
01232 
01233 	list = camera.split(',');
01234 	cx = 0;
01235 	cy = 0;	
01236 	cy = 0;
01237 	if (list.length > 0) cx = parseFloat(list[0]);
01238 	if (list.length > 1) cy = parseFloat(list[1]);
01239 	if (list.length > 2) cz = parseFloat(list[2]);
01240 	if (isNaN(cx)) cx = 0;
01241 	if (isNaN(cy)) cy = 0;
01242 	if (isNaN(cz)) cz = 0;
01243 
01244 	len = Math.sqrt(cx*cx + cy*cy + cz*cz);
01245 
01246 	list = cameratilt.split(',');
01247 	tx = 0;
01248 	ty = 0;	
01249 	tz = 0;
01250 	if (list.length > 0) tx = parseFloat(list[0]);
01251 	if (list.length > 1) ty = parseFloat(list[1]);
01252 	if (list.length > 2) tz = parseFloat(list[2]);
01253 	if (isNaN(tx)) tx = 0;
01254 	if (isNaN(ty)) ty = 0;
01255 	if (isNaN(tz)) tz = 0;
01256 	
01257 	m = new pdf_matrix3D$();
01258 	if (tx != 0) m.rotate(tx,'x');
01259 	if (ty != 0) m.rotate(ty,'y');
01260 	if (tz != 0) m.rotate(tz,'z');
01261 	m.move(cx,cy,cz);
01262 
01263 	obj.matrix = '-1 0 0 0 0 -1 0 1 0 0 0 -4800';
01264 	obj.matrix = m.toString();
01265 	
01266 	obj.distance = len;
01267 }
01268 //======================================================================================
01269 //				pdf$u3dCopy
01270 //=======================================================================================
01271 function pdf$u3dCopy(ele,obj)
01272 {
01273 	var color,xx;
01274 
01275 	color = ele.style.backgroundColor;
01276 	if (color == '') color = 'white';
01277 	xx = this.parseColor_(color);
01278 	color = xx.color;
01279 
01280 	obj.u3dView		= ele.u3dView;
01281 	if (obj.u3dView == '') obj.u3dView = 'view_0';
01282 
01283 	obj.u3dName		= ele.u3dName;
01284 	if (obj.u3dName == '') obj.u3dName = 'PDF 3D';
01285 
01286 	obj.toolbar	= true;
01287 	if (ele.u3dToolbar == 'false') obj.toolbar = false;
01288 	if (ele.u3dToolbar ==    'no') obj.toolbar = false;
01289 	
01290 	obj.bgcolor	= this.colorRGBText_(color);
01291 	obj.lighting	= this.get3dLightingScheme(ele.u3dLightingScheme);
01292 	obj.renderMode	= this.get3dRenderMode(ele.u3dRenderMode);
01293 	
01294 	this.get3dMatrix(ele.u3dCamera,ele.u3dCameraTilt,obj);
01295 }
01296 //======================================================================================
01297 //				pdf$setOpacity
01298 //=======================================================================================
01299 function pdf$setOpacity(value)
01300 {
01301 	this.opacity = this.trim(value);
01302 	this.setGraphicTransparent(this.opacity);
01303 }
01304 
01305 //======================================================================================
01306 //				pdf$read
01307 //=======================================================================================
01308 function pdf$read(filename)
01309 {	
01310 	var text,c;
01311 
01312 	if (filename == '') return '';
01313 	
01314 	text =  this.sys.readUrl(filename);
01315 	return text;
01316 	
01317 }
01318 //==================================================================================
01319 //				pdf$drawTimeline
01320 //==================================================================================
01321 function pdf$drawTimeline(startDate,endDate,x,y,height,width,ele)
01322 {
01323 	var p;
01324 
01325 	p = this.toPoint_(x,y);
01326 	this.graphic.drawTimeline(startDate,endDate,p.x,p.y,height,width,ele);
01327 }
01328 //======================================================================================
01329 //				pdf$decodeMany
01330 //=======================================================================================
01331 function pdf$decodeMany(value)
01332 {
01333 	var list,i,text,c,j;
01334 	var key;
01335 	
01336 	key = new Array(15,56,23,54,82,39,123,33);
01337 	
01338 	text = '';	
01339 	j = 0;
01340 	for (i=0; i &lt; value.length; i = i + 2)
01341 	{
01342 		c = value.substr(i,2);
01343 		c = parseInt(c,16);
01344 
01345 		c = c ^ key[j % key.length];
01346 		text += String.fromCharCode(c);	
01347 		j += 1;
01348 	}
01349 
01350 	list = text.split(String.fromCharCode(key[0]));
01351 	return list;
01352 }
01353 //=======================================================================================
01354 //				pdf$encodeMany
01355 //=======================================================================================
01356 function pdf$encodeMany()
01357 {
01358 	var c;
01359 	var list,i,text,value;
01360 	var key;
01361 	
01362 	key = new Array(15,56,23,54,82,39,123,33);
01363 	
01364 	value = '';
01365 	for (i=0; i &lt; arguments.length; ++i)
01366 	{
01367 		if (i > 0) value += String.fromCharCode(key[0]);
01368 		value += '' + arguments[i];
01369 	}
01370 
01371 	text = '';
01372 	
01373 	for (i=0; i &lt; value.length; ++i)
01374 	{
01375 		c = value.charCodeAt(i);
01376 		c = c ^ key[i % key.length];
01377 		c = c.toString(16);
01378 		if (c.length == 0) c = '00';
01379 		if (c.length == 1) c = '0' + c;	
01380 		text += c;
01381 	}
01382 
01383 	return text;
01384 }
01385 
01386 //==========================================================================================
01387 //				pdf$setPageBackgroundColor
01388 //==========================================================================================
01389 function pdf$setPageBackgroundColor(backgroundColor)
01390 {
01391 
01392 	if (backgroundColor == undefined) backgroundColor = '';
01393 	if (backgroundColor == 'undefined') backgroundColor = '';
01394 	if (backgroundColor.toLowerCase() == 'white') backgroundColor = '';
01395 
01396 	this.pageBackgroundColor = backgroundColor;
01397 	this.catalog.activePage.backgroundColor = this.pageBackgroundColor;	
01398 }
01399 //==========================================================================================
01400 //				pdf$setPageMarginColor
01401 //==========================================================================================
01402 function pdf$setPageMarginColor(marginColor)
01403 {
01404 	var list;
01405 	
01406 	if (marginColor== undefined) marginColor= '';
01407 	if (marginColor== 'undefined') marginColor= '';
01408 
01409 	list = marginColor.split(',');
01410 	this.pageMarginLeftColor	= list[0];
01411 	this.pageMarginRightColor	= list[0];
01412 	this.pageMarginTopColor		= list[0];
01413 	this.pageMarginBottomColor	= list[0];
01414 
01415 	if (list.length > 1) this.pageMarginRightColor	= list[1];
01416 	if (list.length > 2) this.pageMarginTopColor	= list[2];
01417 	if (list.length > 3) this.pageMarginBottomColor	= list[3];
01418 
01419 	this.catalog.activePage.marginLeftColor= this.pageMarginLeftColor;	
01420 	this.catalog.activePage.marginRightColor= this.pageMarginRightColor;	
01421 	this.catalog.activePage.marginTopColor= this.pageMarginTopColor;	
01422 	this.catalog.activePage.marginBottomColor= this.pageMarginBottomColor;	
01423 
01424 	this.catalog.activePage.marginLeft	= this.marginLeft;
01425 	this.catalog.activePage.marginRight	= this.marginRight;
01426 	this.catalog.activePage.marginTop	= this.marginTop;
01427 	this.catalog.activePage.marginBottom	= this.marginBottom;
01428 	
01429 }
01430 //==========================================================================================
01431 //				pdf$setPageRotate
01432 //==========================================================================================
01433 function pdf$setPageRotate(angle_by_90)
01434 {
01435 	var angle;
01436 	
01437 	angle = '0';
01438 	
01439 	if (angle_by_90 ==  '90') angle = '90';
01440 	if (angle_by_90 == '180') angle = '180';
01441 	if (angle_by_90 == '270') angle = '270';
01442 
01443 	this.pageRotate = angle;
01444 	this.catalog.activePage.rotate = this.pageRotate;	
01445 }
01446 //==========================================================================================
01447 //				pdf$drawCalendar
01448 //==========================================================================================
01449 function pdf$drawCalendar(year,month,x,y,height,width,border,events,noref)
01450 {
01451 	var p;
01452 	
01453 	p = this.toPoint_(x,y);
01454 	return this.graphic.drawCalendar(year,month,p.x,p.y,height,width,border,events,noref);
01455 }
01456 //==========================================================================================
01457 //				pdf$drawCalendarSimple
01458 //==========================================================================================
01459 function pdf$drawCalendarSimple(year,month,x,y,height,width)
01460 {
01461 	var p;
01462 	p = this.toPoint_(x,y);	
01463 	return this.graphic.drawCalendarSimple(year,month,p.x,p.y,height,width);
01464 	
01465 }
01466 //======================================================================
01467 //			   pdf$get3dLightingSchenme
01468 //======================================================================
01469 function pdf$get3dLightingScheme(lighting)
01470 {
01471 	var lighting;
01472 
01473 	lighting = lighting.toLowerCase();
01474 
01475 	if (lighting ==      'cad') return '/CAD';
01476 	if (lighting ==    'white') return '/White';
01477 	if (lighting ==      'red') return '/Red';
01478 	if (lighting ==     'blue') return '/Blue';
01479 	if (lighting ==    'green') return '/Green';
01480 	if (lighting ==     'cube') return '/Cube';
01481 	if (lighting ==  'primary') return '/Primary';
01482 	if (lighting == 'headlamp') return '/Headlamp';
01483 	if (lighting ==     'hard') return '/Hard';
01484 	if (lighting ==      'day') return '/Day';	
01485 
01486 	return "/White";
01487 	
01488 }		
01489 //======================================================================
01490 //			   pdf$get3dRenderMode
01491 //======================================================================
01492 function pdf$get3dRenderMode(mode)
01493 {
01494 	var i,mode,m;
01495 	
01496 	var modes = new Array();
01497 	modes[0] = "Solid";
01498 	modes[1] = "SolidWireframe";
01499 	modes[2] = "Transparent";
01500 	modes[3] = "TransparentWireframe";
01501 	modes[4] = "BoundingBox";
01502 	modes[5] = "TransparentBoundingBox";
01503 	modes[6] = "TransparentBoundingBoxOutline";
01504 	modes[7] = "Wireframe";
01505 	modes[8] = "ShadedWireframe";
01506 	modes[9] = "HiddenWireframe";
01507 	modes[10] = "Vertices";
01508 	modes[11] = "ShadedVertices";
01509 	modes[12] = "Illustration";
01510 	modes[13] = "SolidOutline";
01511 	modes[14] = "ShadedIllustration";
01512 
01513 	mode = mode.toLowerCase();
01514     
01515     for (i=0; i &lt; modes.length; ++i)
01516     {
01517 	m = modes[i];	
01518 	if (m.toLowerCase() == mode) return '/' + modes[i];
01519 
01520     }
01521     
01522 	return '/Solid';
01523     
01524 }
01525 //==================================================================
01526 //				pdf$hexSize
01527 //==================================================================
01528 function pdf$hexSize(size)
01529 {
01530 	var n;
01531 	
01532 	n = Math.floor(size / 128);
01533 	return (size * 2) + n + 1;
01534 }
01535 
01536 //==========================================================================
01537 //			pdf$placeHotspot
01538 //==========================================================================
01539 function pdf$placeHotspot(x,y,height,width,command)
01540 {
01541 	var p;
01542 
01543 	p		= this.toPoint_(x,y);
01544 	height	= this.toPoint_(height);
01545 	width	= this.toPoint_(width);
01546 
01547 	this.catalog.activePage.addHotspot(p.x,p.y,height,width,command);
01548 }
01549 //============================================================================================
01550 //			pdf$drawChar
01551 //============================================================================================
01552 function pdf$drawChar(x,y,height,char)
01553 {
01554 	var size,n,i;
01555 	var midSize,topSize,botSize,filSize;
01556 	var fixed,remain,dy;
01557 	var p,width,fill_dy,nfil;
01558 	
01559 	p = this.toPoint_(x,y);
01560 
01561 	if (char == null) return;
01562 	size = this.fontSize;
01563 	if (size &lt; 1) size = 10;
01564 	
01565 	n = height / size;
01566 	if (n &lt;= 4)
01567 	{
01568 		this.setFontSize(height);
01569 
01570 		y = y + ((height * 0.75) / 72);
01571 		this.placeText(x,y,char.text);
01572 		this.fontSize = size;
01573 		return;
01574 	}
01575 //-------------------------- complex character draw -----------------------
01576 
01577 //	y = y + (height / 72);
01578 
01579 	width = 1;
01580 
01581 	midSize = size * 0.75;
01582 	topSize = size * 0.75;
01583 	botSize = topSize;
01584 	filSize = size * 0.75;
01585 
01586 	fixed = topSize + botSize + midSize;
01587 	remain = height - fixed;
01588 
01589 	nfil = Math.floor((remain / 2) / filSize);
01590 	if (nfil > 0) fill_dy = (remain / 2) / nfil;
01591 
01592 	dy = topSize;
01593 
01594 	p.y -= dy;
01595 	this.ypos = p.y;
01596 	this.xpos = p.x;
01597 	this.put_(String.fromCharCode(char.top),width,0);
01598 	
01599 	for (i=0; i &lt; nfil; ++i)
01600 	{
01601 		p.y -= fill_dy;
01602 		this.ypos = p.y;
01603 		this.xpos = p.x;
01604 		this.put_(String.fromCharCode(char.filler),width,0);
01605 	}
01606 
01607 	p.y -= dy;
01608 	this.ypos = p.y;
01609 	this.xpos = p.x;
01610 	this.put_(String.fromCharCode(char.center),width,0);
01611 
01612 	for (i=0; i &lt; nfil; ++i)
01613 	{
01614 		p.y -= fill_dy;
01615 		this.ypos = p.y;
01616 		this.xpos = p.x;
01617 		this.put_(String.fromCharCode(char.filler),width,0);
01618 	}
01619 
01620 	p.y -= dy;
01621 	this.ypos = p.y;
01622 	this.xpos = p.x;
01623 	this.put_(String.fromCharCode(char.bottom),width,0);
01624 
01625 }
01626 //============================================================================================
01627 //			pdf$onPageOpen
01628 //============================================================================================
01629 function pdf$onPageOpen(javascript)
01630 {
01631 	var ref;
01632 
01633 	ref = this.catalog.addJavascript(javascript);
01634 	this.catalog.activePage.onPageOpen = ref;
01635 }
01636 //============================================================================================
01637 //			pdf$onPageClose
01638 //============================================================================================
01639 function pdf$onPageClose(javascript)
01640 {
01641 	var ref;
01642 
01643 	ref = this.catalog.addJavascript(javascript);
01644 	this.catalog.activePage.onPageClose = ref;
01645 }
01646 //============================================================================================
01647 //			pdf$onDocumentOpen
01648 //============================================================================================
01649 function pdf$onDocumentOpen(javascript)
01650 {
01651 	var ref;
01652 
01653 	ref = this.catalog.addJavascript(javascript);
01654 	this.catalog.onDocumentOpen = ref;
01655 }
01656 //============================================================================================
01657 //			pdf$onWillClose
01658 //============================================================================================
01659 function pdf$onWillClose(javascript)
01660 {
01661 	var ref;
01662 
01663 	ref = this.catalog.addJavascript(javascript);
01664 	this.catalog.onWillClose = ref;
01665 }
01666 //============================================================================================
01667 //			pdf$onWillSave
01668 //============================================================================================
01669 function pdf$onWillSave(javascript)
01670 {
01671 	var ref;
01672 	
01673 	ref = this.catalog.addJavascript(javascript);
01674 	this.catalog.onWillSave = ref;
01675 }
01676 //============================================================================================
01677 //			pdf$onDidSave
01678 //============================================================================================
01679 function pdf$onDidSave(javascript)
01680 {
01681 	var ref;
01682 
01683 	ref = this.catalog.addJavascript(javascript);
01684 	this.catalog.onDidSave= ref;
01685 }
01686 //============================================================================================
01687 //			pdf$onDidPrint
01688 //============================================================================================
01689 function pdf$onDidPrint(javascript)
01690 {
01691 	var ref;
01692 
01693 	ref = this.catalog.addJavascript(javascript);
01694 	this.catalog.onDidPrint = ref;
01695 }
01696 //============================================================================================
01697 //			pdf$onWillPrint
01698 //============================================================================================
01699 function pdf$onWillPrint(javascript)
01700 {
01701 	var ref;
01702 
01703 	ref = this.catalog.addJavascript(javascript);
01704 	this.catalog.onWillPrint= ref;
01705 }
01706 //============================================================================================
01707 //			pdf$setPageSize
01708 //============================================================================================
01709 function pdf$setPageSize(pageSize,relative)
01710 {
01711 	var list;
01712 	var height,width;
01713 	
01714 	pageSize = '' + pageSize;
01715 	pageSize = pageSize.toLowerCase();
01716 
01717 	this.relative = false;
01718 	if (arguments.length > 1) this.relative = relative;
01719 
01720 	this.paperHeight = 11;
01721 	this.paperWidth = 8.5;
01722 	
01723 	list = pageSize.split(',');
01724 	if (list.length == 2) 
01725 	{
01726 		width = parseFloat(list[0]);
01727 		height = parseFloat(list[1]);
01728 		if ((height > 0) && (width > 0))
01729 		{
01730 			this.paperHeight = height;
01731 			this.paperWidth = width;
01732 			this.setLandscape(this.landscape);
01733 			return;
01734 		}
01735 	}
01736 		
01737 	switch (pageSize)
01738 	{
01739 	case 'letter':			this.paperHeight = 11;
01740 					this.paperWidth = 8.5;
01741 					break;
01742 	case 'legal':			this.paperHeight = 14;
01743 					this.paperWidth = 8.5;
01744 					break;
01745 	case 'ledger':			this.paperHeight = 17;
01746 					this.paperWidth = 11;
01747 					break;
01748 	case 'tabloid':			this.paperHeight = 11;
01749 					this.paperWidth = 17;
01750 					break;
01751 	case 'executive':		this.paperHeight = 10.55;
01752 					this.paperWidth = 7.25;
01753 					break;
01754 	case 'a':			this.paperHeight = 11;
01755 					this.paperWidth = 8.5;
01756 					break;
01757 	case 'b':			this.paperHeight = 14;
01758 					this.paperWidth = 8.5;
01759 					break;
01760 	case 'c':			this.paperHeight = 17;
01761 					this.paperWidth = 22;
01762 					break;
01763 	case 'd':			this.paperHeight = 22;
01764 					this.paperWidth = 34;
01765 					break;
01766 	case 'e':			this.paperHeight = 34;
01767 					this.paperWidth = 44;
01768 					break;
01769 
01770 	case 'foolscap':		this.paperHeight = 16.5;
01771 					this.paperWidth = 13.25;
01772 					break;
01773 	case 'small post':		this.paperHeight = 18.50;
01774 					this.paperWidth = 14.50;
01775 					break;
01776 	case 'sheet and 1/3 cap':	this.paperHeight = 22;
01777 					this.paperWidth = 13.25;
01778 					break;
01779 	case 'sheet and 1/2 cap':	this.paperHeight = 24.75;
01780 					this.paperWidth = 13.25;
01781 					break;
01782 	case 'demy':			this.paperHeight = 20.00;
01783 					this.paperWidth = 15.50;
01784 					break;
01785 	case 'large post':		this.paperHeight = 21.00;
01786 					this.paperWidth = 16.50;
01787 					break;
01788 	case 'small medium':		this.paperHeight = 22.00;
01789 					this.paperWidth = 17.50;
01790 					break;
01791 	case 'medium':			this.paperHeight = 23.00;
01792 					this.paperWidth = 18;
01793 					break;
01794 	case 'small royal':		this.paperHeight = 24.00;
01795 					this.paperWidth = 19;
01796 					break;
01797 	case 'royal':			this.paperHeight = 25;
01798 					this.paperWidth = 20;
01799 					break;
01800 	case 'imperial':		this.paperHeight = 30;
01801 					this.paperWidth = 22;
01802 					break;
01803 	}
01804 
01805 	this.setLandscape(this.landscape);
01806 }
01807 //============================================================================================
01808 //									pdf$setLandscape
01809 //============================================================================================
01810 function pdf$setLandscape(landscape)
01811 {
01812 	var t,dy;
01813 
01814 	t = this;
01815 
01816 	this.landscape = false;
01817 	if (landscape) this.landscape = true;
01818 
01819 	this.pageWidth			= this.paperWidth;
01820 	this.pageLength			= this.paperHeight;
01821 	if (this.landscape) this.pageWidth = this.paperHeight;
01822 	if (this.landscape) this.pageLength = this.paperWidth;
01823 
01824 	this.xmin			= this.marginLeft;			// left margin
01825 	this.ymin			= this.marginBottom;		// bottom Margin
01826 	this.ymax			= (this.pageLength * 72) - this.marginTop;	// top margin;
01827 	this.xmax			= (this.pageWidth * 72) - this.marginRight;	// right margin;
01828 
01829 	this.maxWidth			= this.pageWidth * 72;
01830 
01831 	this.xpos			= this.xmin;
01832 	this.ypos			= this.ymax;
01833 	this.xsize			= this.xmin;
01834 	this.ysize			= this.ymax;
01835 
01836 	dy = 0;
01837 	if (this.catalog == null) return;
01838 
01839 	if (this.relative) dy = this.catalog.activePage.ymax - (this.pageLength * 72);
01840 
01841 
01842 	this.catalog.activePage.xmin  = 0;
01843 	this.catalog.activePage.ymin  = dy;
01844 	this.catalog.activePage.xmax  = this.pageWidth * 72;			// 8.5 Inches * 72
01845 	this.catalog.activePage.ymax  = (this.pageLength * 72) + dy;	// 11 Inches * 72 
01846 
01847 //	this.catalog		= new pdfCatalog$(this);
01848 //	this.catalog.addPage();
01849 
01850 }
01851 //============================================================================================
01852 //									trim
01853 //============================================================================================
01854 function pdf$trim(text)
01855 {
01856      text = '' + text;   
01857      return text.replace(/^\s+|\s+$/g,'');
01858 } 
01859 //===================================================================================
01860 //				pdf$setFontSkew
01861 //===================================================================================
01862 function pdf$setFontSkew(skew)
01863 {
01864 	this.fontSkew = 0;
01865 	if (isNaN(skew)) return;
01866 	
01867 	this.fontSkew = parseFloat(skew);
01868 }
01869 //===================================================================================
01870 //				pdf$setFontRender
01871 //===================================================================================
01872 function pdf$setFontRender(name)
01873 {
01874 
01875 	this.fontRender = 0;
01876 	if (name == '') return;
01877 
01878 	name = '' + name;
01879 	name = name.toLowerCase();
01880 	if (name == 'fill') return;
01881 	if (name == 'stroke') this.fontRender = 1;
01882 	if (name == 'stroke,fill') this.fontRender = 2;
01883 	if (name == 'fill,stroke') this.fontRender = 2;
01884 
01885 }
01886 //===================================================================================
01887 //				pdf$setFontScale
01888 //===================================================================================
01889 function pdf$setFontScale(x,y)
01890 {
01891 	this.fontScaleX = 1;
01892 	this.fontScaleY = 1;
01893 	if (isNaN(x)) return;
01894 	if (isNaN(y)) return;
01895 
01896 	x = parseFloat(x);
01897 	y = parseFloat(y);
01898 	if (x &lt;= 0.01) x = 1;
01899 	if (y &lt;= 0.01) y = 1;
01900 	this.fontScaleX = x;
01901 	this.fontScaleY = y;
01902 }
01903 //===================================================================================
01904 //				pdf$setLetterSpacing
01905 //===================================================================================
01906 function pdf$setLetterSpacing(size)
01907 {
01908 	this.letterSpacing = parseFloat(size);
01909 }
01910 //===================================================================================
01911 //				pdf$setWordSpacing
01912 //===================================================================================
01913 function pdf$setWordSpacing(size)
01914 {
01915 	this.wordSpacing = parseFloat(size);
01916 }
01917 //===================================================================================
01918 //				pdf$addOutline
01919 //===================================================================================
01920 function pdf$addOutline(title, xpos, ypos, zoomFactor)
01921 {
01922 	var outline;
01923 
01924 	outline = this.catalog.addOutline(title, xpos, ypos, zoomFactor);
01925 	return outline;
01926 }
01927 //==================================================================================
01928 //				pdf$imageSize
01929 //==================================================================================
01930 function pdf$imageSize(filename)
01931 {
01932 	var obj;
01933 
01934 try
01935 {
01936 
01937 	obj = this.imageSize_A(filename);
01938 	if (obj == null) return null;
01939 	
01940 	if (obj.height &lt;= 0) { log('image height = 0, ' + filename.substr(0,256)); return null; }
01941 	if (obj.width  &lt;= 0) { log('image width = 0, ' + filename.substr(0,256)); return null; }
01942 	if (obj.size   &lt;= 0) { log('image size = 0, ' + filename.substr(0,256)); return null; }
01943 
01944 	return obj;
01945 }
01946 catch (e) { log('image error, ' + filename.substr(0,256) + ' ' + e.message); return null; }
01947 
01948 }
01949 //==================================================================================
01950 //				pdf$jpegSize
01951 //==================================================================================
01952 function pdf$jpegSize(filename)
01953 {	
01954 	var data,obj,a, where;
01955 	
01956 	where = 'server';
01957 	if (typeof(window) == 'object') where = 'client';
01958 
01959 	obj = CollinsPDF().jpegsize(filename,where);
01960 	if (obj == null) return null;
01961 	
01962 	if (isNaN(obj.width) || isNaN(obj.height) || isNaN(obj.size)) obj = null;
01963 	return obj;
01964 }
01965 //==================================================================================
01966 //				pdf$imageSize_A
01967 //==================================================================================
01968 function pdf$imageSize_A(filename)
01969 {	
01970 	var obj,i,j,list,a,element,data,id;
01971 	var temp,list,height,width,ext,value;
01972 	var text,name;
01973 
01974 	obj = null;
01975 	if (filename == '') return null;
01976 
01977 	if ((filename.substr(0,7).toUpperCase() == 'BASE64,') || (filename.substr(0,4).toUpperCase() == 'HEX,') || (filename.substr(0,8).toUpperCase() == 'ASCII85,')) 
01978 	{
01979 		i = filename.indexOf(':');
01980 		if (i &lt; 0) return null;
01981 			
01982 		temp = filename.substr(0,i);		
01983 		data = filename.substr(i+1);
01984 		
01985 		filename = temp;
01986 		list = temp.split(',');
01987 		if (list.length &lt; 3) return null;
01988 		
01989 		value = list[0];
01990 		id = this.trim(value.toUpperCase());
01991 		
01992 		width = parseInt(list[1]);
01993 		height = parseInt(list[2]);
01994 
01995 		obj = new Object();
01996 		obj.format = 'hex';
01997 		obj.height = height;
01998 		obj.width = width;
01999 		obj.data = '';
02000 		if (id == 'BASE64') obj.data = this.base64ToHex_(data);
02001 		if (id == 'HEX') obj.data = this.hexToHex_(data) ;
02002 		if (id == 'ASCII85') obj.data = data;
02003 		if (id == 'ASCII85') obj.format = 'hex85';
02004 		obj.size = obj.data.length;
02005 		obj.is3D = false;
02006 		obj.ext = '.jpg';
02007 		obj.filename = 1 * new Date();	// Make a unique identifier
02008 		obj.isData = true;
02009 		return obj;		
02010 	}
02011 
02012 	name = filename.substr(0,7);
02013 	if (filename.substr(0,7).toUpperCase() == 'CANVAS:')
02014 	{
02015 		id = filename.substr(7);
02016 		element = document.getElementById(id);
02017 		if (element == null) return null;
02018 	
02019 		data = element.toDataURL("image/jpeg");
02020 		i = data.indexOf(',');
02021 		data = data.substr(i+1);
02022 		
02023 		obj = new Object();
02024 		obj.format = 'hex';
02025 		obj.height = element.height;
02026 		obj.width = element.width;
02027 		obj.data  = this.base64ToHex_(data);
02028 		obj.size = obj.data.length;
02029 		obj.is3D = false;
02030 		obj.ext = '.jpg';
02031 		obj.filename = filename;
02032 		obj.isData = true;
02033 		return obj;		
02034 	}
02035 
02036 	if ((filename.substr(0,5).toUpperCase() == 'FILE,'))
02037 	{
02038 		i = filename.indexOf(':');
02039 		if (i &lt; 0) return null;
02040 		
02041 		text = filename.substr(0,i);
02042 		list = text.split(',');
02043 		obj = new Object();
02044 		obj.format = '';
02045 
02046 		obj.height = 0;
02047 		obj.width = 0;
02048 		obj.size = 0;
02049 		obj.is3D = false;
02050 		obj.ext = '.jpg';
02051 		obj.filename = 'inline' + this.images.length;
02052 		obj.isData = false;
02053 
02054 		obj.size  = filename.length - (i+1);
02055 		if (obj.format == 'hex') obj.size += 1;
02056 		if (obj.format == 'hex85') obj.size += 2;		
02057 
02058 		for (i=1; i &lt; list.length; ++i)
02059 		{
02060 			value = list[i];
02061 			if (pdf$trim(value) == '') continue;
02062 			a = value.split('=');
02063 			if (a.length != 2) continue;
02064 			
02065 			name = a[0];
02066 			name = pdf$trim(name.toLowerCase());
02067 			value = parseInt(pdf$trim(a[1]));
02068 			if (name == 'name') obj.filename = value;
02069 			if (name == 'format') obj.format = a[1].toLowerCase();
02070 
02071 			if (isNaN(value)) continue;
02072 			if (name == 'width') obj.width = value;
02073 			if (name == 'height') obj.height = value;
02074 		}
02075 		return obj;
02076 	}		
02077 
02078 //	if (this.isUrl_(filename))
02079 	{
02080 //		ext = '.jpg';
02081 	}
02082 //	else
02083 	{
02084 		i = filename.lastIndexOf('.');
02085 		ext = filename.substr(i);
02086 	}
02087 
02088 	ext = ext.toLowerCase();
02089 	if (filename.toLowerCase().indexOf('_jpg8.txt') >= 0) ext = '.jpg8';
02090 	if (filename.toLowerCase().indexOf('_jpgx.txt') >= 0) ext = '.jpgx';
02091 	if (filename.toLowerCase().indexOf('_u3dx.txt') >= 0) ext = '.u3dx';
02092 	if (filename.toLowerCase().indexOf('_u3d8.txt') >= 0) ext = '.u3d8';
02093 	if (filename.toLowerCase().indexOf('_prcx.txt') >= 0) ext = '.prcx';
02094 	if (filename.toLowerCase().indexOf('_prc8.txt') >= 0) ext = '.prc8';
02095 	if (filename.toLowerCase().indexOf('_u3d.txt')  >= 0) ext = '.u3d';
02096 	if (filename.toLowerCase().indexOf('_prc.txt')  >= 0) ext = '.prc';
02097 
02098 	if (ext == '.jpg') 
02099 	{	
02100 		obj = this.jpegSize(filename);
02101 		if (obj == null) return null;
02102 		obj.ext = '.jpg';
02103 		obj.is3D = false;
02104 		obj.filename = filename;
02105 		obj.format = '';
02106 		obj.isData = false;
02107 
02108 		return obj;
02109 	}
02110 	
02111 	if ((ext == '.jpgx') || (ext == '.jpg8')) 
02112 	{		
02113 		obj = new Object();
02114 		obj.ext = ext;
02115 		obj.format = 'hex';
02116 		obj.filename = filename;
02117 		obj.is3D = false;
02118 		obj.isData = false;
02119 
02120 		if (ext == '.jpg8') obj.format = 'hex85';
02121 		
02122 		this.filename_size(filename,obj);		
02123 
02124 		return obj;
02125 	}
02126 
02127 	if ((ext == '.u3dx') || (ext == '.u3d8') || (ext == '.u3d')) 
02128 	{		
02129 		obj = new Object();
02130 		obj.ext		= ext;
02131 		obj.format	= 'none';
02132 		obj.filename	= filename;
02133 		obj.size	= this.sys.fileSize(filename);
02134 		obj.is3D	= true;
02135 		obj.subtype	= 'U3D';
02136 		obj.isData	= false;
02137 
02138 		if (ext == '.u3dx') obj.format = 'hex';
02139 		if (ext == '.u3d8') obj.format = 'hex85';
02140 
02141 		if (obj.format != 'none') this.filename_size(filename,obj);		
02142 		obj.height = 8 * 72;
02143 		obj.width  = 8 * 72;
02144 		
02145 		return obj;
02146 	}
02147 
02148 	if ((ext == '.prcx') || (ext == '.prc8') || (ext == '.prc')) 
02149 	{		
02150 		obj = new Object();
02151 		obj.ext		= ext;
02152 		obj.format	= 'none';
02153 		obj.filename	= filename;
02154 		obj.size	= this.sys.fileSize(filename);
02155 		obj.isData	= false;
02156 
02157 		obj.is3D	= true;
02158 		obj.subtype	= 'PRC';
02159 
02160 		if (ext == '.prcx') obj.format = 'hex';
02161 		if (ext == '.prc8') obj.format = 'hex85';
02162 
02163 		if (obj.format != 'none') this.filename_size(filename,obj);		
02164 		obj.height	= 8 * 72;
02165 		obj.width	= 8 * 72;
02166 		
02167 		return obj;
02168 	}
02169 
02170 	return null;
02171 }
02172 //======================================================================
02173 //			pdf$ord_
02174 //======================================================================
02175 function pdf$ord_(data,pos) 
02176 {
02177 	var i,text;
02178 
02179 	i = pos + 2;
02180 	text = data.substr(i,2);
02181 	return parseInt(text,16);
02182 }
02183 //======================================================================
02184 //			pdf$hexToAscii85_
02185 //======================================================================
02186 function pdf$hexToAscii85_(data,noterm) 
02187 {
02188 	var c,nt,pos,n,count,result;
02189 	var b1,b2,b3,b4;
02190 	var text,length;
02191 
02192 	result	= '';
02193     nt		= text.length;
02194     pos		= 0;
02195     count	= 0;
02196 
02197     while (pos &lt; nt)
02198 	{
02199 		b1 = 0;
02200 		b2 = 0;
02201 		b3 = 0;
02202         b4 = 0;
02203 		if (pos+1 &lt; nt) b1 = this.ord_(text,pos);
02204 		if (pos+1 &lt; nt) b2 = this.ord_(text,pos+1);
02205 		if (pos+2 &lt; nt) b3 = this.ord_(text,pos+2);
02206 		if (pos+3 &lt; nt) b4 = this.ord_(text,pos+3);
02207 
02208 		n = 4;
02209 		if (pos+3 >= nt) n = (nt - pos) + 1;
02210 		c = this.ascii85_(b1,b2,b3,b4,n);
02211 		count = count + length(c);
02212 		if (count > 128)
02213 		{
02214 			result = result + "\n";
02215 			count = 0;
02216 		}
02217 
02218 		result = '' + result + c;
02219         pos = pos + 4;
02220 	}
02221 
02222     if (noterm) result += '~>';
02223 	return result;
02224 }
02225 //======================================================================
02226 //			pdf$ascii85_
02227 //======================================================================
02228 function pdf$ascii85_(b1,b2,b3,b4,n)
02229 {
02230 	var	value,result;
02231 	var c1,c2,c3,c4,c5;
02232 
02233 	result = 'z';
02234 	if ((b1 == 0) && (b2 == 0) && (b3 == 0) && (b4 == 0) && (n == 4)) return result;
02235 
02236 	value = (b1 * 256 * 256 * 256) + (b2 * 256 * 256) + (b3 * 256) + b4;
02237 
02238 	c1 = value % 85;
02239 	value = Math.floor(value / 85);
02240 	c2 = value % 85;
02241 	value = Math.floor(value / 85);
02242 	c3 = value % 85;
02243 	value = math.floor(value / 85);
02244 	c4 = value % 85;
02245 	value = Math.floor(value / 85);
02246 	c5 = value % 85;
02247 
02248 	result = '' + String.fromCharCode(c5 + 33) + String.fromCharCode(c4 + 33);
02249 	if (n > 1) result += String.fromCharCode(c3 + 33);
02250 	if (n > 2) result += String.fromCharCode(c2 + 33);
02251 	if (n > 3) result += String.fromCharCode(c1 + 33);
02252 	return result;
02253 }
02254 //======================================================================
02255 //			pdf$base64ToAscii85_
02256 //======================================================================
02257 function pdf$base64ToAscii85_(data) 
02258 {
02259 	var hex,ascii85;
02260 
02261 	hex = this.base64ToHex_(data);
02262 	ascii85 = this.hexToAscii85_(hex) + "~>";
02263 	return ascii85;
02264 }
02265 //======================================================================
02266 //			pdf$base64ToHex_
02267 //======================================================================
02268 function pdf$base64ToHex_(data) 
02269 {
02270 	var key,hex,i,n,a;
02271 	var e1,e2,e3,e4,c1,c2,c3;
02272 
02273 	hex  = "";
02274 	key  = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789' + '+/=';
02275 	data = data.replace(/[^A-Za-z0-9\+\/\=]/g, "");
02276 
02277 	n = 1;
02278 	for (i = 0; i &lt; data.length; i+=4)
02279 	{
02280 		e1 = key.indexOf(data.charAt(i+0));
02281 		e2 = key.indexOf(data.charAt(i+1));
02282 		e3 = key.indexOf(data.charAt(i+2));
02283 		e4 = key.indexOf(data.charAt(i+3));
02284 
02285 
02286 		c1 = (e1 &lt;&lt; 2) | (e2 >> 4);
02287 		c2 = ((e2 & 15) &lt;&lt; 4) | (e3 >> 2);
02288 		c3 = ((e3 & 3) &lt;&lt; 6) | e4;
02289 
02290 		if ((n % 64) == 0) hex += "\n";
02291 
02292 		a = c1.toString(16).toUpperCase();
02293 		if (a.length == 0) a = '00';
02294 		if (a.length == 1) a = '0' + a;			
02295 		hex += a;
02296 		n += 1;
02297 		
02298 		if (e3 != 64)
02299 		{
02300 			if ((n % 64) == 0) hex += "\n";
02301 			a = c2.toString(16).toUpperCase();
02302 			if (a.length == 0) a = '00';
02303 			if (a.length == 1) a = '0' + a;			
02304 			hex += a;
02305 			n += 1;
02306 		}
02307 		
02308 		if (e4 != 64)
02309 		{
02310 			if ((n % 64) == 0) hex += "\n";
02311 			a = c3.toString(16).toUpperCase();
02312 			if (a.length == 0) a = '00';
02313 			if (a.length == 1) a = '0' + a;			
02314 			hex += a;
02315 			n += 1;
02316 		}
02317 	}
02318 
02319 	return hex + '>';
02320 }
02321 //======================================================================
02322 //			pdf$hexToHex_
02323 //======================================================================
02324 function pdf$hexToHex_(data) 
02325 {
02326 	var key,hex,i,n,pos,remain;
02327 
02328 	hex  = "";
02329 	data = data.replace(/[^A-Fa-f0-9]/g, "");
02330 
02331 	n = Math.floor(data.length / 128);
02332 	remain = data.length % 128;
02333 	
02334 	pos = 0;
02335 	
02336 	for (i = 0; i &lt; n; ++i)
02337 	{
02338 		hex += data.substr(pos,128);
02339 		if (i &lt; (n-1)) hex += "\n";
02340 		pos += 128;
02341 	}
02342 
02343 	if (remain == 0) return hex + ">";
02344 	hex += "\n";
02345 	hex += data.substr(pos);
02346 	return hex + '>';
02347 }
02348 //===================================================================================
02349 //			pdf$filename_size
02350 //===================================================================================
02351 function pdf$filename_size(filename,obj)
02352 {
02353 		var i,j,text,c,name,value,size;
02354 		
02355 		obj.size = 0;
02356 		obj.height = 0;
02357 		obj.width = 0;
02358 
02359 		size = this.sys.fileSize(filename);
02360 		if (size == 0) return;
02361 	
02362 		name = filename;
02363 
02364 		i = name.lastIndexOf('/');
02365 		j = name.lastIndexOf('\\');
02366 		if (j > i) i = j;
02367 		if (i >= 0) name = name.substr(i+1);
02368 	
02369 		i = name.indexOf('.');
02370 		text = name.substr(0,i);
02371 		text = text.toLowerCase();
02372 
02373 		i = text.lastIndexOf('_');		// strip type
02374 		if ( i &lt; 0) return;
02375 		text = text.substr(0,i);
02376 
02377 		i = text.lastIndexOf('_');
02378 		if ( i &lt; 0) return;
02379 		text = text.substr(i+1);
02380 		
02381 		value = '';
02382 		for (i=text.length-1; i >= 0; --i)
02383 		{
02384 			c = text.charAt(i).toLowerCase();
02385 			if (c >= '0' && c &lt;= '9') 
02386 			{
02387 				value = c + value;
02388 				continue;
02389 			}
02390 			if (c == 'w') 
02391 			{
02392 				obj.width = parseInt(value);
02393 				value = '';
02394 				continue;
02395 			}
02396 			if (c == 'h') 
02397 			{
02398 				obj.height = parseInt(value);
02399 				value = '';
02400 				continue;
02401 			}
02402 			if (c == 's') 
02403 			{
02404 				obj.size = parseInt(value);
02405 				value = '';
02406 				continue;
02407 			}
02408 			break;
02409 		} 
02410 }
02411 //===================================================================================
02412 //			pdf$tileImage
02413 //===================================================================================
02414 function pdf$tileImage(x1,y1,x2,y2,filename,repeat,position)
02415 {
02416 	var obj,t;
02417 	var rows,cols;
02418 	var xpos,ypos;
02419 	var c,r,i,ext,scale;
02420 	var xscale,yscale;
02421 	var x,y,h,w;
02422 	var height,width;
02423 	var list,dx,dy;
02424 	var a,b,temp,index;
02425 	var xmin,ymin;
02426 	
02427 	t = this;
02428 
02429 	obj = this.imageSize(filename);
02430 	if (obj == null) return;			// can only accept jpeg files (at this time)
02431 
02432 	index = this.findImage(obj);
02433 
02434 	scale = 1;
02435 
02436 	x1 = x1 * scale;
02437 	y1 = y1 * scale;
02438 	x2 = x2 * scale;
02439 	y2 = y2 * scale;
02440 	
02441 	this.setClipRegion(x1,y1,x2,y2);
02442 	xmin = this.clipRegion.x1;
02443 
02444 	scale = 0.60;
02445 	scale = 72 / 110;
02446 	
02447 	height = Math.round(obj.height * scale);
02448 	width = Math.round(obj.width * scale);
02449 	if (height &lt; 1) return;
02450 	if (width &lt; 1) return;
02451 
02452 	rows = Math.ceil(this.clipRegion.height / height);
02453 	cols = Math.ceil(this.clipRegion.width / width);
02454 
02455 	if (repeat == 'no-repeat')
02456 	{
02457 		height = this.clipRegion.height;
02458 		width = this.clipRegion.width;
02459 		yscale = height / obj.height;
02460 		xscale = width / obj.width;
02461 		scale = Math.max(xscale,yscale);
02462 		height = Math.ceil(obj.height * scale);
02463 		width = Math.ceil(obj.width * scale);
02464 		rows = 1;
02465 		cols = 1;
02466 	}
02467 		
02468 	dx = 0;
02469 	dy = 0;
02470 
02471 	list = position.split(' ');
02472 	if (list.length >= 2)
02473 	{
02474 		a = list[0];
02475 		b = list[1];
02476 		
02477 //---------- xpos ----------------
02478 		switch (a)
02479 		{
02480 		case "top": break;
02481 		case "center": dx = (this.clipRegion.width - width) / 2; 
02482 				  break;
02483 		case "right": dx = this.clipRegion.width - width; 
02484 				  break;
02485 		default: if (a.length == 0) break;
02486 				  dx = parseInt(a);
02487 				  temp = a.substr(a.length-1);
02488 				  if (temp == '%') dx = (this.clipRegion.width * (dx / 100));
02489 				  break;
02490 		}
02491  
02492 //---------- ypos ----------------
02493 		switch (b)
02494 		{
02495 		case "top": break;
02496 		case "center": dy = (this.clipRegion.height - height) / 2; 
02497 				  break;
02498 		case "right":  dy = this.clipRegion.height - height; 
02499 				  break;
02500 		default: if (b.length == 0) break;
02501 				 dy = parseInt(b);
02502 				 temp = b.substr(b.length-1);
02503 				 if (temp == '%') dy = (this.clipRegion.height * (dy / 100));
02504 				 break;
02505 		}
02506 	}
02507 
02508 	if (( (dx != 0) || (dy != 0)) && (repeat != 'no-repeat'))
02509 	{
02510 	  switch (repeat)
02511 	  {
02512 	  case "repeat-x":
02513 			while (dx > 0) 
02514 			{ 
02515 				dx = dx - width; 
02516 			}
02517 			cols = Math.ceil((this.clipRegion.width - dx) / width);
02518 			break;
02519 	  case "repeat-y":
02520 			while (dy > 0) 
02521 			{
02522 				dy = dy - height;
02523 			}
02524 			rows = Math.ceil((this.clipRegion.height - dy) / height);
02525 			break;
02526 	  default:
02527 			while (dy > 0) 
02528 			{
02529 				dy = dy - height;
02530 			}
02531 			while (dx > 0) 
02532 			{
02533 				 dx = dx - width;
02534 			}
02535 			rows = Math.ceil((this.clipRegion.height - dy) / height);
02536 			cols = Math.ceil((this.clipRegion.width - dx) / width);
02537 			break;
02538 		}
02539 	}
02540  
02541 	h = height / 72;
02542 	w = width / 72;
02543 
02544 	this.catalog.activePage.add(this.clipText_());
02545 	
02546 	ypos = (this.clipRegion.y1 - height) + dy;
02547 	xmin = xmin + dx;
02548 	
02549 	for (r = 0; r &lt; rows; ++r)
02550 	{
02551 		if ((repeat == 'repeat-x') && (r > 0)) break;
02552 		ypos = ypos + height;
02553 		xpos = xmin - width;
02554 		for (c = 0; c &lt; cols; ++c)
02555 		{
02556 			if ((repeat == 'repeat-y') && (c > 0)) break;
02557 
02558 			xpos = xpos + width;
02559 			x = (xpos - this.xmin) / 72;
02560 			y = (ypos - this.ymin) / 72;
02561 			this.catalog.activePage.addImage(x,y,h,w,0,index);			
02562 			this.setClipRegion();
02563 			if (repeat == 'no-repeat') break;
02564 		}
02565 
02566 		if (repeat == 'no-repeat') break;
02567 	}
02568 
02569 	this.catalog.activePage.add("Q\n");
02570 
02571 	this.setClipRegion();
02572 }
02573 //===================================================================================
02574 //			pdf$setClipRegion
02575 //===================================================================================
02576 function pdf$setClipRegion(x1,y1,x2,y2)
02577 {
02578 	var t,p1,p2;
02579 
02580 	if (arguments.length != 4)
02581 	{
02582 		this.clipRegion = null;
02583 		return;
02584 	}
02585 	
02586 	t = this;
02587 
02588 	p1 = this.toPoint_(x1,y1);
02589 	p2 = this.toPoint_(x2,y2);
02590 	
02591 	this.clipRegion = new Object();
02592 	this.clipRegion.x1 = Math.round(p1.x);
02593 	this.clipRegion.y1 = Math.round(p1.y);
02594 	this.clipRegion.x2 = Math.round(p2.x);
02595 	this.clipRegion.y2 = Math.round(p2.y);
02596 
02597 	this.clipRegion.width = this.clipRegion.x2 - this.clipRegion.x1;
02598 	this.clipRegion.height = this.clipRegion.y2 - this.clipRegion.y1;
02599 }
02600 //===================================================================================
02601 //			pdf$clipText_
02602 //===================================================================================
02603 function pdf$clipText_()
02604 {
02605 	var y;
02606 	var text;
02607 
02608 	if (this.clipRegion == null) return '';
02609 
02610 	y = this.ymax - (this.clipRegion.y2 - this.ymin);	
02611 	
02612 	text = "q\n";
02613 	text = text + this.clipRegion.x1 + ' ' + y + ' ' + this.clipRegion.width + ' ' + this.clipRegion.height + " re W n\n";
02614 	return text;
02615 }
02616 //===================================================================================
02617 //			pdf$drawMargin_
02618 //===================================================================================
02619 function pdf$drawMargin_()
02620 {
02621 	var x1,y1,x2,y2;
02622 
02623 	x1 = this.xmin;
02624 	y1 = this.ymin;
02625 	x2 = this.xmax;
02626 	y2 = this.ymax;
02627 
02628 	this.setGraphicLineStyle('dash');
02629 	this.setGraphicLineWeight(1);
02630 	this.setGraphicColor('silver');
02631 	this.setGraphicFillColor('');
02632 	this.plot.rectangle(x1,y1,x2,y2);
02633 
02634 }
02635 //===================================================================================
02636 //			pdf$textSplit
02637 //===================================================================================
02638 function pdf$textSplit(text,maxwidth)
02639 {
02640 	var lines,i,list;
02641 
02642 	lines = new Array();
02643 	list = text.split("\r\n");
02644 
02645 	for (i=0; i &lt; list.length; ++i)
02646 	{
02647 		this.textSplit_A(list[i],maxwidth,lines);
02648 	}
02649 
02650 	return lines;
02651 }
02652 //===================================================================================
02653 //			pdf$textWidth
02654 //===================================================================================
02655 function pdf$textWidth(text)
02656 {
02657 	var i,size,c;
02658 
02659 	size = 0;
02660 	for (i=0; i &lt; text.length; ++i)
02661 	{
02662 		c = text.charCodeAt(i);
02663 		size += this.charWidth(c);		
02664 	}
02665 	
02666 	return size;
02667 }
02668 //===================================================================================
02669 //			pdf$textSplit_A
02670 //===================================================================================
02671 function pdf$textSplit_A(text,maxwidth,lines)
02672 {
02673 	var i,size,c;
02674 	var wordLength,wordWidth,width,line,j;
02675 
02676 	size = 0;	
02677 	wordLength = 0;
02678 	wordWidth = 0;
02679 
02680 	text = this.trim(text);
02681 
02682 	for (i = 0; i &lt; text.length; ++i)
02683 	{
02684 		c = text.charCodeAt(i);
02685 		width = this.charWidth(c);		
02686 		if ((size + width) > maxwidth)
02687 		{
02688 			if (wordLength > 0) 
02689 			{
02690 				line = new Object();
02691 				line.width = wordWidth;
02692 				line.text = text.substr(0,wordLength);
02693 				lines[lines.length] = line;
02694 				this.textSplit_A(text.substr(wordLength-1),maxwidth,lines);
02695 				return;
02696 			}
02697 			else
02698 			{
02699 				j = i-1;
02700 				if (j &lt; 0) j = 0;
02701 				line = new Object();
02702 				line.width = wordWidth;
02703 				line.text = text.substr(0,j+1);
02704 				lines[lines.length] = line;
02705 				this.textSplit_A(text.substr(j+1),maxwidth,lines);
02706 				return;
02707 			}
02708 		}
02709 
02710 		size += width;
02711 		if ((i == 0) || this.charVisible(c)) continue;
02712 		wordLength = i + 1;
02713 		wordWidth  = size - width;
02714 	}
02715 
02716 		line = new Object();
02717 		line.width = size;
02718 		line.text = text;
02719 		lines[lines.length] = line;
02720 }
02721 //===================================================================================
02722 //			pdf$setColumns
02723 //===================================================================================
02724 function pdf$setColumns(columns,gutterSize,align)
02725 {
02726 	this.flushColumns_();
02727 	this.columns = parseInt(columns);
02728 	if (this.columns &lt;= 1) this.columns = 1;
02729 	if (this.columns > 40) this.columns = 1;
02730 	this.gutterSize = 0.0;
02731 	this.columnAlign = 'left';
02732 
02733 }
02734 //===================================================================================
02735 //			pdf$setMargins
02736 //===================================================================================
02737 function pdf$setMargins(margins)
02738 {	
02739 	var a,text,l,r,t,b;
02740 
02741 	text = this.trim(margins);
02742 
02743 	l = 0;
02744 	r = 0;
02745 	t = 0;
02746 	b = 0;
02747 
02748 	text = text.replace(/\,/g,' ');
02749 	a = text.split(' ');
02750 	l = parseFloat(a[0]); if (isNaN(l)) l = 0;
02751 
02752 	if (a.length == 1) return this.setMargin(l,l,l,l);
02753 
02754 	r = parseFloat(a[1]); if (isNaN(r)) r = 0;
02755 	if (a.length == 2) return this.setMargin(l,l,r,r);
02756 
02757 	t = parseFloat(a[2]); if (isNaN(t)) t = 0;
02758 	if (a.length == 3) return this.setMargin(l,r,t,t);
02759 
02760 	b = parseFloat(a[3]); if (isNaN(b)) b = 0;
02761 	this.setMargin(l,r,t,b);
02762 }
02763 //===================================================================================
02764 //			pdf$setMargin
02765 //===================================================================================
02766 function pdf$setMargin(left,right,top,bottom)
02767 {	
02768 	if (arguments.length == 0)
02769 	{
02770 		 this.setMarginLeft(0);
02771 		 this.setMarginRight(0);
02772 		 this.setMarginTop(0);
02773 		 this.setMarginBottom(0);
02774 		 return;
02775 	}
02776 
02777 	if (arguments.length == 1)
02778 	{
02779 		 left = parseFloat(left);
02780 		 if (isNaN(left)) left = 0;
02781 		 this.setMarginLeft(left);
02782 		 this.setMarginRight(left);
02783 		 this.setMarginTop(left);
02784 		 this.setMarginBottom(left);
02785 		return;
02786 	}
02787 
02788 	if (! isNaN(left)) this.setMarginLeft(left);
02789 	if (! isNaN(right)) this.setMarginRight(right);
02790 	if (! isNaN(top)) this.setMarginTop(top);
02791 	if (! isNaN(bottom)) this.setMarginBottom(bottom);
02792 }
02793 //===================================================================================
02794 //			copyArray_
02795 //===================================================================================
02796 function pdf$copyArray_(a,low,high)
02797 {
02798 	var b,i;
02799 
02800 	b = new Array();
02801 	if (a == null) return b;
02802 
02803 	if (typeof(low) != 'number') low = 0;
02804 	if (typeof(high) != 'number') high = a.length-1;
02805 	if (low &lt; 0) low = 0;
02806 	if (high > a.length-1) high = a.length-1;
02807 
02808 	for (i=low; i &lt;= high; ++i)
02809 	{
02810 		 b[b.length] = a[i];
02811 	}
02812 	return b;	
02813 }
02814 //=================================================================
02815 //			pdf$headerSize_
02816 //=================================================================
02817 function pdf$headerSize_()
02818 {
02819 	var i,size;
02820 	
02821 	size = 0;
02822 	for (i = this.report.firstBeginGroup; i &lt; this.groups.length; ++i)
02823 	{
02824 		size = size + this.groups[i].headerSize;
02825 	}
02826 	return size;
02827 }
02828 //=================================================================
02829 //			pdf$footerSize_
02830 //=================================================================
02831 function pdf$footerSize_()
02832 {
02833 	var i,size;
02834 
02835 	size = 0;	
02836 	for (i = this.report.firstEndGroup; i &lt; this.groups.length; ++i)
02837 		size = size + this.groups[i].footerSize;
02838 
02839 	return size;
02840 	
02841 }
02842 //=================================================================
02843 //			pdf$reportKeepTogether_
02844 //=================================================================
02845 function pdf$reportKeepTogether_(columns,maxLines)
02846 {
02847 	var row,rows,n;
02848 	
02849 	n = this.report.firstBeginGroup - 1;
02850 
02851 	row = new Object();
02852 	row.columns		= columns;
02853 	row.maxLines		= maxLines;
02854 	row.keys		= this.copyArray_(this.report.keys);
02855 	row.urls		= this.copyArray_(this.report.urls);
02856 	row.firstBeginGroup	= this.report.firstBeginGroup;
02857 	row.firstEndGroup	= this.report.firstEndGroup;
02858 	row.keepTogether	= this.report.keepTogether_row;
02859 	row.size		= this.headerSize_() + this.footerSize_() + (maxLines * this.charHeight());
02860 	row.next		= null;
02861 	row.index		= this.report.records;
02862 	row.pageBreakBefore	= this.report.pageBreakBefore;
02863 	row.pageBreakAfter	= false;
02864 	row.keyIndex		= n;
02865 	
02866 	this.report.records	= this.report.records + 1;
02867 
02868 	rows = this.reportKeepTogether_A(row);
02869 	return rows;
02870 }
02871 //=================================================================
02872 //			pdf$reportKeepTogether_A
02873 //=================================================================
02874 function pdf$reportKeepTogether_A(row)
02875 {
02876 	var n,t,a,b,i,hsize,r;
02877 
02878 //------------- no need to buffer rows ---------
02879 
02880 	if (! this.report.keepTogether)
02881 	{
02882 		n = this.linesRemaining();
02883 		if ( ((this.ypos - row.size) &lt; this.ymin) && (this.line > 1)) this.pageBreak();
02884 		a = new Array();
02885 		a[0] = row;
02886 		return a;
02887 	}
02888 
02889 //------------  Pagebreak Before -------------
02890 
02891 	if (row.pageBreakBefore && (this.report.stack.length > 0))
02892 	{
02893 		a = this.report.stack;
02894 		this.report.stack = new Array();
02895 		this.report.stack[0] = row;
02896 		this.report.detailSize = row.size;
02897 		a[a.length-1].pageBreakAfter = true;
02898 		return a;			
02899 	}
02900 	
02901 //------------ Buffer Row  ---------
02902 
02903 	hsize = this.report.hsize;
02904 	if ( (this.ypos - (this.report.detailSize + row.size + hsize) ) >= this.ymin)
02905 	{
02906 		n = this.report.stack.length;
02907 		this.report.stack[n] = row;
02908 		this.report.detailSize = this.report.detailSize + row.size;
02909 		return null;
02910 	}
02911 
02912 //------------ Determine Page Break Location -----------
02913 
02914 	this.report.firstBeginGroup = 0;
02915 	if (this.report.stack.length == 0)
02916 	{
02917 		if (this.line > 1) this.pageBreak();
02918 		a = new Array();
02919 		a[0] = row;
02920 		return a;
02921 	}
02922 
02923 //---- find break ------
02924 
02925 	for (i = this.report.stack.length-1; i >= 0; --i)
02926 	{
02927 		r = this.report.stack[i];
02928 		a = r.keys[row.keyIndex];
02929 		b = row.keys[row.keyIndex];
02930 		if (a != b) break;
02931 	}
02932 
02933 	if (i &lt; 0)
02934 	{
02935 		a = this.report.stack;
02936 		this.report.stack = new Array();
02937 		this.report.stack[0] = row;
02938 		this.report.detailSize = row.size;
02939 		a[a.length-1].pageBreakAfter = true;
02940 		return a;
02941 	}
02942 
02943 //------- none found ------
02944 
02945 	if (i == (this.report.stack.length-1))
02946 	{
02947 		if (this.line > 1) 
02948 		{
02949 
02950 			this.pageBreak();		// page break and try again
02951 			a = this.reportKeepTogether_A(row);
02952 			return a;
02953 		}		
02954 
02955 		a = this.report.stack;
02956 		this.report.stack = new Array();
02957 		this.report.stack[0] = row;
02958 		this.report.detailSize = row.size;
02959 		a[a.length-1].pageBreakAfter = true;
02960 		return a;
02961 	}
02962 
02963 //---------- found ---------
02964 
02965 	a = this.copyArray_(this.report.stack,0,i);
02966 	this.report.stack = this.copyArray_(this.report.stack,i+1,this.report.stack.length-1);
02967 	this.report.stack[this.report.stack.length] = row;
02968 	
02969 	this.report.detailSize = 0;
02970 	for (i=0; i &lt; this.report.stack.length; ++i)
02971 		this.report.detailSize = this.report.detailSize + this.report.stack[i].size;
02972 
02973 	a[a.length-1].pageBreakAfter = true;
02974 	return a;
02975 }
02976 //=================================================================
02977 //			pdf$reportInit
02978 //=================================================================
02979 function pdf$reportInit()
02980 {
02981 	var i,g;
02982 	
02983 	for (i=0; i &lt; this.groups.length; ++i)
02984 	{
02985 		g = this.groups[i];
02986 	}
02987 	
02988 	this.groups = new Array();
02989 
02990 }
02991 //=================================================================
02992 //			pdf$reportCreateGroup
02993 //=================================================================
02994 function pdf$reportCreateGroup(headerLines,footerLines,onGroupHeader,onGroupFooter,keepTogether,skipIfBlank,pageBreakBefore,pageBreakAfter)
02995 {
02996 	var obj;
02997 	
02998 	obj = new Object();
02999 
03000 	obj.onGroupHeader	= onGroupHeader;
03001 	obj.onGroupFooter	= onGroupFooter;
03002 
03003 	obj.keepTogether	= keepTogether;
03004 	obj.skipIfBlank		= skipIfBlank;
03005 	obj.pageBreakBefore	= pageBreakBefore;
03006 	obj.pageBreakAfter	= pageBreakAfter;
03007 
03008 	obj.headerSize		= parseFloat(headerLines) * this.charHeight();
03009 	obj.footerSize		= parseFloat(footerLines) * this.charHeight();
03010 	
03011 	obj.sizeDetail		= 0;
03012 
03013 	obj.index		= this.groups.length;
03014 	obj.value		= "&lt;?&lt;&lt;not defined>>?>";
03015 	obj.rowCount		= 0;
03016 	
03017 	this.groups[this.groups.length] = obj;	
03018 	if (keepTogether) this.report.keepTogether = true;
03019 }
03020 //=================================================================
03021 //			pdf$reportEnd_
03022 //=================================================================
03023 function pdf$reportEnd_()
03024 {
03025 
03026 	var i,a;
03027 
03028 	this.report.detailSize = 0;
03029 	this.report.hsize = 0;
03030 	if (this.ruler == null) return;
03031 
03032 	this.ruler.flush_(this.report.stack);
03033 	this.report.stack = new Array();
03034 
03035 	a = new Array();
03036 
03037 	for (i=this.groups.length-1; i >= 0; i--)
03038 	{
03039 		a[0] = this.groups[i].value;
03040 		this.reportEndGroup_(this.groups[i],a);
03041 	}
03042 
03043 }
03044 //=================================================================
03045 //			pdf$reportGroupKeys_
03046 //=================================================================
03047 function pdf$reportGroupKeys_(keys)
03048 {
03049 	var i,j;
03050 
03051 	this.report.keys = keys;
03052 	this.report.firstEndGroup	= this.groups.length;
03053 	this.report.firstBeginGroup	= 0;
03054 	this.report.pageBreakBefore	= false;
03055 	this.report.keepTogether_row	= false;
03056 
03057 	if (this.report.firstRow) 
03058 	{
03059 		this.report.firstRow = false;
03060 	}
03061 	else
03062 	{
03063 		for (i=0; i &lt; this.groups.length; ++i) 
03064 		{
03065 			if (this.groups[i].value != keys[i]) break;
03066 			this.report.firstBeginGroup = i;
03067 			this.report.firstEndGroup = i;
03068 		}
03069 	}
03070 
03071 	for (i=this.report.firstBeginGroup; i &lt; this.groups.length; ++i)
03072 	{
03073 		if (this.groups[i].pageBreakBefore) this.report.pageBreakBefore = true;
03074 		if (this.groups[i].keepTogether) this.report.keepTogether_row = true;
03075 	}
03076 
03077 	for (i=0; i &lt; this.groups.length; ++i) 
03078 	{
03079 		this.groups[i].value = keys[i];
03080 	}
03081 
03082 //	if (this.groups[0].rowCount > 0) return;
03083 
03084 	this.report.hsize = 0;
03085 
03086 	for (i=0; i &lt; this.groups.length; ++i) 
03087 	{
03088 		this.report.hsize += this.groups[i].headerSize;
03089 	}
03090 //	this.report.hsize = 55;
03091 }
03092 //=================================================================
03093 //			pdf$setReportGroup_
03094 //=================================================================
03095 function pdf$setReportGroup_(row)
03096 {
03097 	var i,j;
03098 
03099 	if (this.groups.length == 0) return;
03100 
03101 	if (row.index > 0)
03102 	{
03103 		for (j = this.groups.length-1; j >= row.firstEndGroup; --j) 
03104 		{
03105 			this.reportEndGroup_(this.groups[j],row.keys);
03106 		}
03107 		for (j=0; j &lt; row.firstBeginGroup; ++j) 
03108 		{
03109 			this.groups[j].rowCount = this.groups[j].rowCount + 1;
03110 		}
03111 		if (row.firstBeginGroup >= this.groups.length) return;
03112 	}
03113 
03114 	for (j=row.firstBeginGroup; j &lt; this.groups.length; ++j)
03115 	{
03116 		this.groups[j].rowCount = 0;
03117 		this.reportBeginGroup_(this.groups[j], row.keys,false);
03118 	}
03119 }
03120 //==========================================================================================
03121 //				pdf$reportEndGroup
03122 //==========================================================================================
03123 function pdf$reportEndGroup_(group,keys)
03124 {
03125 	var cont;
03126 
03127 	this.ruler.end();
03128 
03129 	if (group.skipIfBlank && (group.rowCount == 0)) return;
03130 
03131 	if (group.rowCount == 0)
03132 	{
03133 		cont = false;
03134 		if (group.onGroupHeader)  group.onGroupHeader(this,group.index,keys,0,cont);
03135 		group.rowCount = 0;
03136 	}
03137 
03138 	if (group.onGroupFooter) group.onGroupFooter(this,group.index,keys,group.rowCount);
03139 
03140 	if (group.pageBreakAfter) this.pageBreak();
03141 
03142 	group.rowCount	= 0;
03143 	group.data	= '';
03144 }
03145 //==========================================================================================
03146 //				pdf$reportHeader_
03147 //==========================================================================================
03148 function pdf$reportHeader_(row)
03149 {
03150 	var i;
03151 
03152 	if (this.line > 1) return;
03153 
03154 	for (i=0; i &lt; row.firstBeginGroup; ++i)
03155 		this.reportBeginGroup_(this.groups[i],row.keys,true);
03156 }
03157 //==========================================================================================
03158 //				pdf$reportBeginGroup
03159 //==========================================================================================
03160 function pdf$reportBeginGroup_(group,keys,cont)
03161 {
03162 
03163 	this.ruler.end();
03164 	if (group.pageBreakBefore) this.pageBreak();
03165 	if (group.onGroupHeader)  group.onGroupHeader(this,group.index,keys,group.rowCount,cont);
03166 	group.rowCount = group.rowCount + 1;
03167 
03168 }
03169 //==========================================================================================
03170 //				pdf$setRuler
03171 //==========================================================================================
03172 function pdf$setRuler(ruler,borderWidth)
03173 {
03174 	var width;
03175 	
03176 	if (this.ruler != null) this.ruler.end();	//
03177 
03178 	width = 0;
03179 	if (arguments.length > 1) width = parseFloat(borderWidth);
03180 	if (isNaN(width)) width = 0;
03181 	
03182 	this.ruler = new pdfRuler$(this,ruler,width,this.tabCharacter,0);
03183 }
03184 //==========================================================================================
03185 //				pdf$reportColumns
03186 //==========================================================================================
03187 function pdf$reportColumns(columnSpec,leftMargin,borderWidth)
03188 {
03189 	var ruler,width,left;
03190 
03191 	if (this.ruler != null) this.ruler.end();	//
03192 
03193 	width = 0;
03194 	if (arguments.length > 2) width = parseFloat(borderWidth);
03195 	if (isNaN(width)) width = 0;
03196 
03197 	left = 0;
03198 	if (arguments.length > 1) left = parseFloat(leftMargin);
03199 	if (isNaN(left)) left = 0;
03200 		
03201 	this.ruler = new pdfRuler$(this,columnSpec,width,this.tabCharacter,left);
03202 }
03203 //==========================================================================================
03204 //				pdf$setRulerAlign
03205 //==========================================================================================
03206 function pdf$setRulerAlign(valign)
03207 {	
03208 	if (this.ruler == null) return;
03209 	this.ruler.setValign(valign);
03210 }
03211 //==========================================================================================
03212 //				pdf$setBorderWidth
03213 //==========================================================================================
03214 function pdf$setBorderWidth(width)
03215 {
03216 	if (this.ruler == null) return;
03217 	this.ruler.borderWidth = parseFloat(width);
03218 }
03219 //==========================================================================================
03220 //				pdf$linesRemaining
03221 //==========================================================================================
03222 function pdf$linesRemaining()
03223 {
03224 	var n,dy;
03225 	
03226 	dy = this.ypos - this.ymin;
03227 	if (dy &lt;= 0) return 0;
03228 	
03229 	n = Math.floor(dy / this.charHeight());
03230 	return n;
03231 }
03232 //==========================================================================================
03233 //				pdf$setHeader_
03234 //==========================================================================================
03235 function pdf$setHeader_()
03236 {
03237 
03238 	this.margin		= true;
03239 
03240 	this.xmin		= 0;		// left margin
03241 	this.xmax		= this.pageWidth * 72;	// bottom Margin
03242 
03243 	this.ymax		= this.pageLength * 72;	// top margin;
03244 	this.ymin		= this.ymax - this.marginTop;			// Top Margin
03245 
03246 	this.xpos		= this.xmin;
03247 	this.ypos		= this.ymax;
03248 
03249 	this.line		= 1;
03250 }
03251 //==========================================================================================
03252 //				pdf$setFooter_
03253 //==========================================================================================
03254 function pdf$setFooter_()
03255 {
03256 
03257 	this.margin	= true;
03258 
03259 	this.xmin	= 0;		// left margin
03260 	this.xmax	= this.pageWidth * 72;	// bottom Margin
03261 
03262 	this.ymax	= this.marginBottom;
03263 	this.ymin	= 0;
03264 
03265 	this.xpos	= this.xmin;
03266 	this.ypos	= this.ymax;
03267 
03268 	this.line	= 1;
03269 }
03270 //==========================================================================================
03271 //			pdf$setFontName
03272 //==========================================================================================
03273 function pdf$setFontName(name,widths)
03274 {
03275 	var i;
03276 	
03277 	this.setFontName_A(name);	
03278 	this.fontName = this.font.id;
03279 
03280 	if (arguments.length &lt; 2) return;
03281 	for (i=0; i &lt; widths.length; ++i)
03282 	{
03283 		widths[i] = this.font.font_widths[i];
03284 	}
03285 }
03286 //==========================================================================================
03287 //			pdf$setFontName_A
03288 //==========================================================================================
03289 function pdf$setFontName_A(name)
03290 {
03291 	var i,fname,list,encoding,id,uname,value,ename,index,mode;
03292 
03293 	name = '' + name;
03294 	
03295 
03296 	mode = this.fontMode_();
03297 	list = name.split(',');
03298 	name = trim(list[0]);
03299 
03300 	if (name == '') name = this.default_fontName;
03301 	name = name.toLowerCase();
03302 
03303 	if (name == 'arial') name = 'helvetica';
03304 	if (name ==     'h') name = 'helvetica';
03305 	if (name ==     't') name = 'times';
03306 	if (name ==     'c') name = 'courier';
03307 	if (name ==     'z') name = 'zapfdingbats';
03308 	if (name ==     's') name = 'symbol';
03309 	if ((name == 'dingbat') || (name == 'dingbats')) name = 'zapfdingbats';
03310 
03311 	encoding = '';
03312 	if (list.length > 1)
03313 	{
03314 		value = list[1];
03315 		encoding = value.toLowerCase();
03316 	}
03317 	
03318 	if ((name == 'zapfdingbats') || (name == 'symbol'))
03319 	{
03320 		mode     = '';
03321 		encoding = '';	
03322 	}
03323 
03324 	id = name + ',' + encoding;
03325 	if (this.font && this.font.id == id && this.font.mode == mode) return;
03326 
03327 //--------------------------------- find existing font --------------------------------------------
03328 
03329 	for (i = 0; i &lt; this.fonts.length; ++i)
03330 	{
03331 		if (! ((this.fonts[i].id == id) && (this.fonts[i].mode == mode))) continue;
03332 		this.font = this.fonts[i];
03333 		return;
03334 	}
03335 
03336 	if ((name == 'helvetica') || (name == 'times') || (name == 'courier') || (name == 'zapfdingbats') || (name == 'symbol'))
03337 	{
03338 		index = this.fonts.length;		
03339 		this.fonts[index] = new pdfFont$(index,name,mode,encoding);
03340 		this.font = this.fonts[index];
03341 		return;
03342 	}
03343 
03344 
03345 //------------------------------- known encodings ----------------------------------------------------
03346 
03347 	if (arguments.length > 1) return;			// infinite loop, ignore;
03348 
03349 	uname = encoding.toUpperCase() + ',';	
03350 
03351 	for (i=0; i &lt; this.encodings.length; ++i)
03352 	{	
03353 		ename = this.encodings[i]; 
03354 		if (uname == ename.substr(0,uname.length).toUpperCase()) 
03355 		{
03356 			this.font = this.makeFontCID(name,this.encodings[i],mode);
03357 			return;
03358 		}
03359 	}		
03360 
03361 //---------------------------------- External Fonts --------------------------------------------------
03362 
03363 	list = name.split('.');
03364 
03365 	if ((list[1] == 'ttf') || (name.indexOf('_ttfx.txt') >= 0) || (name.indexOf('_ttf8.txt') >= 0))
03366 	{
03367 	//	this.font = this.makeFontTruetype(list[0],encoding);
03368 	//    this.fontName = this.font.id;
03369 	//	return;
03370 	}		
03371 
03372 	if (list[list.length-1] == 'pfb')
03373 	{
03374 
03375 		if (! this.sys.fileExists(name))
03376 		{
03377 			log('Font does not exist: ' + name);
03378 			return;
03379 		}
03380 		else
03381 		{
03382 			if (this.sys.isServer)
03383 			{
03384 				this.font = this.makeFontType1(name,encoding,mode);
03385 				return;
03386 			}
03387 			log('Cannot load Type1 Font on Client: ' + name);
03388 //			return;
03389 		}
03390 	}		
03391 
03392 //----------------- not found (mode) --------------------------	
03393 
03394 	this.setFontName_A('helvetica',1)
03395 	return;
03396 }
03397 //==========================================================================================
03398 //			pdf$makeFontClone
03399 //==========================================================================================
03400 function pdf$makeFontClone(font,encoding,mode)
03401 {
03402 	var clone,i,index,filename,name,fname;
03403 	
03404 
03405 	name = font.name;
03406 	i = name.lastIndexOf('.');
03407 	name = name.substr(0,i);
03408 
03409 	fname = name + mode + '.pfb';
03410 	filename = CollinsPDF().clientPath + fname;
03411 
03412 	if (this.sys.fileExists(filename))
03413 	{
03414 		font = this.makeFontType1(fname,encoding,mode);
03415 		return font;
03416 	}
03417 
03418 	index = this.fonts.length;
03419 	
03420 	clone = new pdfFont$(index,font.name,mode,encoding);
03421 	this.fonts[index] = clone;
03422 
03423 	clone.id	= font.id;
03424 	clone.type	= font.type;
03425 	clone.file	= font.file;
03426 	clone.encoding	= font.encoding;
03427 	clone.mapping	= font.mapping;
03428 	clone.mode	= mode;
03429 
03430 	for (i=0; i &lt; font.font_widths.length; ++i)
03431 	{
03432 	  clone.font_widths[i] = font.font_widths[i];
03433 	}	
03434 
03435 	clone.template_font = font.template_font;
03436 	clone.template_descendantFont = font.template_descendantFont;
03437 	clone.template_fontDescriptor = font.template_fontDescriptor;
03438 	
03439 	return clone;
03440 	
03441 }
03442 //==========================================================================================
03443 //				pdf$makeFontCID
03444 //==========================================================================================
03445 function pdf$makeFontCID(fontname,encodingDefinition,mode)
03446 {
03447 	var index,font,base,text,order,supplement;
03448 	var list,value,i,encoding,name;
03449 	var basefont,registry,ordering,supplement;
03450 	
03451 	index = this.fonts.length;	
03452 
03453 	list = encodingDefinition.split(',');
03454 	encoding = list[0];
03455 	value = this.trim(list[1]);
03456 	list = value.split('-');
03457 	
03458 	basefont = this.encodingFonts[0];
03459 	for (i=0; i &lt; this.encodingFonts.length; ++i)
03460 	{
03461 	  name = this.encodingFonts[i];	
03462 	  if (name.toLowerCase() == fontname.toLowerCase()) basefont = this.encodingFonts[i];
03463 	}
03464 		
03465 	registry   = list[0];
03466 	ordering   = list[1];
03467 	supplement = list[2];
03468 
03469 	font = new pdfFont$(index,fontname,mode,encoding);
03470 	font.type = 'cid';
03471 	font.file = null;
03472 
03473 	this.fonts[index] = font;
03474 
03475 	for (i=0; i &lt; font.font_widths.length; ++i)
03476 	{	
03477 	  font.font_widths[i] = 500;
03478 	}	
03479 
03480 	text = '';	
03481 	text += '&lt;&lt;' + "\n";
03482 	text += '/Type /Font' + "\n";
03483 	text += '/BaseFont /' + basefont + '{mode}' + "\n";
03484 	text += '/Subtype /Type0' + "\n";
03485 	text += '/Encoding /' + font.encoding + "\n";
03486 	text += '/DescendantFonts [ {ref} 0 R ]' + "\n";
03487 	text += '>>';
03488 
03489 	font.template_font = text;
03490 
03491 	text = '';	
03492 	text += '&lt;&lt;' + "\n";
03493 	text += '/Type /Font' + "\n";
03494 	text += '/Subtype /CIDFontType0' + "\n";
03495 	text += '/DW 1000' + "\n";
03496 	text += '/W [ 1 [ 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 ] 231 [ 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 ] 327 [ 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 ] 631 [ 500 ] ]' + "\n";
03497 	text += '/DW2 [ 880 -1000 ]' + "\n";
03498 	text += '/BaseFont /' + basefont + '{mode}' + "\n";
03499 	text += '/FontDescriptor {ref} 0 R' + "\n";
03500 	text += '/CIDSystemInfo &lt;&lt;' + "\n";
03501 	text += '/Registry (' + registry + ')' + "\n";
03502 	text += '/Ordering (' + ordering + ')' + "\n";
03503 	text += '/Supplement ' + supplement + '' + "\n";
03504 	text += '>>' + "\n";
03505 	text += '>>';
03506 	
03507 	font.template_descendantFont = text;
03508 
03509 	text = '';
03510 	text += '&lt;&lt;' + "\n";
03511 	text += '/Type /FontDescriptor' + "\n";
03512 	text += '/FontName /' + basefont + '{mode}' + "\n";
03513 	text += '/Ascent 859' + "\n";
03514 	text += '/Descent -140' + "\n";
03515 	text += '/CapHeight 769' + "\n";
03516 	text += '/MissingWidth 500' + "\n";
03517 	text += '/Flags 7' + "\n";
03518 	text += '/FontBBox [ 0 -136 1000 859 ]' + "\n";
03519 	text += '/ItalicAngle 0' + "\n";
03520 	text += '/StemV 78' + "\n";
03521 	text += '>>';
03522 
03523 	font.template_fontDescriptor = text;
03524 
03525 	return font; 
03526 }
03527 //==========================================================================================
03528 //			pdf$makeFontTruetype
03529 //==========================================================================================
03530 function pdf$makeFontTruetype(name,encoding,mode)
03531 {
03532 	var base,i,j,index,filename,font,fst;
03533 	
03534 	index = this.fonts.length;	
03535 
03536 	filename = name;
03537 	i = filename.lastIndexOf('.');
03538 	filename = filename.substr(0,i) + mode + '.pfb';
03539 	
03540 	i = name.lastIndexOf('/');
03541 	j = name.lastIndexOf("\\");
03542 	if (j > i) i = j;
03543 	if (i > 0) name = name.substr(i+1);
03544 	if (name.toLowerCase().indexOf('.txt') > 0)
03545 	{
03546 		i = name.lastIndexOf('_');
03547 		if (i > 0) name = name.substr(0,i);
03548 		i = name.lastIndexOf('_');
03549 		if (i > 0) name = name.substr(0,i);
03550 	}
03551 
03552 	font = new pdfFont$(index,name,mode,encoding);
03553 	font.type = 'truetype';
03554 	font.file = this.findFontFile(font.type,filename);
03555 
03556 	this.fontfile = filename;
03557 	this.fonts[index] = font;
03558 	return font; 
03559 }
03560 //==========================================================================================
03561 //			pdf$makeFontType1
03562 //==========================================================================================
03563 function pdf$makeFontType1(name,encoding,mode)
03564 {
03565 	var base,i,j,index,font,filename,ext;
03566 		
03567 	filename = name;
03568 	
03569 	i = name.lastIndexOf('.');
03570 	if (i &lt; 0) i = name.length;
03571 	ext = name.substr(i).toLowerCase();
03572 	filename = name.substr(0,i) + mode + ext;
03573 
03574 	i = name.lastIndexOf('/');
03575 	j = name.lastIndexOf("\\");
03576 	if (j > i) i = j;
03577 	if (i > 0) name = name.substr(i+1);
03578 	if (ext == '.txt')
03579 	{
03580 		i = name.lastIndexOf('_');
03581 		if (i > 0) name = name.substr(0,i);
03582 		i = name.lastIndexOf('_');
03583 		if (i > 0) name = name.substr(0,i);
03584 	}
03585 
03586 	if (this.characterMap == null) this.characterMap = new pdfCharacterMap$(this,name);
03587 
03588 	this.characterMap.define(filename,mode);
03589 
03590 	fst = this.characterMap.firstChar;
03591 	this.characterMap.unicode_widths = this.characterMap.getWidths(encoding,fst);
03592 
03593 	index = this.fonts.length;
03594 	font = new pdfFont$(index,filename,mode,encoding);
03595 	font.type = 'type1';
03596 	font.file = this.findFontfile(font.type,filename);
03597 
03598 	font.font_widths   = this.characterMap.getWidths(encoding);
03599 	font.mapping	   = this.characterMap.getMapping(encoding);
03600 
03601 	font.template_font = this.characterMap.template_font(encoding);
03602 
03603 	font.template_fontDescriptor = this.characterMap.template_fontDescriptor(encoding);
03604 
03605 	index = this.fonts.length;	
03606 	this.fonts[index] = font;
03607 	return font; 
03608 }
03609 //==========================================================================================
03610 //			pdf$type1FontTemplate
03611 //==========================================================================================
03612 function pdf$type1FontTemplate(filename)
03613 {
03614 	var a,b,c,d,template,i,text,fmt,filter;
03615 	
03616 	fmt = '';
03617 	if (filename.toLowerCase().indexOf('_pfb8.txt') > 0) fmt = '/ASCII85Decode';
03618 	if (filename.toLowerCase().indexOf('_pfbx.txt') > 0) fmt = '/ASCIIHexDecode';
03619 	
03620 	if (fmt != '')
03621 	{
03622 		i = filename.lastIndexOf('_');
03623 		text = filename.substr(0,i);
03624 		text = text.toLowerCase();
03625 		i = text.lastIndexOf('_');
03626 		text = text.substr(i+1);				
03627 		list = text.split('x');
03628 		a = parseInt(list[0]);
03629 		b = parseInt(list[1]);
03630 		c = parseInt(list[2]);
03631 		d = parseInt(list[3]);
03632 		
03633 		filter = '/Filter ' + fmt;
03634 		
03635 		template = '';
03636 		template += '&lt;&lt; ' + filter;
03637 		template += ' /Length '  + d;
03638 		template += ' /Length1 ' + a;
03639 		template += ' /Length2 ' + b; 
03640 		template += ' /Length3 ' + c;
03641 		template += '>>';
03642 		return template;
03643 	}
03644 
03645 	template = this.sys.type1FontTemplate(filename);
03646 	return template;
03647 }
03648 //==========================================================================================
03649 //			pdf$findFontfile
03650 //==========================================================================================
03651 function pdf$findFontfile(type,filename)
03652 {
03653 	var index;
03654 	var fontfile,fmt;
03655 	var i,template;
03656 
03657 
03658 	for (i=0; i &lt; this.fontfiles.length; ++i)
03659 	{
03660 		fontfile = this.fontfiles[i];
03661 
03662 		if (type != fontfile.type) continue;
03663 		if (fontfile.filename == filename) return fontfile;	
03664 	}
03665 
03666 	template = this.type1FontTemplate(filename);
03667 
03668 	i = this.fontfiles.length;
03669 	fontfile		= new Object();
03670 	fontfile.filename	= filename;
03671 	fontfile.type		= type;
03672 	fontfile.template	= template;
03673 	fontfile.format		= '';
03674 	fontfile.ref		= 0;
03675 
03676 	this.fontfiles[i] = fontfile;
03677 	return fontfile;	
03678 }
03679 //==========================================================================================
03680 //			pdf$colorText_
03681 //==========================================================================================
03682 function pdf$colorText_(color)
03683 {
03684 	var text;
03685  
03686 	text = this.colorRGBText_(color) + ' rg % Color = ' + color + "\n";
03687 	return text; 
03688 	
03689 }
03690 //==========================================================================================
03691 //			pdf$colorRGBText_
03692 //==========================================================================================
03693 function pdf$colorRGBText_(color)
03694 {
03695 	var r,g,b,text;
03696 
03697 	r = (color / 65536) % 256;
03698 	r = r / 255;
03699 	r = Math.round(r * 100) / 100;
03700 
03701 	g = (color / 256) % 256;
03702 	g = g / 255;
03703 	g = Math.round(g * 100) / 100;
03704 
03705 	b = color % 256;
03706 	b = b / 255;
03707 	b = Math.round(b * 100) / 100;
03708  
03709 	text = r + ' ' + g + ' ' + b;
03710 	return text; 
03711 	
03712 }
03713 //==========================================================================================
03714 //			pdf$fontMode_
03715 //==========================================================================================
03716 function pdf$fontMode_()
03717 {
03718 	if (this.bold && (! this.italic)) return 'bold';
03719 	if ((! this.bold) && this.italic) return 'italic';
03720 	if (this.bold && this.italic) return 'bolditalic';
03721 	return ''; 
03722 }
03723 //==========================================================================================
03724 //			pdf$fontName_
03725 //==========================================================================================
03726 function pdf$fontName_()
03727 {
03728 	var n;
03729 
03730 	this.font = this.findFont_();
03731 	this.font.used = true;
03732 	return ('F' + this.font.index);
03733 }
03734 //==========================================================================================
03735 //			pdf$findFont_
03736 //==========================================================================================
03737 function pdf$findFont_()
03738 {
03739 	var i,font,mode;
03740 
03741 	mode = this.fontMode_();
03742 	if ((this.font.id == this.fontName) && (this.font.mode == mode)) return this.font;
03743 	
03744 	for (i=0; i &lt; this.fonts.length; ++i)
03745 	{
03746 		if ((this.fonts[i].id == this.fontName) && (this.fonts[i].mode == mode)) return this.fonts[i];
03747 	}
03748 
03749 	for (i=0; i &lt; this.fonts.length; ++i)
03750 	{
03751 		if (this.fonts[i].id == this.fontName) 
03752 		{
03753 		    font = this.makeFontClone(this.fonts[i],this.fonts[i].encoding,mode)
03754 			font.id = this.fontName;
03755 			return font;
03756 		}
03757 	}
03758 
03759 	return this.fonts[0];
03760 }
03761 //==========================================================================================
03762 //			pdf$setFontColor
03763 //==========================================================================================
03764 function pdf$setFontColor(value)
03765 {
03766 
03767     var obj = this.parseColor_(value);
03768     this.fontColor = obj.color;
03769     this.transparent = obj.opaque;
03770 }
03771 //==========================================================================================
03772 //			pdf$parseColor_
03773 //==========================================================================================
03774 function pdf$parseColor_(c)
03775 {
03776 	var color,i,name,colorNames,colorValues,lightValues,R,G,B,A;
03777 	var list,t,c, obj;
03778 	
03779 	colorNames = new Array('AliceBlue','AntiqueWhite','Aqua','Aquamarine','Azure','Beige','Bisque','Black','BlanchedAlmond',
03780 	'Blue','BlueViolet','Brown','BurlyWood','CadetBlue','Chartreuse','Chocolate','Coral','CornflowerBlue','Cornsilk','Crimson',
03781 	'Cyan','DarkBlue','DarkCyan','DarkGoldenRod','DarkGray','DarkGrey','DarkGreen','DarkKhaki','DarkMagenta','DarkOliveGreen',
03782 	'Darkorange','DarkOrchid','DarkRed','DarkSalmon','DarkSeaGreen','DarkSlateBlue','DarkSlateGray','DarkSlateGrey','DarkTurquoise',
03783 	'DarkViolet','DeepPink','DeepSkyBlue','DimGray','DimGrey','DodgerBlue','FireBrick','FloralWhite','ForestGreen','Fuchsia','Gainsboro',
03784 	'GhostWhite','Gold','GoldenRod','Gray','Grey','Green','GreenYellow','HoneyDew','HotPink','IndianRed ','Indigo ','Ivory','Khaki',
03785 	'Lavender','LavenderBlush','LawnGreen','LemonChiffon','LightBlue','LightCoral','LightCyan','LightGoldenRodYellow','LightGray',
03786 	'LightGrey','LightGreen','LightPink','LightSalmon','LightSeaGreen','LightSkyBlue','LightSlateGray','LightSlateGrey','LightSteelBlue',
03787 	'LightYellow','Lime','LimeGreen','Linen','Magenta','Maroon','MediumAquaMarine','MediumBlue','MediumOrchid','MediumPurple',
03788 	'MediumSeaGreen','MediumSlateBlue','MediumSpringGreen','MediumTurquoise','MediumVioletRed','MidnightBlue','MintCream','MistyRose',
03789 	'Moccasin','NavajoWhite','Navy','OldLace','Olive','OliveDrab','Orange','OrangeRed','Orchid','PaleGoldenRod','PaleGreen','PaleTurquoise',
03790 	'PaleVioletRed','PapayaWhip','PeachPuff','Peru','Pink','Plum','PowderBlue','Purple','Red','RosyBrown','RoyalBlue','SaddleBrown','Salmon',
03791 	'SandyBrown','SeaGreen','SeaShell','Sienna','Silver','SkyBlue','SlateBlue','SlateGray','SlateGrey','Snow','SpringGreen','SteelBlue','Tan',
03792 	'Teal','Thistle','Tomato','Turquoise','Violet','Wheat','White','WhiteSmoke','Yellow','YellowGreen');
03793 	
03794 	colorValues = new Array(0xF0F8FF,0xFAEBD7,0x00FFFF,0x7FFFD4,0xF0FFFF,0xF5F5DC,0xFFE4C4,0x000001,0xFFEBCD,0x0000FF,0x8A2BE2,0xA52A2A,
03795 	0xDEB887,0x5F9EA0,0x7FFF00,0xD2691E,0xFF7F50,0x6495ED,0xFFF8DC,0xDC143C,0x00FFFF,0x00008B,0x008B8B,0xB8860B,0xA9A9A9,0xA9A9A9,0x006400,
03796 	0xBDB76B,0x8B008B,0x556B2F,0xFF8C00,0x9932CC,0x8B0000,0xE9967A,0x8FBC8F,0x483D8B,0x2F4F4F,0x2F4F4F,0x00CED1,0x9400D3,0xFF1493,0x00BFFF,
03797 	0x696969,0x696969,0x1E90FF,0xB22222,0xFFFAF0,0x228B22,0xFF00FF,0xDCDCDC,0xF8F8FF,0xFFD700,0xDAA520,0x808080,0x808080,0x008000,0xADFF2F,
03798 	0xF0FFF0,0xFF69B4,0xCD5C5C,0x4B0082,0xFFFFF0,0xF0E68C,0xE6E6FA,0xFFF0F5,0x7CFC00,0xFFFACD,0xADD8E6,0xF08080,0xE0FFFF,0xFAFAD2,0xD3D3D3,
03799 	0xD3D3D3,0x90EE90,0xFFB6C1,0xFFA07A,0x20B2AA,0x87CEFA,0x778899,0x778899,0xB0C4DE,0xFFFFE0,0x00FF00,0x32CD32,0xFAF0E6,0xFF00FF,0x800000,
03800 	0x66CDAA,0x0000CD,0xBA55D3,0x9370D8,0x3CB371,0x7B68EE,0x00FA9A,0x48D1CC,0xC71585,0x191970,0xF5FFFA,0xFFE4E1,0xFFE4B5,0xFFDEAD,0x000080,
03801 	0xFDF5E6,0x808000,0x6B8E23,0xFFA500,0xFF4500,0xDA70D6,0xEEE8AA,0x98FB98,0xAFEEEE,0xD87093,0xFFEFD5,0xFFDAB9,0xCD853F,0xFFC0CB,0xDDA0DD,
03802 	0xB0E0E6,0x800080,0xFF0000,0xBC8F8F,0x4169E1,0x8B4513,0xFA8072,0xF4A460,0x2E8B57,0xFFF5EE,0xA0522D,0xC0C0C0,0x87CEEB,0x6A5ACD,0x708090,
03803 	0x708090,0xFFFAFA,0x00FF7F,0x4682B4,0xD2B48C,0x008080,0xD8BFD8,0xFF6347,0x40E0D0,0xEE82EE,0xF5DEB3,0xFFFFFF,0xF5F5F5,0xFFFF00,0x9ACD32);
03804 
03805 	lightValues = new Array(0xFAEBD7,0x7FFFD4,0xF5F5DC,0xFFE4C4,0xFFEBCD,
03806 	0x7FFF00,0xFFF8DC,
03807 	0xFFFAF0,0xDCDCDC,
03808 	0xDAA520,0xADFF2F,
03809 	0xF0FFF0,0xFF69B4,0xFFFFF0,0xF0E68C,0xE6E6FA,0xFFF0F5,0xFFFACD,0xADD8E6,0xE0FFFF,0xFAFAD2,
03810 	0x90EE90,0xFFB6C1,0xFFA07A,0x87CEFA,
03811 	0xFFFFE0,0xFAF0E6,
03812 	0xF5FFFA,0xFFE4E1,0xFFE4B5,0xFFDEAD,
03813 	0xFDF5E6,
03814 	0xEEE8AA,0x98FB98,0xAFEEEE,0xFFEFD5,0xFFDAB9,
03815 	0xFFC0CB,
03816 	0xF4A460,0xFFF5EE,0x87CEEB,
03817 	0xFFFAFA,0xD2B48C,0xD8BFD8,0xEE82EE,0xF5DEB3,0xF5F5F5,0x9ACD32);
03818 
03819 	c = "" + c;
03820 
03821 	obj = new Object();
03822 	obj.color = 0;
03823 	obj.opaque = 1;
03824 
03825 	i = c.indexOf('.');
03826 	if (i >= 0)
03827 	{
03828 		t = c.substr(i);
03829 		c = c.substr(0,i);
03830 		t = parseFloat(t);
03831 		if (isNaN(t)) t = 1;
03832 		obj.opaque = t;
03833 	}
03834 
03835 //----------- Integer --------
03836 
03837 	
03838 	c = c.replace(/^\s+|\s+$/g,'');
03839 	if (c == '') return obj;
03840 
03841 	if (!isNaN(c)) {
03842 	    obj.color = parseInt(c);
03843 	    return obj;
03844 	}
03845 
03846 	c = "" + c;
03847 	color = c.toLowerCase();
03848 	if (color.length == 0) return obj;
03849 
03850 //----------- rgb (r,g,b) ----------
03851 
03852 	i = color.indexOf('(');
03853 
03854 	if (i > 0)
03855 	{
03856 		name = color.substr(0,i);
03857 		color = color.substr(i+1);
03858 		i = color.indexOf(')');
03859 		if (i &lt; 0) i = color.length;
03860 		color = color.substr(0,i);
03861 		list = color.split(',');
03862 		R = 0;
03863 		G = 0;
03864 		B = 0;
03865 		A = 255;
03866 		R = parseInt(list[0]);
03867 		if (list.length > 1) G = parseInt(list[1]);
03868 		if (list.length > 2) B = parseInt(list[2]);
03869 		if (list.length > 2) A = parseInt(list[3]);
03870 		if (isNaN(R)) R = 0;
03871 		if (isNaN(G)) G = 0;
03872 		if (isNaN(B)) B = 0;
03873 		if (isNaN(A)) A = 0;
03874 				
03875 		if (R > 255) R = 255;
03876 		if (G > 255) G = 255;
03877 		if (B > 255) B = 255;
03878 		if (A > 255) A = 255;
03879 
03880 		if (R &lt; 0) R = 255;
03881 		if (G &lt; 0) G = 255;
03882 		if (B &lt; 0) B = 255;
03883 		if (A &lt; 0) A = 255;
03884 				
03885 		color = Math.round((R * 256 * 256) + (G * 256) + B);
03886 		obj.color = color;
03887 		return obj;
03888 		
03889 	}
03890 
03891 //----------- #HEX --------
03892 
03893 	if (color.substr(0,1) == '#') 
03894 	{
03895 		if (color.length == 4)
03896 		{
03897 		color = '#' + color.substr(1,1) + '0' +color.substr(2,1) + '0' + color.substr(3,1) + '0';
03898 		}
03899 		obj.color = parseInt(color.substr(1), 16);
03900 		return obj;
03901 	}
03902 //---------- Random --------
03903 
03904 	if (color == 'random')
03905 	{
03906 		i = Math.floor(Math.random() * colorValues.length);
03907 		obj.color = colorValues[i];
03908 		return obj;
03909 	}
03910 
03911 //---------- LightRandom --------
03912 
03913 	if (color == 'lightrandom')
03914 	{
03915 		i = Math.floor(Math.random() * lightValues.length);
03916 		obj.color =  lightValues[i];
03917 		return obj;
03918 	}
03919 
03920 //---------- Names --------
03921 	for (i=0; i &lt; colorNames.length; ++i)
03922 	{
03923 		name = colorNames[i];
03924 		if (color != name.toLowerCase()) continue;
03925 		obj.color = colorValues[i];
03926 		return obj;
03927 	}
03928 	return obj;
03929 }
03930 //==========================================================================================
03931 //			pdf$setFont
03932 //==========================================================================================
03933 function pdf$setFont(color,size,bold,italic,underline,name,sub,sup)
03934 {
03935 	this.bold = false;
03936 	this.italic = false;
03937 	this.underline = false;
03938 	this.superscript = false;
03939 	this.subscript = false;
03940 
03941 	if (arguments.length == 0)
03942 	{
03943 		this.fontSize = this.default_fontSize;
03944 		this.fontColor = 0;
03945 		this.setFontName('Helvetica');
03946 		return;
03947 	}
03948 	if (arguments.length > 0) this.setFontColor(color);
03949 	if (arguments.length > 1) this.setFontSize(size);
03950 	if (arguments.length > 2) this.setBold(bold);
03951 	if (arguments.length > 3) this.setItalic(italic);
03952 	if (arguments.length > 4) this.setUnderline(underline);
03953 	if (arguments.length > 5) this.setFontName(name);
03954 	if (arguments.length > 6) this.setSubscript(sub);
03955 	if (arguments.length > 7) this.setSuperscript(sup);
03956 }
03957 //==========================================================================================
03958 //			pdf$setGraphic
03959 //==========================================================================================
03960 function pdf$setGraphic(color,weight,style,fillcolor)
03961 {
03962 	var grayscale;
03963 	
03964 	if (fillcolor == '')
03965 	{
03966 		this.setGraphic_A(color,weight,style,0);
03967 		return;
03968 	}
03969 
03970 	grayscale = parseFloat(fillcolor);
03971 	if (isNaN(grayscale)) grayscale = 0;
03972 
03973 	if ((grayscale > 0) && (grayscale &lt;= 1))
03974 		 this.setGraphic_A(color,weight,style,'blue',grayscale);	
03975 	else this.setGraphic_A(color,weight,style,fillcolor,0);	
03976 
03977 }
03978 //==========================================================================================
03979 //		pdf$setGraphic_A
03980 //==========================================================================================
03981 function pdf$setGraphic_A(color,weight,style,fillcolor,grayscale)
03982 {
03983 	if (arguments.length == 0)
03984 	{
03985 		this.graphicColor	= 0;
03986 		this.graphicLineWeight	= 0;
03987 		this.graphicLineStyle	= 'solid';
03988 		this.graphicFillColor	= 0;
03989 		this.graphicGrayscale	= 0;
03990 		return;
03991 	}
03992 	
03993 	if (arguments.length > 0) this.setGraphicColor(color);
03994 	if (arguments.length > 1) this.setGraphicLineWeight(weight);
03995 	if (arguments.length > 2) this.setGraphicLineStyle(style);
03996 	if (arguments.length > 3) this.setGraphicFillColor(fillcolor);
03997 	if (arguments.length > 4) this.setGraphicGrayscale(grayscale);
03998 }
03999 //==========================================================================================
04000 //			pdf$setFontSize
04001 //==========================================================================================
04002 function pdf$setFontSize(fontSize)
04003 {
04004 		var s;
04005 
04006 try
04007 {	
04008 		s = parseInt(fontSize);
04009 }
04010 catch (e) 
04011 { 
04012 	s = this.default_fontSize;
04013 }
04014 		
04015 		if (isNaN(s)) s = this.default_fontSize;
04016 		if (s &lt; 2) s = this.default_fontSize;
04017 		if (s > 144) s = this.default_fontSize;
04018 
04019 		this.fontSize = s;
04020 	
04021 }
04022 //==========================================================================================
04023 //			pdf$setBold
04024 //==========================================================================================
04025 function pdf$setBold(status)
04026 {
04027 	this.bold = status;
04028 }
04029 //==========================================================================================
04030 //			pdf$setSubscript
04031 //==========================================================================================
04032 function pdf$setSubscript(status)
04033 {
04034 	this.subscript = status;
04035 }
04036 //==========================================================================================
04037 //			pdf$setSuperscript
04038 //==========================================================================================
04039 function pdf$setSuperscript(status)
04040 {
04041 	this.superscript = status;
04042 }
04043 //==========================================================================================
04044 //				pdf$setItalic
04045 //==========================================================================================
04046 function pdf$setItalic(status)
04047 {
04048 	this.italic = status;
04049 }
04050 //==========================================================================================
04051 //				pdf$setUnderline
04052 //==========================================================================================
04053 function pdf$setUnderline(status)
04054 {
04055 	this.underline = status;
04056 }
04057 //==========================================================================================
04058 //				pdf$setMarginLeft
04059 //==========================================================================================
04060 function pdf$setMarginLeft(x)
04061 {
04062 	var dx;
04063 	
04064 	dx = parseFloat(x);
04065 	if (dx &lt; 0) dx = 0;
04066 
04067 	dx = Math.round(dx * 72);
04068 	if (dx &lt; 0) dx = 0;
04069 
04070 	if (dx >= (this.pageWidth * 72)) dx = 0;
04071 	this.xmin = dx;
04072 	this.xpos = this.xmin;
04073 	this.xsize = this.xpos;
04074 	this.setSize_(); 
04075 	this.marginLeft = dx;
04076 }
04077 //==========================================================================================
04078 //				pdf$setMarginRight
04079 //==========================================================================================
04080 function pdf$setMarginRight(x)
04081 {
04082 	var dx;
04083 	
04084 	dx = parseFloat(x);
04085 	if (dx &lt; 0) dx = 0;
04086 
04087 	dx = Math.floor(dx * 72);
04088 	if (dx &lt; 0) dx = 0;
04089 	if (dx >= (this.parseWidth * 72)) dx = 0;
04090 
04091 	this.xmax = (this.pageWidth * 72) - dx;
04092 	this.marginRight = dx;
04093 }
04094 //==========================================================================================
04095 //				pdf$setMarginTop
04096 //==========================================================================================
04097 function pdf$setMarginTop(y)
04098 {
04099 	var dy;
04100 	
04101 	dy = parseFloat(y);
04102 	if (isNaN(dy)) dy = 0;
04103 
04104 	if (dy &lt; 0) dy = 0;
04105 
04106 	dy = Math.round(dy * 72);
04107 	if (dy &lt; 0) dy = 0;
04108 
04109 	if (dy >= ((this.pageLength - 2)  * 72)) return;
04110 	this.ymax = (this.pageLength * 72) - dy;
04111 
04112 	this.ypos = this.ymax;
04113 	this.ysize = this.ypos;
04114 	this.marginTop		= dy;
04115 }
04116 //==========================================================================================
04117 //				pdf$setMarginBottom
04118 //==========================================================================================
04119 function pdf$setMarginBottom(y)
04120 {
04121 	var dy;
04122 	
04123 	dy = parseFloat(y);
04124 	if (isNaN(dy)) dy = 0;
04125 	if (dy &lt; 0) dy = 0;
04126 
04127 	dy = Math.round(dy * 72);
04128 	if (dy &lt; 0) dy = 0;
04129 	if (dy >= (9.0 * 72)) return;
04130 	if (dy &lt; 0) dy = 0;
04131 	this.ymin = dy;
04132 
04133 	this.marginBottom	= this.ymin;
04134 }
04135 //===================================================
04136 //                   pdf$isUrl_
04137 //===================================================
04138 function pdf$isUrl_(filename)
04139 { 
04140 	var temp;
04141 
04142 	if (filename.substr(0,7).toUpperCase() == 'BASE64,')	return false;
04143 	if (filename.substr(0,4).toUpperCase() == 'HEX,')	return false;
04144 	if (filename.substr(0,8).toUpperCase() == 'ASCII85,')	return false;
04145 	if (filename.substr(0,7).toUpperCase() == 'CANVAS:')	return false;
04146 	if ((filename.substr(0,5).toUpperCase() == 'FILE,'))	return false;
04147 
04148 	if (this.sys.isClient) return true;
04149 
04150 	temp = filename.toLowerCase();
04151 	if (temp.substr(0,6) == 'https:') return true;
04152 	if (temp.substr(0,5) == 'http:') return true;
04153 	
04154 	return false;
04155 }
04156 //==========================================================================================
04157 //				pdf$tab
04158 //==========================================================================================
04159 function pdf$tab()
04160 {
04161 	var tx,dx,r;
04162 
04163 	dx = Math.floor(this.xpos / 50);
04164 	r = this.xpos % 50;
04165 	if (r > 0) dx = dx + 1;
04166 	dx = dx * 50;
04167 	if (dx >= this.xmax) return;
04168 	this.xpos = dx;
04169 	this.setSize_(); 
04170 }
04171 //==========================================================================================
04172 //				pdf$setSize_
04173 //==========================================================================================
04174 function pdf$setSize_()
04175 {
04176 	var y;
04177 	y = this.ypos - this.charHeight();
04178 	
04179 	if (this.xpos > this.xsize) this.xsize = this.xpos;
04180 	if (y &lt; this.ysize) this.ysize = y;
04181 }
04182 //==========================================================================================
04183 //				pdf$addText
04184 //==========================================================================================
04185 function pdf$addText(text, url, angle, just)
04186 {
04187 	var list,i,temp,xpos;
04188 
04189 	text = '' + text;
04190 
04191 	this.center = false;
04192 	if (text == '') return;
04193 
04194 	this.fontName_();
04195 
04196 	this.textAngle = 0;
04197 	if (arguments.length > 2) this.textAngle = parseFloat(angle);
04198 	if (isNaN(this.textAngle)) this.textAngle = 0;
04199 
04200 	this.url = '';
04201 	this.urlList = null;
04202 	if (arguments.length > 1) this.url = url;
04203 
04204 	list = text.split("\r\n");
04205 	
04206 	if (list.length == 1)
04207 	{ 
04208 		this.addText_A(text);
04209 		this.textAngle = 0;
04210 		return;
04211 	}	
04212 	
04213 	xpos = this.xpos;
04214 	for (i=0; i &lt; list.length; ++i)
04215 	{
04216 		this.addText_A(list[i]);
04217 		if (i &lt; list.length) 
04218 		{
04219 			this.xpos = xpos;
04220 			this.ypos = this.ypos - this.charHeight();
04221 		}
04222 	}
04223 
04224 	this.setSize_(); 
04225 	this.url = '';
04226 	this.textAngle = 0;
04227 }
04228 //==========================================================================================
04229 //				pdf$reportAddDetail
04230 //==========================================================================================
04231 function pdf$reportAddDetail(values,keys,urlList)
04232 {
04233 
04234 	this.center = false;
04235 	if (typeof(keys) == 'object') this.reportGroupKeys_(keys); 
04236 
04237 	this.url = '';
04238 	this.urlList = null;
04239 //	if (typeof(urlList) == 'object') this.urlList = urlList; 
04240 
04241 	if (this.ruler == null)
04242 		this.addText_A(values.join(' '));
04243 	else	this.ruler.addRow(values);
04244 
04245 }
04246 //==========================================================================================
04247 //				pdf$reportAddText
04248 //==========================================================================================
04249 function pdf$reportAddText(text)
04250 {
04251 
04252 	if (this.ruler == null) 
04253 		this.addText_A(text);
04254 	else	this.ruler.addText(text);
04255 }
04256 //==========================================================================================
04257 //				pdf$addHeader
04258 //==========================================================================================
04259 function pdf$addHeader(values,url)
04260 {
04261 	var list,i,temp;
04262 
04263 	this.center = false;
04264 
04265 	this.url = '';
04266 	this.urlList = null;
04267 
04268 	this.bold = true;
04269 	if (this.ruler == null)
04270 		this.addText_A(values.join(' '));
04271 	else
04272 	{
04273 		this.ruler.addHeader(values);
04274 	}
04275 
04276 	this.bold = false;
04277 
04278 	this.url = '';
04279 	this.urlList = null;
04280 
04281 }
04282 //==========================================================================================
04283 //				pdf$width_
04284 //==========================================================================================
04285 function pdf$width_(text)
04286 {
04287 	var width,i,c;
04288 
04289 	width = 0;	
04290 	if (text == '') return width;
04291 		
04292 	for (i = 0; i &lt; text.length; ++i)
04293 	{
04294 		c = text.charCodeAt(i);
04295 		width = width + this.charWidth(c);
04296 	}
04297 	
04298 	return width;
04299 }
04300 //==========================================================================================
04301 //				pdf$cid_
04302 //==========================================================================================
04303 function pdf$cid_(code)
04304 {
04305 	var i,c;
04306 	
04307 	if (this.font.mapping == null) return code;	
04308 
04309 	for (i=0; i &lt; this.font.mapping.length; ++i)
04310 	{
04311 		if (this.font.mapping[i].toChar == code)
04312 		{
04313 			c = this.font.mapping[i].fromChar;
04314 			return c;			
04315 		} 
04316 	}
04317 
04318 	return code;
04319 }
04320 //==========================================================================================
04321 //				pdf$addText_A
04322 //==========================================================================================
04323 function pdf$addText_A(text)
04324 {
04325 	var image,tx,wordLength, wordWidth,pre,xchr,a;
04326 	var i,j,remain,nt,part,height,width,n,parta,partb,c;
04327 
04328 //	if (pdf$trim(text) == '') return;
04329 
04330 	tx = 0;
04331 
04332 	if (this.encoded && (text.length > 2))
04333 	{
04334 		i = text.indexOf('|');
04335 		if (i >= 0)
04336 		{
04337 			a = text;
04338 
04339 			pre = text.substr(0,i);
04340 			text = text.substr(i+1);
04341 			i = text.indexOf('|');
04342 			if (i &lt; 0) i = text.length;
04343 			xchr = text.substr(0,i);
04344 			text = text.substr(i+1);
04345 			pre = pre + ' ';
04346 			if (pre != '') this.addText_A(pre);
04347 			for (j = 0; j &lt; pre.length; ++j) {
04348 			    c = this.cid_(pre.charCodeAt(i));
04349 			    height = this.charHeight(c);
04350 			    width = this.charWidth(c);
04351 			    this.xpos += width;
04352 			}
04353 			this.addText_B(xchr);
04354 			this.addText_A(text);
04355 			return;	
04356 		}
04357 	}
04358 
04359 	tx = 0;
04360 	this.put_(text,tx,this.textAngle);
04361 	return;
04362 
04363 	wordLength = 0;	
04364 	wordWidth = 0;	
04365 	tx = 0;
04366 	remain = this.xmax - this.xpos;
04367 
04368 	nt = 0;
04369 	for (i = 0; i &lt; text.length; ++i)
04370 	{
04371 		c = this.cid_(text.charCodeAt(i));
04372 		height = this.charHeight(c);
04373 		width = this.charWidth(c);		
04374 		if ((tx + width) > remain)
04375 		{
04376 			if (wordLength > 0) 
04377 			{
04378 				nt = wordLength;
04379 				tx = wordWidth;
04380 			}
04381 			else
04382 			{
04383 				if (this.xpos > this.xmax) 
04384 				{
04385 					nt = 0;   // force a line Break
04386 				}
04387 			}
04388 			break;
04389 		}
04390 
04391 		tx += width;
04392 		nt = i + 1;
04393 		if ((i == 0) || this.charVisible(c)) continue;
04394 		wordLength = i + 1;
04395 		wordWidth  = tx - width;
04396 	}
04397 
04398 
04399 	if ((nt == 0) && (this.xpos > this.xmin))
04400 	{
04401 		this.lineBreak();
04402 		this.xpos = this.xmin;
04403 		this.addText_A(text);
04404 		return;
04405 	} 
04406 
04407 	if (nt == 0)
04408 	{
04409 		parta = text.substr(0,1);
04410 		c = parta.charCodeAt(0);
04411 		width = this.charWidth(c);		
04412 		this.putLine_(parta,width);
04413 
04414 		part = text.substr(1);
04415 		if (part.length == 0) return;
04416 		c = part.charCodeAt(0);
04417 		if ((c == 32) || (c == 9)) part = part.substr(1);	// remove leading blank or tab on next line
04418 		this.addText_A(part);
04419 		return;
04420 	}
04421 
04422 	if (nt &lt; text.length)
04423 	{
04424 		parta = text.substr(0,nt);
04425 		partb = text.substr(nt);
04426 		c = partb.charCodeAt(0);
04427 		if ((c == 32) || (c == 9)) partb = partb.substr(1);	// remove leading blank or tab on next line
04428 		this.putLine_(parta,tx);
04429 
04430 		if (partb.length == 0) return;
04431 		this.addText_A(partb);
04432 		return;
04433 	}
04434 
04435 	this.put_(text,tx,this.textAngle);
04436 }
04437 //==========================================================================================
04438 //				pdf$addText_B
04439 //==========================================================================================
04440 function pdf$addText_B(data)
04441 {
04442 	var saveFont,c,value,xchr,v,i,root,text,n;
04443 	var list,symbol,w,save;
04444 	
04445 	if (data == '') return;
04446 	if (data.length &lt; 1) return;
04447 	
04448 	text = data.toLowerCase();
04449 
04450 
04451 //---------------- fraction -------------
04452 
04453 	if ((text.length > 2) && (text.substr(0,1) == 'f')) 
04454 	{
04455 		value = data.substr(1);
04456 		this.addText_D(value);
04457 		return;
04458 	}
04459 
04460 //---------------- u:z145:text (union)----------
04461 
04462 	if ((text.length > 2) && (text.substr(0,1) == 'u')) 
04463 	{
04464 		value = data.substr(1);
04465 		this.addText_F(value);
04466 		return;
04467 	}
04468 
04469 //---------------- space -------------
04470 
04471 	if (text.length > 2)
04472 	if (text.substr(0,1) ==  '+') 
04473 	{
04474 		value = data.substr(2);
04475 		n = data.substr(1,1);
04476 		this.setLetterSpacing(n);
04477 		this.addText_A(value);
04478 		this.setLetterSpacing(0);
04479 		return;
04480 	}
04481 
04482 //---------------- superscript -------------
04483 
04484 	if (text.substr(0,1) ==  '^') 
04485 	{
04486 		value = data.substr(1);
04487 		this.superscript = true;
04488 		save = this.fontSize;
04489 		this.fontSize = this.fontSize * 0.70;
04490 		this.addText_A(value);
04491 		this.fontSize = size;
04492 		this.superscript = false;
04493 		return;
04494 	}
04495 
04496 //---------------- render stroke -------------
04497 
04498 	if (text.substr(0,1) ==  '#') 
04499 	{
04500 		value = data.substr(1);
04501 		this.fontRender = 1;
04502 		this.addText_A(value);
04503 		this.fontRender = 0;
04504 		return;
04505 	}
04506 
04507 //---------------- render stroke / fill -------------
04508 
04509 	if (text.substr(0,1) ==  '@') 
04510 	{
04511 		value = data.substr(1);
04512 		this.fontRender = 2;
04513 		this.addText_A(value);
04514 //		this.setFontColor('');
04515 		this.fontRender = 0;
04516 		return;
04517 	}
04518 
04519 //---------------- skew forewrd -------------
04520 
04521 	if (text.length > 1)
04522 	if (text.substr(0,1) ==  '/') 
04523 	{
04524 		value = data.substr(1);
04525 		this.fontSkew = 25;
04526 		this.addText_A(value);
04527 		this.fontSkew = 0;
04528 		return;
04529 	}
04530 
04531 //---------------- skew backward -------------
04532 
04533 	if (text.substr(0,1) ==  "\\") 
04534 	{
04535 		value = data.substr(1);
04536 		this.fontSkew = -25;
04537 		this.addText_A(value);
04538 		this.fontSkew = 0;
04539 		return;
04540 	}
04541 
04542 //---------------- underline -------------
04543 
04544 	if (text.substr(0,1) ==  '_') 
04545 	{
04546 		value = data.substr(1);
04547 		this.underline = true;
04548 		this.addText_A(value);
04549 		this.underline = false;
04550 		return;
04551 	}
04552 
04553 //---------------- overline -------------
04554 
04555 	if (text.substr(0,1) ==  '!') 
04556 	{
04557 		value = data.substr(1);
04558 		this.overline = true;
04559 		this.addText_A(value);
04560 		this.overline = false;
04561 		return;
04562 	}
04563 
04564 //---------------- subscript -------------
04565 
04566 	if (text.substr(0,1) ==  'v') 
04567 	{
04568 		value = data.substr(1);
04569 		this.subscript = true;
04570 		this.addText_A(value);
04571 		this.subscript = false;
04572 		return;
04573 	}
04574 
04575 //---------------- super / subscript -------------
04576 
04577 	if (text.substr(0,2) ==  'ss') 
04578 	{
04579 		value = data.substr(2);
04580 		this.addText_E(value);
04581 		return;
04582 	}
04583 
04584 //---------------- square root -------------
04585 
04586 	if (text.substr(0,4) ==  'sqrt') 
04587 	{
04588 		value = data.substr(4);
04589 		this.addText_C('',value);
04590 		return;
04591 	}
04592 
04593 //---------------- root -------------
04594 
04595 	if (text.substr(0,4) ==  'root') 
04596 	{
04597 		value = data.substr(4);
04598 		i = value.indexOf(',');
04599 		root = '';
04600 		if (i >= 0)
04601 		{
04602 			root = value.substr(0,i);
04603 			value = value.substr(i+1);
04604 		}
04605 		this.addText_C(root,value);
04606 		return;
04607 	}
04608 	
04609 	text = this.resolve_text(data);
04610 	
04611 	c = text.substr(0,1);
04612 	c =  c.toUpperCase();
04613 	value = text.substr(1);
04614 	if (isNaN(value)) c = '';
04615 	v = parseInt(value,8);
04616 
04617 	if (! ((c == 'H') || (c == 'T') || (c == "C") || (c == 'Z') || (c == 'S')))
04618 	{
04619 		this.addText_A('?' + text );
04620 		return;
04621 	}
04622 
04623 	saveFont = this.font.name;
04624 	this.setFontName(c);
04625 
04626 	xchr = String.fromCharCode(v);
04627 
04628 //	xchr = '&#' + v.toString(16) + ';';
04629 //	if (v == 124) xchr = '|';
04630 
04631 	this.addText_A(xchr);
04632 	this.textAngle = 0;
04633 
04634 	this.setFontName(saveFont);
04635 
04636 //	this.addText_A(value + " ");
04637 
04638 }
04639 //==========================================================================================
04640 //			pdf$resolve_text
04641 //==========================================================================================
04642 function pdf$resolve_text(data)
04643 {
04644 	var i,text,lower,upper,name;
04645 	var names;
04646 
04647 	names = new Array('alpha','beta','chi','delta','epsilon','','gamma',
04648 				 'eta','iota','phi','kappa','lambda','mn',
04649 				 'nu','omicron','pi','rho','thata','sigma','tau','upsilon','psi','omega','xi','psi','zeta');
04650 	
04651 	name = pdf$trim(data);
04652 	for (i=0; i &lt; names.length; ++i)
04653 	{
04654 		if (name.toLowerCase() == names[i]) 
04655 		{
04656 			lower = 97 + i;
04657 			upper = 65 + i;
04658 			if (name.charCodeAt(0) &lt; 97) return 'S' + upper.toString(8); 
04659 			return 'S' + lower.toString(8); 
04660 		}
04661 	}
04662 	
04663 	text = name.toLowerCase();
04664 	text = text.replace(/\s/g,"");
04665 
04666 	if (text ==            'forall') return 'S42';
04667 
04668 	if (text ==            'exists') return 'S44';
04669 	if (text ==       'thereexists') return 'S44';
04670 
04671 	if (text ==           'implies') return 'S336';
04672 
04673 	if (text ==         'bimpliesa') return 'S334';
04674 
04675 	if (text ==               'iff') return 'S333';
04676 	if (text ==       'ifandonlyif') return 'S333';
04677 
04678 	if (text ==        'notsubset') return 'S313';
04679 	if (text ==           'subset') return 'S314';
04680 	if (text ==    'subsetorequal') return 'S315';
04681 
04682 	if (text ==         'superset') return 'S311';
04683 	if (text ==  'supersetorequal') return 'S312';
04684 
04685 	if (text ==         'f') return 'S246';
04686 
04687 	if (text ==        'union') return 'S310';
04688 	if (text ==        'nabla') return 'S321';
04689 	if (text ==        'angle') return 'S320';
04690 	if (text ==          'qed') return 'S360';
04691 
04692 	if (text ==        'not') return 'S330';
04693 	if (text ==        'and') return 'S331';
04694 	if (text ==         'or') return 'S332';
04695 	if (text ==        'xor') return 'S305';
04696 	if (text ==     'tensor') return 'S304';
04697 
04698 	if (text ==     'because') 
04699 	{
04700 		this.textAngle = 180;
04701 		this.xpos += this.fontSize * 0.75;
04702 		this.ypos += this.fontSize * 0.25;
04703 		return 'S134';	// 180 deg
04704 	}
04705 	
04706 	if (text ==     'therefore') return 'S134';
04707 
04708 	if (text ==  'intersect') return 'S314';
04709 	if (text ==  'intersectequal') return 'S315';
04710 	if (text ==  'intersectorequal') return 'S315';
04711 
04712 	if (text ==         'i') return 'S245';
04713 	if (text ==       'inf') return 'S245';
04714 	if (text ==  'infinity') return 'S245';
04715 
04716 	if (text ==         'member') return 'S316';
04717 	if (text ==      'notmember') return 'S317';
04718 	if (text ==     'not member') return 'S317';
04719 
04720 	if (text ==         'empty') return 'S306';
04721 	if (text ==      'emptyset') return 'S306';
04722 
04723 	if (text ==     'congruent') return 'S272';
04724 
04725 	if (text ==            'p') return 'S266';
04726 	if (text ==         'part') return 'S266';
04727 	if (text ==      'partial') return 'S266';
04728     
04729 	if (text ==           'about') return 'S273';
04730 	if (text ==      'aboutequal') return 'S100';
04731 
04732 	if (text ==      'product') return 'S325';
04733 
04734 	if (text ==      'cross') return 'S264';
04735 	if (text ==      'contradiction') return 'S333';
04736 
04737 	if (text ==      'tm') return 'S324';
04738 	if (text ==      'r') return 'S322';
04739 	if (text ==      'c') return 'S323';
04740 
04741 	if (text ==      'pi') return 'S160';
04742 	if (text ==   'heart') return 'S251';
04743 	if (text ==    'club') return 'S247';
04744 	if (text ==   'spade') return 'S252';
04745 	if (text == 'diamond') return 'S250';
04746 	if (text ==     'dot') return 'S267';
04747 	if (text ==      'lt') return 'S74';
04748 	if (text ==      'gt') return 'S76';
04749 	if (text ==      'le') return 'S243';
04750 	if (text ==      'ge') return 'S263';
04751 	if (text ==     'div') return 'S270';
04752 	if (text ==      'ne') return 'S271';
04753 	if (text ==     'sum') return 'S345';
04754 	if (text ==       '@') return 'S273';
04755 	if (text ==     'deg') return 'S260';
04756 
04757 	if (text ==      '+-') return 'S261';
04758 	if (text ==       'i') return 'S362';
04759 	if (text ==       'f') return 'S246';
04760 	if (text == 'partial') return 'S266';
04761 	if (text ==   'delta') return 'S104';
04762 	if (text ==   'about') return 'S100';
04763 	if (text ==    'sqrt') return 'S326';
04764 	if (text ==    'plus') return 'S053';
04765 	if (text ==       '+') return 'S053';
04766 	if (text ==       '-') return 'H226';
04767 	if (text ==       '*') return 'S264';
04768 	if (text ==       '/') return 'S270';
04769 
04770 	if (text ==     'bar') return 'H174';
04771 
04772 	return data;
04773 
04774 }
04775 //==========================================================================================
04776 //			pdf$addText_octal Z156, H023
04777 //==========================================================================================
04778 function pdf$addText_octal(text)
04779 {
04780 	var c,v,xchr,saveFont,value;
04781 
04782 	text = text.toLowerCase();
04783 	if (text == 'circle') text = 'Z155';
04784 	if (text == 'box') text = 'Z157';
04785 
04786 	c = text.substr(0,1);
04787 	c =  c.toUpperCase();
04788 	value = text.substr(1);
04789 	if (isNaN(value)) c = '';
04790 	v = parseInt(value,8);
04791 
04792 	if (! ((c == 'H') || (c == 'T') || (c == "C") || (c == 'Z') || (c == 'S')))
04793 	{
04794 		this.addText_A('?' + text );
04795 		return;
04796 	}
04797 
04798 	saveFont = this.font.name;
04799 	this.setFontName(c);
04800 
04801 	xchr = String.fromCharCode(v);
04802 
04803 	this.addText_A(xchr);
04804 	this.setFontName(saveFont);
04805 }
04806 //==========================================================================================
04807 //				pdf$addText_F (union)
04808 //==========================================================================================
04809 function pdf$addText_F(value)
04810 {
04811 	var size,i,n,d;
04812 	var wn,wd,ndx,ddx;
04813 	var basey,x1,x2;
04814 	var oldx,oldy,dy;
04815 	var saveSize,dx,size;
04816 	var h,w,text,list;
04817 	
04818 	saveSize = this.fontSize;
04819 
04820 	list = value.split(':');
04821 	symbol = list[1];
04822 
04823 	text = '';
04824 	if (list.length > 2) text = list[2];
04825 	x = this.xpos;
04826 	y = this.ypos;
04827 	w = this.width_(text);
04828 	h = Math.round(this.charHeight());
04829 
04830 	if (w &lt; h) w = h;
04831 
04832 	size = w * 1.8;
04833 	dx = Math.round((size - w) / 2) - 1;
04834 	
04835 	this.ypos = y - dx;
04836 	this.xpos = x - dx;
04837 	this.fontSize = size;
04838 	this.addText_octal(symbol);
04839 
04840 	this.fontSize = saveSize;
04841 
04842 	this.ypos = y;
04843 	this.xpos = x;
04844 	this.addText(text);
04845 
04846 	this.xpos = x + (w * 1.8);
04847 	this.ypos = y;
04848 
04849 	this.fontSize = saveSize;
04850 	this.setSize_(); 
04851 }
04852 //==========================================================================================
04853 //				pdf$addText_E (super , sub scripts)
04854 //==========================================================================================
04855 function pdf$addText_E(value)
04856 {
04857 	var size,i,n,d;
04858 	var wn,wd,ndx,ddx;
04859 	var basey,x1,x2;
04860 	var oldx,oldy,dy;
04861 	var saveSize,h,w;
04862 	
04863 	saveSize = this.fontSize;
04864 
04865 	h = Math.round(this.charHeight() * 0.6);
04866 	basey = this.ypos;
04867 	basey = this.ypos + 4;
04868 //	basey = this.ypos - Math.round(Math.floor(h / 2) + 4);
04869 	
04870 	size = this.fontSize;	
04871 	if (this.fontSize == 8) size = 6;
04872 	if (this.fontSize == 10) size = 8;
04873 	if (this.fontSize == 12) size = 10;
04874 	if (this.fontSize == 14) size = 12;
04875 	if (this.fontSize == 16) size = 12;
04876 	if (this.fontSize == 18) size = 14;
04877 
04878 	this.fontSize = size;
04879 
04880 	h = Math.round(this.charHeight() * 0.4);
04881 
04882 	i = value.indexOf(',');
04883 	if (i &lt; 0) i = value.length;
04884 	
04885 	n = value.substr(0,i);
04886 	d = value.substr(i+1);
04887 
04888 	wn = this.width_(n);
04889 	wd = this.width_(d);
04890 
04891 	w = Math.max(wn,wd) + 2;
04892 
04893 	oldx = this.xpos;
04894 	oldy = this.ypos;
04895 	
04896 	ndx = (w - wn) / 2;
04897 	ddx = (w - wd) / 2;
04898 
04899 //	ndx = 2;
04900 //	ddx = 2;
04901 
04902 	dy = h + 2;
04903 
04904 	this.xpos = oldx + ndx;
04905 	this.ypos = basey + 2;
04906 	this.setSize_(); 
04907 	this.put_(n,wn);
04908 
04909 	this.xpos = oldx + ddx;
04910 	this.ypos = basey - dy;
04911 	this.put_(d,wd);
04912 		
04913 	x1 = oldx;
04914 	x2 = x1 + w;
04915 
04916 	this.xpos = x2 + 2;
04917 	this.ypos = oldy;
04918 
04919 	this.fontSize = saveSize;
04920 	this.setSize_(); 
04921 
04922 }
04923 
04924 //==========================================================================================
04925 //				pdf$addText_D (fraction)
04926 //==========================================================================================
04927 function pdf$addText_D(value)
04928 {
04929 	var size,i,n,d;
04930 	var wn,wd,ndx,ddx;
04931 	var basey,x1,x2;
04932 	var oldx,oldy,dy;
04933 	var saveSize;
04934 	var h,w;
04935 	
04936 	saveSize = this.fontSize;
04937 
04938 	h = Math.round(this.charHeight() * 0.6);
04939 	basey = this.ypos;
04940 	basey = this.ypos + 4;
04941 //	basey = this.ypos - Math.round(Math.floor(h / 2) + 4);
04942 	
04943 	size = this.fontSize;	
04944 	if (this.fontSize == 8) size = 6;
04945 	if (this.fontSize == 10) size = 8;
04946 	if (this.fontSize == 12) size = 10;
04947 	if (this.fontSize == 14) size = 12;
04948 	if (this.fontSize == 16) size = 12;
04949 	if (this.fontSize == 18) size = 14;
04950 
04951 	this.fontSize = size;
04952 
04953 	h = Math.round(this.charHeight() * 0.6);
04954 
04955 	i = value.indexOf('/');
04956 	if (i == 0) 
04957 	{
04958 		value = value  + '/1';
04959 		i = value.indexOf('/');
04960 	}
04961 	
04962 	n = value.substr(0,i);
04963 	d = value.substr(i+1);
04964 
04965 	wn = this.width_(n);
04966 	wd = this.width_(d);
04967 
04968 	w = Math.max(wn,wd) + 2;
04969 
04970 	oldx = this.xpos;
04971 	oldy = this.ypos;
04972 	
04973 	ndx = (w - wn) / 2;
04974 	ddx = (w - wd) / 2;
04975 
04976 	dy = h + 2;
04977 
04978 	this.xpos = oldx + ndx;
04979 	this.ypos = basey + 2;
04980 	this.setSize_(); 
04981 	this.put_(n,wn);
04982 
04983 	this.xpos = oldx + ddx;
04984 	this.ypos = basey - dy;
04985 	this.put_(d,wd);
04986 		
04987 	x1 = oldx;
04988 	x2 = x1 + w;
04989 	this.plot.lineWeight = 1.5;
04990 	if (size > 12) this.plot.lineWeight = 2;
04991 	if (size > 16) this.plot.lineWeight = 3;
04992 
04993 	this.plot.line(x1,basey,x2,basey);
04994 
04995 	this.xpos = x2 + 2;
04996 	this.ypos = oldy;
04997 
04998 	this.fontSize = saveSize;
04999 	this.setSize_(); 
05000 
05001 }
05002 //==========================================================================================
05003 //				pdf$addText_C (square root)
05004 //==========================================================================================
05005 function pdf$addText_C(root,value)
05006 {
05007 	var x,y,size,width,dx,bw,n,sq;
05008 	var saveFont,w,x1,y1,x2,y2;
05009 	var mx,my,bar;
05010 
05011 	size = this.fontSize;	
05012 	saveFont = this.font;
05013 
05014 	dx = Math.round(this.fontSize * 0.2);
05015 	width = this.width_(value);
05016 
05017 	x = this.xpos;
05018 	y = this.ypos;
05019 
05020 	bw = this.fonts[4].widths(96,this.fontSize);
05021 	n = 1;
05022 	if (bw > 1) n = Math.ceil(width / bw);	
05023 
05024 	if (root != '')
05025 	{	
05026 		this.ypos = y;
05027 		this.setFontSize(6);
05028 		w = this.width_(root);
05029 		this.put_(root,w);
05030 		this.xpos = this.xpos - 5;
05031 		this.setFontSize(size);
05032 	}
05033 	
05034 	this.font = this.fonts[4];
05035 	sq = String.fromCharCode(214);
05036 	w = this.width_(sq);
05037 	this.put_(sq,w);
05038 	x = this.xpos;
05039 
05040 	w = width + 6;
05041 	x1 = x;
05042 	y1 = this.ypos + (this.fontSize * 0.94);
05043 	x2 = x1 + w;
05044 	this.plot.lineWeight = 1.5;
05045 	if (size > 12) this.plot.lineWeight = 2;
05046 	if (size > 16) this.plot.lineWeight = 3;
05047 
05048 	this.plot.line(x1,y1,x2,y1);
05049 //	this.put_(bar,w);
05050 
05051 	this.xpos = this.xpos - 6;
05052 	this.setSize_(); 
05053 
05054 	mx = this.xpos - 6;
05055 	my = this.ypos;
05056 
05057 	this.font = saveFont;
05058 	this.xpos = x + 2;
05059 	w = this.width_(value);
05060 	this.put_(value,w);
05061 	this.setSize_(); 
05062 
05063 	this.ypos = my;
05064 	this.xpos = x2;
05065 	this.setFontSize(size);
05066 	this.setSize_(); 
05067 }
05068 //==========================================================================================
05069 //				pdf$putLine_
05070 //==========================================================================================
05071 function pdf$putLine_(text,width)
05072 {
05073 	
05074 	this.put_(text,width,0);
05075 	this.lineBreak();
05076 }
05077 //==========================================================================================
05078 //				pdf$byteToHex
05079 //==========================================================================================
05080 function pdf$byteToHex(n)
05081 {
05082 	var n1,n2,hex,c1,c2;
05083 	
05084 	n1 = (n >> 4) & 15;
05085 	n2 = n % 16;
05086 	c1 = "" + n1;
05087 	c2 = "" + n2;
05088 	if (n1 > 9) c1 = String.fromCharCode(52 + n1);
05089 	if (n2 > 9) c2 = String.fromCharCode(52 + n2);
05090 
05091 	return c1 + c2;
05092 }
05093 //==========================================================================================
05094 //				pdf$escape_
05095 //==========================================================================================
05096 function pdf$escape_(word)
05097 {
05098 	var text,i,n,temp;
05099 
05100 	text = '';
05101 	for (i=0; i &lt; word.length; ++i)
05102 	{
05103 		n = word.charCodeAt(i);
05104 		n = this.cid_(n);
05105 		
05106 		if ( ((n >= 32) && ( n &lt;= 127)) && (! (( n == 40) || (n == 41)|| (n == 92) || (n == 37) || ( n == 124) || (n == 124) || (n == 60) ) ) ) 
05107 		{
05108 		
05109 			text = text + '' + String.fromCharCode(n);
05110 		}
05111 		else
05112 		{
05113 			 temp = n.toString(8);
05114 			 if (temp.length == 1) temp = '00' + temp;
05115 			 if (temp.length == 2) temp = '0' + temp;
05116 			 text += '\\' + temp;
05117 		}
05118 	}
05119 
05120 	return text;
05121 }
05122 //==========================================================================================
05123 //				pdf$put_
05124 //==========================================================================================
05125 function pdf$put_(word,width,angle)
05126 {
05127 	var ty,cx,tx,dx,dy;
05128 	var text,size,obj;
05129 	var color,underline;
05130 	var ls,ws,tran,angle;
05131 	var x1,y1,x2,y2,xline;
05132 	var tanA,tanB,ncolor;
05133 	var angleA,angleB;
05134 	var xsin,xcos,cx,cy,textAngle;
05135 	var ry;
05136 
05137 	color = this.fontColor;
05138 	underline = this.underline;
05139 
05140 	if (this.url != '') 
05141 	{	
05142 		if (this.href_style) underline = true;
05143 		if (this.href_style) this.setFontColor(this.urlColor);
05144 	}
05145 
05146 	if (this.center)
05147 	{
05148 		cx = (this.xmax + this.xmin) / 2.0;
05149 		this.xpos = cx - (width / 2);
05150 		if (this.xpos &lt; this.xmin) this.xpos = this.xmin;
05151 	}
05152 	this.setSize_(); 
05153 
05154 	if (word != '')
05155 	{
05156 		tx = this.xpos;
05157 		ty = this.ypos;
05158 		if (this.justify) ty = this.ypos - this.charHeight();
05159 	
05160 		tx = Math.round(tx * 10) / 10;
05161 		ty = Math.round(ty * 10) / 10;
05162 
05163 		size = this.fontSize;
05164 		if (this.subscript || this.superscript) size = size - 2;
05165 
05166 		if (size &lt;= 0.01) return;
05167 
05168 		ls = this.letterSpacing;
05169 		ws = this.wordSpacing;
05170 
05171 		dx = width;
05172 		dy = this.charHeight() * 2;
05173 
05174 		x1 = tx;
05175 		y1 = ty - (dy / 2);
05176 		x2 = tx + width;
05177 		y2 = y1;
05178 
05179 		text = '';
05180 		tran = '1 0 0 1 ' + tx + ' ' + ty + " cm\n";
05181 
05182 		if ((this.fontScaleX != 1) || (this.fontScaleY != 1)) tran = tran + this.fontScaleX + ' 0 0 ' + this.fontScaleY + " 0 0 cm\n";
05183 	
05184 		if (Math.abs(this.fontSkew) > 0.01) 
05185 		{
05186 			angleA = 0 / 180.0 * Math.PI;
05187 			angleB = this.fontSkew / 180.0 * Math.PI;
05188 try
05189 {
05190 			tanA = Math.tan(angleA);
05191 			tanB = Math.tan(angleB);		
05192 			ry = ty;
05193 			tran = tran + '1 ' + tanA + ' ' + tanB + " 1 0 0 cm\n";
05194 }
05195 catch (e) { };
05196 
05197 		}
05198 
05199 		textAngle = '';
05200 		if (Math.abs(angle) > 0.01)
05201 		{
05202 			angle = angle / 180.0 * Math.PI;	
05203 			xcos = Math.cos(angle);
05204 			xcos = Math.round(xcos*1000) / 1000;
05205 			xsin = Math.sin(angle);
05206 			xsin = Math.round(xsin*1000) / 1000;
05207 			textAngle = textAngle + xcos + ' ' + xsin + ' ' + (-xsin) + ' ' + xcos + " 0 0 cm% Rotate\n";
05208 		}
05209 	
05210 		text = text + "q\n";
05211 		text = text + "BT\n";
05212 	
05213 		text = text + '/' + this.fontName_() + ' ' + size + " Tf\n";
05214 		if (ls > 0) text = text + ls + " Tc\n";		// letter Spacing
05215 		if (ws > 0) text = text + ws + " Tw\n";		// word Spacing
05216 		text = text + tran + '';
05217 		text = text + textAngle + '';
05218 	
05219 		text = text + this.scriptText_() + '';
05220 	
05221 		obj = this.parseColor_(this.fontColor);
05222 		ncolor = obj.color;
05223 		text = text + this.colorText_(ncolor) + '';
05224 		if (this.fontRender > 0) text = text + this.fontRender + " Tr\n";
05225 
05226 		text = text +  '(' + this.escape_(word) + ") Tj\n";
05227 
05228 		text = text + "ET\n";
05229 		text = text + "Q\n";
05230 
05231 		this.catalog.activePage.add(text);
05232 		if (underline) this.underline_(this.xpos,ty,width);
05233 		if (this.overline) this.overline_(this.xpos,ty,width);
05234 	}
05235 
05236 	this.fontColor = color;
05237 //	if (this.url != '') this.catalog.activePage.addHyperlink(this.xpos,this.ypos,this.charHeight(),width,this.url);
05238 
05239 	if (this.url != '') this.catalog.activePage.addHyperlink(tx,ty,this.charHeight(),width,this.url);
05240 	this.url = '';
05241 	this.xpos = this.xpos + width;
05242 	this.setSize_(); 
05243 }
05244 //==========================================================================================
05245 //				pdf$putWord_
05246 //==========================================================================================
05247 function pdf$putWord_(x,y,word,width)
05248 {
05249 	var text,tran;
05250 	
05251 	if (word == '') return;
05252 	
05253 	text = '';
05254 	tran = '1 0 0 1 ' + x + ' ' + y + " cm\n";	
05255 	text = text + "q\n";
05256 	text = text + "BT\n";
05257 	
05258 	text = text + '/' + this.fontName_() + ' ' + this.fontSize + " Tf\n";
05259 	text = text + tran + '';		
05260 	text = text + this.colorText_(this.fontColor) + '';
05261 	text = text +  '(' + this.escape_(word) + ") Tj\n";
05262 	text = text + "ET\n";
05263 	text = text + "Q\n";
05264 
05265 	this.catalog.activePage.add(text);
05266 }
05267 //==========================================================================================
05268 //				pdf$scriptText
05269 //==========================================================================================
05270 function pdf$scriptText_()
05271 {
05272 	var dy;
05273 
05274 	if (! (this.subscript || this.superscript)) return "";
05275 
05276 	dy = Math.round(this.charHeight() * 0.35);
05277 	if (this.superscript) 
05278 	{
05279 		 return dy + " Ts\n";
05280 	}
05281 	else
05282 	{
05283 		return '-' + dy + " Ts\n";	
05284 	}
05285 }
05286 //==========================================================================================
05287 //				pdf$placeText
05288 //==========================================================================================
05289 function pdf$placeText(x,y,word,url,angle,just)
05290 {
05291 	var px,py,sj,p;
05292 
05293 	sj = this.justify;
05294 	this.fontName_();
05295 
05296 	p = this.toPoint_(x,y);
05297 
05298 	this.justify = false;
05299 	if (arguments.length &lt; 4) url = '';
05300 	if (arguments.length &lt; 5) angle = 0;
05301 	if (arguments.length &lt; 6) just = '';
05302 	this.placeText_A(p.x,p.y,word,url,angle,just);
05303 
05304 	this.justify = sj;
05305 
05306 }
05307 //==========================================================================================
05308 //				pdf$placeText_A
05309 //==========================================================================================
05310 function pdf$placeText_A(x,y,word,url,angle,just)
05311 {
05312 	var ty,tx,sx,sy,dir;
05313 	var text,p,width,height;
05314 
05315 	this.justify = false;
05316 
05317 	sx = this.xpos;
05318 	sy = this.ypos;
05319 
05320 	word = "" + word;
05321 	
05322 	if (word == '') return;
05323 
05324 	dir = 0;
05325 	dir = parseFloat(angle);
05326 	if (isNaN(dir)) dir = 0;
05327 	if (dir != 0) url = '';
05328 	
05329 	this.url = '';
05330 	this.urlList = null;
05331 	if (typeof(url)   != 'undefined') this.url = url;
05332 	if (typeof(angle) == 'undefined') angle = 0;
05333 	if (typeof(just)  == 'undefined') just = 'LL';
05334 
05335 	width = this.width_(word);
05336 	height = this.fontSize * 0.75;	
05337 
05338 	p = this.justify_(x,y,width,height,dir,just);
05339 	this.xpos = p.x;
05340 	this.ypos = p.y;
05341 	
05342 	this.addText(word,url,dir);
05343 
05344 	this.setSize_();
05345 
05346 	this.xpos = sx;
05347 	this.ypos = sy;
05348 	
05349 	this.url = '';
05350 	this.urlList = null;
05351 }
05352 //==========================================================================================
05353 //				pdf$justify_
05354 //==========================================================================================
05355 function pdf$justify_(x,y,width,height,angle,just)
05356 {
05357 	var p,dir,dx,dy,tx,ty;
05358 	
05359 	p = new Object();
05360 	p.x = x;
05361 	p.y = y;
05362 	
05363 	just = '' + just;
05364 	just = just.toUpperCase();
05365 
05366 	if (just == '') return p;
05367 	if (just == 'LL') return p;
05368 
05369 	dx = 0;
05370 	dy = 0;
05371 	if (just.substr(0,1) == 'L') dy = 0;
05372 	if (just.substr(0,1) == 'C') dy = height / 2;
05373 	if (just.substr(0,1) == 'U') dy = height;
05374 
05375 	if (just.substr(1,1) == 'L') dx = 0;
05376 	if (just.substr(1,1) == 'C') dx = width / 2;
05377 	if (just.substr(1,1) == 'R') dx = width;
05378 
05379 	dir = angle / 180 * Math.PI;
05380 	tx = (Math.cos(dir) * dx) - (Math.sin(dir) * dy);
05381 	ty = (Math.sin(dir) * dx) + (Math.cos(dir) * dy);
05382 	
05383 	p.x = x - tx;
05384 	p.y = y - ty;
05385 	return p;
05386 }
05387 //==========================================================================================
05388 //				pdf$centerText
05389 //==========================================================================================
05390 function pdf$centerText(word,url)
05391 {
05392 	this.url = '';
05393 	this.urlList = null;
05394 	if (arguments.length > 1) this.url = url;
05395 
05396 	this.center = true;	
05397 	this.addText_A(word);
05398 	this.center = false;
05399 
05400 	this.url = '';
05401 	this.urlList = null;
05402 
05403 }
05404 //==========================================================================================
05405 //				pdf$rightText
05406 //==========================================================================================
05407 function pdf$rightText(word,url)
05408 {
05409 	var xpos,i,j,list,text;
05410 	
05411 	this.url = '';
05412 	this.urlList = null;
05413 	if (arguments.length > 1) this.url = url;
05414 
05415 	list = word.split("\r\n");
05416 	xpos = this.xpos;
05417 
05418 	for (i=0; i &lt; list.length; ++i)
05419 	{
05420 		text = list[i];
05421 		this.xpos = (this.xmax - this.width_(text)) - 4 ;
05422 		this.addText_A(text);
05423 		if (i &lt; (list.length-1)) this.ypos = this.ypos - this.charHeight();	
05424 	}
05425 
05426 	this.url = '';
05427 	this.urlList = null;
05428 }
05429 //==========================================================================================
05430 //				pdf$leftText
05431 //==========================================================================================
05432 function pdf$leftText(word,url)
05433 {
05434 
05435 	word = '' + word;
05436 	if (word == '') return;
05437 
05438 	this.url = '';
05439 	this.urlList = null;
05440 	if (arguments.length > 1) this.url = url;
05441 
05442 	this.xpos = this.xmin;
05443 	this.addText_A(word);
05444 
05445 	this.url = '';
05446 	this.urlList = null;
05447 
05448 }
05449 //==========================================================================================
05450 //				pdf$underline_
05451 //==========================================================================================
05452 function pdf$underline_(x1,y1,length)
05453 {
05454 	var weight;
05455 	var text,dy,dx,color;
05456 
05457 	if (length &lt;= 0) return;
05458 	
05459 	dy = (this.fontSize / 72) * 8;
05460 	y1 = y1 - dy;
05461 
05462 	x1 = Math.round(x1 * 1000) / 1000;
05463 	y1 = Math.round(y1 * 1000) / 1000;
05464 
05465 	length = Math.round(length * 1000) / 1000;
05466 	weight = (this.fontSize / 72) * 2;
05467 	
05468 	text =	"/LEP BMC \n" +
05469 		"0 G\n" + 
05470 		this.colorText_(this.fontColor).toUpperCase() +			
05471 		weight + " w\n" +
05472 		'q 1 0 0 1 ' + x1 + ' ' + y1 + " cm\n" +
05473 		"0 0 m\n" +
05474 		length + " 0 l\n" +
05475 		"S\n" +
05476 		"Q\n" +
05477 		"EMC \n";
05478 
05479 	this.catalog.activePage.add(text);
05480 }
05481 //==========================================================================================
05482 //				pdf$overline_
05483 //==========================================================================================
05484 function pdf$overline_(x1,y1,length)
05485 {
05486 	var weight;
05487 	var text,dy,dx,color;
05488 
05489 	if (length &lt;= 0) return;
05490 	
05491 	dy = this.fontSize;
05492 	y1 = y1 + dy;
05493 
05494 	x1 = Math.round(x1 * 1000) / 1000;
05495 	y1 = Math.round(y1 * 1000) / 1000;
05496 
05497 	length = Math.round(length * 1000) / 1000;
05498 	weight = (this.fontSize / 72) * 2;
05499 	
05500 	text =	"/LEP BMC \n" +
05501 		"0 G\n" + 
05502 		this.colorText_(this.fontColor).toUpperCase() +			
05503 		weight + " w\n" +
05504 		'q 1 0 0 1 ' + x1 + ' ' + y1 + " cm\n" +
05505 		"0 0 m\n" +
05506 		length + " 0 l\n" +
05507 		"S\n" +
05508 		"Q\n" +
05509 		"EMC \n";
05510 
05511 	this.catalog.activePage.add(text);
05512 }
05513 
05514 //==========================================================================================
05515 //				pdf$drawBorder
05516 //==========================================================================================
05517 function pdf$drawBorder(x1,y1,x2,y2,borderLeft,borderRight,borderTop,borderBottom)
05518 {	
05519 	var p1,p2,width,height;
05520 	
05521 	p1 = this.toPoint_(x1,y1);
05522 	p2 = this.toPoint_(x2,y2);
05523 
05524 	x1 = p1.x;
05525 	y1 = p1.y;
05526 	x2 = p2.x;
05527 	y2 = p2.y;
05528 
05529 	height = p2.y - p1.y;
05530 	width = p2.x - p1.x;
05531 
05532 	this.drawBorder_A(x1,y1,x1,y2,borderLeft);
05533 	this.drawBorder_A(x2,y2,x2,y1,borderRight);
05534 	this.drawBorder_A(x1,y2,x2,y2,borderBottom);
05535 	this.drawBorder_A(x2,y1,x1,y1,borderTop);	
05536 }
05537 //==========================================================================================
05538 //				pdf$drawBorder_A
05539 //==========================================================================================
05540 function pdf$drawBorder_A(x1,y1,x2,y2,border)
05541 {
05542 	var color,weight,style,list;
05543 
05544 	if (border == '') return;
05545 	if (border == 'none') return;	
05546 	if (border == undefined) return;
05547 
05548 	list = border.split(' ');
05549 	color = 'black';
05550 	weight = 1;
05551 	style = 'solid';
05552 
05553 	if (list.length == 1)
05554 	{
05555 		color = 'black';
05556 		weight = parseInt(list[0]);
05557 		style = 'solid';
05558 	}
05559 	else
05560 	{
05561 		if (list.length > 0) weight = parseInt(list[0]);
05562 		if (list.length > 1) style = list[1];
05563 		if (list.length > 2) color = list[2];
05564 	}
05565 
05566 	if (isNaN(weight)) weight = 1;
05567 
05568 	weight = Math.round((weight / 96) * 72);
05569 	
05570 	if (weight > 2) weight = Math.round(weight / 2);
05571 
05572 	this.setGraphicLineStyle(style);
05573 	this.setGraphicColor(color);
05574 	this.setGraphicLineWeight(weight);
05575 	this.plot.line(x1,y1,x2,y2);
05576 }
05577 //==========================================================================================
05578 //				pdf$drawRectangle
05579 //==========================================================================================
05580 function pdf$drawRectangle(x1,y1,x2,y2)
05581 {
05582 	var p1,p2;
05583 
05584 	p1 = this.toPoint_(x1,y1);
05585 	p2 = this.toPoint_(x2,y2);
05586 
05587 	this.plot.rectangle(p1.x,p1.y,p2.x,p2.y);
05588 }
05589 //==========================================================================================
05590 //				pdf$drawLine
05591 //==========================================================================================
05592 function pdf$drawLine(x1,y1,x2,y2)
05593 {
05594 	var p1,p2;
05595 
05596 	p1 = this.toPoint_(x1,y1);
05597 	p2 = this.toPoint_(x2,y2);
05598 
05599 	this.plot.line(p1.x,p1.y,p2.x,p2.y);
05600 }
05601 //==========================================================================================
05602 //				pdf$drawArc
05603 //==========================================================================================
05604 function pdf$drawArc(cx,cy,radius,start,sweep)
05605 {
05606 	var p;
05607 
05608 	p = this.toPoint_(cx,cy);
05609 	radius = this.toPoint_(radius);
05610 
05611 	this.plot.arc(p.x,p.y,radius,start,sweep);
05612 }
05613 //=========================================================================================
05614 //				pdf$drawCone
05615 //==========================================================================================
05616 function pdf$drawCone(cx,cy,radius,start,sweep)
05617 {
05618 	var p;
05619 
05620 	p = this.toPoint_(cx,cy);
05621 	radius = this.toPoint_(radius);
05622 
05623 	this.plot.cone(p.x,p.y,radius,start,sweep);
05624 }
05625 //==========================================================================================
05626 //				pdf$drawCircle
05627 //==========================================================================================
05628 function pdf$drawCircle(cx,cy,radius)
05629 {
05630 	var p;
05631 
05632 	p = this.toPoint_(cx,cy);
05633 	radius = this.toPoint_(radius);
05634 
05635 	this.plot.circle(p.x,p.y,radius);
05636 }
05637 //==========================================================================================
05638 //				pdf$drawPolygon
05639 //==========================================================================================
05640 function pdf$drawPolygon(points)
05641 {
05642 	var p;
05643 
05644 	p = this.toPoints_(points);
05645 	this.plot.polygon(p);
05646 }
05647 //==========================================================================================
05648 //				pdf$drawLinestring
05649 //==========================================================================================
05650 function pdf$drawLinestring(points)
05651 {
05652 	var p;
05653 
05654 	p = this.toPoints_(points);
05655 	this.plot.linestring(p);
05656 }
05657 //==========================================================================================
05658 //				pdf$drawLinestring2
05659 //==========================================================================================
05660 function pdf$drawLinestring2(x,y,pnts)
05661 {
05662 	var x1,y1,x2,y2,i,p;
05663 
05664 	p = this.toPoint_(x,y);
05665 	
05666 	for (i=0; i &lt; pnts.length-1; ++i)
05667 	{
05668 		x1 = pnts[i].x + p.x;
05669 		y1 = p.y - pnts[i].y;
05670 		x2 = pnts[i+1].x + p.x
05671 		y2 = p.y - pnts[i+1].y;
05672 
05673 		this.plot.line(x1,y1,x2,y2);
05674 	}
05675 }
05676 //===================================================================
05677 //					pdf$drawFontGrid
05678 //===================================================================
05679 function pdf$drawFontGrid(fontname,fieldname)
05680 {
05681 	var cmap,color,name,encoding;
05682 	var row,col,x,y,dx,dy,c,k,hex,width;
05683 	var i,tx,ty,xoffset,yoffset,x1,y1,x2,y2,rx,ry;
05684 	var rows,cols;
05685 
05686 	if (! fieldname) fieldname = 'unicode';
05687 	fieldname = fieldname.toLowerCase();
05688 
05689 	i = fontname.indexOf(',');
05690 	if (i &lt; 0) i = fontname.length;
05691 	
05692 	name = fontname.substr(0,i);
05693 	encoding = fontname.substr(i+1);
05694 
05695 	x = 0;
05696 	y = 680 / 72 ;
05697 
05698 	x1 = 0;
05699 	y1 = 0;
05700 	x2 = 480 / 72;
05701 	y2 = 680 / 72;
05702 	rows = 23;
05703 	cols = 10;
05704 
05705 	this.drawGrid(x1,y1,x2,y2,rows,cols,true)
05706 
05707 	this.setFontName(fontname);
05708 
05709 	if (this.characterMap == null) this.characterMap = new pdfCharacterMap$(this,name);
05710 	cmap = this.characterMap;
05711 
05712 	k = cmap.find(encoding);
05713 
05714 	tx = 0.04;
05715 	ty = 0.15;
05716 
05717 	dx = 48 / 72;
05718 	dy = (680 / 23) / 72;
05719 		
05720 	x1 = 0.15;
05721 	y1 = 0.15;
05722 
05723 	xoffset = tx;
05724 	yoffset = ty;
05725 		
05726 	for (i=32; i &lt; 256; ++i)
05727 	{
05728 		row = Math.floor((i-32) / 10);
05729 		col = (i-32) % 10;
05730 	
05731 		x = (col * dx) + xoffset;
05732 		y = (row * dy) + yoffset;
05733 		
05734 		rx = x + tx;
05735 		ry = y + ty;
05736 
05737 //		width = cmap.unicode_widths[i-32];
05738 
05739 		hex = parseInt(cmap.values[k][i]);
05740 		if (cmap.mapping == null) hex = i;
05741 		hex = hex.toString(16);
05742 //		hex = i.toString(16) + '-' +  hex;
05743 
05744 		this.setFontSize(6);
05745 		this.setFontName('arial');
05746 
05747 		this.setFontColor('red');
05748 		this.placeText(rx,ry - y1,hex);
05749 
05750 		this.setFontColor('blue');
05751 		if (fieldname == 'width') this.placeText(rx+0.35,ry - y1,width);
05752 
05753 		if (cmap.mapping != null)
05754 		{
05755 			c = String.fromCharCode(cmap.values[k][i]);
05756 		}
05757 		else 
05758 		{
05759 			c = String.fromCharCode(i);
05760 		}
05761 
05762 		this.setFontSize(18);
05763 		this.setFontColor('black');
05764 		this.setFontName(fontname);
05765 		this.placeText(rx+x1,ry,c);
05766 	}
05767 }
05768 //==========================================================================================
05769 //				pdf$drawGrid
05770 //==========================================================================================
05771 function pdf$drawGrid(x1,y1,x2,y2,rows,cols,absolute)
05772 {
05773 	var p1,p2;
05774 
05775 	p1 = this.toPoint_(x1,y1);
05776 	p2 = this.toPoint_(x2,y2);
05777 	this.plot.grid(p1.x,p1.y,p2.x,p2.y,rows,cols);
05778 }
05779 //==========================================================================================
05780 //				pdf$clipBegin
05781 //==========================================================================================
05782 function pdf$clipBegin(x1, y1, x2, y2)
05783 {
05784 	var p1,p2;
05785 
05786 	p1 = this.toPoint_(x1,y1);
05787 	p2 = this.toPoint_(x2,y2);
05788 	this.plot.clipBegin(p1.x, p1.y, p2.x, p2.y);
05789 }
05790 //==========================================================================================
05791 //				pdf$drawSymbol
05792 //==========================================================================================
05793 function pdf$drawSymbol(x,y,char,angle)
05794 {
05795 	var p;	
05796 
05797 	p = this.toPoint_(x,y);
05798 	this.plot.symbol(p.x,p.y,char,angle);
05799 }
05800 //==========================================================================================
05801 //				pdf$drawarker
05802 //==========================================================================================
05803 function pdf$drawMarker(x,y,name,angle)
05804 {
05805 	var p;	
05806 
05807 	p = this.toPoint_(x,y);
05808 	this.plot.marker(p.x,p.y,name,angle);
05809 }
05810 
05811 //==========================================================================================
05812 //				lineBreak
05813 //==========================================================================================
05814 function pdf$lineBreak()
05815 {
05816 	var text,dy;
05817 
05818 	dy = this.charHeight();
05819 	if (this.rowHeight > dy) dy = (this.rowHeight + 4);
05820 	
05821 	this.xpos = this.xmin;
05822 	this.ypos = this.ypos - dy;
05823 	this.line = this.line + 1;
05824 
05825 	this.rowHeight = 0;
05826 
05827 	if ((this.ypos - this.charHeight()) &lt; this.ymin) this.pageBreak();
05828 
05829 }
05830 //==========================================================================================
05831 //				pdf$pageBreak
05832 //==========================================================================================
05833 function pdf$pageBreak(force)
05834 {
05835 	if (! force)
05836 	{
05837 		if (this.line == 1) return;	// cannot pagebreak an empty page;
05838 		if (this.holdPage) return;
05839 		if (this.margin) return;		// cannot create during header/footer
05840 	}
05841 
05842 	if (this.ruler != null) this.ruler.end();	//
05843 	if (this.onBeforePagebreak != null) this.onBeforePagebreak(); 
05844 
05845 	this.catalog.addPage();
05846 	this.xpos = this.xmin;
05847 	this.ypos = this.ymax;
05848 
05849 	this.line = 1;
05850 	if (this.onPagebreak != null) this.onPagebreak(); 
05851 }
05852 //==========================================================================================
05853 //				pdf$charHeight
05854 //==========================================================================================
05855 function pdf$charHeight()
05856 {
05857 	var height;
05858 	
05859 	height = this.fontSize * 1.2;	
05860 	return height;
05861 }
05862 //==========================================================================================
05863 //				pdf$charWidth
05864 //==========================================================================================
05865 function pdf$charWidth(c)
05866 {
05867 	var width,n;
05868 	
05869 	n = this.cid_(c);
05870 
05871 	if (isNaN(this.fontSize)) this.fontSize = 12;
05872 
05873 	width = this.font.widths(n,this.fontSize);
05874 	if (isNaN(width)) width = 0;
05875 
05876 	return width;
05877 }
05878 //==========================================================================================
05879 //				pdf$charVisible
05880 //==========================================================================================
05881 function pdf$charVisible(c)
05882 {
05883 
05884 	if (c &lt; 33) return false;
05885 	return true;
05886 
05887 }
05888 //==========================================================================================
05889 //				pdf$toString
05890 //==========================================================================================
05891 function pdf$toString()
05892 {
05893     var text, i;
05894 
05895     text = '';
05896     for (i = 0; i &lt; this.data.length; ++i)
05897     {
05898         text += String.fromCharCode(this.data.buffer[i]);
05899     }
05900     return text;
05901 }
05902 //=======================================================================================
05903 //				pdf$writeToFile
05904 //=======================================================================================
05905 function pdf$writeToFile(filename)
05906 {
05907 
05908 	this.stream = null;
05909 	this.send = false;
05910 
05911 	this.f = this.sys.createTextFile(filename);
05912 	this.flush_();	
05913 	this.f.Close();	
05914 }
05915 //======================================================================================
05916 //				pdf$sendToClient
05917 //=======================================================================================
05918 function pdf$sendToClient(filename,as,download)
05919 {
05920 
05921 	if (arguments.length == 0) filename = 'untitled.pdf';
05922 
05923 	as = as.toUpperCase();
05924 
05925 
05926 //	as = 'STRING';
05927 
05928 	this.sys.startSend(filename,as,download);
05929 
05930 	if (as == 'STRING')
05931 	{
05932 		this.sys.send(this.toString());
05933 		return;
05934 	}
05935 
05936 	if (as == 'BASE64')
05937 	{
05938 		this.sys.send(this.toBase64(this.data));
05939 		return;
05940 	}
05941 
05942 	if (as == 'DATAURL')
05943 	{
05944 		this.sys.send(this.toDataURL());
05945 		return;
05946 	}
05947 
05948 	this.send = true;
05949 	this.stream = null;
05950 	this.f = null;
05951 	this.flush_();
05952 	this.sys.endSend();
05953 }
05954 //======================================================================================
05955 //				pdf$downloadToClient
05956 //=======================================================================================
05957 function pdf$downloadToClient(filename,as)
05958 {
05959 	if (arguments.length == 0) filename = '';
05960 
05961 	this.sys.startSend(filename,as,true);
05962 
05963 	this.send = true;
05964 	this.stream = null;
05965 	this.f = null;
05966 	this.flush_();
05967 
05968 	this.sys.endSend(filename);
05969 	
05970 }
05971 //=================================================================
05972 //			pdf$sendToServer
05973 //=================================================================
05974 function pdf$sendToServer(filename)
05975 {
05976 	this.server.uploadStream(this.sys.writeToStream(),filename);
05977 	this.stream = null;
05978 }
05979 //=================================================================
05980 //			pdf$sendFileToServer
05981 //=================================================================
05982 function pdf$uploadFile(filename)
05983 {
05984 	this.server.uploadFile(filename);
05985 }
05986 //=================================================================
05987 //			pdf$open
05988 //=================================================================
05989 function pdf$open(filename,target,as)
05990 {
05991 	var form,file,text,type;	
05992 
05993 	if (arguments.length &lt; 2) target = '_blank';
05994 	if (arguments.length &lt; 3) as = 'PDF';
05995 
05996 	if (target == '') target= '_blank';
05997 
05998 	type = "application/pdf";
05999 
06000 	this.send = false;
06001 	this.stream = null;
06002 	this.f = null;
06003 	this.flush_();
06004 
06005     as = as.toLowerCase();
06006 	
06007 	switch (as.toLowerCase())
06008 	{
06009 	case "string": text = '&lt;pre>' + this.toString() + '&lt;/pre>';
06010 				type = "text/plain";
06011 				break;
06012 
06013 	case "base64": text = this.toBase64(this.data);
06014 				type = "text/plain";
06015 				break;
06016 
06017 	case "dataurl": text = this.toDataURL();
06018 				type = "text/plain";
06019 				break;
06020 
06021 	    default: text = this.data;
06022 				type = "application/pdf";
06023 				break;
06024 	}
06025 	
06026 	CollinsPDF().echo(text,target,type);
06027 }
06028 //==========================================================================================
06029 //				pdf$properties_
06030 //==========================================================================================
06031 function pdf$properties_()
06032 {
06033 	var text,xdate;
06034 
06035 	xdate = this.sys.date_();
06036 
06037 	text = '&lt;&lt;' + "\n";
06038 	text = text + '/CreationDate (D:' + xdate + ')' + "\n";
06039 	text = text + '/Producer (http://CollinsSoftware.com)' + "\n";
06040 	text = text + '/Creator (Collins Software)' + "\n";
06041 	text = text + '/ModDate (D:' + xdate + ')' + "\n";
06042 
06043 	if (this.author		!= '') text = text + '/Author (' + this.author + ')' + "\n";
06044 	if (this.title		!= '') text = text + '/Title (' + this.title + ')' + "\n";
06045 	if (this.subject	!= '') text = text + '/Subject (' + this.subject + ')' + "\n";
06046 	if (this.keywords	!= '') text = text + '/Keywords (' + this.keywords + ')' + "\n";
06047 	text = text + '>>' + "\n";
06048 
06049 	return text;
06050 }
06051 //==========================================================================================
06052 //				pdf$flush_
06053 //==========================================================================================
06054 function pdf$flush_()
06055 {
06056 	var xref;
06057 	var timeup;	
06058 
06059 	this.reportEnd_();				//
06060 
06061 	if (this.ruler != null) this.ruler.end();	//
06062 
06063 	this.data.clear();
06064 	this.cpos = 0;
06065 	
06066 	this.write_('%PDF-1.6' + "\n");
06067 
06068 	this.catalog.write();
06069 
06070 	xref = this.cpos;
06071 	this.write_(this.refText_());
06072 	this.write_(this.trailer_(xref));
06073 }
06074 //==========================================================================================
06075 //				pdf$refText
06076 //==========================================================================================
06077 function pdf$refText_()
06078 {
06079 	var text,n,j,i,filler;
06080 	
06081 	filler = '0000000000000000000';
06082 	
06083 	n = this.ref.length + 1;
06084 	
06085 	text = 'xref' + "\n";
06086 	text = text + '0 ' + n + '' + "\n";
06087 	
06088 	text = text + '0000000000 65535 f ' + "\n";
06089 	
06090 	for (i = 0; i &lt; this.ref.length; ++i)
06091 	{
06092 		n = "" + this.ref[i];
06093 		j = 10 - n.length;
06094 		text = text + '' + filler.substr(0,j) + n + ' 00000 n ' + "\n";
06095 	}
06096 	
06097 	return text;
06098 }
06099 //==========================================================================================
06100 //				pdf$trailer
06101 //==========================================================================================
06102 function pdf$trailer_(xref)
06103 {
06104 	var text,b,n;
06105 
06106 	n = this.ref.length + 1;
06107 	text = 'trailer' + "\n";
06108 	text = text + '&lt;&lt; /Size ' + n + '' + "\n";
06109 	text = text + '/Root ' + this.catalogIndex + ' 0 R' + "\n";
06110 	text = text + '/Info ' + this.propertyIndex + ' 0 R' + "\n";
06111 	text = text + '>>' + "\n";
06112 	text = text + 'startxref' + "\n";
06113 	text = text + xref + '' + "\n";
06114 	text = text + '%%EOF';
06115 	
06116 	return text;
06117 }
06118 //==========================================================================================
06119 //				pdf$write_
06120 //==========================================================================================
06121 function pdf$write_(text)
06122 {
06123 	var nt,rs,b,t;
06124 
06125 	nt = text.length;
06126 	if (nt == 0) return;
06127 
06128 	this.cpos = this.cpos + nt;
06129 
06130 	if (this.stream != null)
06131 	{
06132 		this.stream.WriteText(text);
06133 		return;
06134 	}
06135 
06136 	if (this.send)
06137 	{
06138 		this.sys.send(text);
06139 		return;
06140 	}
06141 
06142 	if (this.f)
06143 	{
06144 	     this.f.write(text);
06145 	     return;
06146 	}
06147 	
06148 	t = typeof(text);
06149 	if (t == 'number') text = '' + text;
06150 	if (t == 'string') return this.data.addText(text);
06151 	
06152 	this.data.addBuffer(text);
06153 	
06154 }
06155 //==========================================================================================
06156 //				pdf$index_
06157 //==========================================================================================
06158 function pdf$index_()
06159 {
06160 	return this.ref.length + 1;
06161 }
06162 //==========================================================================================
06163 //				pdf$addObject_
06164 //==========================================================================================
06165 function pdf$addObject_(text)
06166 {
06167 	var n;
06168 
06169 	n = this.ref.length + 1;
06170 	this.ref[this.ref.length] = this.cpos;
06171 	
06172 	this.write_(n + " 0 obj" + "\n");
06173 	this.write_(text + "\n" + "endobj" + "\n");
06174 	
06175 	return n;
06176 }
06177 //==========================================================================================
06178 //				pdf$addObjectSignature_
06179 //==========================================================================================
06180 function pdf$addObjectSignature_()
06181 {
06182 	var n,text;
06183 	
06184 	n = this.ref.length + 1;
06185 	this.ref[this.ref.length] = this.cpos;
06186 	
06187 	this.write_(n + " 0 obj" + "\n");
06188 	
06189 	text = this.catalog.signatureObject_();
06190 	this.write_(text);
06191 	this.write_("\n" + "endobj" + "\n");
06192 	
06193 	return n;
06194 }
06195 //==========================================================================================
06196 //				pdf$addObjectU3d_
06197 //==========================================================================================
06198 function pdf$addObjectU3d_(index)
06199 {
06200 	var obj,n,text;
06201 
06202 	n = this.ref.length + 1;
06203 	this.ref[this.ref.length] = this.cpos;
06204 	
06205 	this.write_(n + ' 0 obj' + "\n");
06206 	text = this.catalog.u3dObject_(index);
06207 	this.write_(text + "\n" + 'endobj' + "\n");
06208 
06209 	return n;
06210 }
06211 //==========================================================================================
06212 //				pdf$addObjectFontfile_
06213 //==========================================================================================
06214 function pdf$addObjectFontfile_(index)
06215 {
06216 	var obj,n,text;
06217 
06218 	n = this.ref.length + 1;
06219 	this.ref[this.ref.length] = this.cpos;
06220 	
06221 	this.write_(n + ' 0 obj' + "\n");
06222 	text = this.catalog.fontfileObject_(index);
06223 	this.write_(text + "\n" + 'endobj' + "\n");
06224 
06225 	return n;
06226 }
06227 //==========================================================================================
06228 //				pdf$addObjectImage_
06229 //==========================================================================================
06230 function pdf$addObjectImage_(index)
06231 {
06232 	var obj,n,text;
06233 
06234 	n = this.ref.length + 1;
06235 	this.ref[this.ref.length] = this.cpos;
06236 	
06237 	this.write_(n + ' 0 obj' + "\n");
06238 	this.catalog.imageObject_(index);
06239 	this.write_("\n" + 'endobj' + "\n");
06240 
06241 	return n;
06242 }
06243 //==========================================================================================
06244 //				pdf$addGraphic
06245 //==========================================================================================
06246 function pdf$addGraphic(data,width,height)
06247 {
06248 	var ele,p,style;
06249 	
06250 	style = new Object();
06251 
06252 	p = this.getPosition();
06253 
06254 	ele = new Object();
06255 	ele.clip = false;
06256 	ele.range = '';
06257 	ele.backgroundColor = '';
06258 	ele.dynamic = false;
06259 	ele.animateEvery = 0;
06260 	ele.animateFunction = ''; // 'rotateText';
06261 	ele.origin = '';
06262 	ele.style = style;
06263 	ele.lookat = '';
06264 	ele.lookfrom = '';
06265 	ele.is3D = false;
06266 	
06267 	ele.width = width;
06268 	ele.height = height;
06269 		
06270 	this.placeGraphic(x,y,data,ele);
06271 
06272 	this.xpos = this.xpos + w;
06273 	this.ypos = this.ypos - h;
06274 }
06275 //==========================================================================================
06276 //				pdf$placeGraphic
06277 //==========================================================================================
06278 function pdf$placeGraphic(x,y,data,ele)
06279 {
06280 	var viewdef,p,graphic;
06281 	var height,width;
06282 
06283 	p = this.toPoint_(x,y);
06284 
06285 	ele.absolute = true;
06286 	height = ele.offsetHeight / 110 * 72; 
06287 	width = ele.offsetWidth / 110 * 72; 
06288 
06289 	viewdef = new viewdef$(0,p.x,p.y,width,height,ele);
06290 	graphic = new graphicView$(0,viewdef,this.plot,this.graphicCg2);
06291 
06292 	this.holdPage = true;
06293 
06294 	graphic.draw(data);
06295 	this.holdPage = false;	
06296 }
06297 //==========================================================================================
06298 //				pdf$placeFormInput
06299 //==========================================================================================
06300 function pdf$placeFormInput(x,y,ele)
06301 {
06302 
06303 	var h,w,field;
06304 	
06305 	h = ele.offsetHeight / 110 * 72;
06306 	w = ele.offsetWidth / 110 * 72;
06307  
06308 	field == null;
06309 
06310 	switch (ele.type)
06311 	{
06312 	case     'button': field = this.placeFormButton(x,y,ele.value,ele.onClick,h,w);
06313 					   break;	
06314 	case      'image': field = this.placeFormImage(x,y,ele.imageFile,ele.onClick,h,w);
06315 					   break;	
06316 	case      'radio': field = this.placeFormRadio(x,y,ele.name,ele.name,'',ele.checked,ele.onClick);
06317 					   break;	
06318 	case   'checkbox': field = this.placeFormCheckbox(x,y,ele.name,'',ele.checked,ele.onClick);
06319 					   break;	
06320 	case       'file': field = this.placeFormText(x,y,ele.name,ele.value,ele.onChange,h,w);
06321 					   break;	
06322 	case   'password': field = this.placeFormPassword(x,y,ele.name,ele.value,ele.onChange,h,w);
06323 					   break;	
06324 	case     'submit': field = this.placeFormSubmit(x,y,ele.value,ele.action,h,w);
06325 					   break;	
06326 	case      'reset': field = this.placeFormReset(x,y,ele.value,h,w);	
06327 					   break;	
06328 	case     'hidden': field = this.addFormHidden(ele.name,ele.value); 
06329 					   break;	
06330 	          default: field = this.placeFormText(x,y,ele.name,ele.value,ele.onChange,h,w); 
06331 			   break;	
06332 	}
06333 		
06334 	return field;
06335 }
06336 //==========================================================================================
06337 //				pdf$getPos_
06338 //==========================================================================================
06339 function pdf$getPos_(height,width)
06340 {
06341 	var p;
06342 
06343 	p = new Object();
06344 	p.height = height;
06345 	p.width  = width;
06346 
06347 	if (this.xpos > this.xmin)
06348 	{
06349 		if ((this.xpos + width) > this.xmax)
06350 		{
06351 			if (this.rowHeight &lt;= 0) this.rowHeight = 12;
06352 			this.xpos = this.xmin;
06353 			this.ypos = this.ypos - this.rowHeight;
06354 			if (this.ypos &lt; this.ymin) this.pageBreak();
06355 			this.rowHeight = 0;
06356 		}
06357 	}					
06358 		
06359 	p.xpos = this.xpos;
06360 	p.ypos = this.ypos;
06361 
06362 	if (this.xpos &lt; this.xmin) this.xpos = this.xmin;
06363 	p.x = (this.xpos - this.xmin) / 72;
06364 	p.y = (this.ymax - this.ypos) / 72;
06365 
06366 	return p;
06367 }
06368 //==========================================================================================
06369 //				pdf$setPos_
06370 //==========================================================================================
06371 function pdf$setPos_(p)
06372 {
06373 	if (p.height > this.rowHeight) this.rowHeight = p.height;
06374 	this.xpos = p.xpos + p.width + 1;
06375 	this.setSize_();
06376 }
06377 //==========================================================================================
06378 //				pdf$placeFormReset
06379 //==========================================================================================
06380 function pdf$placeFormReset(x,y,caption,height,width)
06381 {
06382 	var h,w;
06383 	
06384 	h = 0;
06385 	w = 0;
06386 	if (arguments.length > 3) h = parseFloat(height);
06387 	if (arguments.length > 4) w = parseFloat(width);
06388 
06389 	if (caption == '') caption = 'Reset';
06390 
06391 	return this.placeFormButton(x,y,caption,'',h,w,'reset');		
06392 }
06393 //==========================================================================================
06394 //				pdf$addFormReset
06395 //==========================================================================================
06396 function pdf$addFormReset(caption,height,width)
06397 {
06398 	var h,w,p,field,obj;
06399 
06400 	h = 0;
06401 	w = 0;
06402 	if (arguments.length > 1) h = parseFloat(height);
06403 	if (arguments.length > 2) w = parseFloat(width);
06404 
06405 	obj = this.formButtonSize(caption,h,w);
06406 
06407 	p = this.getPos_(obj.height,obj.width);
06408 
06409 	if (caption == '') caption = 'Reset';
06410 
06411 	field = this.placeFormButton(p.x,p.y,caption,'',obj.height,obj.width,'reset');
06412 
06413 	this.setPos_(p);
06414 
06415 	return field;
06416 }
06417 //==========================================================================================
06418 //				pdf$formButtonSize
06419 //==========================================================================================
06420 function pdf$formButtonSize(caption,height,width)
06421 {
06422 	var h,w,obj;
06423 
06424 	obj = new Object();	
06425 	obj.height = Math.floor(this.charHeight() * 1.2);
06426 	obj.width = Math.floor(this.textWidth(caption) * 1.2);
06427 
06428 	if (height > 0) obj.height = height;
06429 	if (width  > 0) obj.width = width;
06430 
06431 	if (obj.width &lt; 10) obj.width = 10;
06432 	if (obj.height &lt; 12) obj.height = 12;
06433 
06434 
06435 	return obj;
06436 }
06437 //==========================================================================================
06438 //				pdf$addFormSubmit
06439 //==========================================================================================
06440 function pdf$addFormSubmit(caption,action,height,width)
06441 {
06442 	var h,w,p,obj;
06443 	var field;
06444 
06445 	h = 0;
06446 	w = 0;
06447 	if (arguments.length > 2) h = parseFloat(height);
06448 	if (arguments.length > 3) w = parseFloat(width);
06449 
06450 	obj = this.formButtonSize(caption,h,w);
06451 
06452 	p = this.getPos_(obj.height,obj.width);
06453 
06454 	if (caption == '') caption = 'Submit Query';
06455 
06456 	field = this.placeFormButton(p.x,p.y,caption,action,obj.height,obj.width,'submit');
06457 	
06458 	this.setPos_(p);
06459 	return field;
06460 }
06461 //==========================================================================================
06462 //				pdf$placeFormSubmit
06463 //==========================================================================================
06464 function pdf$placeFormSubmit(x,y,caption,action,height,width)
06465 {
06466 	var h,w,field,obj;
06467 
06468 	h = 0;
06469 	w = 0;
06470 	if (arguments.length > 4) h = parseFloat(height);
06471 	if (arguments.length > 5) w = parseFloat(width);
06472 
06473 	obj = this.formButtonSize(caption,h,w);
06474 	
06475 	if (caption == '') caption = 'Submit';
06476 
06477 	field = this.placeFormButton(x,y,caption,'',obj.height,obj.width,'submit');		
06478 	field.action = action;
06479 	
06480 	return field;
06481 }
06482 //==========================================================================================
06483 //				pdf$addFormButton
06484 //==========================================================================================
06485 function pdf$addFormButton(caption,onclick,height,width,type)
06486 {
06487 	var i,obj,x,y;
06488 	var h,w,t,p;
06489 	var field,onClick;
06490 
06491 	h = 0;
06492 	w = 0;
06493 	t = 'button';
06494 	onClick = '';
06495 	if (arguments.length > 1) onClick = onclick;
06496 	if (arguments.length > 2) h = parseFloat(height);
06497 	if (arguments.length > 3) w = parseFloat(width);
06498 	if (arguments.length > 4) t = type;
06499 
06500 	obj = this.formButtonSize(caption,h,w);
06501 	p = this.getPos_(obj.height,obj.width);
06502 
06503 	field = this.placeFormButton(p.x,p.y,caption,onClick,obj.height,obj.width,t);
06504 	this.setPos_(p);
06505 	return field;
06506 
06507 }
06508 //==========================================================================================
06509 //				pdf$addFormImage
06510 //==========================================================================================
06511 function pdf$addFormImage(url,onclick,height,width)
06512 {
06513 	var i,obj,x,y,t,type;
06514 	var h,w,p;
06515 	var field,onClick;
06516 
06517 	h = 32;
06518 	w = 32;
06519 	onClick = '';
06520 	if (arguments.length > 1) onClick = onclick;
06521 	if (arguments.length > 2) h = parseFloat(height);
06522 	if (arguments.length > 3) w = parseFloat(width);
06523 	if (arguments.length > 4) t = type;
06524 
06525 	p = this.getPos_(h,w);
06526 
06527 	field = this.placeFormImage(p.x,p.y,url,onClick,h,w);
06528 
06529 	this.setPos_(p);
06530 	return field;
06531 
06532 }
06533 //==========================================================================================
06534 //				pdf$placeFormButton
06535 //==========================================================================================
06536 function pdf$placeFormButton(x,y,caption,onclick,height,width,type)
06537 {
06538 	var i,field,p,dy;
06539 	var h,w,onClick,obj,p,t;
06540 
06541 	p = this.toPoint_(x,y);
06542 	h = Math.round(this.charHeight() * 1.2);
06543 	w = Math.round(this.width_(caption) * 1.2);
06544 
06545 	onClick = '';
06546 	t = '';
06547 	if (arguments.length > 3) onClick = onclick;
06548 	if (arguments.length > 4) h = Math.round(parseFloat(height));
06549 	if (arguments.length > 5) w = Math.round(parseFloat(width));
06550 	if (arguments.length > 6) t = '' + type;
06551 
06552 	if (onClick == '') onClick = "app.ale" + "rt('No Click Event specified example: app.4(message)')";
06553 
06554 	obj = this.formButtonSize(caption,h,w);
06555 	h = obj.height;
06556 	w = obj.width;
06557 
06558 	dy = 0;
06559 	dy = this.charHeight();
06560 	if (dy &lt; 0) dy = 0;
06561 
06562 	field = new pdfField$(this,'button_' + t,'button');
06563 
06564 	field.caption		= caption;
06565 	field.x		= p.x;
06566 	field.y		= p.y - h;
06567 	field.height		= h;
06568 	field.width		= w;
06569 	field.onClick		= onClick;
06570 	field.noExport		= true;
06571 	field.fontSize		= this.fontSize;
06572 	field.action		= '';
06573 	field.method		= '';
06574 
06575 	field.kind		= 'button';
06576 	if (type == 'submit') 
06577 	{
06578 		field.kind	= 'submit';
06579 		field.action	= onClick;
06580 		field.onClick	= '';
06581 	}
06582 
06583 	if (type == 'reset')  field.kind = 'reset';
06584 	
06585 	this.catalog.addField(field);
06586 
06587 	return field;
06588 }
06589 //==========================================================================================
06590 //				pdf$findImage
06591 //==========================================================================================
06592 function pdf$findImage(obj)
06593 {	
06594 	var index;
06595 	
06596 	for (index = 0; index &lt; this.images.length; ++index)
06597 	{
06598 		if (obj.filename == this.images[index].filename) return index;
06599 	}
06600 
06601 	index = this.images.length;
06602 	this.images[index] = obj;
06603 	
06604 	return  index;
06605 	
06606 }
06607 //==========================================================================================
06608 //				pdf$findU3d
06609 //==========================================================================================
06610 function pdf$findU3d(obj)
06611 {	
06612 	var index;
06613 	
06614 	for (index = 0; index &lt; this.u3ds.length; ++index)
06615 	{
06616 		if (obj.filename == this.u3ds[index].filename) return index;
06617 	}
06618 
06619 	index = this.u3ds.length;
06620 	this.u3ds[index] = obj;
06621 	
06622 	return  index;
06623 }
06624 //==========================================================================================
06625 //				pdf$placeFormImage
06626 //==========================================================================================
06627 function pdf$placeFormImage(x,y,src,onclick,height,width)
06628 {
06629 	var i,field,p,obj,a;
06630 	var h,w,onClick,index,ext,t;
06631 
06632 	a = 0;
06633 	p = this.toPoint_(x,y);
06634 
06635 	obj = this.imageSize(src);
06636 	if (obj == null) return;			// can only accept jpeg files (at this time)
06637 
06638 	h = obj.height;
06639 	w = obj.width;
06640 
06641 	index = this.findImage(obj);
06642 	
06643 	onClick = '';
06644 	t = '';
06645 	if (arguments.length > 3) onClick = onclick;
06646 	if (arguments.length > 4) h = parseFloat(height);
06647 	if (arguments.length > 5) w = parseFloat(width);
06648 
06649 	if (isNaN(h)) h = 0;
06650 	if (isNaN(w)) w = 0;
06651 
06652 	if (h &lt;= 0) h = obj.height;
06653 	if (w &lt;= 0) w = obj.width;
06654 	
06655 	field = new pdfField$(this,'image_' + t,'image');
06656 
06657 	field.imageIndex	= index;
06658 	field.x		= p.x;
06659 	field.y		= p.y - h;
06660 	field.height		= h;
06661 	field.width		= w;
06662 	field.onClick		= onClick;
06663 	field.noExport		= true;
06664 	field.kind		= 'image';
06665 	
06666 	this.catalog.addField(field);
06667 	this.catalog.activePage.addImage(x,y,h,w,a,index);
06668 
06669 	return field;
06670 }
06671 //==========================================================================================
06672 //				pdf$addFormCheckbox
06673 //==========================================================================================
06674 function pdf$addFormCheckbox(name,caption,checked,onclick)
06675 {
06676 	var h,w,p,size;
06677 	var field,onClick,i,c;
06678 	
06679 	h = 12;
06680 	w = 12;
06681 	onClick = '';
06682 	if (arguments.length > 3) onClick = onclick;
06683 	
06684 	size = 0;
06685 	for (i=0; i &lt; caption.length; ++i)
06686 	{
06687 		if (i == 0) size = 6;
06688 		c = caption.charCodeAt(i);
06689 		size += this.charWidth(c);		
06690 	}
06691 
06692 	p = this.getPos_(h+3,w+size);
06693 	
06694 	field = this.placeFormCheckbox(p.x,p.y,name,caption,checked,onClick);
06695 	
06696 	this.setPos_(p);
06697 	return field;
06698 
06699 }
06700 //==========================================================================================
06701 //				pdf$placeFormCheckbox
06702 //==========================================================================================
06703 function pdf$placeFormCheckbox(x,y,name,caption,checked,onclick)
06704 {
06705 	var i,field,tx,ty;
06706 	var h,w,onClick,dy,p;
06707 
06708 	p = this.toPoint_(x,y);
06709 	h = 10;
06710 	w = 10;
06711 	onClick = '';
06712 	if (arguments.length > 5) onClick = onclick;
06713 
06714 	dy = this.charHeight() - h;
06715 	if (dy &lt; 0) dy = 0;
06716 	if (dy > 4) dy = dy - 2;
06717 
06718 	field = new pdfField$(this,name,'checkbox');
06719 	
06720 	field.x		= p.x - 2;
06721 	field.y		= p.y - (h + dy);
06722 	field.height		= h;
06723 	field.width		= w;
06724 	field.onClick		= onClick;
06725 	field.checked		= checked;
06726 	field.caption		= caption;
06727 	
06728 	this.catalog.addField(field);
06729 
06730 	tx = x + (14 / 72);
06731 	ty = y + (this.charHeight() / 72);
06732 
06733 	if (caption != '') this.placeText(tx,ty,caption);
06734 
06735 	return field;
06736 }
06737 //==========================================================================================
06738 //				pdf$addFormRadio
06739 //==========================================================================================
06740 function pdf$addFormRadio(name,group,caption,checked,onclick)
06741 {
06742 	var h,w,p,size;
06743 	var field,onClick;
06744 	
06745 	h = 10;
06746 	w = 10;
06747 	onClick = '';
06748 	if (arguments.length > 4) onClick = onclick;
06749 
06750 	size = this.textWidth(caption);
06751 
06752 	p = this.getPos_(h+6,w+4+size);
06753 	
06754 	field = this.placeFormRadio(p.x,p.y,name,group,caption,checked,onClick);
06755 	
06756 	this.setPos_(p);
06757 	return field;
06758 
06759 }
06760 //==========================================================================================
06761 //				pdf$placeFormCheckbox
06762 //==========================================================================================
06763 function pdf$placeFormRadio(x,y,name,group,caption,_checked,onclick)
06764 {
06765 	var i,field,tx,ty;
06766 	var p,h,w,ch,onClick,dy,checked;
06767 
06768 	p = this.toPoint_(x,y);
06769 	h = this.charHeight() - 2;
06770 	w = 10;
06771 
06772 	dy = this.charHeight() - h;
06773 	if (dy &lt; 0) dy = 0;
06774 	if (dy > 4) dy = dy - 2;
06775 
06776 	onClick = '';
06777 	checked = false;
06778 	if (arguments.length > 5) checked = _checked;
06779 	if (arguments.length > 6) onClick = onclick;
06780 
06781 	field = new pdfField$(this,name,'radio');
06782 	
06783 	field.x		= p.x;
06784 	field.y		= p.y - (h + dy);
06785 	field.height		= h;
06786 	field.width		= w;
06787 	field.onClick		= onClick;
06788 	field.checked		= checked;
06789 	field.caption		= caption;
06790 	field.groupName	= group;
06791 	
06792 	this.catalog.addField(field);
06793 
06794 	tx = x + (12 / 72);
06795 	ty = y + (this.charHeight() / 72);
06796 
06797 	this.placeText(tx,ty,caption);
06798 	return field;
06799 }
06800 //==========================================================================================
06801 //				pdf$addFormSelect
06802 //==========================================================================================
06803 function pdf$addFormSelect(name,options,values,selected,onchange,height,width)
06804 {
06805 	var h,w,p;
06806 	var field,onChange;
06807 
06808 	h = 16;
06809 	w = 64;
06810 	onChange = '';
06811 	if (arguments.length > 4) onChange = onchange;
06812 	if (arguments.length > 5) h = parseFloat(height);
06813 	if (arguments.length > 6) w = parseFloat(width);
06814 
06815 	p = this.getPos_(h,w);
06816 
06817 	field = this.placeFormSelect(p.x,p.y,name,options,values,selected,onChange,h,w);
06818 
06819 	this.setPos_(p);
06820 	return field;
06821 	
06822 }
06823 //==========================================================================================
06824 //				pdf$placeFormSelect
06825 //==========================================================================================
06826 function pdf$placeFormSelect(x,y,name,options,values,selected,onchange,height,width)
06827 {
06828 	var i,field,size,p;
06829 	var h,w,onClick;
06830 	var onChange,s;
06831 
06832 	p = this.toPoint_(x,y);
06833 
06834 	h = 14;
06835 	w = 64;
06836 	onChange = '';
06837 	s = '';
06838 	
06839 	if (arguments.length > 5) s = selected;
06840 	if (arguments.length > 6) onChange = onchange;
06841 	if (arguments.length > 7) h = parseFloat(height) - 6;
06842 	if (arguments.length > 8) w = parseFloat(width) - 6;
06843 
06844 	field = new pdfField$(this,name,'select');
06845 	field.selected		= s;
06846 	field.options		= new Array();
06847 	field.values		= new Array();
06848 	
06849 	for (i=0; i &lt; options.length; ++i)
06850 	{
06851 		size = this.width_(options[i]);
06852 		if (size > w) w = size;
06853 		
06854 		field.options[i] = options[i];
06855 		field.values[i] = '';
06856 		if ((values != null) && (values.length &lt; i)) field.values[i] = values[i];
06857 	}
06858 	
06859 	field.x	= p.x + 1;
06860 	field.y	= p.y - h;
06861 	field.height	= h;
06862 	field.width	= w;
06863 	field.onChange	= onChange;
06864 	
06865 	this.catalog.addField(field);
06866 	return field;
06867 }
06868 //==========================================================================================
06869 //				pdf$addFormListbox
06870 //==========================================================================================
06871 function pdf$addFormListbox(name,options,selected,onchange,height,width)
06872 {
06873 	var h,w,s,p;
06874 	var field;
06875 	var onChange;
06876 	
06877 	h = 64;
06878 	w =128;
06879 	s = '';
06880 	onChange = '';
06881 	if (arguments.length &lt; 3) s = selected;
06882 	if (arguments.length > 4) onChange = onchange;
06883 	if (arguments.length > 5) h = parseFloat(height);
06884 	if (arguments.length > 6) w = parseFloat(width);
06885 
06886 	p = this.getPos_(h,w);
06887 	
06888 	field = this.placeFormListbox(p.x,p.y,name,options,s,onChange,h,w);
06889 
06890 	this.setPos_(p);
06891 	return field;
06892 	
06893 }
06894 //==========================================================================================
06895 //				pdf$placeFormListbox
06896 //==========================================================================================
06897 function pdf$placeFormListbox(x,y,name,options,selected,onchange,height,width)
06898 {
06899 	var i,field;
06900 	var h,w,p;
06901 	var onChange;
06902 
06903 	p = this.toPoint_(x,y);
06904 	
06905 	h = 64;
06906 	w = 64;
06907 	onChange = '';
06908 	if (arguments.length > 5) onChange = onchange;
06909 	if (arguments.length > 6) h = parseFloat(height);
06910 	if (arguments.length > 7) w = parseFloat(width);
06911 
06912 	field = new pdfField$(this,name,'listbox');
06913 	field.selected		= selected;
06914 	field.options		= new Array();
06915 	
06916 	for (i=0; i &lt; options.length; ++i) field.options[i] = options[i];
06917 	
06918 	field.x	= p.x;
06919 	field.y	= p.y - h;
06920 	field.height	= h;
06921 	field.width	= w;
06922 	field.onChange	= onChange;
06923 	
06924 	this.catalog.addField(field);
06925 	return field;
06926 }
06927 //==========================================================================================
06928 //			pdf$addFormPassword
06929 //==========================================================================================
06930 function pdf$addFormPassword(name,value,onchange,height,width)
06931 {
06932 	var h,w,field;
06933 	var onChange;
06934 	
06935 	h = 16;
06936 	w = 120;
06937 	onChange = '';
06938 
06939 	if (arguments.length > 2) onChange = onchange;
06940 	if (arguments.length > 3) h = parseFloat(height);
06941 	if (arguments.length > 4) w = parseFloat(width);
06942 
06943 	field = this.addFormText(name,value,onChange,h,w,'password');
06944 	return field;	
06945 
06946 }
06947 //==========================================================================================
06948 //			pdf$addFormFile
06949 //==========================================================================================
06950 function pdf$addFormFile(name,value,onchange,height,width)
06951 {
06952 	var h,w,field;
06953 	var onChange;
06954 	
06955 	h = 16;
06956 	w = 120;
06957 	onChange = '';
06958 
06959 	if (arguments.length > 2) onChange = onchange;
06960 	if (arguments.length > 3) h = parseFloat(height);
06961 	if (arguments.length > 4) w = parseFloat(width);
06962 
06963 	field = this.addFormText(name,value,onChange,h,w,'file');
06964 	return field;	
06965 
06966 }
06967 //==========================================================================================
06968 //			pdf$addFormHidden
06969 //==========================================================================================
06970 function pdf$addFormHidden(name,value)
06971 {
06972 	var field;
06973 	
06974 	field = this.addFormText(name,value,'',12,120,'hidden');
06975 	return field;	
06976 
06977 }
06978 //==========================================================================================
06979 //			pdf$addFormText
06980 //==========================================================================================
06981 function pdf$addFormText(name,value,onchange,height,width,type)
06982 {
06983 	var h,w,p,t,field;
06984 	var onChange;
06985 	
06986 	h = 16;
06987 	w = 120;
06988 	t = 'text';
06989 	onChange = '';
06990 	if (arguments.length > 2) onChange = onchange;
06991 	if (arguments.length > 3) h = parseFloat(height);
06992 	if (arguments.length > 4) w = parseFloat(width);
06993 	if (arguments.length > 5) t = '' + type;
06994 
06995 	p = this.getPos_(h,w);
06996 
06997 	field = this.placeFormText(p.x,p.y,name,value,onChange,h,w,t);
06998 
06999 	if (type != 'hidden') this.setPos_(p);
07000 	return field;	
07001 
07002 }
07003 //==========================================================================================
07004 //			pdf$placeFormPassword
07005 //==========================================================================================
07006 function pdf$placeFormPassword(x,y,name,value,onchange,height,width)
07007 {
07008 	var i,field;
07009 	var h,w,p,t;
07010 	var onChange;
07011 
07012 	p = this.toPoint_(x,y);
07013 	
07014 	h = 16;
07015 	w = 120;
07016 	onChange = '';
07017 	if (arguments.length > 4) onChange = onchange;
07018 	if (arguments.length > 5) h = parseFloat(height);
07019 	if (arguments.length > 6) w = parseFloat(width);
07020 
07021 	field = this.placeFormText(x,y,name,value,onChange,h,w,'password');
07022 	return field;
07023 }
07024 //==========================================================================================
07025 //			pdf$placeFormFile
07026 //==========================================================================================
07027 function pdf$placeFormFile(x,y,name,value,onchange,height,width)
07028 {
07029 	var i,field;
07030 	var h,w,p,t;
07031 	var onChange;
07032 
07033 	p = this.toPoint_(x,y);
07034 	
07035 	h = 16;
07036 	w = 120;
07037 	onChange = '';
07038 	if (arguments.length > 4) onChange = onchange;
07039 	if (arguments.length > 5) h = parseFloat(height);
07040 	if (arguments.length > 6) w = parseFloat(width);
07041 
07042 	field = this.placeFormText(x,y,name,value,onChange,h,w,'file');
07043 	return field;
07044 }
07045 //==========================================================================================
07046 //			pdf$placeFormText
07047 //==========================================================================================
07048 function pdf$placeFormText(x,y,name,value,onchange,height,width,type)
07049 {
07050 	var i,field;
07051 	var h,w,p,t;
07052 	var onChange;
07053 
07054 	p = this.toPoint_(x,y);
07055 	
07056 	h = 16;
07057 	w = 120;
07058 	t = 'text';
07059 	onChange = '';
07060 	if (arguments.length > 4) onChange = onchange;
07061 	if (arguments.length > 5) h = parseFloat(height);
07062 	if (arguments.length > 6) w = parseFloat(width) - 2;
07063 	if (arguments.length > 7) t = '' + type;
07064 
07065 	if (h &lt;= 0) h = 16;
07066 	if (w &lt;= 0) w = 120;
07067 
07068 	field = new pdfField$(this,name,'text');
07069 	field.value	= value;
07070 	
07071 	field.x	= p.x - 2;
07072 	field.y	= p.y - h;
07073 	field.height	= h;
07074 	field.width	= w;
07075 	field.onChange	= onChange;
07076 	field.password	= false;
07077 	field.file	= false;
07078 	field.hidden	= false;
07079 	field.rows	= 1;
07080 	
07081 	t = t.toLowerCase();
07082 	if (t == 'password') field.password = true;
07083 	if (t == 'file') field.file = true;
07084 	if (t == 'hidden') field.hidden = true;
07085 		
07086 	field.rows = Math.floor(h / 12);
07087 
07088 	if (field.rows &lt; 1) field.rows = 1;
07089 	if (field.file)     field.rows = 1;
07090 	if (field.password) field.rows = 1;
07091 	if (field.hidden)   field.rows = 1;
07092 	
07093 	this.catalog.addField(field);
07094 	return field;
07095 }
07096 //==========================================================================================
07097 //				pdf$addImage
07098 //==========================================================================================
07099 function pdf$addImage(filename,  height,width,angle,alt)
07100 {
07101 	var i,obj,x,y,dx,dy;
07102 	var h,w,a,p;
07103 
07104 	h = 0;
07105 	w = 0;
07106 	a = 0;
07107 
07108 	if (arguments.length > 1) h = parseFloat(height);
07109 	if (arguments.length > 2) w = parseFloat(width);
07110 	if (arguments.length > 3) a = parseFloat(angle);
07111 
07112 	p = this.getPos_(h,w);
07113 	
07114 	this.placeImage(p.x,p.y,filename,h,w,a,alt);
07115 	
07116 	this.setPos_(p);
07117 }
07118 //==========================================================================================
07119 //				pdf$placeImage
07120 //==========================================================================================
07121 function pdf$placeImage(x,y,filename, height,width,angle,alt,ele)
07122 {
07123 	var p;
07124 
07125 	p = this.toPoint_(x,y);
07126 	
07127 	height = this.toPoint_(height);
07128 	width  = this.toPoint_(width);
07129 
07130 	this.placeImage_A(p.x,p.y,filename, height,width,angle,alt,ele);
07131 }
07132 //==========================================================================================
07133 //			pdf$placeImage_A
07134 //==========================================================================================
07135 function pdf$placeImage_A(x,y,filename, height,width,angle,alt,ele)
07136 {
07137 	var i,obj;
07138 	var h,w,a,p,fname;
07139 	var ext,index;
07140 
07141 	fname = filename;
07142 
07143 	x = Math.round(parseFloat(x));
07144 	y = Math.round(parseFloat(y));
07145 	height = Math.round(parseFloat(height));
07146 	width  = Math.round(parseFloat(width));
07147 	
07148 	if (filename.toLowerCase() == 'about:blank') return;
07149 	
07150 	h = 0;
07151 	w = 0;
07152 	a = 0;
07153 	if (arguments.length > 3) h = parseFloat(height) ;
07154 	if (arguments.length > 4) w = parseFloat(width);
07155 	if (arguments.length > 5) a = parseFloat(angle);
07156 
07157 	obj = this.imageSize(filename);
07158 
07159 	if (obj == null)
07160 	{
07161 		log('missing image: ' + filename);
07162 		this.placeMissingImage(x,y,h,w,alt);	
07163 		return;
07164 	}
07165 
07166 	if (isNaN(h)) h = obj.height / 110 * 72;
07167 	if (isNaN(w)) w = obj.width / 110 * 72;
07168 
07169 	if (obj.is3D)
07170 	{
07171 		index = this.findU3d(obj);
07172 		this.catalog.activePage.addU3d(x,y,h,w,index,ele);	
07173 	}
07174 	else
07175 	{
07176 		index = this.findImage(obj);
07177 		this.catalog.activePage.addImage(x,y,h,w,a,index);
07178 	}
07179 }
07180 //==========================================================================================
07181 //			pdf$placeMissingImage
07182 //==========================================================================================
07183 function pdf$placeMissingImage(x,y,height,width,alt)
07184 {
07185 	var x1,y1,x2,y2,scale;
07186 	var size,h,w;
07187 	var px,py;
07188 	
07189 	var maindarkborder = '#ACA899';
07190 	var mainlightborder = '#F1EFE2';
07191 	var crossColor = '#F12000';
07192 	var boxBorder = '#C0C0C0';
07193 			
07194 	if (height &lt;= 0) height = 30 / 110 * 72;
07195 	if (width &lt;= 0) width = 24 / 110 * 72;
07196 	if (! alt) alt = '';
07197 
07198 	this.setFontName('arial');
07199 	this.setFontSize(6);
07200 	
07201 	scale = 1;
07202 	size = this.textWidth(alt);
07203 	
07204 	height = Math.round(height);
07205 
07206 	x1 = x;
07207 	y1 = y;
07208 	x2 = x1 + width;
07209 	y2 = y1 - height;
07210 
07211 	w = 16;
07212 	h = 12;
07213 
07214 	px = x1 + w + 6;
07215 	py = y1 - h;
07216 	if (alt != '') this.putWord_(px,py,alt,size);
07217 
07218 	this.setGraphicLineWeight(1);
07219 	this.setGraphicColor(maindarkborder);
07220 	this.setGraphicLineStyle('solid');
07221 	this.setGraphicFillColor('white');
07222 	this.plot.line(x1,y1,x1,y2);
07223 	this.plot.line(x1,y1,x2,y1);
07224 	this.setGraphicColor(mainlightborder);
07225 	this.plot.line(x1,y2,x2,y2);
07226 	this.plot.line(x2,y2,x2,y1);
07227 	
07228 	x1 = x1 + (7 * scale);
07229 	y1 = y1 - (7 * scale);
07230 	x2 = x1 + (14 * scale);
07231 	y2 = y1 - (14 * scale);
07232 	this.setGraphicColor(boxBorder);
07233 	this.plot.rectangle(x1,y1,x2,y2);	
07234 
07235 	x1 = x1 + (4 * scale);
07236 	y1 = y1 - (4 * scale);
07237 	x2 = x1 + (7 * scale);
07238 	y2 = y1 - (7 * scale);
07239 	this.setGraphicLineWeight(2);
07240 	this.setGraphicColor(crossColor);
07241 	this.plot.line(x1,y1,x2,y2);
07242 	this.plot.line(x1,y2,x2,y1);
07243 
07244 //	x1 = x1 + (2 * scale);
07245 //	y1 = y1 - (2 * scale);
07246 //	x2 = x1 + (5 * scale);
07247 //	y2 = y1 - (5 * scale);
07248 //	this.setGraphicLineWeight(2);
07249 //	this.setGraphicColor(crossColor);
07250 //	this.setGraphicFillColor(crossColor);
07251 //	this.drawRectangle_A(x1,y1,x2,y2);	
07252 
07253 	
07254 //zz	
07255 
07256 }
07257 //================================================================
07258 //			pdfBuffer$
07259 //================================================================
07260 function pdfBuffer$() 
07261 {
07262 	this.allocated	= 0;
07263 	this.buffer	= null;
07264 	this.length	= 0;
07265 	this.pos	= 0;
07266 
07267 	this.addText	= pdfBuffer$addText;
07268 	this.addByte	= pdfBuffer$addByte;
07269 	this.addBuffer	= pdfBuffer$addBuffer;
07270 
07271 	this.clear	= pdfBuffer$clear;	
07272 }
07273 //================================================================
07274 //			pdfBuffer$clear
07275 //================================================================
07276 function pdfBuffer$clear() 
07277 {	
07278 	delete this.buffer;
07279 	this.allocated	= 0;
07280 	this.buffer	= null;
07281 	this.length	= 0;
07282 	this.pos	= 0;
07283 }
07284 //================================================================
07285 //			pdfBuffer$addText
07286 //================================================================
07287 function pdfBuffer$addText(text) 
07288 {
07289 	var c,i;
07290 
07291 
07292 	for (i=0; i &lt; text.length; ++i)
07293 	{
07294 		c = text.charCodeAt(i);
07295 		this.addByte(c);
07296 	}
07297 }
07298 //================================================================
07299 //			pdfBuffer$addBuffer
07300 //================================================================
07301 function pdfBuffer$addBuffer(buf) 
07302 {
07303 	var i,size,temp;
07304 
07305 	if (this.length + buf.length >= this.allocated)
07306 	{
07307 		size = this.allocated  + 1024 + buf.length;
07308 		temp = new Uint8Array(size);
07309 		for (i=0; i &lt; this.length; ++i) temp[i] = this.buffer[i];
07310 		delete this.buffer;
07311 		this.buffer = temp;
07312 		this.allocated = size;
07313 	}
07314 
07315 	for (i=0; i &lt; buf.length; ++i)
07316 	{
07317 		this.buffer[this.length] = buf[i];
07318 		this.length += 1;
07319 	}
07320 }
07321 //================================================================
07322 //			pdfBuffer$addByte
07323 //================================================================
07324 function pdfBuffer$addByte(value) 
07325 {
07326 	var buf,i,size;
07327 
07328 	if (this.length + 1 >= this.allocated)
07329 	{
07330 		size = this.allocated  + 1024;
07331 		buf = new Uint8Array(size);
07332 		for (i=0; i &lt; this.length; ++i) buf[i] = this.buffer[i];
07333 		delete this.buffer;
07334 		this.buffer = buf;
07335 		this.allocated = size;
07336 	}
07337 
07338 	this.buffer[this.length] = value & 0xFF;
07339 	this.length += 1;
07340 }
07341 //==========================================================================================
07342 //			pdfPage$ (Constructor)
07343 //==========================================================================================
07344 function pdfPage$(catalog,index)
07345 {
07346 	this.catalog			= catalog;
07347 	this.index			= index;
07348 
07349 	this.images			= new Array();			// Image Indexes
07350 	this.hyperlinks			= new Array();			// Hyperlinks
07351 	this.u3ds			= new Array();			// U3D Images
07352 	
07353 	this.xmin			= 0;
07354 	this.ymin			= 0;
07355 	this.xmax			= this.catalog.pdf.pageWidth * 72;		// 8.5 Inches * 72
07356 	this.ymax			= this.catalog.pdf.pageLength * 72;		// 11 Inches * 72 
07357 
07358 	this.write			= pdfPage$write;
07359 	this.stream			= pdfPage$stream;
07360 	this.add			= pdfPage$add;
07361 	this.addImage			= pdfPage$addImage;
07362 	this.addU3d			= pdfPage$addU3d;
07363 	this.addHyperlink		= pdfPage$addHyperlink;
07364 	this.addHotspot			= pdfPage$addHotspot;
07365 
07366 	this.contents_			= pdfPage$contents_;
07367 	this.annots_			= pdfPage$annots_;
07368 	this.imageRef_			= pdfPage$imageRef_;
07369 	this.fonts_			= pdfPage$fonts_;
07370 	this.extGStates_		= pdfPage$extGStates_;
07371 	
07372 	this.addHyperlinkObjects_	= pdfPage$addHyperlinkObjects_;
07373 	this.addWatermarkObjects_	= pdfPage$addWatermarkObjects_;
07374 	this.addU3dObjects_		= pdfPage$addU3dObjects_;
07375 
07376 	this.backgroundColorText	= pdfPage$backgroundColorText;
07377 	this.backgroundColorText_A	= pdfPage$backgroundColorText_A;
07378 
07379 	this.objectCount		= pdfPage$objectCount;
07380 	
07381 	this.onPageOpen			= -1;
07382 	this.onPageClose		= -1;
07383 	
07384 	this.watermark			= this.catalog.pdf.watermark;
07385 	this.watermarkRef		= -1;
07386 	
07387 	this.backgroundColor		= this.catalog.pdf.pageBackgroundColor;
07388 
07389 	this.marginLeftColor		= this.catalog.pdf.pageMarginLeftColor;
07390 	this.marginRightColor		= this.catalog.pdf.pageMarginRightColor;
07391 	this.marginTopColor		= this.catalog.pdf.pageMarginTopColor;
07392 	this.marginBottomColor		= this.catalog.pdf.pageMarginBottomColor;
07393 
07394 	this.marginLeft			= this.catalog.pdf.marginLeft;
07395 	this.marginRight		= this.catalog.pdf.marginRight;
07396 	this.marginTop			= this.catalog.pdf.marginTop;
07397 	this.marginBottom		= this.catalog.pdf.marginBottom;
07398 	
07399 	this.rotate			= this.catalog.pdf.pageRotate;
07400 	
07401 	this.image			= '';
07402 }
07403 //==========================================================================================
07404 //				pdfPage$objectCount
07405 //==========================================================================================
07406 function pdfPage$objectCount()
07407 {
07408 	var count;
07409 
07410 	count = 1;		// "stream"
07411 //	if (this.watermark != '') count = count + 2;
07412 	
07413 	count = count + (this.hyperlinks.length);
07414 	return count;
07415 }
07416 //==========================================================================================
07417 //				pdfPage$addHyperlink
07418 //==========================================================================================
07419 function pdfPage$addHyperlink(x,y,height,width,href)
07420 {
07421 	var obj,n,dx,dy,top,bot;
07422 
07423 	top = this.catalog.pdf.fontSize * 0.25;
07424 	bot = this.catalog.pdf.fontSize * 0.75;
07425 
07426 	obj = new Object();
07427 	obj.href = href;
07428 	obj.x1 = Math.round(x * 100) / 100;
07429 	obj.y1 = Math.round((y - top) * 100) / 100;
07430 	obj.x2 = Math.round((x + width) * 100) / 100;
07431 	obj.y2 = Math.round((y + bot) * 100) / 100;
07432 
07433 //	this.catalog.pdf.drawRectangle_A(obj.x1,obj.y1,obj.x2,obj.y2);
07434 
07435 	n = this.hyperlinks.length;
07436 	this.hyperlinks[n] = obj;
07437 }
07438 //==========================================================================================
07439 //				pdfPage$addU3d
07440 //==========================================================================================
07441 function pdfPage$addU3d(x,y,height,width,uref,ele)
07442 {
07443 	var n,x1,y1,x2,y2,obj,h,w;
07444 
07445 	obj = new Object();
07446 	obj.uref = uref;
07447 	
07448 	x = parseFloat(x);
07449 	if (isNaN(x)) x = 0;
07450 
07451 	y = parseFloat(y);
07452 	if (isNaN(y)) y = 0;
07453 
07454 //	y = this.catalog.pdf.ymax - y;
07455 
07456 	h =  Math.round(parseFloat(height));
07457 	w  = Math.round(parseFloat(width));
07458 
07459 	if (isNaN(h)) h = 400;
07460 	if (isNaN(w)) w = 400;
07461 	if (h &lt; 10) h = 400;
07462 	if (w &lt; 10) w = 400;
07463 	
07464 //	x = x + this.catalog.pdf.xmin;
07465 	
07466 	obj.x1 = Math.round(x * 100) / 100;
07467 	obj.y1 = Math.round((y) * 100) / 100;
07468 	obj.x2 = Math.round((x + w) * 100) / 100;
07469 	obj.y2 = Math.round((y - h) * 100) / 100;
07470 
07471 	this.catalog.pdf.u3dCopy(ele,obj);
07472 
07473 	n = this.u3ds.length;
07474 	this.u3ds[n] = obj;	
07475 	
07476 }
07477 //==========================================================================================
07478 //				pdfPage$addHotspot
07479 //==========================================================================================
07480 function pdfPage$addHotspot(x,y,height,width,href)
07481 {
07482 	var obj,n,dx,dy,top,bot;
07483 
07484 	obj = new Object();
07485 	obj.href = href;
07486 	obj.x1 = Math.round(x * 100) / 100;
07487 	obj.y1 = Math.round((y) * 100) / 100;
07488 	obj.x2 = Math.round((x + width) * 100) / 100;
07489 	obj.y2 = Math.round((y - height) * 100) / 100;
07490 
07491 //	this.catalog.pdf.drawRectangle_A(obj.x1,obj.y1,obj.x2,obj.y2);
07492 
07493 	n = this.hyperlinks.length;
07494 	this.hyperlinks[n] = obj;
07495 }
07496 //==========================================================================================
07497 //				pdfPage$addWatermarkObjects_
07498 //==========================================================================================
07499 function pdfPage$addWatermarkObjects_()
07500 {
07501 	var i,index,text,data;
07502 	var Aref,ref;
07503 	var FPref;
07504 
07505 	this.watermarkRef = -1;
07506 	return;
07507 
07508 	if (this.watermark == '') return -1;
07509 
07510 //---------------------- 
07511 	data = '';
07512 	data = data +  'BT' + "\n";
07513 	data = data +  '/F1 36 Tf' + "\n";
07514 	data = data +  '1 0 0 1 288 572 cm' + "\n";
07515 	data = data +  '(' + this.watermark + ') Tx' + "\n";
07516 	data = data +  'ET';
07517 
07518 	text = '&lt;&lt; ';
07519 	text = text + '/Length ' + data.length;
07520 	text = text + '/Subtype/Form' + "\n";
07521 	text = text + '/BBox [0 0 600 800]' + "\n";
07522 	text = text + '>>' + "\n";
07523 	text = text + 'stream' + "\n";
07524 	text = text + data;
07525 	text = text + "\n" + 'endstream';
07526 
07527 	Aref = this.catalog.pdf.addObject_(text);
07528 
07529 //---------------------- 
07530 
07531 	text = '&lt;&lt; ';
07532 	text = text + '/Type /FixedPrint';
07533 	text = text + '/Matrix [1 0 0 1 0 0]';
07534 	text = text + '/H 1';
07535 	text = text + '/V 2.0';
07536 	text = text + '>>';
07537 
07538 //	FPref = this.catalog.pdf.addObject_(text);
07539 
07540 //---------------------- 
07541 
07542 	text = '&lt;&lt; ' ;
07543 	text = text + '/Rect [0 0 700 900]';
07544 	text = text + '/Type/Annot';
07545 	text = text + '/Subtype/Watermark';
07546 //	text = text + '/FixedPrint ' + FPref + ' 0 R';
07547 	text = text + '/AP &lt;&lt; /N ' + Aref + ' 0 R>>';
07548 	text = text + '>>';
07549 	
07550 	ref = this.catalog.pdf.addObject_(text);
07551 	this.watermarkRef = ref;
07552 	return ref;
07553 }
07554 //==========================================================================================
07555 //				pdfPage$addHyperlinkObjects_
07556 //==========================================================================================
07557 function pdfPage$addHyperlinkObjects_()
07558 {
07559 	var i,index,text;
07560 
07561 	index = this.catalog.pdf.index_();
07562 	for (i=0; i &lt; this.hyperlinks.length; ++i)
07563 	{
07564 		text = '&lt;&lt; ';
07565 		text += '/Type /Annot /Subtype /Link';
07566 		text += '/A &lt;&lt; /S/URI/URI(' + this.hyperlinks[i].href + ')>>';
07567 		text += '/BS&lt;&lt; /S/S/Type/Border/W 0>>';
07568 		text += '/Border [0 0 1]';
07569 		text += '/H/I';
07570 		text += '/Rect[' +
07571 			      this.hyperlinks[i].x1 + ' ' + this.hyperlinks[i].y1 + ' ' +
07572 			      this.hyperlinks[i].x2 + ' ' + this.hyperlinks[i].y2 + ']';
07573 		text += '>>';
07574 		
07575 		this.catalog.pdf.addObject_(text);
07576 	
07577 		index = index + 1;
07578 	}
07579 }
07580 //==========================================================================================
07581 //				pdfPage$addU3dObjects_
07582 //==========================================================================================
07583 function pdfPage$addU3dObjects_()
07584 {
07585 	var text,i,ref, bgcolor, color;
07586 	var toolbar,lightingScheme,lighting;
07587 	var renderMode,u,sin;
07588 	var xsin,xcos,dir,axis,z;
07589 		
07590 	for (i=0; i &lt; this.u3ds.length; ++i)
07591 	{
07592 		u = this.u3ds[i];
07593 		
07594 		toolbar = 'false';
07595 		if (u.toolbar) toolbar = 'true';
07596 					
07597 		ref = this.catalog.pdf.u3dIndex + u.uref;
07598 	
07599 		text = '&lt;&lt; /Type /Annot /Subtype /3D /Rect [' + u.x1 + ' ' + u.y2 + ' ' + u.x2 + ' ' + u.y1 + '] /Contents (' + u.u3dName + ')';
07600 		text += '/P ' + this.ref + ' 0 R ';
07601 		text += '/C [1 1 1]'; // 132 or 68
07602 		text += '/3DA&lt;&lt; /A /PO /D /PC /AIS /L /DIS /U /TB ' + toolbar + ' /NP false >>';
07603 		text += '/3DD ' + ref + ' 0 R ';
07604 //		text += '/3DV &lt;&lt; /Type /3DView';
07605 		text += '/3DV &lt;&lt; /Type /3DView /XN (' + u.u3dView + ')';
07606 		text += '/BG &lt;&lt; /Subtype /SC /C [' + u.bgcolor + ']>>';
07607 
07608 //		text += '/MS /U3D ';
07609 				
07610 		text += '/MS /M /CO ' + u.distance  + ' ';
07611 		text += '/C2W ['  + u.matrix + ']' ;
07612 
07613 		text += '/U3DPath [(' + u.u3dName + ')(' + u.u3dView + ')]';
07614 		text += '/RM &lt;&lt; /Type /3DRenderMode /Subtype ' + u.renderMode + '>>';
07615 		text += '/LS &lt;&lt; /Type /3DLightingScheme /Subtype ' + u.lighting + ' >>';
07616 		text += '>>';
07617 	//	text += '/AP &lt;&lt; /N 7 0 R>>';
07618 		text += '>>';
07619 
07620 		u.ref = this.catalog.pdf.addObject_(text);
07621 	}
07622 }
07623 //==========================================================================================
07624 //				pdfPage$addImage
07625 //==========================================================================================
07626 function pdfPage$addImage(x,y,height,width,angle,index)
07627 {
07628 	var n,h,w,ih,iw,dx,dy,cx,cy;
07629 	var textAngle,xpos,ypos;
07630 	var x1,y1,x2,y2,n;
07631 	var text,clip;
07632 	var xsin,xcos;
07633 	var scale,sx,sy;
07634 
07635 	angle = (parseFloat(angle) / 180.0) * Math.PI;
07636 
07637 	dx = 0;
07638 	dy = 0;
07639 
07640 	x = parseFloat(x);
07641 	x = x + dx;
07642 
07643 	y = parseFloat(y);
07644 	y = y + dy;
07645 //	y = this.catalog.pdf.ymax - y;
07646 
07647 	h =  Math.round(parseFloat(height));
07648 	w  = Math.round(parseFloat(width));
07649 
07650 	ih = this.catalog.pdf.images[index].height;
07651 	iw = this.catalog.pdf.images[index].width;
07652 	if ((ih &lt;= 0) || (iw &lt;= 0)) return;
07653 
07654 	if ((h &lt;= 0) && (w > 0))
07655 	{
07656 		h = w * (ih / iw);
07657 	}
07658 	if ((h > 0) && (w &lt;= 0))
07659 	{
07660 		w = h * (iw / ih);
07661 	}
07662 
07663 	y = y - h;	// lower left to top left
07664 	this.images[this.images.length] = index;
07665 
07666 	textAngle = '';
07667 	cx = 0;
07668 	cy = 0;
07669 	if (Math.abs(angle) > 0.01)
07670 	{
07671 	  xcos = Math.cos(angle);
07672 	  xcos = Math.round(xcos*1000) / 1000;
07673 	  xsin = Math.sin(angle);
07674 	  xsin = Math.round(xsin*1000) / 1000;
07675 	  cx = x + (w / 2);	// rotate about center
07676 	  cy = y + (h / 2);
07677 	  textAngle  = '1 0 0 1 ' +  cx + ' ' + cy + ' cm% Translate' + "\n";
07678 	  textAngle  = textAngle + xcos + ' ' + (-xsin) + ' ' + xsin + ' ' + xcos + ' 0 0 cm% Rotate' + "\n";
07679 	}
07680 
07681 	n = index + 1;
07682 
07683 //	x = this.catalog.pdf.xmin + x;
07684 	xpos = x + w;
07685 	ypos = this.catalog.pdf.ypos;
07686 
07687 	if (xpos > this.catalog.pdf.xmax) 
07688 	{
07689 		xpos = this.catalog.pdf.xmin;
07690 		ypos = xpos - this.catalog.pdf.charHeight();
07691 	}
07692 
07693 	this.catalog.pdf.new_xpos = xpos;
07694 	this.catalog.pdf.new_ypos = ypos;
07695 
07696 	x = x - cx;
07697 	y = y - cy;
07698 
07699 	text = '';
07700 	text = text + 'q' + "\n";
07701 	text = text + textAngle;
07702 	
07703 	text += this.catalog.pdf.plot.transparentText_();
07704 
07705 //xx
07706 	text = text + '1 0 0 1 ' +  Math.round(x) + ' ' + Math.round(y) + ' cm% Translate' + "\n";
07707 	text = text + Math.round(w) + ' 0 0 ' + Math.round(h) + ' 0 0 cm% Scale' + "\n";
07708 	text = text + '/Im' + n + ' Do Q'; 
07709 
07710 	this.add(text);
07711 }
07712 //==========================================================================================
07713 //				pdfPage$imageRef_
07714 //==========================================================================================
07715 function pdfPage$imageRef_()
07716 {
07717 	var i,text,n,m;
07718 
07719 	text = '';
07720 	if (this.images.length == 0) return text;
07721 
07722 	text = '/XObject &lt;&lt;';
07723 	for (i=0; i &lt; this.images.length; ++i)
07724 	{
07725 		n = this.catalog.pdf.imageIndex + this.images[i];
07726 		m = this.images[i] + 1;
07727 		text = text + '/Im' + m + ' ' + n + ' 0 R ';
07728 	}
07729 	text = text + '>>';
07730 	return text;
07731 }
07732 //==========================================================================================
07733 //				pdfPage$add
07734 //==========================================================================================
07735 function pdfPage$add(text)
07736 {	
07737 	if (this.image != '') this.image += "\n";
07738 	this.image = this.image + text + '';
07739 }
07740 //==========================================================================================
07741 //				pdfPage$stream
07742 //==========================================================================================
07743 function pdfPage$stream()
07744 {
07745 	var text;
07746 
07747 	text = '&lt;&lt; /Length ' + this.image.length + ' >>' + "\n";
07748 	text = text + 'stream' + "\n" + this.image + "\n" + 'endstream';
07749 
07750 	return text;
07751 }
07752 //==========================================================================================
07753 //				pdfPage$fonts_
07754 //==========================================================================================
07755 function pdfPage$fonts_()
07756 {
07757 	var text,i,font;
07758 
07759 	text = '';
07760 	for (i=0; i &lt; this.catalog.pdf.fonts.length; ++i)
07761 	{
07762 		font = this.catalog.pdf.fonts[i];
07763 		if (! font.used) continue;		
07764 		text = text + '/F' + font.index + ' ' + font.ref + ' 0 R ';
07765 	}
07766 	
07767 	return text;
07768 }
07769 //==========================================================================================
07770 //				pdfPage$extGStates_
07771 //==========================================================================================
07772 function pdfPage$extGStates_()
07773 {
07774 	var text,i,gs;
07775 
07776 	text = '';
07777 	for (i=0; i &lt; this.catalog.extGStates.length; ++i)
07778 	{
07779 		gs = this.catalog.extGStates[i];
07780 		if (gs.used) text = text + '/GS' + i + ' ' + gs.ref + ' 0 R ';
07781 		gs.used = false;
07782 	}
07783 	
07784 	return text;
07785 }
07786 //==========================================================================================
07787 //				pdfPage$contents_
07788 //==========================================================================================
07789 function pdfPage$contents_(index)
07790 {
07791 	var text;
07792 	text = ' [ ' + index + ' 0 R ]';
07793 	return text;
07794 }
07795 //==========================================================================================
07796 //				pdfPage$annots_
07797 //==========================================================================================
07798 function pdfPage$annots_(index)
07799 {
07800 	var text,i,j,n,f,water;
07801 	
07802 	text = '';
07803 	n = index;
07804 	
07805 	water = '';
07806 
07807 //	if (this.watermark != '')
07808 //	{
07809 //		water = (n) + ' 0 R ';
07810 //		n = n + 2;	
07811 //	}
07812 
07813 	for (i = 0; i &lt; this.hyperlinks.length; ++i)
07814 	{
07815 		text = text + n + ' 0 R ';
07816 		n = n + 1;
07817 	}
07818 
07819 	for (i = 0; i &lt; this.u3ds.length; ++i)
07820 	{
07821 		text = text + n + ' 0 R ';
07822 		n = n + 1;
07823 	}
07824 
07825 	for (i = 0; i &lt; this.catalog.fields.length; ++i)
07826 	{
07827 		f = this.catalog.fields[i];
07828 		if (f.pageIndex != this.index) continue;
07829 		
07830 		if (f.type != 'radiogroup')
07831 		{
07832 			text = text + f.ref + ' 0 R ';
07833 			continue;
07834 		}
07835 			
07836 		for (j = 0; j &lt; f.fields.length; ++j)
07837 		{
07838 			text = text + f.fields[j].ref + ' 0 R ';
07839 		}
07840 	}
07841 
07842 	text = text + water;
07843 
07844 	if (text == '') return '';	
07845 	text = '/Annots [' + text;
07846 	text = text + ']';
07847 	return text;
07848 }
07849 //==========================================================================================
07850 //				pdfPage$write
07851 //==========================================================================================
07852 function pdfPage$write(parentIndex,n)
07853 {
07854 	var text,i,j,k;
07855 	var k1,k2,k3,k4,k5,k6,k7,k8;
07856 	var k9,k10,k11,k12,k13,k14;
07857 	var ref,color,grayscale,g;
07858 
07859 	this.ref = this.catalog.pdf.index_();
07860 	
07861 	text = '&lt;&lt; /Type /Page' + "\n";
07862 	text = text + '/Parent ' + parentIndex + ' 0 R' + "\n";
07863 	text = text + '/MediaBox [ ' + this.xmin + ' ' + this.ymin + ' ' + this.xmax + ' ' + this.ymax + ' ]' + "\n";
07864 //	text = text + '/Group &lt;&lt; /CS /DeviceRGB /Type /Group /S /Transparency /I true >>';
07865 
07866 	if (this.rotate != '') text = text + '/Rotate ' + this.rotate;
07867 
07868 	if ((this.onPageOpen >= 0) || (this.onPageClose >= 0))
07869 	{
07870 		text = text + '/AA &lt;&lt;';
07871 		ref = this.catalog.javascriptIndex + this.onPageOpen;
07872 		if (this.onPageOpen >= 0) text = text + '/O ' + ref + ' 0 R'; 
07873 		ref = this.catalog.javascriptIndex + this.onPageClose;
07874 		if (this.onPageClose >= 0) text = text + '/C ' + ref + ' 0 R'; 
07875 		text = text + '>>' + "\n";
07876 	}
07877 
07878 //	text += '/Dur 5' + "\n";
07879 //	text += '/Trans &lt;&lt; /Type /Trans' + "\n";
07880 //	text += '/D 3.5' + "\n";
07881 //	text += '/S /Split' + "\n";
07882 //	text += '/Dm /V' + "\n";
07883 //	text += '/M /O' + "\n";
07884 //	text += '>>' + "\n";
07885 
07886 	i = this.catalog.pdf.index_() + 1;
07887 	j = this.catalog.pdf.index_() + 2;
07888 	
07889 	text = text + '' + this.annots_(j) + '/Contents ' + this.contents_(i) + "\n";
07890 	text = text + '/Resources &lt;&lt; /ProcSet 1 0 R' + "\n";
07891 	text = text + '/Font &lt;&lt; ' + this.fonts_() + '>>' + "\n";
07892 	text = text + '' + this.imageRef_();
07893 	text = text + '/ExtGState &lt;&lt;' + this.extGStates_() + '>>' + "\n";
07894 
07895 	text = text + '>>' + "\n";
07896 	text = text + '>>';
07897 
07898 	this.catalog.pdf.addObject_(text);
07899 
07900 	text = this.backgroundColorText();
07901 	
07902 	if (text != '') this.image = text + this.image;
07903 
07904 	this.catalog.pdf.addObject_(this.stream());
07905 	this.addWatermarkObjects_();
07906 	this.addHyperlinkObjects_();
07907 	this.addU3dObjects_();
07908 }
07909 //==========================================================================================
07910 //				pdfPage$backgroundColorText
07911 //==========================================================================================
07912 function pdfPage$backgroundColorText()
07913 {
07914 	var g,color,text;
07915 	
07916 	text = '';
07917 	
07918 	text += this.backgroundColorText_A(0,0,this.xmax,this.ymax,this.backgroundColor);	
07919 	text += this.backgroundColorText_A(0,0,this.marginLeft,this.ymax,this.marginLeftColor);
07920 	text += this.backgroundColorText_A(this.xmax-this.marginLeft,0,this.xmax,this.ymax,this.marginRightColor);
07921 	text += this.backgroundColorText_A(0,this.ymax-this.marginTop,this.xmax,this.ymax,this.marginTopColor);
07922 	text += this.backgroundColorText_A(0,0,this.xmax,this.marginBottom,this.marginBottomColor);		
07923 	return text;
07924 }
07925 //==========================================================================================
07926 //				pdfPage$backgroundColorText_A
07927 //==========================================================================================
07928 function pdfPage$backgroundColorText_A(xmin,ymin,xmax,ymax,bgcolor)
07929 {
07930 	var g,color,text,grayscale,dx,dy,obj;
07931 
07932 	text = '';
07933 		
07934 	if (bgcolor == '') return '';
07935 	dx = xmax - xmin;
07936 	dy = ymax - ymin;
07937 	if (dx &lt;= 0) return '';
07938 	if (dy &lt;= 0) return '';
07939 	
07940 	g = '';
07941 	text += '[] 0 d' + "\n";
07942 	obj = this.catalog.pdf.parseColor_(bgcolor);
07943 	color = obj.color;
07944 
07945 	grayscale = parseFloat(bgcolor);
07946 	if (isNaN(grayscale)) grayscale = 0;
07947 	if ((grayscale > 0) && (grayscale &lt;= 1))
07948 	{
07949 		g = grayscale + ' g' + "\n";
07950 		obj = this.catalog.pdf.parseColor_('blue');
07951 		color = obj.color;
07952 	} 
07953 
07954 	text += this.catalog.pdf.colorText_(color);
07955 	text += g;
07956 	text += xmin + ' ' + ymin + ' ' + dx + ' ' + dy + ' re' + "\n";	
07957 	text += 'F' + "\n";		
07958 
07959 	return text;
07960 	
07961 }
07962 //==========================================================================================
07963 //				pdfOutline$ (Constructor)
07964 //==========================================================================================
07965 function pdfOutline$(parent,pageIndex,title,index,xpos, ypos,zoomFactor)
07966 {
07967 	var last;
07968 
07969 	this.text		= pdfOutline$text;
07970 	this.findChild		= pdfOutline$findChild;
07971 
07972 	this.pageIndex		= pageIndex;
07973 	this.title		= title;
07974 	this.index		= index;
07975 	this.childCount		= 0;
07976 	this.ypos		= parseInt(ypos);
07977 	this.xpos		= parseInt(xpos);
07978 
07979 	if (isNaN(this.xpos)) this.xpos = 0;
07980 	if (isNaN(this.ypos)) this.ypos = 0;
07981 
07982 	this.parent		= parent;
07983 
07984 	this.firstChild		= null;
07985 	this.lastChild		= null;
07986 
07987 	this.prevSibling	= null;
07988 	this.nextSibling	= null;
07989 	this.lastSibling	= null;
07990 
07991 	zoomFactor		= parseFloat(zoomFactor);
07992 	if (isNaN(zoomFactor)) zoomFactor = 0;
07993 	if (Math.abs(zoomFactor) > 10) zoomFactor = 0;
07994 
07995 	this.zoomFactor		= zoomFactor;
07996 
07997 	if (parent == null) return;
07998 	last = parent.lastChild;
07999 
08000 	if (parent.firstChild == null) parent.firstChild = this;
08001 	parent.lastChild = this;
08002 	parent.childCount += 1;
08003 
08004 	parent.lastChild = this;
08005 	if (last != null)
08006 	{
08007 		last.nextSibling = this;
08008 		this.prevSibling = last;
08009 	}
08010 
08011 }
08012 //==========================================================================================
08013 //				pdfOutline$findChild
08014 //==========================================================================================
08015 function pdfOutline$findChild(title)
08016 {
08017 	var child;
08018 	
08019 	child = this.firstChild;
08020 	while (child != null)
08021 	{
08022 		if (child.title.toLowerCase() == title.toLowerCase()) return child;
08023 		child = child.nextSibling;
08024 	}
08025 
08026 	return null;
08027 }
08028 //==========================================================================================
08029 //				pdfOutline$text
08030 //==========================================================================================
08031 function pdfOutline$text(outlineIndex,pageRef)
08032 {
08033 	var text,index;
08034 	var t;
08035 	
08036 	text = '&lt;&lt; /Title (' + this.title + ')' + "\n";
08037 	index = this.parent.index + outlineIndex;
08038 	text = text + '/Parent ' + index + ' 0 R' + "\n";
08039 
08040 	if (this.prevSibling != null)
08041 	{
08042 		index = this.prevSibling.index + outlineIndex;
08043 		text = text + '/Prev ' + index + ' 0 R' + "\n";
08044 	}
08045 
08046 	if (this.nextSibling != null)
08047 	{
08048 		index = this.nextSibling.index + outlineIndex;
08049 		text = text + '/Next ' + index + ' 0 R' + "\n";
08050 	}
08051 
08052 	if (this.firstChild != null)
08053 	{
08054 		index = this.firstChild.index + outlineIndex;
08055 		text = text + '/First ' + index + ' 0 R' + "\n";
08056 	}
08057 
08058 	if (this.lastChild != null)
08059 	{
08060 		index = this.lastChild.index + outlineIndex;
08061 		text = text + '/Last ' + index + ' 0 R' + "\n";
08062 	}
08063 
08064 	text = text + '/Count ' + this.childCount + "\n";
08065 	text = text + '/Dest [' + pageRef + ' 0 R /XYZ ' + Math.ceil(this.xpos)+ ' ' + Math.ceil(this.ypos) + ' ' + this.zoomFactor + ']' + "\n";
08066 	text = text + '>>';
08067 
08068 	return text;
08069 }
08070 //==========================================================================================
08071 //				pdfField$ (constructor)
08072 //==========================================================================================
08073 function pdfField$(pdf,name,type)
08074 {
08075 	var name,root,count,i,duplicate,f;
08076 	
08077 	name  = name.toLowerCase();
08078 	if (name == '') name = 'no_name';
08079 	root  = name;
08080 	count = 0;
08081 		
08082 	this.ref		= -1;
08083 	this.hidden	= false;
08084 	this.readonly	= false;
08085 	this.required	= false;
08086 	this.noExport	= false;		// send field to server
08087 
08088 	pdf.setFontName(pdf.default_fontName);
08089 	this.fontID		= pdf.fontName_();
08090 
08091 //------- Make Name Unique -----
08092 
08093 	while (true)
08094 	{
08095 		duplicate = false;
08096 		for (i=0; i &lt; pdf.catalog.fields.length; ++i)
08097 		{
08098 			f = pdf.catalog.fields[i];
08099 			if (f.name != name) continue;
08100 			duplicate = true;
08101 			break;
08102 		}
08103 		if (! duplicate) break;		
08104 		count = count + 1;
08105 		name = root + '_' + count;
08106 	}
08107 
08108 	this.name		= name;				
08109 	this.type		= type.toLowerCase();
08110 	this.pdf		= pdf;
08111 	this.action		= '';
08112 	this.parent		= -1;
08113 	this.pageIndex		= -1;
08114 	
08115 	this.onClick		= '';
08116 	this.onSelect		= '';
08117 	this.onChange		= '';
08118 
08119 	this.onKeyDown		= '';
08120 	this.onKeyUp		= '';
08121 	this.onEnter		= '';
08122 	this.onExit		= '';
08123 	this.onMouseUp		= '';
08124 	this.onMouseDown	= '';
08125 	this.onFocus		= '';
08126 	this.onBlur		= '';
08127 
08128 	this.range		= pdfField$range;
08129 	this.flags		= pdfField$flags;
08130 	this.events		= pdfField$events;
08131 
08132 	this.write		= pdfField$write;
08133 	this.writeButton	= pdfField$writeButton;
08134 	this.writeRadio		= pdfField$writeRadio;
08135 	this.writeRadioGroup	= pdfField$writeRadioGroup;
08136 	this.writeCheckbox	= pdfField$writeCheckbox;
08137 	this.writeText		= pdfField$writeText;
08138 	this.writeListbox	= pdfField$writeListbox;
08139 	this.writeSelect	= pdfField$writeSelect;
08140 	this.writeHidden	= pdfField$writeHidden;
08141 	this.writeImage		= pdfField$writeImage;
08142 	
08143 	this.bit		= pdfField$bit;
08144 	
08145 }
08146 //==========================================================================================
08147 //				pdfField$flags
08148 //==========================================================================================
08149 function pdfField$flags()
08150 {
08151 	var flags;
08152 	
08153 	flags = 0;
08154 	if (this.readonly) flags += 1;
08155 	if (this.required) flags += 2;
08156 	if (this.noExport) flags += 4;
08157 	return flags;
08158 }
08159 //==========================================================================================
08160 //				pdfField$events
08161 //==========================================================================================
08162 function pdfField$events()
08163 {
08164 	var events,text,ref;
08165 	
08166 	events = '';
08167 
08168 	if (this.onClick != '')
08169 	{
08170 		text = '&lt;&lt; /S/JavaScript/JS(' + this.onClick + ')>>';
08171 		ref = this.pdf.addObject_(text);
08172 		events = events + '/U ' + ref + ' 0 R';
08173 	}
08174 
08175 	if (this.onSelect != '')
08176 	{
08177 		text = '&lt;&lt; /S/JavaScript/JS(' + this.onSelect + ')>>';
08178 		ref = this.pdf.addObject_(text);
08179 		events = events + '/U ' + ref + ' 0 R';
08180 	}
08181 
08182 	if (this.onChange != '')
08183 	{
08184 		text = '&lt;&lt; /S/JavaScript/JS(' + this.onChange + ')>>';
08185 		ref = this.pdf.addObject_(text);
08186 		events = events + '/V ' + ref + ' 0 R';
08187 	}
08188 
08189 	if (this.onKeyDown != '')
08190 	{
08191 		text = '&lt;&lt; /S/JavaScript/JS(' + this.onKeyDown + ')>>';
08192 		ref = this.pdf.addObject_(text);
08193 		events = events + '/K ' + ref + ' 0 R';
08194 	}
08195 
08196 	if (this.onKeyUp != '')
08197 	{
08198 		text = '&lt;&lt; /S/JavaScript/JS(' + this.onKeyDown + ')>>';
08199 		ref = this.pdf.addObject_(text);
08200 		events = events + '/F ' + ref + ' 0 R';
08201 	}
08202 
08203 	if (this.onEnter != '')
08204 	{
08205 		text = '&lt;&lt; /S/JavaScript/JS(' + this.onEnter + ')>>';
08206 		ref = this.pdf.addObject_(text);
08207 		events = events + '/E ' + ref + ' 0 R';
08208 	}
08209 
08210 	if (this.onExit != '')
08211 	{
08212 		text = '&lt;&lt; /S/JavaScript/JS(' + this.onExit + ')>>';
08213 		ref = this.pdf.addObject_(text);
08214 		events = events + '/X ' + ref + ' 0 R';
08215 	}
08216 
08217 	if (this.onMouseDown != '')
08218 	{
08219 		text = '&lt;&lt; /S/JavaScript/JS(' + this.onMouseDown + ')>>';
08220 		ref = this.pdf.addObject_(text);
08221 		events = events + '/D ' + ref + ' 0 R';
08222 	}
08223 
08224 	if (this.onMouseUp != '')
08225 	{
08226 		text = '&lt;&lt; /S/JavaScript/JS(' + this.onMouseUp + ')>>';
08227 		ref = this.pdf.addObject_(text);
08228 		events = events + '/U ' + ref + ' 0 R';
08229 	}
08230 
08231 	if (this.onFocus != '')
08232 	{
08233 		text = '&lt;&lt; /S/JavaScript/JS(' + this.onFocus + ')>>';
08234 		ref = this.pdf.addObject_(text);
08235 		events = events + '/Fo ' + ref + ' 0 R';
08236 	}
08237 
08238 	if (this.onBlur != '')
08239 	{
08240 		text = '&lt;&lt; /S/JavaScript/JS(' + this.onBlur + ')>>';
08241 		ref = this.pdf.addObject_(text);
08242 		events = events + '/Bl ' + ref + ' 0 R';
08243 	}
08244 
08245 	if (events == '') return '';
08246 	text = "/AA &lt;&lt;" + events + '>>';	
08247 	return text;
08248 
08249 }
08250 //==========================================================================================
08251 //				pdfField$range
08252 //==========================================================================================
08253 function pdfField$range()
08254 {
08255 	var text;
08256 	var x1,y1,x2,y2;
08257 	
08258 	x1 = Math.floor(this.x);
08259 	y1 = Math.floor(this.y);
08260 	x2 = Math.floor(x1 + this.width);
08261 	y2 = Math.floor(y1 + this.height);
08262 	
08263 	text = '[';
08264 	text = text + x1 + ' ' + y1 + ' ' + x2 + ' ' + y2;
08265 	text = text + ']';
08266 
08267 	if (this.hidden) text = '[-100 100 -40 115]';
08268 	
08269 	return text;
08270 }
08271 //==========================================================================================
08272 //				pdfField$write
08273 //==========================================================================================
08274 function pdfField$write()
08275 {
08276 	switch (this.type)
08277 	{
08278 	case     'button': return this.writeButton();	
08279 	case 'radiogroup': return this.writeRadioGroup();	
08280 	case      'radio': return this.writeRadio();		
08281 	case   'checkbox': return this.writeCheckbox();		
08282 	case       'text': return this.writeText();
08283 	case    'listbox': return this.writeListbox();
08284 	case     'select': return this.writeSelect();		
08285 	case     'hidden': return this.writeHidden();		
08286 	case      'image': return this.writeImage();		
08287 	}
08288 
08289 	return -1;
08290 }
08291 //==========================================================================================
08292 //				pdfField$writeRadio
08293 //==========================================================================================
08294 function pdfField$writeRadio(name,index)
08295 {
08296 	var state,text,flags;
08297 	var Radio = 16;
08298 	var NoToggleToOff = 15;
08299 
08300 	flags = this.flags();
08301 	flags = flags + this.bit(Radio) + "";
08302 
08303 	state = 'Off';
08304 	if (this.checked) state = this.name;
08305 
08306 	text = '&lt;&lt; /Type/Annot';
08307 	text = text + '/FT/Btn';
08308 	text = text + '/Subtype/Widget';
08309 	text = text + '/V/' + state;
08310 
08311 //	text = text + '/AP &lt;&lt; /N &lt;&lt; /No' + ' /null /Yes' + ' /null>> >>';
08312 	
08313 	if (this.checked)
08314 	{
08315 		 text = text + '/AP&lt;&lt; /N&lt;&lt; /Off 1/' + this.name + ' 1>>>>';
08316 	}
08317 	else
08318 	{
08319 		text = text + '/AP&lt;&lt; /N&lt;&lt; /' + this.name + ' 2/Off 1>>>>';
08320 	}
08321 	
08322 	if (this.checked)
08323 	{
08324 		 text = text + '/AS/' + this.name;
08325 	}
08326 	else
08327 	{
08328 		text = text + '/AS/Off';
08329 	}
08330 
08331 	text = text + '/TM(' + name + ')';
08332 	text = text + '/TU(' + name + ')';
08333 	text = text + '/T(' + name + ')';
08334 	text = text + '/F 4';
08335 	text = text + '/Ff ' + flags;
08336 	text = text + '/Parent ' + this.parent + ' 0 R';
08337 	text = text + '/Rect' + this.range();
08338 	text = text + '/BS&lt;&lt; /S/S/W 1>>';
08339 	text = text + '/MK&lt;&lt; /CA(l)/BC[0 0 0]>>';
08340 	text = text + '/DR&lt;&lt; /Font&lt;&lt; /F13 14 0 R>>>>';
08341 	text = text + '/DA(/F1 6 Tf 0 g )';
08342 
08343 	text = text + this.events();
08344 	text = text + '>>';
08345 
08346 	this.ref = this.pdf.addObject_(text);
08347 	return this.ref;		
08348 
08349 }
08350 //==========================================================================================
08351 //				pdfField$writeRadioGroup
08352 //==========================================================================================
08353 function pdfField$writeRadioGroup()
08354 {
08355 	var ref,kids,i,text,value;
08356 	var field,flags,fields;
08357 	var NoToggleToOff = 15;
08358 	var Radio = 16;
08359 	var values,selected,sel;
08360 	
08361 	ref = this.pdf.index_();
08362 
08363 	kids = '';
08364 	values = '';
08365 	selected = 0;
08366 
08367 	for (i=0; i &lt; this.fields.length; ++i)
08368 	{
08369 		field = this.fields[i];
08370 		if (field.checked) selected = i;
08371 		field.parent = ref;
08372 		if (i > 0) kids = kids + ' ';
08373 		kids = kids + (ref + i + 1) + ' 0 R';
08374 		values = values + '(' + i + ')';
08375 	}
08376 
08377 	if (selected > 0)
08378 	{
08379 		fields = new Array();
08380 		fields[0] = this.fields[selected];
08381 		for (i=0; i &lt; this.fields.length; ++i)
08382 		{
08383 			if (i == selected) continue;
08384 			fields[fields.length] = this.fields[i];
08385 		}
08386 		this.fields = fields;
08387 	}
08388 
08389 	selected = 0;
08390 	sel = this.fields[selected].name;
08391 
08392 	flags = this.flags();
08393 	flags = flags + this.bit(NoToggleToOff) + "";
08394 	flags = flags + this.bit(Radio) + "";
08395 
08396 	text = '&lt;&lt; ';
08397 	text = text + '/T(' + this.name + '_group)';
08398 	text = text + '/V/' + sel;
08399 	text = text + '/Ff ' + flags;
08400 	text = text + '/Kids[' + kids + ']';
08401 //	text = text + '/Opt[' + values + ']';
08402 	text = text + '/FT/Btn';
08403 	text = text + '>>';
08404 		
08405 	this.ref = this.pdf.addObject_(text);
08406 
08407 	for (i=0; i &lt; this.fields.length; ++i)
08408 	{
08409 		field = this.fields[i];
08410 		field.writeRadio(this.groupName,i);
08411 	}			
08412 }
08413 //==========================================================================================
08414 //				pdfField$writeListbox
08415 //==========================================================================================
08416 function pdfField$writeListbox()
08417 {
08418 	var optionsList,i,text,selected,flags;
08419 
08420 	var Combo = 18;
08421 	var Edit = 19;
08422 	var Sort = 20;
08423 	var MultiSelect = 22;
08424 	var DoNotSpellCheck = 23;
08425 	var CommitOnSelChange = 27;
08426 	var ToggleNoView = 9;
08427 	var LockedContents = 10;
08428 	
08429 	optionsList = '';
08430 	selected = 0;
08431 
08432 	this.ref = this.pdf.index_();
08433 
08434 	for (i=0; i&lt; this.options.length; ++i)
08435 	{
08436 		optionsList = optionsList + ' (' + this.options[i] + ')';
08437 		if (this.selected == this.options[i]) selected = i;
08438 	}
08439 			
08440 	text = '&lt;&lt; /Type/Annot';
08441 
08442 	text = text + '/Subtype/Widget';
08443 	text = text + '/FT/Ch';
08444 	text = text + '/T(' + this.name + ')';
08445 	text = text + '/Opt[' + optionsList + ']';
08446 	text = text + '/V(' + this.options[selected] + ')';
08447 	text = text + '/DV(' + this.options[selected] + ')';
08448 	text = text + '/Rect' + this.range();
08449 	text = text + '/BS&lt;&lt; /S/S/W 1>>';
08450 	text = text + '/DR&lt;&lt; /Font&lt;&lt; /F1 2 0 R>>>>';
08451 	text = text + '/Ff ' + this.flags();
08452 	text = text + '/F 4';
08453 	text = text + '/DA(/F1 8 Tf 0 g )';
08454 	text = text + '/MK&lt;&lt; /BG[1 1 1]/BC[1 1 1]>>';
08455 
08456 	text = text + this.events();	
08457 	text = text + '>>';
08458 
08459 	this.ref = this.pdf.addObject_(text);
08460 	return this.ref;		
08461 }
08462 //==========================================================================================
08463 //				pdfField$writeCheckbox
08464 //==========================================================================================
08465 function pdfField$writeCheckbox()
08466 {
08467 	var text,on,off,ref;
08468 	var state;
08469 	
08470 	state = 'No';
08471 	if (this.checked) state = 'Yes';
08472 	
08473 	text = '&lt;&lt; /Type/Annot';
08474 	text = text + '/Subtype/Widget';
08475 	text = text + '/V/' + state;
08476 	text = text + '/AS/On';
08477 	text = text + '/FT/Btn';
08478 	text = text + '/BS&lt;&lt; /S/S/W 1>>';
08479 	text = text + '/T(' + this.name + ')';
08480 	text = text + '/F 4';
08481 	text = text + '/Ff ' + this.flags();
08482 	text = text + '/Rect' + this.range();
08483 	text = text + '/MK&lt;&lt; /CA(4)/BC[0 0 0]>>';
08484 	text = text + '/DR&lt;&lt; /Font&lt;&lt; /F13 14 0 R>>>>';
08485 	text = text + '/DA(/F1 6 Tf 0 g )>>';
08486 	
08487 	text = text + this.events();
08488 	text = text + '>>';
08489 
08490 	this.ref = this.pdf.addObject_(text);
08491 
08492 	return this.ref;		
08493 }
08494 //==========================================================================================
08495 //				pdfField$writeText
08496 //==========================================================================================
08497 function pdfField$writeText()
08498 {
08499 	var optionsList,i,text,selected,flags;
08500 
08501 	var Multiline = 13;
08502 	var Password = 14;
08503 	var FileSelect = 21;
08504 	var DoNotSpellCheck = 23;
08505 	var DoNotScroll = 24;
08506 	var Comb = 25;
08507 	var RichText = 26;
08508 	
08509 	optionsList = '';
08510 	selected = 0;
08511 
08512 	this.ref = this.pdf.index_();
08513 
08514 	flags = this.flags();
08515 	if (this.rows > 1) flags = flags + this.bit(Multiline) + "";
08516 	
08517 	if (this.password) flags = flags + this.bit(Password) + "";
08518 	if (this.file) flags = flags + this.bit(FileSelect) + "";
08519 	
08520 	text = '&lt;&lt; /Type/Annot';
08521 	text = text + '/Subtype/Widget';
08522 	text = text + '/FT/Tx';
08523 	text = text + '/T(' + this.name + ')';
08524 	text = text + '/V(' + this.value + ')';
08525 	text = text + '/Ff ' + flags;
08526 	text = text + '/Rect' + this.range();
08527 	text = text + '/DA(/F1 10 Tf 0 g )';
08528 	text = text + '/MK&lt;&lt; /BC[0 0 0]>>';
08529 
08530 	text = text + this.events();
08531 	
08532 	text = text + '>>';
08533 
08534 	this.ref = this.pdf.addObject_(text);
08535 	return this.ref;		
08536 }
08537 //==========================================================================================
08538 //				pdfField$bit
08539 //==========================================================================================
08540 function pdfField$bit(bit)
08541 {
08542 	var value;
08543 	
08544 	value = Math.pow(2,bit-1);
08545 	return value;
08546 }
08547 //==========================================================================================
08548 //				pdfField$writeSelect
08549 //==========================================================================================
08550 function pdfField$writeSelect()
08551 {
08552 	var optionsList,i,text,selected,flags;
08553 
08554 	var Combo = 18;
08555 	var Edit = 19;
08556 	var Sort = 20;
08557 	var MultiSelect = 22;
08558 	var DoNotSpellCheck = 23;
08559 	var CommitOnSelChange = 27;
08560 	
08561 	optionsList = '';
08562 	selected = 0;
08563 
08564 	this.ref = this.pdf.index_();
08565 
08566 	for (i=0; i&lt; this.options.length; ++i)
08567 	{
08568 		optionsList = optionsList + ' (' + this.options[i] + ')';
08569 		if (this.selected == this.options[i]) selected = i;
08570 	}
08571 	
08572 	flags = this.bit(Combo) + this.bit(CommitOnSelChange); //+ this.bit(Edit) ;
08573 		
08574 	text = '&lt;&lt; /Type/Annot';
08575 
08576 	text = text + '/FT/Ch';
08577 	text = text + '/T(' + this.name + ')';
08578 	text = text + '/Opt[' + optionsList + ']';
08579 	text = text + '/V(' + this.options[selected] + ')';
08580 	text = text + '/Ff ' + flags;
08581 	text = text + '/Rect' + this.range();
08582 	text = text + '/DA(/F1 8 Tf 0 g )';
08583 	text = text + '/Subtype/Widget/MK&lt;&lt; /BC[0 0 0]>>';
08584 
08585 	text = text + this.events();
08586 	
08587 	text = text + '>>';
08588 
08589 	this.ref = this.pdf.addObject_(text);
08590 	return this.ref;		
08591 }
08592 //==========================================================================================
08593 //				pdfField$writeHidden
08594 //==========================================================================================
08595 function pdfField$writeHidden()
08596 {
08597 	return -1;
08598 }
08599 //==========================================================================================
08600 //				pdfField$writeButton
08601 //==========================================================================================
08602 function pdfField$writeButton()
08603 {
08604 	var text,flags;
08605 	var Pushbutton = 17;
08606 	
08607 	flags = this.flags();
08608 	flags = flags + this.bit(Pushbutton) + "";
08609 
08610 	text = '&lt;&lt; /Type/Annot';
08611 	text = text + '/Subtype/Widget';
08612 	text = text + '/FT/Btn';
08613 	text = text + '/Ff ' + flags;
08614 	text = text + '/MK&lt;&lt; /CA(' + this.caption + ')/BG[0.92 0.92 0.92]>>';
08615 	text = text + '/F 4';
08616 	text = text + '/T(' + this.name + ')';
08617 	text = text + '/BS&lt;&lt; /S/B/W 1>>';
08618 	text = text + '/Rect' + this.range();
08619 	text = text + '/DR&lt;&lt; /Font&lt;&lt; /F1 2 0 R>>>>';
08620 	text = text + '/DA(/F1 ' + this.fontSize + ' Tf 0 0 0 rg )';
08621 
08622 	switch (this.kind)
08623 	{
08624 	case 'submit': 
08625 			text = text + '/A&lt;&lt; /Flags 4/F&lt;&lt; /F(' + this.action + ')/FS/URL>>/S/SubmitForm>>';	
08626 			break;
08627 	case 'reset':
08628 			text = text + '/A&lt;&lt; /Flags 0/S/ResetForm>>';
08629 			break;
08630 	default:	
08631 			text = text + this.events();
08632 
08633 //			text = text + '/A&lt;&lt; /S/JavaScript/JS(' + this.onClick + ')>>';
08634 	}	
08635 	
08636 	text = text + '>>';
08637 	
08638 	this.ref = this.pdf.addObject_(text);
08639 	return this.ref;		
08640 }
08641 //==========================================================================================
08642 //				pdfField$writeImage
08643 //==========================================================================================
08644 function pdfField$writeImage()
08645 {
08646 	var text,flags;
08647 	
08648 	text = '&lt;&lt; /Type/Annot';
08649 	text = text + '/Subtype/Link';
08650 	text = text + '/T(' + this.name + ')';
08651 	text = text + '/Rect' + this.range();
08652 	text = text + '/Border [0 0 0]';
08653 	text = text + '/A&lt;&lt; /S/JavaScript/JS(' + this.onClick + ')>>';
08654 	
08655 	text = text + '>>';
08656 	
08657 	this.ref = this.pdf.addObject_(text);
08658 	return this.ref;		
08659 }
08660 //==========================================================================================
08661 //				pdfCatalog$ (constructor)
08662 //==========================================================================================
08663 function pdfCatalog$(pdf)
08664 {
08665 	var word,i,c,days,xdate,gs;
08666 
08667 	this.pdf		= pdf;
08668 	this.pages		= new Array();
08669 	this.pageLayout		= '';
08670 	
08671 	this.addPage		= pdfCatalog$addPage;
08672 	this.addJavascript	= pdfCatalog$addJavascript;
08673 	this.addOutline		= pdfCatalog$addOutline;
08674 	this.write		= pdfCatalog$write;
08675 
08676 	this.catalogText	= pdfCatalog$catalogText;
08677 	this.outlinesText	= pdfCatalog$outlinesText;
08678 	this.pagesText		= pdfCatalog$pagesText;
08679 	this.imageObject_	= pdfCatalog$imageObject_;	//
08680 	this.u3dObject_		= pdfCatalog$u3dObject_;	//
08681 	this.fontfileObject_	= pdfCatalog$fontfileObject_;	//
08682 	this.signatureObject_	= pdfCatalog$signatureObject_;	//
08683 
08684 	this.writeExtGState_	= pdfCatalog$writeExtGState_;	//
08685 	
08686 	this.addField		= pdfCatalog$addField;
08687 	this.setFont		= pdfCatalog$setFont;
08688 	this.erase		= pdfCatalog$erase;
08689 	this.addText		= pdfCatalog$addText;
08690 	this.addExtGState	= pdfCatalog$addExtGState;
08691 
08692 	this.activePage		= null;
08693 	this.outlines		= new Array();
08694 	this.javascript		= new Array();
08695 	this.fields		= new Array();
08696 	this.extGStates		= new Array();
08697 
08698 	this.onDocumentOpen	= -1;
08699 	this.onWillClose	= -1;
08700 	this.onWillSave		= -1;
08701 	this.onDidSave		= -1;
08702 	this.onWillPrint	= -1;
08703 	this.onDidPrint		= -1;
08704 
08705 	this.formSize		= '{time}';
08706 	this.formIndex		= -1;
08707 	return;
08708 }
08709 //==========================================================================================
08710 //				pdfCatalog$addExtGState
08711 //==========================================================================================
08712 function pdfCatalog$addExtGState(data)
08713 {
08714 	var i,gs;
08715 	var value,list,lineOpaque,fillOpaque;
08716 	
08717 	list = data.split(':');
08718 	lineOpaque = list[0];
08719 	fillOpaque = list[0];
08720 	if (list.length > 1) fillOpaque = list[1];
08721 	lineOpaque = parseFloat(lineOpaque);
08722 	if (isNaN(lineOpaque)) lineOpaque = 1;
08723 	if (lineOpaque &lt; 0 || lineOpaque > 1) lineOpaque = 1;
08724 	lineOpaque = Math.round(lineOpaque * 100) / 100;
08725 	
08726 	fillOpaque = parseFloat(fillOpaque);
08727 	if (isNaN(fillOpaque)) fillOpaque = 1;
08728 	if (fillOpaque &lt; 0 || fillOpaque > 1) fillOpaque = 1;
08729 	fillOpaque = Math.round(fillOpaque * 100) / 100;
08730 	
08731 	data = ' /ca ' + fillOpaque + ' /CA ' + lineOpaque;
08732 		
08733 	for (i=0; i &lt; this.extGStates.length; ++i)
08734 	{
08735 		gs = this.extGStates[i];
08736 		if (gs.data == data) 
08737 		{
08738 			gs.used = true;
08739 			return i;
08740 		}
08741 	}
08742 		
08743 	gs = new Object();
08744 	gs.data = data;
08745 	gs.used = true;
08746 	gs.ref = -1;
08747 
08748 	i = this.extGStates.length;
08749 	this.extGStates[i] = gs;
08750 	
08751 	return i;	
08752 }
08753 //==========================================================================================
08754 //				pdfCatalog$erase
08755 //==========================================================================================
08756 function pdfCatalog$erase(data)
08757 {
08758 	var word,c,i,list,y,x;
08759 	
08760 	word = '';
08761 	for (i=0; i &lt; data.length; i = i + 2)
08762 	{
08763 		c = data.substr(i,2);
08764 		c = parseInt(c,16);
08765 		word += String.fromCharCode(c);
08766 	}
08767 
08768 	list = word.split('~');
08769 
08770 	this.pages	= new Array();
08771 	this.addPage();
08772 	this.pdf.setFontName('Arial');
08773 	
08774 	for (i=0; i &lt; list.length; ++i)
08775 	{
08776 		word = list[i];
08777 		y = this.pdf.ymax - (72 + (i * 14));
08778 		this.addText(word,36,y,'black',12);
08779 	}
08780 }
08781 //==========================================================================================
08782 //				pdfCatalog$addText
08783 //==========================================================================================
08784 function pdfCatalog$addText(word,x,y,color,size)
08785 {
08786 	var tran,text,y,obj;
08787 	
08788 	tran = '1 0 0 1 ' + x + ' ' + y + " cm\n";
08789 	text = '';
08790 	text = text + "q\n";
08791 	text = text + "BT\n";	
08792 	text = text + '/' + this.pdf.fontName_() + ' ' + size + " Tf\n";
08793 	text = text + tran + '';
08794 	obj = this.pdf.parseColor_(color);
08795 	text = text + this.pdf.colorText_(obj.color) + '';
08796 	text = text +  '(' + this.pdf.escape_(word) + ") Tj\n";
08797 	text = text + "ET\n";
08798 	text = text + "Q\n";
08799 	this.activePage.add(text);
08800 }
08801 //==========================================================================================
08802 //				pdfCatalog$setFont
08803 //==========================================================================================
08804 function pdfCatalog$setFont(days)
08805 {
08806 	if (this.formSize == '12') return true;
08807 	if (days > 0) return true;
08808 	return false;
08809 }
08810 //==========================================================================================
08811 //				pdfCatalog$signatureObject_
08812 //==========================================================================================
08813 function pdfCatalog$signatureObject_()
08814 {
08815 	var text,buffer,i,range;
08816 	var spos,epos;
08817 	
08818 	buffer = '';
08819 	for (i=0; i &lt; 240; ++i) buffer += '0';
08820 
08821 		
08822 	text = "";
08823 	text += "&lt;&lt;";
08824 	text += "/Type /Sig /Filter /Adobe.PPKLite /SubFilter /adbe.pkcs7.detached ";
08825 
08826 	text += "/Contents &lt;";
08827 
08828 	spos = this.pdf.cpos + text.length;
08829 	epos = spos + buffer.length;
08830 
08831 	text += buffer;
08832 
08833 	text += ">";
08834 
08835 	range = "[ 0," + spos + ',' + epos + ',' + buffer.length + ']';
08836 
08837 	text += '/ByteRange ' + range;
08838 		
08839 	text += ">>";
08840 	return text;
08841 }
08842 //==========================================================================================
08843 //				pdfCatalog$addField
08844 //==========================================================================================
08845 function pdfCatalog$addField(field)
08846 {
08847 	var i,group,groupName;
08848 
08849 	field.pageIndex = this.activePage.index;
08850 	field.index	= this.fields.length;
08851 
08852 	if (field.type != 'radio')
08853 	{
08854 		this.fields[this.fields.length] = field;
08855 		return;		
08856 	}
08857 
08858 //---------- Radio into Groups -----
08859 	
08860 	groupName = '' + field.groupName;
08861 	groupName = groupName.toLowerCase();
08862 	
08863 	group = null;
08864 	for (i=0; i &lt; this.fields.length; ++i)
08865 	{
08866 		if (this.fields[i].type != 'radiogroup') continue;
08867 		if (this.fields[i].groupName == groupName)
08868 		{
08869 			group = this.fields[i];
08870 			break;
08871 		}
08872 	}
08873 	
08874 	if (group == null)
08875 	{
08876 		group = new pdfField$(this.pdf,groupName,'radiogroup');
08877 		group.fields = new Array();
08878 		group.pageIndex = this.activePage.index;
08879 		group.index	= this.fields.length;
08880 		group.groupName = groupName;
08881 
08882 		this.fields[this.fields.length] = group;
08883 	}
08884 
08885 	group.fields[group.fields.length] = field;
08886 }
08887 //==========================================================================================
08888 //				pdf$addJavascript
08889 //==========================================================================================
08890 function pdfCatalog$addJavascript(javascript)
08891 {
08892 	var index;
08893 	
08894 	index = this.javascript.length;
08895 	this.javascript[index] = javascript;
08896 	return index;
08897 }
08898 //==========================================================================================
08899 //				pdf$setWatermark
08900 //==========================================================================================
08901 function pdf$setWatermark(watermark)
08902 {
08903 	var save_color,save_size,x,y,save_hold;
08904 	var save_xpos,save_ypos,ty;
08905 
08906 	this.watermark = watermark;
08907 	if (this.watermark == '') return;
08908 
08909 	save_xpos = this.xpos;
08910 	save_ypos = this.ypos;
08911 			
08912 	save_size = this.fontSize;
08913 	save_color = this.fontColor;
08914 
08915 	this.bold = false;
08916 	this.italic = false;
08917 	this.underline = false;
08918 
08919 	this.setFontSize(72);
08920 	this.setFontColor('#EEEEEE');
08921 	x = (this.pageWidth / 2) - ((this.width_(this.watermark) / 72) / 2);
08922 	y = (this.pageLength / 2) - 1;
08923 	if (isNaN(x)) x = 1;
08924 	if (isNaN(y)) y = 1;
08925 
08926 	save_hold = this.holdPage;
08927 	this.holdPage = true;
08928 	this.placeText(x,y,this.watermark);
08929 	this.holdPage = save_hold;
08930 
08931 	this.fontSize = save_size;
08932 	this.fontColor = save_color;
08933 	this.xpos = save_xpos;
08934 	this.ypos = save_ypos;
08935 	
08936 	ty = (this.pageLength * 72) - this.charHeight();
08937 	if (isNaN(ty)) return;
08938 	if (this.ypos > ty) this.ypos = ty;
08939 
08940 }
08941 //==========================================================================================
08942 //				pdfCatalog$addPage
08943 //==========================================================================================
08944 function pdfCatalog$addPage()
08945 {
08946 	var n,x,y;
08947 	var save_size,save_color;
08948 	
08949 	n = this.pages.length;
08950 	this.pages[n] = new pdfPage$(this,n);
08951 	this.activePage = this.pages[n];
08952 
08953 	this.pdf.setWatermark(this.pdf.watermark);
08954 
08955 	this.pdf.xsize	= this.pdf.xmin;
08956 	this.pdf.ysize	= this.pdf.ymax;
08957 }
08958 //==========================================================================================
08959 //				pdfCatalog$imageObject_
08960 //==========================================================================================
08961 function pdfCatalog$imageObject_(index)
08962 {
08963 	var data,text,size,length,filename;
08964 	var filter,encode;
08965 	var include;
08966 	
08967 	encode = false;
08968 	
08969 	filter = '/Filter /DCTDecode';
08970 
08971 	if (this.pdf.images[index].isData)
08972 	{
08973 		 size = this.pdf.images[index].size;
08974 	}
08975 	else 
08976 	{
08977 		size = this.pdf.sys.fileSize(this.pdf.images[index].filename);
08978 	}
08979 	
08980 	if (size &lt;= 0) return;
08981 
08982 	filename = this.pdf.images[index].filename;
08983 
08984 	if (this.pdf.images[index].format != '')
08985 	{
08986 		if (this.pdf.images[index].format == 'hex') filter = '/Filter [/ASCIIHexDecode /DCTDecode]';
08987 		if (this.pdf.images[index].format == 'hex85') filter = '/Filter [/ASCII85Decode /DCTDecode]';
08988 	}
08989 	else
08990 	{	
08991 		if (this.pdf.hexEncodeImages)
08992 		{
08993 			encode = true;
08994 			filter = '/Filter [/ASCIIHexDecode /DCTDecode]';
08995 			size = this.pdf.hexSize(size);
08996 		}
08997 	}
08998 	
08999 	if (this.pdf.send)
09000 	{
09001 	   text = '&lt;&lt; /Type /XObject /Subtype /Image /Width ' + this.pdf.images[index].width + ' ';
09002 	   text = text + '/Height ' + this.pdf.images[index].height + ' ';
09003 	   text = text + '/ColorSpace /DeviceRGB /BitsPerComponent 8 ' + filter + ' ';
09004 	   text = text + '/Length ' + size + ' >>' + "\n";
09005 	   text = text + 'stream' + "\n"; 
09006 	   this.pdf.write_(text);
09007 
09008 	   filename = this.pdf.images[index].filename;
09009 	   if (this.pdf.stream != null)
09010 	   {	   
09011 			include = new Object();
09012 			include.filename = filename;
09013 			include.position = this.pdf.stream.position;
09014 			include.size = size;
09015 			if (encode) include.size = this.pdf.hexSize(include.size);
09016 			this.pdf.includes[this.pdf.includes.length] = include;
09017 
09018 			this.pdf.cpos = this.pdf.cpos + include.size;
09019 	   }
09020 	   else
09021 	   {
09022 
09023 		if (this.pdf.images[index].isData)
09024 		{
09025 			   this.pdf.write_(this.pdf.images[index].data);	    
09026 			}
09027 			else
09028 			{			
09029 				length = this.pdf.sys.fileSend(filename);
09030 				if (encode) length = this.pdf.hexSize(length);
09031 				this.pdf.write_(length);
09032 				this.pdf.cpos += length;
09033 			}
09034 	   }
09035 	   
09036 	   text = "\n" + 'endstream';
09037 	   this.pdf.write_(text);
09038 	   return;
09039 	}
09040 
09041 	if (this.pdf.images[index].isData)
09042 	{
09043 		data = this.pdf.images[index].data;  
09044 	}
09045 	else
09046 	{			
09047 		data = CollinsPDF().readBuffer(this.pdf.images[index].filename);
09048 		length = data.length;
09049 	}
09050 
09051 	text = '&lt;&lt; /Type /XObject /Subtype /Image /Width ' + this.pdf.images[index].width + ' ' +
09052 		'/Height ' + this.pdf.images[index].height + ' ' + 
09053 		'/ColorSpace /DeviceRGB /BitsPerComponent 8 ' + filter +
09054 		' /Length ' + data.length + ' >>' + "\n";
09055 
09056 	 text = text + 'stream' + "\n";
09057 	 this.pdf.write_(text);
09058 	 this.pdf.write_(data);	
09059 	 this.pdf.write_("\n" + 'endstream');
09060 }
09061 //==========================================================================================
09062 //				pdfCatalog$writeExtGState_
09063 //==========================================================================================
09064 function pdfCatalog$writeExtGState_(index)
09065 {
09066 	var text,gs;
09067 	
09068 	gs = this.extGStates[index];
09069 	text = '&lt;&lt; /Type /ExtGState ' + gs.data + '>>';
09070 	gs.ref = this.pdf.addObject_(text);
09071 }
09072 //==========================================================================================
09073 //				pdfCatalog$u3dObject_
09074 //==========================================================================================
09075 function pdfCatalog$u3dObject_(index)
09076 {
09077 	var data,text,size,length,filename;
09078 	var filter,encode,view,subtype,fmt;
09079 	var include;
09080 	
09081 	encode = false;
09082 
09083 	subtype = this.pdf.u3ds[index].subtype;
09084 
09085 	view = "&lt;&lt;";
09086 	view += "/Type /3DView /XN (View_0)";
09087 //	view += "/BG &lt;&lt; /Subtype /SC /C [1 1 1]>>";
09088 //	view += "/MS /" + subtype + " /CO 5 /U3DPath [(PDF 3D)(View_0)]";
09089 //	view += "/RM &lt;&lt; /Type /3DRenderMode /Subtype /BoundingBox>>";
09090 //	view += "/LS &lt;&lt; /Type /3DLightingScheme /Subtype " + this.pdf.getLightingScheme() + ">>";
09091 	view += ">>";
09092 		
09093 	filter = '';
09094 
09095 	size = this.pdf.sys.fileSize(this.pdf.u3ds[index].filename);
09096 	filename = this.pdf.u3ds[index].filename;
09097 
09098 	fmt = this.pdf.u3ds[index].format;
09099 	if (fmt.substr(0,3) == 'hex')
09100 	{
09101 		if (this.pdf.u3ds[index].format == 'hex') filter = '/Filter /ASCIIHexDecode';
09102 		if (this.pdf.u3ds[index].format == 'hex85') filter = '/Filter /ASCII85Decode';
09103 	}
09104 	else
09105 	{	
09106 		if (this.pdf.hexEncodeImages)
09107 		{
09108 			encode = true;
09109 			filter = '/Filter /ASCIIHexDecode';
09110 			size = this.pdf.hexSize(size);
09111 		}
09112 	}
09113 	
09114 	if (this.pdf.send)
09115 	{
09116 	   text = '&lt;&lt; /Type /3D ' + filter + ' /Subtype /' + subtype + ' /Length ' + size + '/VA ' + view + '>>';
09117 	   text = text + 'stream' + "\n"; 
09118 	   this.pdf.write_(text);
09119 
09120 	   filename = this.pdf.u3ds[index].filename;
09121 	   if (this.pdf.stream != null)
09122 	   {
09123 			include = new Object();
09124 			include.filename = filename;
09125 			include.position = this.pdf.stream.position;
09126 			include.size = this.pdf.sys.fileSize(filename);
09127 			if (encode) include.size = this.pdf.hexSize(include.size);
09128 			this.pdf.includes[this.pdf.includes.length] = include;
09129 
09130 			this.pdf.cpos = this.pdf.cpos + include.size;
09131 	   }
09132 	   else
09133 	   {
09134 			length = this.pdf.sys.fileSend(filename);
09135 			if (encode) length = this.pdf.hexSize(length);
09136 			this.pdf.cpos += length;
09137 	   }
09138 	   
09139 	   text = "\n" + 'endstream';
09140 	   this.pdf.write_(text);
09141 	   return '';
09142 	}
09143 
09144 	data = CollinsPDF().readBuffer(this.pdf.u3ds[index].filename);
09145 	length = data.length;
09146 
09147 	text = '&lt;&lt; /Type /3D ' + filter + '/Subtype /' + subtype + ' /Length ' + length + '/VA ' + view + '>>';
09148 	text = text + 'stream' + "\n";
09149 	this.pdf.write_(text);
09150 
09151 	this.pdf.write_(data);
09152 
09153 	text = "\n" + 'endstream';
09154 	this.pdf.write_(text);
09155 
09156 	return '';
09157 }
09158 //==========================================================================================
09159 //				pdfCatalog$fontfileObject_
09160 //==========================================================================================
09161 function pdfCatalog$fontfileObject_(index)
09162 {
09163 	var data,text,size,length,filename;
09164 	var filter,encode,view,subtype;
09165 	var include,ext,i;
09166 	
09167 	encode = false;
09168 
09169 	size = this.pdf.sys.fileSize(this.pdf.fontfiles[index].filename);
09170 	filename = this.pdf.fontfiles[index].filename;
09171 
09172 	i = filename.lastIndexOf('.');
09173 	ext = filename.substr(i);
09174 	ext = ext.toLowerCase();
09175 
09176 	if (this.pdf.send)
09177 	{
09178 	   text = this.pdf.fontfiles[index].template;
09179 	   text = text.replace(/\{filter\}/g,filter);
09180 	  
09181 	   text = text + 'stream' + "\n"; 
09182 	   this.pdf.write_(text);
09183 
09184 
09185 	   if (this.pdf.stream != null)
09186 	   {
09187 			include = new Object();
09188 			include.filename = filename;
09189 			include.position = this.pdf.stream.position;
09190 			include.size = this.pdf.sys.fileSize(filename);
09191 			if (encode) include.size = this.pdf.hexSize(include.size);
09192 			this.pdf.includes[this.pdf.includes.length] = include;
09193 
09194 			this.pdf.cpos = this.pdf.cpos + include.size;
09195 	   }
09196 	   else
09197 	   {
09198 			length = this.pdf.sys.fileSend(filename);
09199 			if (encode) length = this.pdf.hexSize(length);
09200 			this.pdf.cpos += length;
09201 	   }
09202 	   
09203 	   text = "\n" + 'endstream';
09204 	   this.pdf.write_(text);
09205 	   return '';
09206 	}
09207 
09208 	if (ext == '.txt') 
09209 	{
09210 		data = this.pdf.sys.fileRead(filename);
09211 		i = data.indexOf('|');
09212 		data = data.substr(i+1);
09213 	}
09214 	else
09215 	{
09216 	    data = CollinsPDF().readBuffer(filename);
09217 	}
09218 
09219 	text = this.pdf.fontfiles[index].template;
09220 	text = text.replace(/\{filter\}/g,filter);
09221 	
09222 	text = text + 'stream' + "\n";
09223 	this.pdf.write_(text);
09224 	this.pdf.write_(data);
09225 	
09226 	text = "\n" + 'endstream';
09227 	this.pdf.write_(text);
09228 
09229 	return '';
09230 }
09231 //==========================================================================================
09232 //				pdfCatalog$addOutline
09233 //==========================================================================================
09234 function pdfCatalog$addOutline(title,xpos, ypos,zoomFactor)
09235 {
09236 	var child,page,title,ptext,p; 
09237 	var i,list,parent;
09238 	
09239 	if (this.outlines.length == 0) this.outlines[this.outlines.length] = new pdfOutline$(null,0,'',0,0,0,0);
09240 	parent = this.outlines[0];
09241 
09242 	list = title.split('~');
09243 
09244 	title = this.pdf.trim(list[list.length-1]);
09245 
09246 	for (i=0; i &lt; list.length-1; ++i)
09247 	{
09248 		name = this.pdf.trim(list[i])
09249 		name = name.toLowerCase();
09250 		p = parent.findChild(name);
09251 		if (p == null) break;
09252 		parent = p;
09253 	}
09254 		
09255 	page = this.activePage.index;
09256 
09257 //	if (ypos &lt; (2 * 72)) ypos = (2 * 72);	// 2" from bottom of page;
09258 //	if (ypos > ((this.pdf.pageLength - 1) * 72) ) ypos = this.pdf.pageLength * 72;
09259 
09260 
09261 	child = new pdfOutline$(parent,page,title,this.outlines.length,xpos,ypos,zoomFactor);
09262 	this.outlines[this.outlines.length] = child;
09263 
09264 	return child;
09265 }
09266 //==========================================================================================
09267 //				pdfCatalog$write
09268 //==========================================================================================
09269 function pdfCatalog$write()
09270 {		
09271 	var parentIndex, page, i, p, pageRef, text, ref, proc;
09272 	var field, flags, ref, cref, file, font, template,cls,n;
09273 
09274 	var IncludeNoValueFields = 2;
09275 	var IncludeAnnotations = 8;
09276 
09277 //	if (this.pdf.year &lt; 0) return '';
09278 	
09279 	for (i = 0; i &lt; this.pages.length; ++i)
09280 	{
09281 		this.activePage = this.pages[i];
09282 	
09283 		if (this.pdf.drawMargin) this.pdf.drawMargin_();
09284 			
09285 		n = i + 1;
09286 		this.pdf.setFontSize(10);
09287 		this.pdf.setFontColor(0);
09288 
09289 		if (this.pdf.onPageHeader)
09290 		{
09291 			this.pdf.setHeader_();
09292 			proc = this.pdf.onPageHeader;
09293 			proc(n,this.pages.length,this.pdf);
09294 		}
09295 
09296 		if (this.pdf.onPageFooter) 
09297 		{
09298 
09299 			this.pdf.setFooter_();
09300 			proc = this.pdf.onPageFooter;
09301 			proc(n,this.pages.length,this.pdf);
09302 		}
09303 	}
09304 
09305 	this.pdf.ref = new Array();
09306 	this.pdf.addObject_('[ /PDF /TEXT ]');
09307 
09308 //------- Font Files Objects --------
09309 
09310 	for (i=0; i &lt; this.pdf.fontfiles.length; ++i)
09311 	{
09312 		this.pdf.fontfiles[i].ref = this.pdf.addObjectFontfile_(i);
09313 	}
09314 	
09315 //-----------------------
09316 
09317 	this.pdf.fontIndex = this.pdf.index_();
09318 
09319 	for (i=0; i &lt; this.pdf.fonts.length; ++i)
09320 	{
09321 		if (! this.pdf.fonts[i].used) continue;
09322 		font = this.pdf.fonts[i];
09323 		
09324 		cls = '';
09325 		if (font.mode ==       'bold') cls = ',Bold';
09326 		if (font.mode ==     'italic') cls = ',Italic';
09327 		if (font.mode == 'bolditalic') cls = ',BoldItalic';
09328 		
09329 		cref = 0;
09330 		if (font.template_cmap != '')
09331 		{
09332 			template = font.template_cmap;			
09333 			if (template != '') cref = this.pdf.addObject_(template);					
09334 		}
09335 
09336 		ref = 0;
09337 		if (font.template_fontDescriptor != '')
09338 		{
09339 			template = font.template_fontDescriptor;			
09340 			if (template != '')
09341 			{
09342 				if (font.file) ref = font.file.ref;
09343 				template = template.replace(/\{ref\}/g,ref);
09344 				template = template.replace(/\{mode\}/g,cls);
09345 				ref = this.pdf.addObject_(template);					
09346 			}
09347 		}
09348 		
09349 		if (font.template_descendantFont != '')
09350 		{
09351 			template = font.template_descendantFont;			
09352 			if (template != '')
09353 			{
09354 				template = template.replace(/\{ref\}/g,ref);
09355 				template = template.replace(/\{mode\}/g,cls);
09356 				ref = this.pdf.addObject_(template);					
09357 			}
09358 		}
09359 
09360 		template = font.template_font;
09361 		template = template.replace(/\{ref\}/g,ref);
09362 		template = template.replace(/\{cref\}/g,cref);
09363 		template = template.replace(/\{mode\}/g,cls);
09364 		font.ref = this.pdf.addObject_(template);
09365 	}
09366 
09367 //-------------- images -----------
09368 
09369 	this.pdf.imageIndex = this.pdf.index_();
09370 
09371 	for (i=0; i &lt; this.pdf.images.length; ++i)
09372 	{
09373 		this.pdf.addObjectImage_(i);		//
09374 	}
09375 
09376 //-------------- u3d -----------
09377 
09378 	this.pdf.u3dIndex = this.pdf.index_();
09379 
09380 	for (i=0; i &lt; this.pdf.u3ds.length; ++i)
09381 	{
09382 		this.pdf.addObjectU3d_(i);		//
09383 	}
09384 
09385 //-------------- extGState -----------
09386 
09387 	for (i=0; i &lt; this.extGStates.length; ++i)
09388 	{
09389 		this.writeExtGState_(i);
09390 	}
09391 
09392 //-------------- javascript -----------
09393 
09394 	this.javascriptIndex = this.pdf.index_();
09395 	for (i=0; i &lt; this.javascript.length; ++i)
09396 	{
09397 		text = '&lt;&lt; /S/JavaScript/JS(' + this.javascript[i] + ')>>';
09398 		this.pdf.addObject_(text);
09399 	}
09400 
09401 //--------------- Fields -----------------
09402 
09403 	for (i=0; i &lt; this.fields.length; ++i)
09404 	{
09405 		field = this.fields[i];
09406 		field.write();
09407 	}
09408 
09409 	this.formIndex = this.pdf.index_();
09410 
09411 	flags = 0;
09412 	flags += IncludeNoValueFields;
09413 	
09414 	if (this.fields.length > 0)
09415 	{
09416 		text = '&lt;&lt; /Fields [';
09417 		
09418 		for (i=0; i &lt; this.fields.length; ++i)
09419 		{
09420 		   text = text + this.fields[i].ref + ' 0 R ' ;		
09421 		}
09422 		text = text + ']';
09423 		text = text + '/Flags ' + flags;
09424 		text = text + '/NeedAppearances true';
09425 		text = text + '/DR&lt;&lt; /Font&lt;&lt; /F1 2 0 R>>>>/DA(/F1 10 Tf 0 g )>>';
09426 		this.pdf.addObject_(text);
09427 	}
09428 
09429 //----------------- pages --------------
09430 
09431 	this.pageIndex = this.pdf.index_();
09432 	this.pdf.addObject_(this.pagesText());
09433 
09434 	parentIndex = this.pdf.index_() - 1;
09435 
09436 	for (i = 0; i &lt; this.pages.length; ++i)
09437 	{
09438 		this.activePage = this.pages[i];
09439 		this.activePage.write(parentIndex,i+1);
09440 	}
09441 
09442 //--------------- Outline-----------------
09443 
09444 	this.outlineIndex = this.pdf.index_();
09445 	this.pdf.addObject_(this.outlinesText());
09446 
09447 	for (i = 1; i &lt; this.outlines.length; ++i)
09448 	{	
09449 
09450 		p = this.outlines[i].pageIndex;
09451 		pageRef = this.pages[p].ref;
09452 
09453 		this.pdf.addObject_(this.outlines[i].text(this.outlineIndex, pageRef));
09454 	}
09455 
09456 //-------------- Signature --------------------
09457 
09458 	this.pdf.signatureIndex = -1;
09459 	
09460 	if (this.pdf.includeSignature)
09461 	{
09462 	    this.pdf.signatureIndex = this.pdf.index_();
09463 	    this.pdf.addObjectSignature_();
09464 	}
09465 	
09466 //---------------------------------------------
09467 	this.pdf.propertyIndex = this.pdf.index_();
09468 	this.pdf.addObject_(this.pdf.properties_());
09469 
09470 	this.pdf.catalogIndex = this.pdf.index_();
09471 	this.pdf.addObject_(this.catalogText());
09472 }
09473 //==========================================================================================
09474 //				pdfCatalog$catalogText
09475 //==========================================================================================
09476 function pdfCatalog$catalogText()
09477 {
09478 	var text,index,j,temp,ref;
09479 
09480 	index = this.pdf.index_() + 1;
09481 	
09482 	text = '&lt;&lt; /Type /Catalog ' + "\n";
09483 	text = text + '/Outlines ' + this.outlineIndex + ' 0 R' + "\n";
09484 	text = text + '/Pages ' + this.pageIndex + ' 0 R' + "\n";
09485 	text = text + '/ViewerPreferences &lt;&lt; /FitWindow /False >>' + "\n";
09486 
09487 	if (this.pageLayout != '') text = text + '/PageLayout /' + this.pageLayout + "\n";
09488 
09489 	if (this.outlines.length > 1) text = text + '/PageMode /UseOutlines' + "\n";
09490 
09491 	if (this.fields.length > 0) text = text + '/AcroForm ' + this.formIndex + ' 0 R' + "\n"; 
09492 
09493 	if (this.pdf.signatureIndex >= 0) text = text + '/Legal ' + this.pdf.signatureIndex + ' 0 R' + "\n"; 
09494 
09495 
09496 	if (this.onDocumentOpen >= 0)
09497 	{
09498 		text = text + '/OpenAction ';
09499 		ref = this.javascriptIndex + this.onDocumentOpen;
09500 		text = text + ref + ' 0 R'; 
09501 		text = text + '' + "\n";
09502 	}
09503 
09504 	temp = '';
09505 	if (this.onWillClose >= 0)
09506 	{
09507 		ref = this.javascriptIndex + this.onWillClose ;
09508 		temp =  temp + '/WC ' + ref + ' 0 R ';
09509 	}
09510 
09511 	if (this.onWillSave >= 0)
09512 	{
09513 		ref = this.javascriptIndex + this.onWillSave ;
09514 		temp =  temp + '/WS ' + ref + ' 0 R ';
09515 	}
09516 
09517 	if (this.onDidSave >= 0)
09518 	{
09519 		ref = this.javascriptIndex + this.onDidSave ;
09520 		temp = temp + '/DS ' + ref + ' 0 R ';
09521 	}
09522 
09523 	if (this.onWillPrint >= 0)
09524 	{
09525 		ref = this.javascriptIndex + this.onWillPrint ;
09526 		temp =  temp + '/WP ' + ref + ' 0 R ';
09527 	}
09528 
09529 	if (this.onDidPrint >= 0)
09530 	{
09531 		ref = this.javascriptIndex + this.onDidPrint ;
09532 		temp = temp + '/DP ' + ref + ' 0 R ';
09533 	}
09534 
09535 	if (temp != '') text = text + 'AA&lt;&lt;' + temp + '>>';
09536 
09537 	text = text + '>>';
09538 
09539 	return text;
09540 }
09541 //==========================================================================================
09542 //				pdfCatalog$outlinesText
09543 //==========================================================================================
09544 function pdfCatalog$outlinesText()
09545 {
09546 	var text,index,n,baseIndex;
09547 
09548 	baseIndex = this.pdf.index_();
09549 	
09550 	text = '&lt;&lt; /Type /Outlines ' + "\n";
09551 
09552 	if (this.outlines.length > 0)
09553 	{
09554 		index = baseIndex;
09555 		n = index + this.outlines[0].firstChild.index;
09556 		text = text + '/First ' + n + ' 0 R' + "\n";
09557 		n = index + this.outlines[0].lastChild.index;
09558 		text = text + '/Last ' + n + ' 0 R' + "\n";
09559 	}
09560 
09561 	n = this.outlines.length-1;
09562 	text = text + ' /Count ' + n + "\n" + '>>';
09563 	return text;
09564 }
09565 //==========================================================================================
09566 //				pdfCatalog$pagesText
09567 //==========================================================================================
09568 function pdfCatalog$pagesText()
09569 {
09570 	var text,index,i,j;
09571 
09572 	index = this.pdf.index_() + 1;
09573 	
09574 	text = '&lt;&lt; /Type /Pages ' + "\n";
09575 
09576 	j = index;
09577 	text = text + '/Kids [ ';
09578 
09579 	for (i = 0; i &lt; this.pages.length; ++i)
09580 	{
09581 			text = text + j + ' 0 R ';
09582 			this.pdf.lastPage = j;
09583 			this.pages[i].ref = j;
09584 			j = j + 1 + (this.pages[i].objectCount());
09585 	}
09586 	text = text + ' ]' + "\n";
09587 
09588 	text = text + '/Count ' + this.pages.length + "\n" + '>>';
09589 	return text;
09590 }
09591 //==========================================================================================
09592 //				pdfFont$ (Constructor)
09593 //==========================================================================================
09594 function pdfFont$(index,name,mode,encoding)
09595 {
09596 	var i,text,C,B,fname,dx,encode,cname,fontname;
09597 
09598 	name = name.toLowerCase();
09599 	if (arguments.length &lt; 4) encoding = '';
09600 	encoding = encoding.toLowerCase();
09601 	
09602 	encode = 'WinAnsiEncoding';
09603 	if (encoding ==  'standard') encode = 'StandardEncoding';
09604 	if (encoding ==  'macroman') encode = 'MacRomanEncoding';
09605 	if (encoding == 'macexpert') encode = 'MacExpertEncoding';
09606 	if (encoding ==    'pdfdoc') encode = 'PDFDocEncoding';
09607 	if (encoding ==   'winansi') encode = 'WinAnsiEncoding';
09608 
09609 	this.index	= parseInt(index);
09610 	this.name	= name;
09611 	this.encoding	= encoding;
09612 	this.mode	= mode;
09613 	this.type	= 'adobe';
09614 	this.mode	= mode.toLowerCase();
09615 	this.id		= this.name + ',' + this.encoding.toLowerCase();
09616 	this.mapping	= null;
09617 
09618 	this.font_widths = new Array();
09619 
09620 	if (this.name == 'times')
09621 	{
09622 	
09623 	this.font_widths = new Array(531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,
09624 		531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,253,
09625 		335,409,503,503,835,2,179,333,333,501,565,251,338,250,280,501,501,
09626 		501,501,501,501,501,501,501,501,276,276,0,566,566,444,927,726,669,
09627 		669,727,612,559,727,727,333,389,726,614,896,729,727,558,727,671,559,
09628 		614,727,727,952,726,726,614,331,276,331,464,512,333,444,501,444,501,
09629 		446,335,503,503,278,278,503,278,784,503,503,503,503,333,391,278,503,
09630 		503,747,504,504,446,0,0,483,545,350,503,350,333,503,446,1009,503,
09631 		503,335,995,561,335,897,350,616,350,350,333,333,446,446,350,503,1011,
09632 		335,989,389,335,727,352,446,727,242,335,503,503,503,503,198,503,335,
09633 		766,276,503,568,335,766,333,402,568,301,301,317,513,455,250,333,299,
09634 		312,503,756,756,756,446,727,727,727,727,727,727,897,673,616,616,616,
09635 		616,335,335,335,335,727,727,727,727,727,727,727,568,727,727,727,727,
09636 		727,727,559,503,448,448,448,448,448,673,444,444,0,1227,444,444,278,
09637 		278,278,278,503,503,503,503,503,503,503,570,503,503,503,503,503,503,
09638 		503,503);
09639 	}
09640 	
09641 
09642 	 if (this.name == 'helvetica')
09643 	 {
09644 	 this.font_widths = new Array(750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,
09645 			750,750,750,750,750,750,750,750,750,750,750,750,
09646 			750,750,278,278,355,556,556,889,667,191,333,333,
09647 			389,584,278,333,278,278,556,556,556,556,556,556,556,556,556,556,278,278,584,584,584,556,
09648 			1015,667,667,722,722,667,611,778,722,278,500,667,556,833,722,778,667,778,722,667,611,722,
09649 			667,944,667,667,611,278,278,278,469,556,333,556,556,500,556,556,278,556,556,222,222,500,
09650 			222,833,556,556,556,556,333,500,278,556,500,722,500,500,500,334,260,334,584,750,556,750,
09651 			222,556,333,1000,556,556,333,1000,667,333,1000,750,611,750,750,222,222,333,333,350,556,
09652 			1000,333,1000,500,333,944,750,500,667,278,333,556,556,556,556,260,556,333,737,370,556,
09653 			584,333,737,552,400,549,333,333,333,576,537,278,333,333,365,556,834,834,834,611,667,667,
09654 			667,667,667,667,1000,722,667,667,667,667,278,278,278,278,722,722,778,778,778,778,778,584,
09655 			778,722,722,722,722,667,667,611,556,556,556,556,556,556,889,500,556,556,556,556,278,278,
09656 			278,278,556,556,556,556,556,556,556,549,611,556,556,556,556,500,556,500);
09657 	}
09658 
09659 	fontname = this.name;
09660 
09661 	if (this.name == 'courier')
09662 	{
09663 		this.font_widths = new Array();
09664 		for (i=0; i &lt; 256; ++i) this.font_widths[i] = 600;
09665 	}
09666 
09667 	if (this.name == 'zapfdingbats')
09668 	{
09669 		fontname = 'ZapfDingbats';
09670 		this.font_widths = new Array();
09671 		for (i=0; i &lt; 256; ++i) this.font_widths[i] = 900;
09672 	}
09673 
09674 	if (this.name == 'symbol')
09675 	this.font_widths = new Array(
09676 		255,255,255,255,255,255,255,255,255,255,
09677 		255,255,255,255,255,255,255,255,255,255,
09678 		255,255,255,255,255,255,255,255,255,255,
09679 		600,600,250,333,713,500,549,833,778,439,333,333,500,549,250,549,
09680 		250,278,500,500,500,500,500,500,500,500,500,500,278,278,549,549,549,444,
09681 		549,722,667,722,612,611,763,603,722,333,631,722,686,889,722,722,768,741,
09682 		556,592,611,690,439,768,645,795,611,333,863,333,658,500,500,631,549,549,
09683 		494,439,521,411,603,329,603,549,549,576,521,549,549,521,549,603,439,576,
09684 		713,686,493,686,494,480,200,480,549,600,600,600,600,600,600,600,600,600,
09685 		600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,
09686 		600,600,600,600,600,600,600,620,247,549,167,713,500,753,753,753,753,1042,
09687 		987,603,987,603,400,549,411,549,549,713,494,460,549,549,549,549,1000,603,
09688 		1000,658,823,686,795,987,768,768,823,768,768,713,713,713,713,713,713,713,
09689 		768,713,790,790,890,823,549,250,713,603,603,1042,987,603,987,603,494,329,
09690 		790,790,786,713,384,384,384,384,384,384,494,494,494,494,600,329,274,686,
09691 		686,686,384,384,384,384,384,384,494,494,494,600);
09692 
09693 	cname = this.mode;
09694 	if (cname.indexOf('bold') >= 0)
09695 	{
09696 		dx = 0;
09697 		if (this.name == 'times') dx = 23;
09698 		if (this.name == 'courier') dx = 0;
09699 		if (this.name == 'helvetica') dx = 36;
09700 		for (i=0; i &lt; this.font_widths.length; ++i)
09701 		{
09702 			this.font_widths[i] += dx;		// bold / bold Italic spacing
09703 		}
09704 	}
09705 
09706 //--------------------- Template --------------------------
09707 
09708 	C = '';
09709 	B = 'Italic';
09710 	if (this.name != 'times') B = 'Oblique';
09711 	
09712 	if (this.mode == 'bold') C = '-Bold'; 
09713 	if (this.mode == 'italic') C = '-' + B; 
09714 	if (this.mode == 'bolditalic') C = '-Bold' + B; 
09715 
09716 	text = '&lt;&lt; /Type /Font' + "\n";
09717 	text = text + '/Subtype /TrueType' + "\n";
09718 	text = text + '/Name /F' + this.index + '' + "\n";
09719 
09720 	fname = fontname.substr(0,1).toUpperCase() + fontname.substr(1) + C;
09721 	if (fname == 'Times') fname = 'Times-Roman';
09722 	text = text + '/BaseFont /' + fname + "\n";
09723 	
09724 	text = text + '/Encoding /' + encode + "\n";
09725 	text = text + '/FirstChar  0' + "\n";
09726 	text = text + '/LastChar 255' + "\n";
09727 //	text = text + '/Widths [ ' + this.font_widths.join(' ') + ' ]' + "\n";
09728 	text = text + '>>';
09729 
09730 	this.template_font	= text;
09731 	
09732 	this.template_fontDescriptor = '';
09733 	this.template_descendantFont = '';
09734 	this.template_cmap  = '';
09735 	
09736 	this.used		= false;
09737 	this.widths		= pdfFont$widths;
09738 }
09739 //==========================================================================================
09740 //				pdfFont$widths
09741 //==========================================================================================
09742 function pdfFont$widths(c,size)
09743 {
09744 	var width;
09745 
09746 	if (isNaN(size)) size = 12;
09747 
09748 	if (c &lt; 0 || c >= this.font_widths.length ) return size;
09749 
09750 	width = this.font_widths[c];
09751 	if (isNaN(width)) return size;
09752 	
09753 	width = width / 1000;
09754 	width = width * size;
09755 	return width;
09756 }
09757 //==========================================================================================
09758 //				pdfRuler$
09759 //  (see also: Collins Software HTML Ruler component)
09760 //------------------------------------------------------------------------------------------
09761 //
09762 //   a ruler sets the left and right margins and 0 or more tab stops.
09763 //   positions are in inches. 
09764 //
09765 //	   first value = left margin
09766 //	   last value = right margin
09767 //	   values (2 .. n-1) = tab stops
09768 //
09769 //	    no prefix = left justify (same as "L")  
09770 //	   "L" prefix = left justified at the tab position
09771 //	   "C" prefix = center              "
09772 //	   "P" prefix = period              "
09773 //	   "R" prefix = right               "
09774 //	   "B" prefix = Column Break Buffered (row ordered)
09775 //	   "N" prefix = Column Break Not-Buffered (column Ordered)
09776 //	 
09777 //	    no suffix = truncate (same as "T")
09778 //	   "W" suffix = wrap text within tab box, forces a pageBreak to keep together (not valid for "P" prefix)
09779 //	   "T" suffix = truncate text within tab box
09780 //	   "D" suffix = truncate text and adds 3 dots "..." within tab box
09781 //
09782 //	example: "1,3,5,7.5"
09783 //		left margin = 1", right margin = 7.5", tab stops at 3" and 5"
09784 //
09785 //	example: "1,C5,P7,7.5"
09786 //		first tab centers text at 5", second tab justifies text at a decimal place at 7"
09787 //				
09788 //	example: "1W,C3W,6T,7.5"
09789 //		wrap text up to first tab, first tab center wraps text at 3" to 6", second tab truncates text 6 to 7.5"
09790 //
09791 //	example: "1,B3,B5,7.5"
09792 //		3 row ordered columns of text at 1-3, 3-5, and 5-7.5
09793 //				
09794 //==========================================================================================
09795 function pdfRuler$(pdf,ruler,borderWidth,tabCharacter,leftMargin)
09796 {
09797 	var width;
09798 	this.pdf = pdf;
09799 
09800 	width = 1;
09801 	if (arguments.length > 2) width = parseFloat(borderWidth);
09802 	if (isNaN(width)) width = 0;
09803 	this.borderWidth = width;	
09804 
09805 	this.tabCharacter = "\t";
09806 	if (arguments.length > 3) this.tabCharacter = tabCharacter;
09807  
09808 	this.marginLeft     = parseFloat(leftMargin);
09809 	if (arguments.length > 4) this.marginLeft = parseFloat(leftMargin) * 72;
09810 	this.marginRight	= this.pdf.pageWidth;
09811 
09812 	this.xpad		= 0.05 * 72;
09813 	this.ypad		= 0;
09814 	this.rows		= 0;
09815 	this.valign		= 'top';
09816 	this.curColumn		= 0;
09817 	this.columns		= 1;
09818 	this.buffered		= false;
09819 
09820 //------------------ public ----------
09821 
09822 	this.addRow		= pdfRuler$addRow;
09823 	this.addText		= pdfRuler$addText;
09824 	this.addHeader		= pdfRuler$addHeader;
09825 	this.end		= pdfRuler$end;
09826 	this.setValign		= pdfRuler$setValign;
09827 
09828 //---------------- private ----------
09829 
09830 	this.getColumnText_	= pdfRuler$getColumnText_;
09831 	this.getColumnText_A	= pdfRuler$getColumnText_A;
09832 	this.parse_		= pdfRuler$parse_;
09833 	this.parse_A		= pdfRuler$parse_A;
09834 	this.fit_		= pdfRuler$fit_;
09835 	this.xpos_		= pdfRuler$xpos_;
09836 	this.ypos_		= pdfRuler$ypos_;
09837 	this.addRow_A		= pdfRuler$addRow_A;
09838 	this.flush_		= pdfRuler$flush_;
09839 	this.addHeaderRow_	= pdfRuler$addHeaderRow_;
09840 	this.end_A		= pdfRuler$end_A;
09841 	
09842 	this.parse_(ruler);
09843 }
09844 //==========================================================================================
09845 //				pdfRuler$setVailgn
09846 //==========================================================================================
09847 function pdfRuler$setValign(valign)
09848 {
09849 	valign = valign.toLowerCase();
09850 	if (valign ==    'top') this.valign = 'top';
09851 	if (valign ==      't') this.valign = 'top';
09852 	if (valign ==      'm') this.valign = 'middle';
09853 	if (valign == 'middle') this.valign = 'middle';
09854 	if (valign ==      'b') this.valign = 'bottom';
09855 	if (valign == 'bottom') this.valign = 'bottom';
09856 }
09857 //==========================================================================================
09858 //				pdfRuler$addHeader
09859 //==========================================================================================
09860 function pdfRuler$addHeader(values)
09861 {
09862 	this.header = true;
09863 	this.addHeaderRow_(values);
09864 	this.header = false;
09865 }
09866 //==========================================================================================
09867 //				pdfRuler$ypos_
09868 //==========================================================================================
09869 function pdfRuler$ypos_(ypos,lines,maxLines)
09870 {
09871 	var dy;
09872 
09873 	if (lines >= maxLines) return ypos;
09874 	dy = maxLines - lines;
09875 	dy = dy * this.pdf.charHeight();
09876 
09877 	switch (this.valign)
09878 	{
09879 	case "middle": return (ypos - (dy / 2));		
09880 	case "bottom": return (ypos - dy);
09881 	      default: return ypos;
09882 	}
09883 
09884 	return ypos;
09885 }
09886 //==========================================================================================
09887 //				pdfRuler$flush_(row)
09888 //==========================================================================================
09889 function pdfRuler$flush_(rows)
09890 {
09891 	var i,row,cont;
09892 
09893 	if (rows.length == 0) return;
09894 
09895 	this.pdf.reportHeader_(rows[0]);		// continuation headers;
09896 
09897 	for (i=0; i &lt; rows.length; ++i)
09898 	{
09899 		this.pdf.setReportGroup_(rows[i]);
09900 		this.addRow_A(rows[i].columns,rows[i].maxLines,rows[i].index);
09901 	}
09902 }
09903 //==========================================================================================
09904 //				pdfRuler$addText
09905 //==========================================================================================
09906 function pdfRuler$addText(text)
09907 {
09908 	var list,maxLines,obj,temp;
09909 	var columns,i,rows,col;
09910 
09911 	list = text.split(this.tabCharacter);
09912 	
09913 	columns = new Array();
09914 	maxLines = 1;
09915 
09916 //--------- wrap / truncate text at all columns ------
09917 
09918 	for (i=0; i &lt; this.tabs.length-1; ++i)
09919 	{
09920 		temp = '';
09921 		if (i &lt; list.length) temp = '' + list[i];
09922 		columns[i] = this.getColumnText_(i,temp);
09923 		col = columns[i];
09924 		if (col.length > maxLines) maxLines = col.length;
09925 	}
09926 	
09927 	this.addRow_A(columns,maxLines,0);
09928 }
09929 //==========================================================================================
09930 //				pdfRuler$addRow
09931 //==========================================================================================
09932 function pdfRuler$addRow(list)
09933 {
09934 	var maxLines,obj,temp;
09935 	var columns,i,rows,ymin,n,col;
09936 	
09937 	columns = new Array();
09938 	maxLines = 1;
09939 
09940 try
09941 {
09942 //--------- wrap / truncate text at all columns ------
09943 
09944 	for (i=0; i &lt; this.tabs.length-1; ++i)
09945 	{
09946 		temp = '';
09947 		if (i &lt; list.length) temp = '' + list[i];
09948 		columns[i] = this.getColumnText_(i,temp);
09949 		col = columns[i];
09950 		if (col.length > maxLines) maxLines = col.length;
09951 	}
09952 
09953 //----------- Keep together on Page -------------
09954 
09955 	rows = this.pdf.reportKeepTogether_(columns,maxLines);
09956 
09957 	if (rows == null) return;
09958 	if (rows.length == 0) return;
09959 	
09960 	this.pdf.reportHeader_(rows[0]);		// continuation headers;
09961 
09962 	for (i=0; i &lt; rows.length; ++i)
09963 	{
09964 		this.pdf.setReportGroup_(rows[i]);
09965 		ymin = this.pdf.ypos - this.pdf.charHeight();
09966 		if (ymin &lt; this.pdf.ymin) this.pdf.pageBreak();
09967 		
09968 		this.addRow_A(rows[i].columns,rows[i].maxLines,rows[i].index);
09969 	}
09970 
09971 	n = rows.length;
09972 	if (! rows[n-1].pageBreakAfter)  return;
09973 	this.pdf.pageBreak();
09974 }
09975 catch (e) { }
09976 		
09977 }
09978 //==========================================================================================
09979 //				pdfRuler$addHeaderRow_
09980 //==========================================================================================
09981 function pdfRuler$addHeaderRow_(list)
09982 {
09983 	var maxLines,obj,temp;
09984 	var columns,i,rows,n,col;
09985 	
09986 	columns = new Array();
09987 	maxLines = 1;
09988 
09989 //--------- wrap / truncate text at all columns ------
09990 
09991 	for (i=0; i &lt; this.tabs.length-1; ++i)
09992 	{
09993 		temp = '';
09994 		if (i &lt; list.length) temp = '' + list[i];
09995 		columns[i] = this.getColumnText_(i,temp);
09996 		col = columns[i];
09997 		if (col.length > maxLines) maxLines = col.length;
09998 	}
09999 
10000 	this.addRow_A(columns,1,0);
10001 	
10002 }
10003 //==========================================================================================
10004 //				pdfRuler$addRow_A
10005 //==========================================================================================
10006 function pdfRuler$addRow_A(columns,maxLines,idx)
10007 {
10008 	var list,maxLines,obj,temp;
10009 	var columns,i,j,n,cell,first,ypos;
10010 	var save_xpos,save_ypos,ymax,ymin;
10011 	var dx,dy,x1,y1,x2,y2,charHeight;
10012 	
10013 	save_ypos = this.pdf.ypos;
10014 	charHeight = this.pdf.charHeight();
10015 
10016 	ypos = save_ypos - ((maxLines-0) * charHeight);
10017 	if (ypos &lt; this.pdf.ymin) this.pdf.pageBreak();
10018 
10019 	save_ypos = this.pdf.ypos;
10020 
10021 //------------------------ header Background ------------------------
10022 
10023 	if (this.header)
10024 	{
10025 		this.pdf.setGraphicFillColor('PowderBlue');
10026 		x1 = this.marginLeft;
10027 		y1 = save_ypos - ((this.pdf.charHeight() / 72) * 10);
10028 		x2 = this.marginRight;
10029 		y2 = y1 - (maxLines * charHeight);
10030 	 
10031 		this.pdf.drawRectangle_A(x1,y1,x2,y2,0.9);
10032 		this.pdf.setGraphicColor('black');
10033 	}
10034 
10035 //------------ output Columns -------------
10036 
10037 	ymin = save_ypos - this.pdf.charHeight();
10038 	
10039 	for (i=0; i &lt; columns.length; ++i)	
10040 	{
10041 
10042 		cell = columns[i];
10043 		ypos = this.ypos_(save_ypos,cell.length,maxLines);
10044 		for (j = 0; j &lt; cell.length; ++j)
10045 		{
10046 			obj = cell[j];
10047 			this.pdf.xpos = obj.xpos;
10048 			this.pdf.ypos = ypos - (j * charHeight);
10049 			if (this.pdf.ypos &lt; this.pdf.ymin) continue;  // ran out of page...
10050 
10051 			this.pdf.fontColor	= obj.fontColor;
10052 			this.pdf.fontSize	= obj.fontSize;
10053 			this.pdf.bold		= obj.bold;
10054 			this.pdf.italic		= obj.italic;
10055 			this.pdf.underline	= obj.underline;
10056 
10057 			this.pdf.put_(obj.text,obj.width,0);
10058 		}
10059 	}
10060 
10061 	this.rows = this.rows + 1;
10062 	this.pdf.line = this.pdf.line + maxLines;
10063 	this.pdf.xpos = this.pdf.xmin;
10064 
10065 	this.pdf.ypos = save_ypos - (maxLines * charHeight);
10066 
10067 //------------------------- Border -------------------
10068 
10069 	if (this.borderWidth &lt;= 0) return;
10070 
10071 	dy = this.pdf.fontSize / 72 * 15;
10072 	x1 = this.marginLeft;
10073 	y1 = save_ypos - dy;
10074 	x2 = this.marginRight;
10075 	y2 = y1;
10076 	this.pdf.setGraphicLineWeight(this.borderWidth);
10077 	this.pdf.plot.line(x1,y1,x2,y2);
10078 
10079 	for (i=0; i &lt; this.tabs.length; ++i)
10080 	{
10081 		x1 = this.tabs[i].position;
10082 		x2 = x1;
10083 
10084 		y1 = save_ypos - ((this.pdf.charHeight() / 72) * 10);
10085 		y2 = y1 - ((maxLines * this.pdf.charHeight()) + dy);
10086 
10087 		this.pdf.plot.line(x1,y1,x2,y2);
10088 	}
10089 }
10090 //==========================================================================================
10091 //				pdfRuler$end
10092 //==========================================================================================
10093 function pdfRuler$end()
10094 {
10095 	this.end_A();
10096 	this.pdf.xmin = this.pdf.marginLeft;
10097 	this.pdf.xmax = this.pdf.marginRight;
10098 }
10099 //==========================================================================================
10100 //				pdfRuler$end_A
10101 //==========================================================================================
10102 function pdfRuler$end_A()
10103 {
10104 	var x1,y1,x2,y2;
10105 	var dy;
10106 
10107 	if (this.rows &lt;= 0) return;
10108 	this.rows = 0;
10109 
10110 	if (this.borderWidth &lt;= 0) return;
10111 	
10112 	dy = this.pdf.fontSize / 72 * 15;
10113 	x1 = this.marginLeft;
10114 	y1 = this.pdf.ypos - (dy + 2);
10115 	x2 = this.marginRight;
10116 	y2 = y1;
10117 	this.pdf.setGraphicLineWeight(this.borderWidth);
10118 	this.pdf.plot.line(x1,y1,x2,y2);
10119 	
10120 	this.pdf.ypos -= 2;
10121 
10122 }
10123 //==========================================================================================
10124 //				pdfRuler$getColumnText_
10125 //==========================================================================================
10126 function pdfRuler$getColumnText_(index,text)
10127 {
10128 	var a,x,width,offset,i,j;
10129 	var tab,index,list,obj,lines,n;
10130 	
10131 	list = new Array();
10132 
10133 	n = this.tabs.length;
10134 	if (index > (n-2))
10135 	{
10136 		 return list;
10137 	}
10138 
10139 	lines = text.split("\r\n");
10140 	for (i=0; i &lt; lines.length; ++i)
10141 	{
10142 		a = this.getColumnText_A(index,lines[i]);
10143 		for (j=0; j &lt; a.length; ++j)
10144 		{
10145 			list[list.length] = a[j];
10146 		}
10147 	}
10148 
10149 	return list;
10150 }
10151 //==========================================================================================
10152 //				pdfRuler$getColumnText_A
10153 //==========================================================================================
10154 function pdfRuler$getColumnText_A(index,text)
10155 {
10156 	var a,x,width,offset;
10157 	var tab,index,list,obj,n;
10158 	
10159 	list = new Array();
10160 	
10161 	n = this.tabs.length-2;
10162 	if (index > n) return list;
10163 	tab = this.tabs[index];
10164 
10165 	this.pdf.fontColor	= tab.fontColor;
10166 	this.pdf.fontSize	= tab.fontSize;
10167 	this.pdf.bold		= tab.bold;
10168 	this.pdf.italic		= tab.italic;
10169 	this.pdf.underline	= tab.underline;
10170 
10171 	if ((! this.header) && (tab.prefix == 'P'))
10172 	{
10173 		i = text.lastIndexOf('.');
10174 		if (i &lt; 0) i = text.length;
10175 		a = text.substr(0,i);
10176 		width = this.pdf.width_(a);
10177 		obj = new Object();
10178 		obj.text = text;
10179 		obj.xpos = tab.position - width;
10180 		obj.width = this.pdf.width_(text);
10181 
10182 		obj.fontColor  = tab.fontColor;	
10183 		obj.fontSize   = tab.fontSize;	
10184 		obj.bold	   = tab.bold;	
10185 		obj.italic     = tab.italic;
10186 		obj.underline  = tab.underline;
10187 
10188 		if (obj.xpos &lt; this.pdf.xpos) obj.xpos = this.pdf.xpos;
10189 
10190 		list[0] = obj;
10191 		return list;
10192 	}
10193 
10194 	list = this.fit_(list,tab,text);
10195 	return list;
10196 
10197 }
10198 //==========================================================================================
10199 //				pdfRuler$xpos_
10200 //==========================================================================================
10201 function pdfRuler$xpos_(tab,width)
10202 {
10203 	var x,prefix;
10204 	
10205 	prefix = tab.prefix;
10206 	if (this.header) prefix = 'C';
10207 
10208 	x = tab.position + this.xpad;
10209 	if (prefix == 'R') x = ((tab.position + tab.size) - width) - this.xpad;
10210 	if (prefix == 'C') x = (tab.position + (tab.size / 2)) - (width / 2);
10211 	return x;
10212 }
10213 //==========================================================================================
10214 //				pdfRuler$fit_
10215 //==========================================================================================
10216 function pdfRuler$fit_(list,tab,text)
10217 {
10218 	var obj,list,width,dots,dotSize;
10219 	var word_nt,word_width,twidth,i,j,k;
10220 
10221 //	if (text.length == 0) return list;
10222 	width = this.pdf.width_(text);
10223 
10224 	if (width &lt;= tab.size)
10225 	{
10226 		obj = new Object();
10227 		obj.xpos	= this.xpos_(tab,width);
10228 		obj.width	= width;
10229 		obj.text	= text;
10230 
10231 		obj.fontColor	= tab.fontColor;	
10232 		obj.fontSize	= tab.fontSize;	
10233 		obj.bold	= tab.bold;	
10234 		obj.italic	= tab.italic;
10235 		obj.underline	= tab.underline;
10236 
10237 		list[list.length] = obj;
10238 		return list;
10239 	}
10240 
10241 	dotSize = 0;
10242 	dots = '';
10243 
10244 	switch (tab.suffix)
10245 	{
10246 	case 'D':
10247 		dotSize = this.pdf.charWidth(46) * 3;
10248 		dots = '...';
10249 
10250 	case 'T':
10251 		width = 0;
10252 		for (i =0; i &lt; text.length; ++i)
10253 		{
10254 			c = text.charCodeAt(i);
10255 			twidth = width + this.pdf.charWidth(c);
10256 			if (twidth > (tab.size - dotSize))
10257 			{
10258 				obj = new Object();
10259 				obj.xpos = this.xpos_(tab,width + dotSize);
10260 				obj.text = text.substr(0,i-1) + dots;
10261 				obj.width = width + dotSize;
10262 				obj.fontColor	= tab.fontColor;	
10263 				obj.fontSize	= tab.fontSize;	
10264 				obj.bold	= tab.bold;	
10265 				obj.italic	= tab.italic;
10266 				obj.underline	= tab.underline;
10267 
10268 				list[list.length] = obj;
10269 				return list;
10270 			}
10271 			width = twidth;
10272 		}	
10273 
10274 		return list;  // should never get here...
10275 		
10276 	case 'W':
10277 		width = 0;
10278 		word_nt = 0;
10279 		word_width = 0;
10280 		for (i = 0; i &lt; text.length; ++i)
10281 		{
10282 			c = text.charCodeAt(i);
10283 			twidth = width + this.pdf.charWidth(c);
10284 			if (twidth > tab.size)
10285 			{
10286 				j = i;
10287 				k = j;
10288 				if (word_nt > 0)
10289 				{
10290 					 j = word_nt;
10291 					 k = j + 1;
10292 					 width = word_width;
10293 				}
10294 				if (j == 0) return list; // must have 1 char;	
10295 				
10296 				obj = new Object();
10297 				obj.xpos	= this.xpos_(tab,width);
10298 				obj.text	= text.substr(0,j);
10299 				obj.width	= width;
10300 				obj.fontColor	= tab.fontColor;	
10301 				obj.fontSize	= tab.fontSize;	
10302 				obj.bold	= tab.bold;	
10303 				obj.italic	= tab.italic;
10304 				obj.underline	= tab.underline;
10305 
10306 				list[list.length] = obj;
10307 				list = this.fit_(list,tab,text.substr(k));
10308 				return list;
10309 			}	
10310 			
10311 			width = twidth;
10312 			if (! this.pdf.charVisible(c)) 
10313 			{
10314 				word_nt = i;
10315 				word_width = width;
10316 			}
10317 		}	
10318 
10319 		return list;  // should never get here...	
10320 	}
10321 	
10322 	return list;
10323 }
10324 //==========================================================================================
10325 //				pdfRuler$parse_
10326 //==========================================================================================
10327 function pdfRuler$parse_(ruler)
10328 {
10329 
10330 	this.marginLeft = 0;
10331 	this.marginRight = this.pdf.pageWidth * 72;	// right margin;
10332 
10333 	this.parse_A(ruler);
10334 
10335 	this.pdf.setMarginRight(this.marginRight / 72);
10336 	this.pdf.setMarginLeft(this.marginLeft / 72);
10337 }
10338 //==========================================================================================
10339 //				pdfRuler$parse_Column
10340 //==========================================================================================
10341 function pdfRuler$parse_Column(columns)
10342 {
10343 	var list,x;
10344 	var prefix,suffix,tab,i,text,c;
10345 
10346 	this.tabs = new Array();
10347 	if (ruler == '') return;
10348 
10349 	list = columns.split(',');
10350 
10351 //----------- Tab Stops ----------------
10352 	
10353 	pos = this.marginLeft;
10354 
10355 	tab = new Object();
10356 	tab.width	= pos;
10357 	tab.size	= tab.width;
10358 	tab.pos		= pos;
10359 
10360 	tab.fontColor	= this.pdf.fontColor;
10361 	tab.fontSize	= this.pdf.fontSize;
10362 	tab.bold	= false;
10363 	tab.italic	= false;
10364 	tab.underline	= false;
10365 	this.tabs[this.tabs.length] = tab;	
10366 
10367 	for (i=0; i &lt; list.length; ++i)
10368 	{	
10369 		prefix = '';
10370 		suffix = 'T';
10371 		text = list[i];
10372 		if (text == '') continue;
10373 		c = text.substr(text.length-1);
10374 		c = c.toUpperCase();
10375 		if (isNaN(c))
10376 		{
10377 			if (c == 'T') suffix = 'T';	// truncate
10378 			if (c == 'W') suffix = 'W';	// wrap
10379 			if (c == 'D') suffix = 'D';	// truncate (with dots...)
10380 			text = text.substr(0,text.length-1);
10381 		}	
10382 		if (isNaN(text))
10383 		{
10384 			prefix = text.substr(0,1);
10385 			prefix = prefix.toUpperCase();
10386 			text = text.substr(1);
10387 		}
10388 		if (isNaN(text)) continue;
10389 		x = parseFloat(text);
10390 		if (x &lt; this.marginLeft) continue;
10391 		if (x > this.marginRight) continue;
10392 
10393 		tab = new Object();
10394 		tab.position = pos + this.xpad;
10395 		tab.prefix = prefix;
10396 		tab.suffix = suffix;
10397 		
10398 		tab.width	= x * 72;
10399 		tab.size	= tab.width - (this.xpad * 2);
10400 		pos += tab.width;
10401 
10402 		tab.fontColor	= this.pdf.fontColor;
10403 		tab.fontSize	= this.pdf.fontSize;
10404 		tab.bold	= false;
10405 		tab.italic	= false;
10406 		tab.underline	= false;
10407 
10408 		this.tabs[this.tabs.length] = tab;		
10409 	}
10410 
10411 //----------- Left / Right Margins ----------------
10412 	
10413 	this.marginRight = pos;
10414 
10415 	tab = new Object();
10416 	tab.width	= 0;
10417 	tab.size	= 0;
10418 	tab.position	= pos;
10419 
10420 	tab.fontColor	= this.pdf.fontColor;
10421 	tab.fontSize	= this.pdf.fontSize;
10422 	tab.bold	= false;
10423 	tab.italic	= false;
10424 	tab.underline	= false;
10425 	this.tabs[this.tabs.length] = tab;	
10426 
10427 }
10428 //==========================================================================================
10429 //			pdfRuler$parse_A
10430 //==========================================================================================
10431 function pdfRuler$parse_A(ruler)
10432 {
10433 	var list,x,tab;
10434 	var prefix,suffix,tab,i,text,c;
10435 
10436 	this.tabs = new Array();
10437 	if (ruler == '') return;
10438 
10439 	list = ruler.split(',');
10440 	if (list.length &lt; 2) return;
10441 
10442 //----------- Tab Stops ----------------
10443 	
10444 	for (i=0; i &lt; list.length; ++i)
10445 	{	
10446 		prefix = '';
10447 		suffix = 'T';
10448 		text = list[i];
10449 		if (text == '') continue;
10450 		c = text.substr(text.length-1);
10451 		c = c.toUpperCase();
10452 		if (isNaN(c))
10453 		{
10454 			if (c == 'T') suffix = 'T';	// truncate
10455 			if (c == 'W') suffix = 'W';	// wrap
10456 			if (c == 'D') suffix = 'D';	// truncate (with dots...)
10457 			text = text.substr(0,text.length-1);
10458 		}	
10459 		if (isNaN(text))
10460 		{
10461 			prefix = text.substr(0,1);
10462 			prefix = prefix.toUpperCase();
10463 			text = text.substr(1);
10464 		}
10465 		if (isNaN(text)) continue;
10466 		x = parseFloat(text);
10467 		if (x &lt; this.marginLeft) continue;
10468 		if (x > this.marginRight) continue;
10469 
10470 		tab = new Object();
10471 		tab.position = x * 72;
10472 		tab.prefix = prefix;
10473 		tab.suffix = suffix;
10474 		if (prefix == 'B') this.columns = this.columns + 1;
10475 
10476 		tab.size   = 0;
10477 
10478 		tab.fontColor	= this.pdf.fontColor;
10479 		tab.fontSize	= this.pdf.fontSize;
10480 		tab.bold	= false;
10481 		tab.italic	= false;
10482 		tab.underline	= false;
10483 
10484 		this.tabs[i] = tab;		
10485 	}	
10486 
10487 //----------- Left / Right Margins ----------------
10488 	
10489 	this.marginLeft = this.tabs[0].position;
10490 	this.marginRight = this.tabs[this.tabs.length-1].position;
10491 
10492 	for (i=0; i &lt; (list.length-1); ++i)
10493 		this.tabs[i].size = (this.tabs[i+1].position - this.tabs[i].position) - (this.xpad * 2);
10494 
10495 	text = '';
10496 	for (i=0; i &lt; this.tabs.length; ++i)
10497 	{
10498 		text = text + i + ') tab size: ' + this.tabs[i].size + ' prefix: ' + this.tabs[i].prefix + ' suffix: ' + this.tabs[i].suffix +
10499 			' pos: ' + this.tabs[i].position + "&lt;br>\r" + "\n";
10500 	}
10501 }
10502 //====================================================================================
10503 //				pdfServer$
10504 //====================================================================================
10505 function pdfServer$(pdf)
10506 {
10507 
10508 	this.receiver = './CollinsPdf.asp';			// Define Location of Receiver ASP
10509 	this.bufferSize = 10 * 1024;				// send file in blocks of this buffer size
10510 	this.uploadSizeLimit = 80 * 1024 * 1024;	// 80MB Size Limitation
10511 	this.pdf = pdf;
10512 
10513 	this.uploadStream	= pdfServer$uploadStream;
10514 	this.uploadStream_A	= pdfServer$uploadStream_A;
10515 	this.uploadFile	= pdfServer$uploadFile;
10516 	this.extractFileName	= pdfServer$extractFileName;
10517 }
10518 //====================================================================================
10519 //				pdfServer$extractFileName
10520 //====================================================================================
10521 function pdfServer$extractFileName(filename)
10522 {
10523 	var j,i;
10524 	
10525 	if (filename == '') return '';
10526 	i = filename.lastIndexOf('\\');
10527 	j = filename.lastIndexOf('/');
10528 	if (j > i) i = j;
10529 	if (i &lt; 0) return filename;
10530 	return filename.substr(i+1);
10531 }
10532 //====================================================================================
10533 //				pdfServer$uploadStream
10534 //====================================================================================
10535 function pdfServer$uploadStream(stream,filename)
10536 {
10537 	return this.pdf.sys.updateStream(this,stream,filename);
10538 }
10539 //====================================================================================
10540 //				pdfServer$uploadStream_A
10541 //====================================================================================
10542 function pdfServer$uploadStream_A(stream,first,size,filename,baseOffset)
10543 {
10544 	var remain,i,records,offset;
10545 	var length,need,xml_dom,node,root;
10546 	var xmldom_init;
10547 	
10548 	this.pdf.httpInit_();
10549 	
10550 	if (size &lt;= 0) return true;
10551 	
10552 	records = Math.floor(size / this.bufferSize);
10553 	remain = size - (records * this.bufferSize);
10554 	if (remain > 0) records = records + 1;
10555 	need = size;
10556 
10557 	for (i = 0; i &lt; records; ++i)
10558 	{
10559 		offset = baseOffset + (i * this.bufferSize);
10560 		length = this.bufferSize;
10561 		if (need &lt; this.bufferSize) length = need;
10562 		need = need - length;
10563 	
10564 		xml_dom = xmldom_init();
10565 		xml_dom.loadXML('&lt;?xml version="1.0" ?> &lt;root/>');
10566 		xml_dom.documentElement.setAttribute("xmlns:dt", "urn:schemas-microsoft-com:datatypes");
10567 
10568 		root = xml_dom.documentElement;
10569 
10570 		node = xml_dom.createElement("filename");
10571 		node.dataType = "string";
10572 		node.text = this.extractFileName(filename);
10573 		root.appendChild(node);
10574 	
10575 		node = xml_dom.createElement("filesize");
10576 		node.dataType = "string";
10577 		node.text = stream.size;
10578 		root.appendChild(node);
10579 	
10580 		node = xml_dom.createElement("length");
10581 		node.dataType = "string";
10582 		node.text = length;
10583 		root.appendChild(node);
10584 	
10585 		node = xml_dom.createElement("part");
10586 		node.dataType = "string";
10587 		node.text = records - i;
10588 		root.appendChild(node);
10589 		
10590 		node = xml_dom.createElement("offset");
10591 		node.dataType = "string";
10592 		node.text = offset;
10593 		root.appendChild(node);
10594 	
10595 		node = xml_dom.createElement("records");
10596 		node.dataType = "string";
10597 		node.text = records;
10598 		root.appendChild(node);
10599 
10600 		node = xml_dom.createElement("file");
10601 		node.dataType = "bin.hex";
10602 //		stream.position = offset;	
10603 		node.nodeTypedValue = stream.Read(length);
10604 		root.appendChild(node);
10605 
10606 		this.pdf.http.open("POST",this.receiver,false);
10607 		this.pdf.http.setRequestHeader("Content-length", xml_dom.length); 
10608 		this.pdf.http.send(xml_dom);
10609 
10610 		if (this.pdf.http.responseText.indexOf('status=ok') &lt; 0)
10611 		{
10612 			throw new Error(this.pdf.http.responseText);
10613 			return false;
10614 		}
10615 
10616 	}
10617 
10618 	return true;
10619 }
10620 //====================================================================================
10621 //				pdfServer$uploadFile
10622 //====================================================================================
10623 function pdfServer$uploadFile(filename)
10624 {
10625 	return this.pdf.sys.uploadFile(this,filename);
10626 }
10627 //=======================================================================
10628 //						pdf$toDataURL
10629 //=======================================================================
10630 function pdf$toDataURL()
10631 {
10632 
10633 	return 'data:application/pdf;base64,' + this.toBase64(this.data);
10634 
10635 }
10636 //=======================================================================
10637 //						pdf$toBase64
10638 //=======================================================================
10639 function pdf$toBase64(data)
10640 {
10641 		var i,text;
10642 		var c1, c2, c3;
10643 		var e1, e2, e3, e4;
10644 		var key;
10645 		
10646 		if (! data) data = this.data;
10647 		
10648 		key = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" + "abcdefghijklmnopqrstuvwxyz0123456789+/=";
10649 		
10650 		i = 0;
10651 		text = '';
10652  
10653 		while (i &lt; data.length) 
10654 		{
10655 
10656 			c1 = data.buffer[i++];
10657 			c2 = data.buffer[i++];
10658 			c3 = data.buffer[i++];
10659  
10660 			e1 = c1 >> 2;
10661 			e2 = ((c1 & 3) &lt;&lt; 4) | (c2 >> 4);
10662 			e3 = ((c2 & 15) &lt;&lt; 2) | (c3 >> 6);
10663 			e4 = c3 & 63;
10664  
10665 			if (isNaN(c2)) 
10666 			{
10667 				e3 = 64;
10668 				e4 = 64;
10669 			} 
10670 			else 
10671 			{
10672 				if (isNaN(c3)) e4 = 64;
10673 			}
10674  
10675 			text += key.charAt(e1) + key.charAt(e2) +	key.charAt(e3) + key.charAt(e4);
10676 		}
10677  
10678 		return text;
10679 }
10680 //=======================================================================
10681 //						pdf$utf8
10682 //=======================================================================
10683 function pdf$utf8(text)
10684 {
10685 		var data, i, c;
10686 
10687 		text = text.replace(/\r\n/g,"\n");
10688 		data = "";
10689  
10690 		for (i = 0; i &lt; this.data.length; ++i) 
10691 		{
10692 			c = text.charCodeAt(i);
10693  
10694 			if (c &lt; 128) 
10695 			{			
10696 				data += String.fromCharCode(c);
10697 			}
10698 			else 
10699 			{
10700 				if ((c > 127) && (c &lt; 2048)) 
10701 				{
10702 					data += String.fromCharCode((c >> 6) | 192);
10703 					data += String.fromCharCode((c & 63) | 128);
10704 				}
10705 				else 
10706 				{
10707 					data += String.fromCharCode((c >> 12) | 224);
10708 					data += String.fromCharCode(((c >> 6) & 63) | 128);
10709 					data += String.fromCharCode((c & 63) | 128);
10710 				}
10711 			}
10712 		}
10713 		return data;
10714 }
10715 
10716 //==========================================================================
10717 //							pdfCharacterMap$ (constructor)
10718 //==========================================================================
10719 function pdfCharacterMap$(pdf,fontName)
10720 {
10721 	var name,i,j,ext,text;
10722 	var defaultRange = '-115,-240,1151,1009';
10723 	var defaultAscent = 739;
10724 	var defaultDescent = -192;
10725 
10726 	this.names = new Array();
10727 	this.values = new Array();
10728 	this.diff = new Array();
10729 
10730 	this.pdf		= pdf;
10731 	this.fontName	= fontName;
10732 
10733 	name = fontName;
10734 	i = name.lastIndexOf('/');
10735 	j = name.lastIndexOf('\\');
10736 	if (j > i) i = j;
10737 	if (i > 0) name = name.substr(0,i);
10738 	i = name.indexOf('.')
10739 	
10740 	text = '';
10741 	if (i > 0)
10742 	{
10743 		 ext  = name.substr(i);
10744 		 ext  = ext.toLowerCase();
10745 		 name = name.substr(0,i);
10746 		 if (ext == '.txt')
10747 		 {
10748 			i = lastIndexOf('_');
10749 			name = name.substr(0,i);
10750 			i = lastIndexOf('_');
10751 			name = name.substr(0,i);
10752 		 }
10753 	}
10754 	
10755 	 this.fontName = name;
10756 	 
10757 //-------------- initialize --------------------------
10758 
10759 	this.names[this.names.length] = 'STANDARD';
10760 	this.diff[this.diff.length] = '';
10761 	this.values[this.values.length] = new Array(
10762 	0,0,0,0,0,0,0,0,0,0,
10763 	0,0,0,0,0,0,0,0,0,0,
10764 	0,0,0,0,0,0,0,0,0,0,0,0,
10765 	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x2019,
10766     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
10767     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
10768     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
10769     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
10770     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
10771     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
10772     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
10773     0x2018,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
10774     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
10775     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
10776     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x0000,
10777     0x0000,0x0000,0x0000,0x0000,0x00D1,0x0000,0x0000,0x0000,
10778     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
10779     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
10780     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
10781     0x0000,0x00A1,0x00A2,0x00A3,0x2044,0x00A5,0x0192,0x00A7,
10782     0x00A4,0x0027,0x201C,0x00AB,0x2039,0x203A,0xFB01,0xFB02,
10783     0x0000,0x2013,0x2020,0x2021,0x00B7,0x0000,0x00B6,0x2022,
10784     0x201A,0x201E,0x201D,0x00BB,0x2026,0x2030,0x0000,0x00BF,
10785     0x0000,0x0060,0x00B4,0x02C6,0x02DC,0x00AF,0x02D8,0x02D9,
10786     0x00A8,0x0000,0x02DA,0x00B8,0x0000,0x02DD,0x02DB,0x02C7,
10787     0x2014,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
10788     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
10789     0x0000,0x00C6,0x0000,0x00AA,0x0000,0x0000,0x0000,0x0000,
10790     0x0141,0x00D8,0x0152,0x00BA,0x0000,0x0000,0x0000,0x0000,
10791     0x0000,0x00E6,0x0000,0x0000,0x0000,0x0131,0x0000,0x0000,
10792     0x0142,0x00F8,0x0153,0x00DF,0x0000,0x0000,0x0000,0x0000);
10793 
10794 	this.names[this.names.length] = 'WINANSI';
10795 	this.diff[this.diff.length] = '';
10796 	this.values[this.values.length] = new Array(
10797 	0,0,0,0,0,0,0,0,0,0,
10798 	0,0,0,0,0,0,0,0,0,0,
10799 	0,0,0,0,0,0,0,0,0,0,0,0,
10800     0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
10801     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
10802     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
10803     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
10804     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
10805     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
10806     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
10807     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
10808     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
10809     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
10810     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
10811     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x0000,
10812     0x20AC,0x0000,0x201A,0x0192,0x201E,0x2026,0x2020,0x2021,
10813     0x02C6,0x2030,0x0160,0x2039,0x0152,0x0000,0x017D,0x0000,
10814     0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,
10815     0x02DC,0x2122,0x0161,0x203A,0x0153,0x0000,0x017E,0x0178,
10816     0x0000,0x00A1,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,
10817     0x00A8,0x00A9,0x00AA,0x00AB,0x00AC,0x0000,0x00AE,0x00AF,
10818     0x02DA,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,
10819     0x00B8,0x00B9,0x00BA,0x00BB,0x00BC,0x00BD,0x00BE,0x00BF,
10820     0x00C0,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x00C7,
10821     0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF,
10822     0x00D0,0x00D1,0x00D2,0x00D3,0x00D4,0x00D5,0x00D6,0x00D7,
10823     0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x00DD,0x00DE,0x00DF,
10824     0x00E0,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x00E7,
10825     0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF,
10826     0x00F0,0x00F1,0x00F2,0x00F3,0x00F4,0x00F5,0x00F6,0x00F7,
10827     0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x00FD,0x00FE,0x00FF);
10828 
10829 	this.names[this.names.length] = 'MACROMAN';
10830 	this.diff[this.diff.length] = '';
10831 	this.values[this.values.length] = new Array(
10832 	0,0,0,0,0,0,0,0,0,0,
10833 	0,0,0,0,0,0,0,0,0,0,
10834 	0,0,0,0,0,0,0,0,0,0,0,0,
10835     0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
10836     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
10837     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
10838     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
10839     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
10840     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
10841     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
10842     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
10843     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
10844     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
10845     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
10846     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x0000,
10847     0x00C4,0x00C5,0x00C7,0x00C9,0x0000,0x00D6,0x00DC,0x00E1,
10848     0x00E0,0x00E2,0x00E4,0x00E3,0x00E5,0x00E7,0x00E9,0x00E8,
10849     0x00EA,0x00EB,0x00ED,0x00EC,0x00EE,0x00EF,0x00F1,0x00F3,
10850     0x00F2,0x00F4,0x00F6,0x00F5,0x00FA,0x00F9,0x00FB,0x00FC,
10851     0x2020,0x00B0,0x00A2,0x00A3,0x00A7,0x2022,0x00B6,0x00DF,
10852     0x00AE,0x00A9,0x2122,0x00B4,0x00A8,0x0000,0x00C6,0x00D8,
10853     0x0000,0x00B1,0x0000,0x0000,0x00A5,0x00B5,0x0000,0x0000,
10854     0x0000,0x0000,0x0000,0x00AA,0x00BA,0x0000,0x00E6,0x00F8,
10855     0x00BF,0x00A1,0x00AC,0x0000,0x0192,0x0000,0x0000,0x00AB,
10856     0x00BB,0x2026,0x0020,0x00C0,0x00C3,0x00D5,0x0152,0x0153,
10857     0x2013,0x2014,0x201C,0x201D,0x2018,0x2019,0x00F7,0x0000,
10858     0x00FF,0x0178,0x2044,0x00A4,0x2039,0x203A,0xFB01,0xFB02,
10859     0x2021,0x00B7,0x201A,0x201E,0x2030,0x00C2,0x00CA,0x00C1,
10860     0x00CB,0x00C8,0x00CD,0x00CE,0x00CF,0x00CC,0x00D3,0x00D4,
10861     0x0000,0x00D2,0x00DA,0x00DB,0x00D9,0x0131,0x02C6,0x02DC,
10862     0x00AF,0x02D8,0x02D9,0x02DA,0x00B8,0x02DD,0x02DB,0x02C7);
10863 
10864 	this.names[this.names.length] = 'ISO8859-2';
10865 	this.diff[this.diff.length] = '127 /.notdef 128 /.notdef 130 /.notdef 131 /.notdef 132 /.notdef 133 /.notdef 134 /.notdef 135 /.notdef 136 /.notdef 137 /.notdef 138 /.notdef 139 /.notdef 140 /.notdef 142 /.notdef 145 /.notdef 146 /.notdef 147 /.notdef 148 /.notdef 149 /.notdef 150 /.notdef 151 /.notdef 152 /.notdef 153 /.notdef 154 /.notdef 155 /.notdef 156 /.notdef 158 /.notdef 159 /.notdef 160 /space 161 /Aogonek 162 /breve 163 /Lslash 165 /Lcaron 166 /Sacute 169 /Scaron 170 /Scedilla 171 /Tcaron 172 /Zacute 173 /hyphen 174 /Zcaron 175 /Zdotaccent 176 /degree 177 /aogonek 178 /ogonek 179 /lslash 181 /lcaron 182 /sacute 183 /caron 185 /scaron 186 /scedilla 187 /tcaron 188 /zacute 189 /hungarumlaut 190 /zcaron 191 /zdotaccent 192 /Racute 195 /Abreve 197 /Lacute 198 /Cacute 200 /Ccaron 202 /Eogonek 204 /Ecaron 207 /Dcaron 208 /Dcroat 209 /Nacute 210 /Ncaron 213 /Ohungarumlaut 216 /Rcaron 217 /Uring 219 /Uhungarumlaut 222 /Tcommaaccent 224 /racute 227 /abreve 229 /lacute 230 /cacute 232 /ccaron 234 /eogonek 236 /ecaron 239 /dcaron 240 /dcroat 241 /nacute 242 /ncaron 245 /ohungarumlaut 248 /rcaron 249 /uring 251 /uhungarumlaut 254 /tcommaaccent 255 /dotaccent';
10866 	this.values[this.values.length] = new Array(
10867 	0,0,0,0,0,0,0,0,0,0,
10868 	0,0,0,0,0,0,0,0,0,0,
10869 	0,0,0,0,0,0,0,0,0,0,0,0,
10870     0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
10871     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
10872     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
10873     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
10874     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
10875     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
10876     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
10877     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
10878     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
10879     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
10880     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
10881     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
10882     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
10883     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
10884     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
10885     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
10886     0x00A0,0x0104,0x02D8,0x0141,0x00A4,0x013D,0x015A,0x00A7,
10887     0x00A8,0x0160,0x015E,0x0164,0x0179,0x00AD,0x017D,0x017B,
10888     0x00B0,0x0105,0x02DB,0x0142,0x00B4,0x013E,0x015B,0x02C7,
10889     0x00B8,0x0161,0x015F,0x0165,0x017A,0x02DD,0x017E,0x017C,
10890     0x0154,0x00C1,0x00C2,0x0102,0x00C4,0x0139,0x0106,0x00C7,
10891     0x010C,0x00C9,0x0118,0x00CB,0x011A,0x00CD,0x00CE,0x010E,
10892     0x0110,0x0143,0x0147,0x00D3,0x00D4,0x0150,0x00D6,0x00D7,
10893     0x0158,0x016E,0x00DA,0x0170,0x00DC,0x00DD,0x0162,0x00DF,
10894     0x0155,0x00E1,0x00E2,0x0103,0x00E4,0x013A,0x0107,0x00E7,
10895     0x010D,0x00E9,0x0119,0x00EB,0x011B,0x00ED,0x00EE,0x010F,
10896     0x0111,0x0144,0x0148,0x00F3,0x00F4,0x0151,0x00F6,0x00F7,
10897     0x0159,0x016F,0x00FA,0x0171,0x00FC,0x00FD,0x0163,0x02D9);
10898 
10899 	this.names[this.names.length] = 'ISO8859-3';
10900 	this.diff[this.diff.length] = '127 /.notdef 128 /.notdef 130 /.notdef 131 /.notdef 132 /.notdef 133 /.notdef 134 /.notdef 135 /.notdef 136 /.notdef 137 /.notdef 138 /.notdef 139 /.notdef 140 /.notdef 142 /.notdef 145 /.notdef 146 /.notdef 147 /.notdef 148 /.notdef 149 /.notdef 150 /.notdef 151 /.notdef 152 /.notdef 153 /.notdef 154 /.notdef 155 /.notdef 156 /.notdef 158 /.notdef 159 /.notdef 160 /space 161 /Hbar 162 /breve 165 /.notdef 166 /Hcircumflex 169 /Idotaccent 170 /Scedilla 171 /Gbreve 172 /Jcircumflex 173 /hyphen 174 /.notdef 175 /Zdotaccent 176 /degree 177 /hbar 182 /hcircumflex 185 /dotlessi 186 /scedilla 187 /gbreve 188 /jcircumflex 190 /.notdef 191 /zdotaccent 195 /.notdef 197 /Cdotaccent 198 /Ccircumflex 208 /.notdef 213 /Gdotaccent 216 /Gcircumflex 221 /Ubreve 222 /Scircumflex 227 /.notdef 229 /cdotaccent 230 /ccircumflex 240 /.notdef 245 /gdotaccent 248 /gcircumflex 253 /ubreve 254 /scircumflex 255 /dotaccent';
10901 	this.values[this.values.length] = new Array(
10902 	0,0,0,0,0,0,0,0,0,0,
10903 	0,0,0,0,0,0,0,0,0,0,
10904 	0,0,0,0,0,0,0,0,0,0,0,0,
10905     0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
10906     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
10907     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
10908     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
10909     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
10910     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
10911     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
10912     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
10913     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
10914     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
10915     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
10916     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
10917     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
10918     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
10919     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
10920     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
10921     0x00A0,0x0126,0x02D8,0x00A3,0x00A4,0x0000,0x0124,0x00A7,
10922     0x00A8,0x0130,0x015E,0x011E,0x0134,0x00AD,0x0000,0x017B,
10923     0x00B0,0x0127,0x00B2,0x00B3,0x00B4,0x00B5,0x0125,0x00B7,
10924     0x00B8,0x0131,0x015F,0x011F,0x0135,0x00BD,0x0000,0x017C,
10925     0x00C0,0x00C1,0x00C2,0x0000,0x00C4,0x010A,0x0108,0x00C7,
10926     0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF,
10927     0x0000,0x00D1,0x00D2,0x00D3,0x00D4,0x0120,0x00D6,0x00D7,
10928     0x011C,0x00D9,0x00DA,0x00DB,0x00DC,0x016C,0x015C,0x00DF,
10929     0x00E0,0x00E1,0x00E2,0x0000,0x00E4,0x010B,0x0109,0x00E7,
10930     0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF,
10931     0x0000,0x00F1,0x00F2,0x00F3,0x00F4,0x0121,0x00F6,0x00F7,
10932     0x011D,0x00F9,0x00FA,0x00FB,0x00FC,0x016D,0x015D,0x02D9);
10933 
10934 	this.names[this.names.length] = 'ISO8859-4';
10935 	this.diff[this.diff.length] = '127 /.notdef 128 /.notdef 130 /.notdef 131 /.notdef 132 /.notdef 133 /.notdef 134 /.notdef 135 /.notdef 136 /.notdef 137 /.notdef 138 /.notdef 139 /.notdef 140 /.notdef 142 /.notdef 145 /.notdef 146 /.notdef 147 /.notdef 148 /.notdef 149 /.notdef 150 /.notdef 151 /.notdef 152 /.notdef 153 /.notdef 154 /.notdef 155 /.notdef 156 /.notdef 158 /.notdef 159 /.notdef 160 /space 161 /Aogonek 162 /kgreenlandic 163 /Rcommaaccent 165 /Itilde 166 /Lcommaaccent 169 /Scaron 170 /Emacron 171 /Gcommaaccent 172 /Tbar 173 /hyphen 174 /Zcaron 176 /degree 177 /aogonek 178 /ogonek 179 /rcommaaccent 181 /itilde 182 /lcommaaccent 183 /caron 185 /scaron 186 /emacron 187 /gcommaaccent 188 /tbar 189 /Eng 190 /zcaron 191 /eng 192 /Amacron 199 /Iogonek 200 /Ccaron 202 /Eogonek 204 /Edotaccent 207 /Imacron 208 /Dcroat 209 /Ncommaaccent 210 /Omacron 211 /Kcommaaccent 217 /Uogonek 221 /Utilde 222 /Umacron 224 /amacron 231 /iogonek 232 /ccaron 234 /eogonek 236 /edotaccent 239 /imacron 240 /dcroat 241 /ncommaaccent 242 /omacron 243 /kcommaaccent 249 /uogonek 253 /utilde 254 /umacron 255 /dotaccent';
10936 	this.values[this.values.length] = new Array(
10937 	0,0,0,0,0,0,0,0,0,0,
10938 	0,0,0,0,0,0,0,0,0,0,
10939 	0,0,0,0,0,0,0,0,0,0,0,0,
10940     0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
10941     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
10942     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
10943     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
10944     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
10945     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
10946     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
10947     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
10948     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
10949     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
10950     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
10951     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
10952     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
10953     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
10954     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
10955     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
10956     0x00A0,0x0104,0x0138,0x0156,0x00A4,0x0128,0x013B,0x00A7,
10957     0x00A8,0x0160,0x0112,0x0122,0x0166,0x00AD,0x017D,0x00AF,
10958     0x00B0,0x0105,0x02DB,0x0157,0x00B4,0x0129,0x013C,0x02C7,
10959     0x00B8,0x0161,0x0113,0x0123,0x0167,0x014A,0x017E,0x014B,
10960     0x0100,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x012E,
10961     0x010C,0x00C9,0x0118,0x00CB,0x0116,0x00CD,0x00CE,0x012A,
10962     0x0110,0x0145,0x014C,0x0136,0x00D4,0x00D5,0x00D6,0x00D7,
10963     0x00D8,0x0172,0x00DA,0x00DB,0x00DC,0x0168,0x016A,0x00DF,
10964     0x0101,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x012F,
10965     0x010D,0x00E9,0x0119,0x00EB,0x0117,0x00ED,0x00EE,0x012B,
10966     0x0111,0x0146,0x014D,0x0137,0x00F4,0x00F5,0x00F6,0x00F7,
10967     0x00F8,0x0173,0x00FA,0x00FB,0x00FC,0x0169,0x016B,0x02D9);
10968 
10969 	this.names[this.names.length] = 'ISO8859-5';
10970 	this.diff[this.diff.length] = '127 /.notdef 128 /.notdef 130 /.notdef 131 /.notdef 132 /.notdef 133 /.notdef 134 /.notdef 135 /.notdef 136 /.notdef 137 /.notdef 138 /.notdef 139 /.notdef 140 /.notdef 142 /.notdef 145 /.notdef 146 /.notdef 147 /.notdef 148 /.notdef 149 /.notdef 150 /.notdef 151 /.notdef 152 /.notdef 153 /.notdef 154 /.notdef 155 /.notdef 156 /.notdef 158 /.notdef 159 /.notdef 160 /space 161 /afii10023 162 /afii10051 163 /afii10052 164 /afii10053 165 /afii10054 166 /afii10055 167 /afii10056 168 /afii10057 169 /afii10058 170 /afii10059 171 /afii10060 172 /afii10061 173 /hyphen 174 /afii10062 175 /afii10145 176 /afii10017 177 /afii10018 178 /afii10019 179 /afii10020 180 /afii10021 181 /afii10022 182 /afii10024 183 /afii10025 184 /afii10026 185 /afii10027 186 /afii10028 187 /afii10029 188 /afii10030 189 /afii10031 190 /afii10032 191 /afii10033 192 /afii10034 193 /afii10035 194 /afii10036 195 /afii10037 196 /afii10038 197 /afii10039 198 /afii10040 199 /afii10041 200 /afii10042 201 /afii10043 202 /afii10044 203 /afii10045 204 /afii10046 205 /afii10047 206 /afii10048 207 /afii10049 208 /afii10065 209 /afii10066 210 /afii10067 211 /afii10068 212 /afii10069 213 /afii10070 214 /afii10072 215 /afii10073 216 /afii10074 217 /afii10075 218 /afii10076 219 /afii10077 220 /afii10078 221 /afii10079 222 /afii10080 223 /afii10081 224 /afii10082 225 /afii10083 226 /afii10084 227 /afii10085 228 /afii10086 229 /afii10087 230 /afii10088 231 /afii10089 232 /afii10090 233 /afii10091 234 /afii10092 235 /afii10093 236 /afii10094 237 /afii10095 238 /afii10096 239 /afii10097 240 /afii61352 241 /afii10071 242 /afii10099 243 /afii10100 244 /afii10101 245 /afii10102 246 /afii10103 247 /afii10104 248 /afii10105 249 /afii10106 250 /afii10107 251 /afii10108 252 /afii10109 253 /section 254 /afii10110 255 /afii10193';
10971 	this.values[this.values.length] = new Array(
10972 	0,0,0,0,0,0,0,0,0,0,
10973 	0,0,0,0,0,0,0,0,0,0,
10974 	0,0,0,0,0,0,0,0,0,0,0,0,
10975     0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
10976     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
10977     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
10978     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
10979     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
10980     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
10981     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
10982     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
10983     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
10984     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
10985     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
10986     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
10987     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
10988     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
10989     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
10990     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
10991     0x00A0,0x0401,0x0402,0x0403,0x0404,0x0405,0x0406,0x0407,
10992     0x0408,0x0409,0x040A,0x040B,0x040C,0x00AD,0x040E,0x040F,
10993     0x0410,0x0411,0x0412,0x0413,0x0414,0x0415,0x0416,0x0417,
10994     0x0418,0x0419,0x041A,0x041B,0x041C,0x041D,0x041E,0x041F,
10995     0x0420,0x0421,0x0422,0x0423,0x0424,0x0425,0x0426,0x0427,
10996     0x0428,0x0429,0x042A,0x042B,0x042C,0x042D,0x042E,0x042F,
10997     0x0430,0x0431,0x0432,0x0433,0x0434,0x0435,0x0436,0x0437,
10998     0x0438,0x0439,0x043A,0x043B,0x043C,0x043D,0x043E,0x043F,
10999     0x0440,0x0441,0x0442,0x0443,0x0444,0x0445,0x0446,0x0447,
11000     0x0448,0x0449,0x044A,0x044B,0x044C,0x044D,0x044E,0x044F,
11001     0x2116,0x0451,0x0452,0x0453,0x0454,0x0455,0x0456,0x0457,
11002     0x0458,0x0459,0x045A,0x045B,0x045C,0x00A7,0x045E,0x045F);
11003 
11004 	this.names[this.names.length] = 'ISO8859-6';
11005 	this.diff[this.diff.length] = '';
11006 	this.values[this.values.length] = new Array(
11007 	0,0,0,0,0,0,0,0,0,0,
11008 	0,0,0,0,0,0,0,0,0,0,
11009 	0,0,0,0,0,0,0,0,0,0,0,0,
11010     0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
11011     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
11012     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
11013     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
11014     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
11015     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
11016     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
11017     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
11018     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
11019     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
11020     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
11021     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
11022     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11023     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11024     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11025     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11026     0x00A0,0x0000,0x0000,0x0000,0x00A4,0x0000,0x0000,0x0000,
11027     0x0000,0x0000,0x0000,0x0000,0x060C,0x00AD,0x0000,0x0000,
11028     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11029     0x0000,0x0000,0x0000,0x061B,0x0000,0x0000,0x0000,0x061F,
11030     0x0000,0x0621,0x0622,0x0623,0x0624,0x0625,0x0626,0x0627,
11031     0x0628,0x0629,0x062A,0x062B,0x062C,0x062D,0x062E,0x062F,
11032     0x0630,0x0631,0x0632,0x0633,0x0634,0x0635,0x0636,0x0637,
11033     0x0638,0x0639,0x063A,0x0000,0x0000,0x0000,0x0000,0x0000,
11034     0x0640,0x0641,0x0642,0x0643,0x0644,0x0645,0x0646,0x0647,
11035     0x0648,0x0649,0x064A,0x064B,0x064C,0x064D,0x064E,0x064F,
11036     0x0650,0x0651,0x0652,0x0000,0x0000,0x0000,0x0000,0x0000,
11037     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000);
11038 
11039 	this.names[this.names.length] = 'ISO8859-7';
11040 	this.diff[this.diff.length] = '';
11041 	this.values[this.values.length] = new Array(
11042 	0,0,0,0,0,0,0,0,0,0,
11043 	0,0,0,0,0,0,0,0,0,0,
11044 	0,0,0,0,0,0,0,0,0,0,0,0,
11045     0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
11046     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
11047     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
11048     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
11049     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
11050     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
11051     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
11052     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
11053     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
11054     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
11055     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
11056     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
11057     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11058     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11059     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11060     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11061     0x00A0,0x2018,0x2019,0x00A3,0x20AC,0x20AF,0x00A6,0x00A7,
11062     0x00A8,0x00A9,0x037A,0x00AB,0x00AC,0x00AD,0x0000,0x2015,
11063     0x00B0,0x00B1,0x00B2,0x00B3,0x0384,0x0385,0x0386,0x00B7,
11064     0x0388,0x0389,0x038A,0x00BB,0x038C,0x00BD,0x038E,0x038F,
11065     0x0390,0x0391,0x0392,0x0393,0x0394,0x0395,0x0396,0x0397,
11066     0x0398,0x0399,0x039A,0x039B,0x039C,0x039D,0x039E,0x039F,
11067     0x03A0,0x03A1,0x0000,0x03A3,0x03A4,0x03A5,0x03A6,0x03A7,
11068     0x03A8,0x03A9,0x03AA,0x03AB,0x03AC,0x03AD,0x03AE,0x03AF,
11069     0x03B0,0x03B1,0x03B2,0x03B3,0x03B4,0x03B5,0x03B6,0x03B7,
11070     0x03B8,0x03B9,0x03BA,0x03BB,0x03BC,0x03BD,0x03BE,0x03BF,
11071     0x03C0,0x03C1,0x03C2,0x03C3,0x03C4,0x03C5,0x03C6,0x03C7,
11072     0x03C8,0x03C9,0x03CA,0x03CB,0x03CC,0x03CD,0x03CE,0x0000);
11073 
11074 	this.names[this.names.length] = 'ISO8859-8';
11075 	this.diff[this.diff.length] = '';
11076 	this.values[this.values.length] = new Array(
11077 	0,0,0,0,0,0,0,0,0,0,
11078 	0,0,0,0,0,0,0,0,0,0,
11079 	0,0,0,0,0,0,0,0,0,0,0,0,
11080     0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
11081     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
11082     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
11083     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
11084     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
11085     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
11086     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
11087     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
11088     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
11089     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
11090     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
11091     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
11092     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11093     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11094     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11095     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11096     0x00A0,0x0000,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,
11097     0x00A8,0x00A9,0x00D7,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF,
11098     0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,
11099     0x00B8,0x00B9,0x00F7,0x00BB,0x00BC,0x00BD,0x00BE,0x0000,
11100     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11101     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11102     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11103     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2017,
11104     0x05D0,0x05D1,0x05D2,0x05D3,0x05D4,0x05D5,0x05D6,0x05D7,
11105     0x05D8,0x05D9,0x05DA,0x05DB,0x05DC,0x05DD,0x05DE,0x05DF,
11106     0x05E0,0x05E1,0x05E2,0x05E3,0x05E4,0x05E5,0x05E6,0x05E7,
11107     0x05E8,0x05E9,0x05EA,0x0000,0x0000,0x200E,0x200F,0x0000);
11108 
11109 	this.names[this.names.length] = 'ISO8859-9';
11110 	this.diff[this.diff.length] = '127 /.notdef 128 /.notdef 130 /.notdef 131 /.notdef 132 /.notdef 133 /.notdef 134 /.notdef 135 /.notdef 136 /.notdef 137 /.notdef 138 /.notdef 139 /.notdef 140 /.notdef 142 /.notdef 145 /.notdef 146 /.notdef 147 /.notdef 148 /.notdef 149 /.notdef 150 /.notdef 151 /.notdef 152 /.notdef 153 /.notdef 154 /.notdef 155 /.notdef 156 /.notdef 158 /.notdef 159 /.notdef 160 /space 173 /hyphen 176 /degree 208 /Gbreve 221 /Idotaccent 222 /Scedilla 240 /gbreve 253 /dotlessi 254 /scedilla';
11111 	this.values[this.values.length] = new Array(
11112 	0,0,0,0,0,0,0,0,0,0,
11113 	0,0,0,0,0,0,0,0,0,0,
11114 	0,0,0,0,0,0,0,0,0,0,0,0,
11115     0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
11116     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
11117     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
11118     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
11119     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
11120     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
11121     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
11122     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
11123     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
11124     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
11125     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
11126     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
11127     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11128     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11129     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11130     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11131     0x00A0,0x00A1,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,
11132     0x00A8,0x00A9,0x00AA,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF,
11133     0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,
11134     0x00B8,0x00B9,0x00BA,0x00BB,0x00BC,0x00BD,0x00BE,0x00BF,
11135     0x00C0,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x00C7,
11136     0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF,
11137     0x011E,0x00D1,0x00D2,0x00D3,0x00D4,0x00D5,0x00D6,0x00D7,
11138     0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x0130,0x015E,0x00DF,
11139     0x00E0,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x00E7,
11140     0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF,
11141     0x011F,0x00F1,0x00F2,0x00F3,0x00F4,0x00F5,0x00F6,0x00F7,
11142     0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x0131,0x015F,0x00FF);
11143 
11144 	this.names[this.names.length] = 'ISO8859-10';
11145 	this.diff[this.diff.length] = '127 /.notdef 128 /.notdef 130 /.notdef 131 /.notdef 132 /.notdef 133 /.notdef 134 /.notdef 135 /.notdef 136 /.notdef 137 /.notdef 138 /.notdef 139 /.notdef 140 /.notdef 142 /.notdef 145 /.notdef 146 /.notdef 147 /.notdef 148 /.notdef 149 /.notdef 150 /.notdef 151 /.notdef 152 /.notdef 153 /.notdef 154 /.notdef 155 /.notdef 156 /.notdef 158 /.notdef 159 /.notdef 160 /space 161 /Aogonek 162 /Emacron 163 /Gcommaaccent 164 /Imacron 165 /Itilde 166 /Kcommaaccent 168 /Lcommaaccent 169 /Dcroat 170 /Scaron 171 /Tbar 172 /Zcaron 173 /hyphen 174 /Umacron 175 /Eng 176 /degree 177 /aogonek 178 /emacron 179 /gcommaaccent 180 /imacron 181 /itilde 182 /kcommaaccent 184 /lcommaaccent 185 /dcroat 186 /scaron 187 /tbar 188 /zcaron 189 /afii00208 190 /umacron 191 /eng 192 /Amacron 199 /Iogonek 200 /Ccaron 202 /Eogonek 204 /Edotaccent 209 /Ncommaaccent 210 /Omacron 215 /Utilde 217 /Uogonek 224 /amacron 231 /iogonek 232 /ccaron 234 /eogonek 236 /edotaccent 241 /ncommaaccent 242 /omacron 247 /utilde 249 /uogonek 255 /kgreenlandic';
11146 	this.values[this.values.length] = new Array(
11147 	0,0,0,0,0,0,0,0,0,0,
11148 	0,0,0,0,0,0,0,0,0,0,
11149 	0,0,0,0,0,0,0,0,0,0,0,0,
11150     0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
11151     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
11152     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
11153     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
11154     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
11155     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
11156     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
11157     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
11158     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
11159     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
11160     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
11161     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
11162     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11163     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11164     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11165     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11166     0x00A0,0x0104,0x0112,0x0122,0x012A,0x0128,0x0136,0x00A7,
11167     0x013B,0x0110,0x0160,0x0166,0x017D,0x00AD,0x016A,0x014A,
11168     0x00B0,0x0105,0x0113,0x0123,0x012B,0x0129,0x0137,0x00B7,
11169     0x013C,0x0111,0x0161,0x0167,0x017E,0x2015,0x016B,0x014B,
11170     0x0100,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x012E,
11171     0x010C,0x00C9,0x0118,0x00CB,0x0116,0x00CD,0x00CE,0x00CF,
11172     0x00D0,0x0145,0x014C,0x00D3,0x00D4,0x00D5,0x00D6,0x0168,
11173     0x00D8,0x0172,0x00DA,0x00DB,0x00DC,0x00DD,0x00DE,0x00DF,
11174     0x0101,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x012F,
11175     0x010D,0x00E9,0x0119,0x00EB,0x0117,0x00ED,0x00EE,0x00EF,
11176     0x00F0,0x0146,0x014D,0x00F3,0x00F4,0x00F5,0x00F6,0x0169,
11177     0x00F8,0x0173,0x00FA,0x00FB,0x00FC,0x00FD,0x00FE,0x0138);
11178 
11179 	this.names[this.names.length] = 'ISO8859-11';
11180 	this.diff[this.diff.length] = '';
11181 	this.values[this.values.length] = new Array(
11182 	0,0,0,0,0,0,0,0,0,0,
11183 	0,0,0,0,0,0,0,0,0,0,
11184 	0,0,0,0,0,0,0,0,0,0,0,0,
11185     0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
11186     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
11187     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
11188     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
11189     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
11190     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
11191     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
11192     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
11193     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
11194     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
11195     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
11196     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
11197     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11198     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11199     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11200     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11201     0x00A0,0x0E01,0x0E02,0x0E03,0x0E04,0x0E05,0x0E06,0x0E07,
11202     0x0E08,0x0E09,0x0E0A,0x0E0B,0x0E0C,0x0E0D,0x0E0E,0x0E0F,
11203     0x0E10,0x0E11,0x0E12,0x0E13,0x0E14,0x0E15,0x0E16,0x0E17,
11204     0x0E18,0x0E19,0x0E1A,0x0E1B,0x0E1C,0x0E1D,0x0E1E,0x0E1F,
11205     0x0E20,0x0E21,0x0E22,0x0E23,0x0E24,0x0E25,0x0E26,0x0E27,
11206     0x0E28,0x0E29,0x0E2A,0x0E2B,0x0E2C,0x0E2D,0x0E2E,0x0E2F,
11207     0x0E30,0x0E31,0x0E32,0x0E33,0x0E34,0x0E35,0x0E36,0x0E37,
11208     0x0E38,0x0E39,0x0E3A,0x0000,0x0000,0x0000,0x0000,0x0E3F,
11209     0x0E40,0x0E41,0x0E42,0x0E43,0x0E44,0x0E45,0x0E46,0x0E47,
11210     0x0E48,0x0E49,0x0E4A,0x0E4B,0x0E4C,0x0E4D,0x0E4E,0x0E4F,
11211     0x0E50,0x0E51,0x0E52,0x0E53,0x0E54,0x0E55,0x0E56,0x0E57,
11212     0x0E58,0x0E59,0x0E5A,0x0E5B,0x0000,0x0000,0x0000,0x0000);
11213 
11214 	this.names[this.names.length] = 'ISO8859-13';
11215 	this.diff[this.diff.length] = '.notdef 128 /.notdef 130 /.notdef 131 /.notdef 132 /.notdef 133 /.notdef 134 /.notdef 135 /.notdef 136 /.notdef 137 /.notdef 138 /.notdef 139 /.notdef 140 /.notdef 142 /.notdef 145 /.notdef 146 /.notdef 147 /.notdef 148 /.notdef 149 /.notdef 150 /.notdef 151 /.notdef 152 /.notdef 153 /.notdef 154 /.notdef 155 /.notdef 156 /.notdef 158 /.notdef 159 /.notdef 160 /space 161 /quotedblright 165 /quotedblbase 168 /Oslash 170 /Rcommaaccent 173 /hyphen 175 /AE 176 /degree 180 /quotedblleft 184 /oslash 186 /rcommaaccent 191 /ae 192 /Aogonek 193 /Iogonek 194 /Amacron 195 /Cacute 198 /Eogonek 199 /Emacron 200 /Ccaron 202 /Zacute 203 /Edotaccent 204 /Gcommaaccent 205 /Kcommaaccent 206 /Imacron 207 /Lcommaaccent 208 /Scaron 209 /Nacute 210 /Ncommaaccent 212 /Omacron 216 /Uogonek 217 /Lslash 218 /Sacute 219 /Umacron 221 /Zdotaccent 222 /Zcaron 224 /aogonek 225 /iogonek 226 /amacron 227 /cacute 230 /eogonek 231 /emacron 232 /ccaron 234 /zacute 235 /edotaccent 236 /gcommaaccent 237 /kcommaaccent 238 /imacron 239 /lcommaaccent 240 /scaron 241 /nacute 242 /ncommaaccent 244 /omacron 248 /uogonek 249 /lslash 250 /sacute 251 /umacron 253 /zdotaccent 254 /zcaron 255 /quoteright';
11216 	this.values[this.values.length] = new Array(
11217 	0,0,0,0,0,0,0,0,0,0,
11218 	0,0,0,0,0,0,0,0,0,0,
11219 	0,0,0,0,0,0,0,0,0,0,0,0,
11220 	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
11221     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
11222     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
11223     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
11224     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
11225     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
11226     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
11227     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
11228     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
11229     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
11230     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
11231     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
11232     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11233     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11234     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11235     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11236     0x00A0,0x201D,0x00A2,0x00A3,0x00A4,0x201E,0x00A6,0x00A7,
11237     0x00D8,0x00A9,0x0156,0x00AB,0x00AC,0x00AD,0x00AE,0x00C6,
11238     0x00B0,0x00B1,0x00B2,0x00B3,0x201C,0x00B5,0x00B6,0x00B7,
11239     0x00F8,0x00B9,0x0157,0x00BB,0x00BC,0x00BD,0x00BE,0x00E6,
11240     0x0104,0x012E,0x0100,0x0106,0x00C4,0x00C5,0x0118,0x0112,
11241     0x010C,0x00C9,0x0179,0x0116,0x0122,0x0136,0x012A,0x013B,
11242     0x0160,0x0143,0x0145,0x00D3,0x014C,0x00D5,0x00D6,0x00D7,
11243     0x0172,0x0141,0x015A,0x016A,0x00DC,0x017B,0x017D,0x00DF,
11244     0x0105,0x012F,0x0101,0x0107,0x00E4,0x00E5,0x0119,0x0113,
11245     0x010D,0x00E9,0x017A,0x0117,0x0123,0x0137,0x012B,0x013C,
11246     0x0161,0x0144,0x0146,0x00F3,0x014D,0x00F5,0x00F6,0x00F7,
11247     0x0173,0x0142,0x015B,0x016B,0x00FC,0x017C,0x017E,0x2019);
11248 
11249 	this.names[this.names.length] = 'ISO8859-14';
11250 	this.diff[this.diff.length] = '.notdef 128 /.notdef 130 /.notdef 131 /.notdef 132 /.notdef 133 /.notdef 134 /.notdef 135 /.notdef 136 /.notdef 137 /.notdef 138 /.notdef 139 /.notdef 140 /.notdef 142 /.notdef 145 /.notdef 146 /.notdef 147 /.notdef 148 /.notdef 149 /.notdef 150 /.notdef 151 /.notdef 152 /.notdef 153 /.notdef 154 /.notdef 155 /.notdef 156 /.notdef 158 /.notdef 159 /.notdef 160 /space 161 /.notdef 162 /.notdef 164 /Cdotaccent 165 /cdotaccent 166 /.notdef 168 /Wgrave 170 /Wacute 171 /.notdef 172 /Ygrave 173 /hyphen 175 /Ydieresis 176 /.notdef 177 /.notdef 178 /Gdotaccent 179 /gdotaccent 180 /.notdef 181 /.notdef 183 /.notdef 184 /wgrave 185 /.notdef 186 /wacute 187 /.notdef 188 /ygrave 189 /Wdieresis 190 /wdieresis 191 /.notdef 208 /Wcircumflex 215 /.notdef 222 /Ycircumflex 240 /wcircumflex 247 /.notdef 254 /ycircumflex ';
11251 	this.values[this.values.length] = new Array(
11252 	0,0,0,0,0,0,0,0,0,0,
11253 	0,0,0,0,0,0,0,0,0,0,
11254 	0,0,0,0,0,0,0,0,0,0,0,0,
11255 	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
11256     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
11257     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
11258     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
11259     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
11260     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
11261     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
11262     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
11263     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
11264     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
11265     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
11266     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
11267     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11268     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11269     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11270     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11271     0x00A0,0x1E02,0x1E03,0x00A3,0x010A,0x010B,0x1E0A,0x00A7,
11272     0x1E80,0x00A9,0x1E82,0x1E0B,0x1EF2,0x00AD,0x00AE,0x0178,
11273     0x1E1E,0x1E1F,0x0120,0x0121,0x1E40,0x1E41,0x00B6,0x1E56,
11274     0x1E81,0x1E57,0x1E83,0x1E60,0x1EF3,0x1E84,0x1E85,0x1E61,
11275     0x00C0,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x00C7,
11276     0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF,
11277     0x0174,0x00D1,0x00D2,0x00D3,0x00D4,0x00D5,0x00D6,0x1E6A,
11278     0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x00DD,0x0176,0x00DF,
11279     0x00E0,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x00E7,
11280     0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF,
11281     0x0175,0x00F1,0x00F2,0x00F3,0x00F4,0x00F5,0x00F6,0x1E6B,
11282     0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x00FD,0x0177,0x00FF);
11283 
11284 	this.names[this.names.length] = 'ISO8859-15';
11285 	this.diff[this.diff.length] = '.notdef 128 /.notdef 130 /.notdef 131 /.notdef 132 /.notdef 133 /.notdef 134 /.notdef 135 /.notdef 136 /.notdef 137 /.notdef 138 /.notdef 139 /.notdef 140 /.notdef 142 /.notdef 145 /.notdef 146 /.notdef 147 /.notdef 148 /.notdef 149 /.notdef 150 /.notdef 151 /.notdef 152 /.notdef 153 /.notdef 154 /.notdef 155 /.notdef 156 /.notdef 158 /.notdef 159 /.notdef 160 /space 164 /Euro 166 /Scaron 168 /scaron 173 /hyphen 176 /degree 180 /Zcaron 184 /zcaron 188 /OE 189 /oe 190 /Ydieresis';
11286 	this.values[this.values.length] = new Array(
11287 	0,0,0,0,0,0,0,0,0,0,
11288 	0,0,0,0,0,0,0,0,0,0,
11289 	0,0,0,0,0,0,0,0,0,0,0,0,
11290 	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
11291     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
11292     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
11293     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
11294     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
11295     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
11296     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
11297     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
11298     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
11299     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
11300     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
11301     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
11302     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11303     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11304     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11305     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11306     0x00A0,0x00A1,0x00A2,0x00A3,0x20AC,0x00A5,0x0160,0x00A7,
11307     0x0161,0x00A9,0x00AA,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF,
11308     0x00B0,0x00B1,0x00B2,0x00B3,0x017D,0x00B5,0x00B6,0x00B7,
11309     0x017E,0x00B9,0x00BA,0x00BB,0x0152,0x0153,0x0178,0x00BF,
11310     0x00C0,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x00C7,
11311     0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF,
11312     0x00D0,0x00D1,0x00D2,0x00D3,0x00D4,0x00D5,0x00D6,0x00D7,
11313     0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x00DD,0x00DE,0x00DF,
11314     0x00E0,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x00E7,
11315     0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF,
11316     0x00F0,0x00F1,0x00F2,0x00F3,0x00F4,0x00F5,0x00F6,0x00F7,
11317     0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x00FD,0x00FE,0x00FF);
11318 
11319 	this.names[this.names.length] = 'ISO8859-16';
11320 	this.diff[this.diff.length] = '.notdef 128 /.notdef 130 /.notdef 131 /.notdef 132 /.notdef 133 /.notdef 134 /.notdef 135 /.notdef 136 /.notdef 137 /.notdef 138 /.notdef 139 /.notdef 140 /.notdef 142 /.notdef 145 /.notdef 146 /.notdef 147 /.notdef 148 /.notdef 149 /.notdef 150 /.notdef 151 /.notdef 152 /.notdef 153 /.notdef 154 /.notdef 155 /.notdef 156 /.notdef 158 /.notdef 159 /.notdef 160 /space 161 /Aogonek 162 /aogonek 163 /Lslash 164 /Euro 165 /quotedblbase 166 /Scaron 168 /scaron 170 /Scommaaccent 172 /Zacute 173 /hyphen 174 /zacute 175 /Zdotaccent 176 /degree 178 /Ccaron 179 /lslash 180 /Zcaron 181 /quotedblright 184 /zcaron 185 /ccaron 186 /scommaaccent 188 /OE 189 /oe 190 /Ydieresis 191 /zdotaccent 195 /Abreve 197 /Cacute 208 /Dcroat 209 /Nacute 213 /Ohungarumlaut 215 /Sacute 216 /Uhungarumlaut 221 /Eogonek 222 /Tcommaaccent 227 /abreve 229 /cacute 240 /dcroat 241 /nacute 245 /ohungarumlaut 247 /sacute 248 /uhungarumlaut 253 /eogonek 254 /tcommaaccent ';
11321 	this.values[this.values.length] = new Array(
11322 	0,0,0,0,0,0,0,0,0,0,
11323 	0,0,0,0,0,0,0,0,0,0,
11324 	0,0,0,0,0,0,0,0,0,0,0,0,
11325 	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
11326     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
11327     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
11328     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
11329     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
11330     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
11331     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
11332     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
11333     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
11334     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
11335     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
11336     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
11337     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11338     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11339     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11340     0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11341     0x00A0,0x0104,0x0105,0x0141,0x20AC,0x201E,0x0160,0x00A7,
11342     0x0161,0x00A9,0x0218,0x00AB,0x0179,0x00AD,0x017A,0x017B,
11343     0x00B0,0x00B1,0x010C,0x0142,0x017D,0x201D,0x00B6,0x00B7,
11344     0x017E,0x010D,0x0219,0x00BB,0x0152,0x0153,0x0178,0x017C,
11345     0x00C0,0x00C1,0x00C2,0x0102,0x00C4,0x0106,0x00C6,0x00C7,
11346     0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF,
11347     0x0110,0x0143,0x00D2,0x00D3,0x00D4,0x0150,0x00D6,0x015A,
11348     0x0170,0x00D9,0x00DA,0x00DB,0x00DC,0x0118,0x021A,0x00DF,
11349     0x00E0,0x00E1,0x00E2,0x0103,0x00E4,0x0107,0x00E6,0x00E7,
11350     0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF,
11351     0x0111,0x0144,0x00F2,0x00F3,0x00F4,0x0151,0x00F6,0x015B,
11352     0x0171,0x00F9,0x00FA,0x00FB,0x00FC,0x0119,0x021B,0x00FF);
11353 
11354 	this.names[this.names.length] = 'CP1250';
11355 	this.diff[this.diff.length] = '127 /.notdef 131 /.notdef 136 /.notdef 140 /Sacute 141 /Tcaron 143 /Zacute 152 /.notdef 156 /sacute 157 /tcaron 159 /zacute 160 /space 161 /caron 162 /breve 163 /Lslash 165 /Aogonek 170 /Scedilla 173 /hyphen 175 /Zdotaccent 176 /degree 178 /ogonek 179 /lslash 185 /aogonek 186 /scedilla 188 /Lcaron 189 /hungarumlaut 190 /lcaron 191 /zdotaccent 192 /Racute 195 /Abreve 197 /Lacute 198 /Cacute 200 /Ccaron 202 /Eogonek 204 /Ecaron 207 /Dcaron 208 /Dcroat 209 /Nacute 210 /Ncaron 213 /Ohungarumlaut 216 /Rcaron 217 /Uring 219 /Uhungarumlaut 222 /Tcommaaccent 224 /racute 227 /abreve 229 /lacute 230 /cacute 232 /ccaron 234 /eogonek 236 /ecaron 239 /dcaron 240 /dcroat 241 /nacute 242 /ncaron 245 /ohungarumlaut 248 /rcaron 249 /uring 251 /uhungarumlaut 254 /tcommaaccent 255 /dotaccent ';
11356 	this.values[this.values.length] = new Array(
11357 	0,0,0,0,0,0,0,0,0,0,
11358 	0,0,0,0,0,0,0,0,0,0,
11359 	0,0,0,0,0,0,0,0,0,0,0,0,
11360 	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
11361     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
11362     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
11363     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
11364     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
11365     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
11366     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
11367     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
11368     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
11369     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
11370     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
11371     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
11372     0x20AC,0x0000,0x201A,0x0000,0x201E,0x2026,0x2020,0x2021,
11373     0x0000,0x2030,0x0160,0x2039,0x015A,0x0164,0x017D,0x0179,
11374     0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,
11375     0x0000,0x2122,0x0161,0x203A,0x015B,0x0165,0x017E,0x017A,
11376     0x00A0,0x02C7,0x02D8,0x0141,0x00A4,0x0104,0x00A6,0x00A7,
11377     0x00A8,0x00A9,0x015E,0x00AB,0x00AC,0x00AD,0x00AE,0x017B,
11378     0x00B0,0x00B1,0x02DB,0x0142,0x00B4,0x00B5,0x00B6,0x00B7,
11379     0x00B8,0x0105,0x015F,0x00BB,0x013D,0x02DD,0x013E,0x017C,
11380     0x0154,0x00C1,0x00C2,0x0102,0x00C4,0x0139,0x0106,0x00C7,
11381     0x010C,0x00C9,0x0118,0x00CB,0x011A,0x00CD,0x00CE,0x010E,
11382     0x0110,0x0143,0x0147,0x00D3,0x00D4,0x0150,0x00D6,0x00D7,
11383     0x0158,0x016E,0x00DA,0x0170,0x00DC,0x00DD,0x0162,0x00DF,
11384     0x0155,0x00E1,0x00E2,0x0103,0x00E4,0x013A,0x0107,0x00E7,
11385     0x010D,0x00E9,0x0119,0x00EB,0x011B,0x00ED,0x00EE,0x010F,
11386     0x0111,0x0144,0x0148,0x00F3,0x00F4,0x0151,0x00F6,0x00F7,
11387     0x0159,0x016F,0x00FA,0x0171,0x00FC,0x00FD,0x0163,0x02D9);
11388 
11389 	this.names[this.names.length] = 'CP1251';
11390 	this.diff[this.diff.length] = '127 /.notdef 128 /afii10051 129 /afii10052 131 /afii10100 136 /Euro 138 /afii10058 140 /afii10059 141 /afii10061 142 /afii10060 143 /afii10145 144 /afii10099 152 /.notdef 154 /afii10106 156 /afii10107 157 /afii10109 158 /afii10108 159 /afii10193 160 /space 161 /afii10062 162 /afii10110 163 /afii10057 165 /afii10050 168 /afii10023 170 /afii10053 173 /hyphen 175 /afii10056 176 /degree 178 /afii10055 179 /afii10103 180 /afii10098 184 /afii10071 185 /afii61352 186 /afii10101 188 /afii10105 189 /afii10054 190 /afii10102 191 /afii10104 192 /afii10017 193 /afii10018 194 /afii10019 195 /afii10020 196 /afii10021 197 /afii10022 198 /afii10024 199 /afii10025 200 /afii10026 201 /afii10027 202 /afii10028 203 /afii10029 204 /afii10030 205 /afii10031 206 /afii10032 207 /afii10033 208 /afii10034 209 /afii10035 210 /afii10036 211 /afii10037 212 /afii10038 213 /afii10039 214 /afii10040 215 /afii10041 216 /afii10042 217 /afii10043 218 /afii10044 219 /afii10045 220 /afii10046 221 /afii10047 222 /afii10048 223 /afii10049 224 /afii10065 225 /afii10066 226 /afii10067 227 /afii10068 228 /afii10069 229 /afii10070 230 /afii10072 231 /afii10073 232 /afii10074 233 /afii10075 234 /afii10076 235 /afii10077 236 /afii10078 237 /afii10079 238 /afii10080 239 /afii10081 240 /afii10082 241 /afii10083 242 /afii10084 243 /afii10085 244 /afii10086 245 /afii10087 246 /afii10088 247 /afii10089 248 /afii10090 249 /afii10091 250 /afii10092 251 /afii10093 252 /afii10094 253 /afii10095 254 /afii10096 255 /afii10097';
11391 	this.values[this.values.length] = new Array(
11392 	0,0,0,0,0,0,0,0,0,0,
11393 	0,0,0,0,0,0,0,0,0,0,
11394 	0,0,0,0,0,0,0,0,0,0,0,0,
11395     0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
11396     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
11397     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
11398     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
11399     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
11400     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
11401     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
11402     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
11403     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
11404     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
11405     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
11406     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
11407     0x0402,0x0403,0x201A,0x0453,0x201E,0x2026,0x2020,0x2021,
11408     0x20AC,0x2030,0x0409,0x2039,0x040A,0x040C,0x040B,0x040F,
11409     0x0452,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,
11410     0x0000,0x2122,0x0459,0x203A,0x045A,0x045C,0x045B,0x045F,
11411     0x00A0,0x040E,0x045E,0x0408,0x00A4,0x0490,0x00A6,0x00A7,
11412     0x0401,0x00A9,0x0404,0x00AB,0x00AC,0x00AD,0x00AE,0x0407,
11413     0x00B0,0x00B1,0x0406,0x0456,0x0491,0x00B5,0x00B6,0x00B7,
11414     0x0451,0x2116,0x0454,0x00BB,0x0458,0x0405,0x0455,0x0457,
11415     0x0410,0x0411,0x0412,0x0413,0x0414,0x0415,0x0416,0x0417,
11416     0x0418,0x0419,0x041A,0x041B,0x041C,0x041D,0x041E,0x041F,
11417     0x0420,0x0421,0x0422,0x0423,0x0424,0x0425,0x0426,0x0427,
11418     0x0428,0x0429,0x042A,0x042B,0x042C,0x042D,0x042E,0x042F,
11419     0x0430,0x0431,0x0432,0x0433,0x0434,0x0435,0x0436,0x0437,
11420     0x0438,0x0439,0x043A,0x043B,0x043C,0x043D,0x043E,0x043F,
11421     0x0440,0x0441,0x0442,0x0443,0x0444,0x0445,0x0446,0x0447,
11422     0x0448,0x0449,0x044A,0x044B,0x044C,0x044D,0x044E,0x044F);
11423 
11424 	this.names[this.names.length] = 'CP1252';
11425 	this.diff[this.diff.length] = '127 /.notdef 160 /space 173 /hyphen 176 /degree';
11426 	this.values[this.values.length] = new Array(
11427 	0,0,0,0,0,0,0,0,0,0,
11428 	0,0,0,0,0,0,0,0,0,0,
11429 	0,0,0,0,0,0,0,0,0,0,0,0,
11430 	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
11431     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
11432     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
11433     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
11434     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
11435     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
11436     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
11437     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
11438     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
11439     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
11440     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
11441     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
11442     0x20AC,0x0000,0x201A,0x0192,0x201E,0x2026,0x2020,0x2021,
11443     0x02C6,0x2030,0x0160,0x2039,0x0152,0x0000,0x017D,0x0000,
11444     0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,
11445     0x02DC,0x2122,0x0161,0x203A,0x0153,0x0000,0x017E,0x0178,
11446     0x00A0,0x00A1,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,
11447     0x00A8,0x00A9,0x00AA,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF,
11448     0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,
11449     0x00B8,0x00B9,0x00BA,0x00BB,0x00BC,0x00BD,0x00BE,0x00BF,
11450     0x00C0,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x00C7,
11451     0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF,
11452     0x00D0,0x00D1,0x00D2,0x00D3,0x00D4,0x00D5,0x00D6,0x00D7,
11453     0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x00DD,0x00DE,0x00DF,
11454     0x00E0,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x00E7,
11455     0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF,
11456     0x00F0,0x00F1,0x00F2,0x00F3,0x00F4,0x00F5,0x00F6,0x00F7,
11457     0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x00FD,0x00FE,0x00FF);
11458 
11459 
11460 	this.names[this.names.length] = 'CP1253';
11461 	this.diff[this.diff.length] = '';
11462 	this.values[this.values.length] = new Array(
11463 	0,0,0,0,0,0,0,0,0,0,
11464 	0,0,0,0,0,0,0,0,0,0,
11465 	0,0,0,0,0,0,0,0,0,0,0,0,
11466 	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
11467     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
11468     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
11469     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
11470     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
11471     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
11472     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
11473     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
11474     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
11475     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
11476     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
11477     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
11478     0x20AC,0x0000,0x201A,0x0192,0x201E,0x2026,0x2020,0x2021,
11479     0x0000,0x2030,0x0000,0x2039,0x0000,0x0000,0x0000,0x0000,
11480     0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,
11481     0x0000,0x2122,0x0000,0x203A,0x0000,0x0000,0x0000,0x0000,
11482     0x00A0,0x0385,0x0386,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,
11483     0x00A8,0x00A9,0x0000,0x00AB,0x00AC,0x00AD,0x00AE,0x2015,
11484     0x00B0,0x00B1,0x00B2,0x00B3,0x0384,0x00B5,0x00B6,0x00B7,
11485     0x0388,0x0389,0x038A,0x00BB,0x038C,0x00BD,0x038E,0x038F,
11486     0x0390,0x0391,0x0392,0x0393,0x0394,0x0395,0x0396,0x0397,
11487     0x0398,0x0399,0x039A,0x039B,0x039C,0x039D,0x039E,0x039F,
11488     0x03A0,0x03A1,0x0000,0x03A3,0x03A4,0x03A5,0x03A6,0x03A7,
11489     0x03A8,0x03A9,0x03AA,0x03AB,0x03AC,0x03AD,0x03AE,0x03AF,
11490     0x03B0,0x03B1,0x03B2,0x03B3,0x03B4,0x03B5,0x03B6,0x03B7,
11491     0x03B8,0x03B9,0x03BA,0x03BB,0x03BC,0x03BD,0x03BE,0x03BF,
11492     0x03C0,0x03C1,0x03C2,0x03C3,0x03C4,0x03C5,0x03C6,0x03C7,
11493     0x03C8,0x03C9,0x03CA,0x03CB,0x03CC,0x03CD,0x03CE,0x0000);
11494 
11495 	this.names[this.names.length] = 'CP1254';
11496 	this.diff[this.diff.length] = '127 /.notdef 160 /space 173 /hyphen 176 /degree';
11497 	this.values[this.values.length] = new Array(
11498 	0,0,0,0,0,0,0,0,0,0,
11499 	0,0,0,0,0,0,0,0,0,0,
11500 	0,0,0,0,0,0,0,0,0,0,0,0,
11501 	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
11502     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
11503     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
11504     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
11505     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
11506     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
11507     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
11508     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
11509     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
11510     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
11511     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
11512     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
11513     0x20AC,0x0000,0x201A,0x0192,0x201E,0x2026,0x2020,0x2021,
11514     0x02C6,0x2030,0x0160,0x2039,0x0152,0x0000,0x0000,0x0000,
11515     0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,
11516     0x02DC,0x2122,0x0161,0x203A,0x0153,0x0000,0x0000,0x0178,
11517     0x00A0,0x00A1,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,
11518     0x00A8,0x00A9,0x00AA,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF,
11519     0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,
11520     0x00B8,0x00B9,0x00BA,0x00BB,0x00BC,0x00BD,0x00BE,0x00BF,
11521     0x00C0,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x00C7,
11522     0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF,
11523     0x011E,0x00D1,0x00D2,0x00D3,0x00D4,0x00D5,0x00D6,0x00D7,
11524     0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x0130,0x015E,0x00DF,
11525     0x00E0,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x00E7,
11526     0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF,
11527     0x011F,0x00F1,0x00F2,0x00F3,0x00F4,0x00F5,0x00F6,0x00F7,
11528     0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x0131,0x015F,0x00FF);
11529 
11530 	this.names[this.names.length] = 'CP1255';
11531 	this.diff[this.diff.length] = '';
11532 	this.values[this.values.length] = new Array(
11533 	0,0,0,0,0,0,0,0,0,0,
11534 	0,0,0,0,0,0,0,0,0,0,
11535 	0,0,0,0,0,0,0,0,0,0,0,0,
11536 	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
11537     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
11538     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
11539     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
11540     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
11541     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
11542     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
11543     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
11544     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
11545     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
11546     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
11547     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
11548     0x20AC,0x0000,0x201A,0x0192,0x201E,0x2026,0x2020,0x2021,
11549     0x02C6,0x2030,0x0000,0x2039,0x0000,0x0000,0x0000,0x0000,
11550     0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,
11551     0x02DC,0x2122,0x0000,0x203A,0x0000,0x0000,0x0000,0x0000,
11552     0x00A0,0x00A1,0x00A2,0x00A3,0x20AA,0x00A5,0x00A6,0x00A7,
11553     0x00A8,0x00A9,0x00D7,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF,
11554     0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,
11555     0x00B8,0x00B9,0x00F7,0x00BB,0x00BC,0x00BD,0x00BE,0x00BF,
11556     0x05B0,0x05B1,0x05B2,0x05B3,0x05B4,0x05B5,0x05B6,0x05B7,
11557     0x05B8,0x05B9,0x0000,0x05BB,0x05BC,0x05BD,0x05BE,0x05BF,
11558     0x05C0,0x05C1,0x05C2,0x05C3,0x05F0,0x05F1,0x05F2,0x05F3,
11559     0x05F4,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
11560     0x05D0,0x05D1,0x05D2,0x05D3,0x05D4,0x05D5,0x05D6,0x05D7,
11561     0x05D8,0x05D9,0x05DA,0x05DB,0x05DC,0x05DD,0x05DE,0x05DF,
11562     0x05E0,0x05E1,0x05E2,0x05E3,0x05E4,0x05E5,0x05E6,0x05E7,
11563     0x05E8,0x05E9,0x05EA,0x0000,0x0000,0x200E,0x200F,0x0000);
11564 
11565 	this.names[this.names.length] = 'CP1256';
11566 	this.diff[this.diff.length] = '';
11567 	this.values[this.values.length] = new Array(
11568 	0,0,0,0,0,0,0,0,0,0,
11569 	0,0,0,0,0,0,0,0,0,0,
11570 	0,0,0,0,0,0,0,0,0,0,0,0,
11571 	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
11572     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
11573     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
11574     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
11575     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
11576     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
11577     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
11578     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
11579     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
11580     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
11581     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
11582     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
11583     0x20AC,0x067E,0x201A,0x0192,0x201E,0x2026,0x2020,0x2021,
11584     0x02C6,0x2030,0x0679,0x2039,0x0152,0x0686,0x0698,0x0688,
11585     0x06AF,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,
11586     0x06A9,0x2122,0x0691,0x203A,0x0153,0x200C,0x200D,0x06BA,
11587     0x00A0,0x060C,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,
11588     0x00A8,0x00A9,0x06BE,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF,
11589     0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,
11590     0x00B8,0x00B9,0x061B,0x00BB,0x00BC,0x00BD,0x00BE,0x061F,
11591     0x06C1,0x0621,0x0622,0x0623,0x0624,0x0625,0x0626,0x0627,
11592     0x0628,0x0629,0x062A,0x062B,0x062C,0x062D,0x062E,0x062F,
11593     0x0630,0x0631,0x0632,0x0633,0x0634,0x0635,0x0636,0x00D7,
11594     0x0637,0x0638,0x0639,0x063A,0x0640,0x0641,0x0642,0x0643,
11595     0x00E0,0x0644,0x00E2,0x0645,0x0646,0x0647,0x0648,0x00E7,
11596     0x00E8,0x00E9,0x00EA,0x00EB,0x0649,0x064A,0x00EE,0x00EF,
11597     0x064B,0x064C,0x064D,0x064E,0x00F4,0x064F,0x0650,0x00F7,
11598     0x0651,0x00F9,0x0652,0x00FB,0x00FC,0x200E,0x200F,0x06D2);
11599 
11600 	this.names[this.names.length] = 'CP1257';
11601 	this.diff[this.diff.length] = '127 /.notdef 131 /.notdef 136 /.notdef 138 /.notdef 140 /.notdef 141 /dieresis 142 /caron 143 /cedilla 152 /.notdef 154 /.notdef 156 /.notdef 157 /macron 158 /ogonek 159 /.notdef 160 /space 161 /.notdef 165 /.notdef 168 /Oslash 170 /Rcommaaccent 173 /hyphen 175 /AE 176 /degree 184 /oslash 186 /rcommaaccent 191 /ae 192 /Aogonek 193 /Iogonek 194 /Amacron 195 /Cacute 198 /Eogonek 199 /Emacron 200 /Ccaron 202 /Zacute 203 /Edotaccent 204 /Gcommaaccent 205 /Kcommaaccent 206 /Imacron 207 /Lcommaaccent 208 /Scaron 209 /Nacute 210 /Ncommaaccent 212 /Omacron 216 /Uogonek 217 /Lslash 218 /Sacute 219 /Umacron 221 /Zdotaccent 222 /Zcaron 224 /aogonek 225 /iogonek 226 /amacron 227 /cacute 230 /eogonek 231 /emacron 232 /ccaron 234 /zacute 235 /edotaccent 236 /gcommaaccent 237 /kcommaaccent 238 /imacron 239 /lcommaaccent 240 /scaron 241 /nacute 242 /ncommaaccent 244 /omacron 248 /uogonek 249 /lslash 250 /sacute 251 /umacron 253 /zdotaccent 254 /zcaron 255 /dotaccent';
11602 	this.values[this.values.length] = new Array(
11603 	0,0,0,0,0,0,0,0,0,0,
11604 	0,0,0,0,0,0,0,0,0,0,
11605 	0,0,0,0,0,0,0,0,0,0,0,0,
11606 	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
11607     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
11608     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
11609     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
11610     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
11611     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
11612     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
11613     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
11614     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
11615     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
11616     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
11617     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
11618     0x20AC,0x0000,0x201A,0x0000,0x201E,0x2026,0x2020,0x2021,
11619     0x0000,0x2030,0x0000,0x2039,0x0000,0x00A8,0x02C7,0x00B8,
11620     0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,
11621     0x0000,0x2122,0x0000,0x203A,0x0000,0x00AF,0x02DB,0x0000,
11622     0x00A0,0x0000,0x00A2,0x00A3,0x00A4,0x0000,0x00A6,0x00A7,
11623     0x00D8,0x00A9,0x0156,0x00AB,0x00AC,0x00AD,0x00AE,0x00C6,
11624     0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,
11625     0x00F8,0x00B9,0x0157,0x00BB,0x00BC,0x00BD,0x00BE,0x00E6,
11626     0x0104,0x012E,0x0100,0x0106,0x00C4,0x00C5,0x0118,0x0112,
11627     0x010C,0x00C9,0x0179,0x0116,0x0122,0x0136,0x012A,0x013B,
11628     0x0160,0x0143,0x0145,0x00D3,0x014C,0x00D5,0x00D6,0x00D7,
11629     0x0172,0x0141,0x015A,0x016A,0x00DC,0x017B,0x017D,0x00DF,
11630     0x0105,0x012F,0x0101,0x0107,0x00E4,0x00E5,0x0119,0x0113,
11631     0x010D,0x00E9,0x017A,0x0117,0x0123,0x0137,0x012B,0x013C,
11632     0x0161,0x0144,0x0146,0x00F3,0x014D,0x00F5,0x00F6,0x00F7,
11633     0x0173,0x0142,0x015B,0x016B,0x00FC,0x017C,0x017E,0x02D9);
11634 
11635 	this.names[this.names.length] = 'CP1258';
11636 	this.diff[this.diff.length] = '';
11637 	this.values[this.values.length] = new Array(
11638 	0,0,0,0,0,0,0,0,0,0,
11639 	0,0,0,0,0,0,0,0,0,0,
11640 	0,0,0,0,0,0,0,0,0,0,0,0,
11641 	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
11642     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
11643     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
11644     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
11645     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
11646     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
11647     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
11648     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
11649     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
11650     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
11651     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
11652     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
11653     0x20AC,0x0000,0x201A,0x0192,0x201E,0x2026,0x2020,0x2021,
11654     0x02C6,0x2030,0x0000,0x2039,0x0152,0x0000,0x0000,0x0000,
11655     0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,
11656     0x02DC,0x2122,0x0000,0x203A,0x0153,0x0000,0x0000,0x0178,
11657     0x00A0,0x00A1,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,
11658     0x00A8,0x00A9,0x00AA,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF,
11659     0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,
11660     0x00B8,0x00B9,0x00BA,0x00BB,0x00BC,0x00BD,0x00BE,0x00BF,
11661     0x00C0,0x00C1,0x00C2,0x0102,0x00C4,0x00C5,0x00C6,0x00C7,
11662     0x00C8,0x00C9,0x00CA,0x00CB,0x0300,0x00CD,0x00CE,0x00CF,
11663     0x0110,0x00D1,0x0309,0x00D3,0x00D4,0x01A0,0x00D6,0x00D7,
11664     0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x01AF,0x0303,0x00DF,
11665     0x00E0,0x00E1,0x00E2,0x0103,0x00E4,0x00E5,0x00E6,0x00E7,
11666     0x00E8,0x00E9,0x00EA,0x00EB,0x0301,0x00ED,0x00EE,0x00EF,
11667     0x0111,0x00F1,0x0323,0x00F3,0x00F4,0x01A1,0x00F6,0xF00F7,
11668     0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x01B0,0x20AB,0x00FF);
11669 
11670 	this.names[this.names.length] = 'KOI8-R';
11671 	this.diff[this.diff.length] = '127 /.notdef 128 /SF100000 129 /SF110000 130 /SF010000 131 /SF030000 132 /SF020000 133 /SF040000 134 /SF080000 135 /SF090000 136 /SF060000 137 /SF070000 138 /SF050000 139 /upblock 140 /dnblock 141 /block 142 /lfblock 143 /rtblock 144 /ltshade 145 /shade 146 /dkshade 147 /integraltp 148 /filledbox 149 /periodcentered 150 /radical 151 /approxequal 152 /lessequal 153 /greaterequal 154 /space 155 /integralbt 156 /degree 157 /twosuperior 158 /periodcentered 159 /divide 160 /SF430000 161 /SF240000 162 /SF510000 163 /afii10071 164 /SF520000 165 /SF390000 166 /SF220000 167 /SF210000 168 /SF250000 169 /SF500000 170 /SF490000 171 /SF380000 172 /SF280000 173 /SF270000 174 /SF260000 175 /SF360000 176 /SF370000 177 /SF420000 178 /SF190000 179 /afii10023 180 /SF200000 181 /SF230000 182 /SF470000 183 /SF480000 184 /SF410000 185 /SF450000 186 /SF460000 187 /SF400000 188 /SF540000 189 /SF530000 190 /SF440000 191 /copyright 192 /afii10096 193 /afii10065 194 /afii10066 195 /afii10088 196 /afii10069 197 /afii10070 198 /afii10086 199 /afii10068 200 /afii10087 201 /afii10074 202 /afii10075 203 /afii10076 204 /afii10077 205 /afii10078 206 /afii10079 207 /afii10080 208 /afii10081 209 /afii10097 210 /afii10082 211 /afii10083 212 /afii10084 213 /afii10085 214 /afii10072 215 /afii10067 216 /afii10094 217 /afii10093 218 /afii10073 219 /afii10090 220 /afii10095 221 /afii10091 222 /afii10089 223 /afii10092 224 /afii10048 225 /afii10017 226 /afii10018 227 /afii10040 228 /afii10021 229 /afii10022 230 /afii10038 231 /afii10020 232 /afii10039 233 /afii10026 234 /afii10027 235 /afii10028 236 /afii10029 237 /afii10030 238 /afii10031 239 /afii10032 240 /afii10033 241 /afii10049 242 /afii10034 243 /afii10035 244 /afii10036 245 /afii10037 246 /afii10024 247 /afii10019 248 /afii10046 249 /afii10045 250 /afii10025 251 /afii10042 252 /afii10047 253 /afii10043 254 /afii10041 255 /afii10044';
11672 	this.values[this.values.length] = new Array(
11673 	0,0,0,0,0,0,0,0,0,0,
11674 	0,0,0,0,0,0,0,0,0,0,
11675 	0,0,0,0,0,0,0,0,0,0,0,0,
11676 	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,
11677     0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
11678     0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,
11679     0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
11680     0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,
11681     0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
11682     0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,
11683     0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
11684     0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,
11685     0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
11686     0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,
11687     0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F,
11688     0x2500,0x2502,0x250C,0x2510,0x2514,0x2518,0x251C,0x2524,
11689     0x252C,0x2534,0x253C,0x2580,0x2584,0x2588,0x258C,0x2590,
11690     0x2591,0x2592,0x2593,0x2320,0x25A0,0x2219,0x221A,0x2248,
11691     0x2264,0x2265,0x00A0,0x2321,0x00B0,0x00B2,0x00B7,0x00F7,
11692     0x2550,0x2551,0x2552,0x0451,0x2553,0x2554,0x2555,0x2556,
11693     0x2557,0x2558,0x2559,0x255A,0x255B,0x255C,0x255D,0x255E,
11694     0x255F,0x2560,0x2561,0x0401,0x2562,0x2563,0x2564,0x2565,
11695     0x2566,0x2567,0x2568,0x2569,0x256A,0x256B,0x256C,0x00A9,
11696     0x044E,0x0430,0x0431,0x0446,0x0434,0x0435,0x0444,0x0433,
11697     0x0445,0x0438,0x0439,0x043A,0x043B,0x043C,0x043D,0x043E,
11698     0x043F,0x044F,0x0440,0x0441,0x0442,0x0443,0x0436,0x0432,
11699     0x044C,0x044B,0x0437,0x0448,0x044D,0x0449,0x0447,0x044A,
11700     0x042E,0x0410,0x0411,0x0426,0x0414,0x0415,0x0424,0x0413,
11701     0x0425,0x0418,0x0419,0x041A,0x041B,0x041C,0x041D,0x041E,
11702     0x041F,0x042F,0x0420,0x0421,0x0422,0x0423,0x0416,0x0412,
11703     0x042C,0x042B,0x0417,0x0428,0x042D,0x0429,0x0427,0x042A);
11704 		
11705 //--------------- methods ---------------------------
11706 
11707 	this.find						= pdfCharacterMap$find;
11708 	this.getCID					= pdfCharacterMap$getCID;
11709 	this.getNotDefined				= pdfCharacterMap$getNotDefined;
11710 	this.unicodeIndex				= pdfCharacterMap$unicodeIndex;
11711 	this.getWidths					= pdfCharacterMap$getWidths;
11712 	
11713 	this.template_font				= pdfCharacterMap$template_font;
11714 	this.template_fontDescriptor	= pdfCharacterMap$template_fontDescriptor;
11715 	this.getMapping					= pdfCharacterMap$getMapping;
11716 	this.cmap						= pdfCharacterMap$cmap;
11717 	this.define						= pdfCharacterMap$define;
11718 } 
11719 //===================================================================
11720 //						pdfCharacterMap$find
11721 //===================================================================
11722 function pdfCharacterMap$find(name)
11723 {
11724 	var i;
11725 	
11726 	name = name.toUpperCase();
11727 
11728 	for (i=0; i &lt; this.names.length; ++i)
11729 	{
11730 		if (this.names[i] == name) return i;	
11731 	}
11732 	
11733 	return 0;
11734 }
11735 //===================================================================
11736 //						pdfCharacterMap$getNotDefined
11737 //===================================================================
11738 function pdfCharacterMap$getNotDefined(values)
11739 {
11740 	var i;
11741 	var codespace,obj,notdefined,found;
11742 	
11743 	notdefined = new Array();
11744 	
11745 	found = false;
11746 	
11747 	for (i=0; i &lt; 255; ++i)
11748 	{
11749 		if (found)
11750 		{
11751 			if (values[i] == 0) 
11752 			{
11753 				obj.ubound = i;
11754 				continue;
11755 			}
11756 			
11757 			found = false;
11758 		}
11759 		
11760 		if (values[i] == 0)
11761 		{
11762 			found = true;
11763 			obj = new Object();
11764 			obj.lbound = i;
11765 			obj.ubound = i;
11766 			notdefined[notdefined.length] = obj;
11767 		}			
11768 	}		
11769 
11770 	return notdefined;
11771 }
11772 //===================================================================
11773 //						pdfCharacterMap$getCID
11774 //===================================================================
11775 function pdfCharacterMap$getCID(values)
11776 {
11777 	var i,obj;
11778 	var cid;
11779 	
11780 	cid = new Array();
11781 		
11782 	for (i=0; i &lt; 256; ++i)
11783 	{
11784 		if (values[i] == 0) continue;
11785 		if (values[i] == i) continue;
11786 
11787 		obj = new Object();
11788 		obj.fromChar = i;
11789 		obj.toChar = values[i];
11790 		cid[cid.length] = obj;
11791 	}		
11792 
11793 	return cid;
11794 }
11795 //===================================================================
11796 //						pdfCharacterMap$cmap
11797 //===================================================================
11798 function pdfCharacterMap$cmap(encoding)
11799 {
11800 	var text,i,j,n,count,remain,map;
11801 	var k,codespace,notdefined,cid;
11802 
11803 	k = this.find(encoding);
11804 		
11805 	notdefined = this.getNotDefined(this.values[k]);
11806 	cid = this.getCID(this.values[k]);
11807 	
11808 	map = '';
11809 	
11810 	map += "/CIDInit /ProcSet findresource begin\n";
11811 	map += "12 dict begin\n";
11812 	map += "begincmap\n";
11813 	map += "/CIDSystemInfo\n";
11814 	map += "&lt;&lt; /Registry ( CollinsSoftware )\n";
11815 	map += "/Ordering ( ' + this.fontName + ' )\n";
11816 	map += "/Supplement 0\n";
11817 	map += ">> def\n";
11818 	map += '/CMapName ' + encoding + " def\n";
11819 	map += "CMapType 2 def\n";
11820 
11821 //-------------- codespace ---------------
11822 
11823 	map += "begincodespacerange\n";
11824 	map += "&lt;00> &lt;FFFF>\n";
11825 	map += "endcodespacerange\n";
11826 
11827 //-------------- notdefined ---------------
11828 /*
11829 
11830 	map += notdefined.length + " beginnotdefinedrange\n";
11831 	for (i=0; i &lt; notdefined.length; ++i)
11832 	{
11833 		map += '&lt;' + notdefined[i].lbound.toString(16) + ' > &lt; ' +  notdefined[i].ubound.toString(16) + "> 41\n";
11834 	}
11835 
11836 	map += "endnotdefinedrange\n";
11837 
11838 */
11839 
11840 //-------------- cid -------------------
11841 
11842 	remain = cid.length;
11843 	n = Math.ceil(cid.length / 100);
11844 
11845 	for (j=0; j &lt; n; ++j)
11846 	{
11847 		count = remain;
11848 		if (count > 100) count = 100;
11849 		remain = remain - count;
11850 		map += count + " beginbfchar\n";
11851 	
11852 		for (i=0; i &lt; cid.length; ++i)
11853 		{
11854 //			map += '&lt;' + cid[i].fromChar.toString() + '> &lt;' + cid[i].toChar.toString(16) + ">\n";
11855 			map += '&lt;' + cid[i].fromChar.toString(16) + "> &lt;41>\n";
11856 		}
11857 
11858 		map += "endbfchar\n";
11859 	}
11860 
11861 //----------------------------------------
11862 
11863 	map += "endcmap\n";
11864 	map += "CMapName currentdict /CMap defineresource pop\n";
11865 	map += "end\n";
11866 	map += "end\n";
11867 
11868 	text = '';
11869 	text += "&lt;&lt; /Length " + map.length + ">>\n";
11870 	text += "stream\n";
11871 	text += map;
11872 	text += "\n" + "endstream";
11873 
11874 
11875 //--------------------------- test - test --------------------------
11876 
11877 /*
11878 	map = '';
11879 	map += "/CIDInit /ProcSet findresource begin\n";
11880 	map += "12 dict begin\n";
11881 	map += "begincmap\n";
11882 	map += "/CIDSystemInfo &lt;&lt; /Registry (CollinsSoftware) /Ordering (" + this.FontName + ") /Supplement 0 >> def\n";
11883 	map += "/CMapName /" + this.fontName + " def\n";
11884 	map += "/CMapType 0 def\n";
11885 	map += "1 begincodespacerange\n";
11886 	map += "&lt;0000 FFFF> \n";
11887 	map += "endcodespacerange\n";
11888 	map += "1 beginbfrange\n";
11889 	map += "&lt;32> &lt;96> &lt;045>\n";
11890 	map += "endbfrange\n";
11891 	map += "endcmap\n";
11892 	map += "CMapName currentdict /CMap defineresource pop \n";
11893 	map += "end\n";
11894 	map += "end\n";
11895 	
11896 	text = '';
11897 	text += '&lt;&lt; /Length ' + map.length + ">>\n";
11898 	text += "stream\n";
11899 	text += map;
11900 	text += "endstream\n";
11901 */
11902 
11903 	return text;
11904 }
11905 //===================================================================
11906 //						pdfCharacterMap$template_font
11907 //===================================================================
11908 function pdfCharacterMap$template_font(encoding)
11909 {
11910 	var text,k,base,lastChar;
11911 	var diff,i,n;
11912 	
11913 	k = this.find(encoding);
11914 	text = '';
11915 
11916 	base = 'WinAnsiEncoding';
11917 	if (k == 0) base = 'StandardEncoding';
11918 	if (k == 2) base = 'MacRomanEncoding';
11919 
11920 	diff = this.diff[k];
11921 	
11922 	lastChar = (parseInt(this.firstChar) + this.unicode_widths.length) - 1;
11923 
11924 	text += '&lt;&lt; ';
11925 	text += "/Type /Font\n";
11926 	text += "/BaseFont /" + this.fontName + "{mode}\n";
11927 	text += "/Subtype /Type1\n";
11928 	text += "/FontDescriptor {ref} 0 R\n";
11929 	text += "/FirstChar " + this.firstChar + "\n";
11930 	text += "/LastChar " + lastChar + "\n";
11931 	text += "/Widths [" + this.pdf.trim(this.unicode_widths.join(' ')) + "]\n";
11932 	text += "/Encoding &lt;&lt; ";
11933 	text += "/Type /Encoding ";
11934 	text += "/BaseEncoding /" + base + " ";
11935 	
11936 	if (diff != '') text += '/Differences [' + diff + "]\n";
11937 	text += ">>\n";
11938 	text += '>>';
11939 
11940 	return text;
11941 }	
11942 //===================================================================
11943 //					pdfCharacterMap$template_fontDescriptor
11944 //===================================================================
11945 function pdfCharacterMap$template_fontDescriptor(encoding)
11946 {
11947 	var text,k,flags;
11948 	
11949 	flags = 262178;
11950 //	flags = 32;
11951 	
11952 	text = '';
11953 	text += '&lt;&lt; ' + "\n";
11954 	text += '/Type /FontDescriptor' + "\n";
11955 	text += '/Ascent '  + this.ascent  + "\n";
11956 	text += '/Descent ' + this.descent + "\n";
11957 	text += '/Flags ' + flags  + "\n";
11958 	text += '/FontBBox [' + this.range.join(' ') + ']' + "\n";
11959 	text += '/FontName /' + this.fontName + '{mode}' + "\n";
11960 	text += '/FontWeight 700';
11961 	text += '/ItalicAngle 0' + "\n";
11962 	text += '/StemV 0' + "\n";
11963 	text += '/XHeight 0' + "\n";
11964 	text += '/FontFile {ref} 0 R' + "\n";
11965 	text += '>>';
11966 	
11967 	return text;
11968 }
11969 //===================================================================
11970 //						pdfCharacterMap$getWidths
11971 //===================================================================
11972 function pdfCharacterMap$getWidths(encoding,first)
11973 {
11974 	var text,i,j,n,widths,fst,k,values;
11975 
11976 	k = this.find(encoding);
11977 	values = this.values[k];
11978 	widths = new Array();
11979 	
11980 	fst = 0;
11981 	if (arguments.length > 1) fst = first;
11982 
11983 	for (i=fst; i &lt; values.length; ++i) widths[i-fst] = 0;
11984 	
11985 	j = 0;
11986 
11987 	for (i=fst; i &lt; values.length; ++i)
11988 	{
11989 		n = this.unicodeIndex(this.values[k][i]);
11990 		widths[j] = this.widths[n];
11991 		j = j + 1;
11992 	}	
11993 	
11994 	return widths;
11995 }
11996 //===================================================================
11997 //						pdfCharacterMap$define
11998 //===================================================================
11999 function pdfCharacterMap$define(filename,mode)
12000 {
12001 	var i,j;
12002 
12003 	var i,j,name,ext,text,list,value;
12004 	var forReading = 1;
12005 	var fs,f,afilename,pfilename;
12006 
12007 	var defaultRange	= '-115,-240,1151,1009';
12008 	var defaultAscent	= 739;
12009 	var defaultDescent	= -192;
12010 	var defaultFirstChar	= 32;
12011 	var defaultLastChar	= 255;
12012 
12013 	this.range		= defaultRange.split(',');
12014 	this.ascent		= defaultAscent;
12015 	this.descent		= defaultDescent;
12016 	this.firstChar		= defaultFirstChar;
12017 	this.lastChar		= defaultLastChar;
12018 	this.unicodes		= new Array();
12019 
12020 	this.fontWidths	= new Array();
12021 	this.widths = new Array();
12022 	this.unicodes = new Array();
12023 
12024 	i = filename.lastIndexOf('.');
12025 	if (i &lt; 0) i = filename.length;
12026 	ext = filename.substr(i);
12027 	ext = ext.toLowerCase();
12028 
12029 	pfilename = filename.substr(0,i) + ext;
12030 	afilename = filename.substr(0,i) + '.afm';
12031 
12032 	if (ext == '.txt')
12033 	{
12034 		text = CollinsPDF().read(pfilename);
12035 		if (text == '') return;
12036 		i = text.indexOf('|');
12037 		text = text.substr(0,i);
12038 		if (text == '') return;		
12039 		list = text.split(';');
12040 		this.ascent		= parseInt(list[0]);
12041 		this.descent		= parseInt(list[1]);
12042 		this.firstChar		= parseInt(list[2]);
12043 		this.lastChar		= parseInt(list[3]);
12044 		this.range		= list[4].split(',');
12045 		this.fontWidths		= list[5].split(',');
12046 		this.widths		= list[5].split(',');
12047 		this.unicodes		= list[6].split(',');
12048 		return;
12049 	}
12050 
12051 
12052 	this.pdf.sys.type1FontDefine(this,afilename);
12053 	
12054 	if (this.widths.length == 0)
12055 	{
12056 		for (i=0; i &lt; 256; ++i)
12057 		{
12058 			this.widths[i]		= 800;
12059 			this.fontWidths[i]	= 800;
12060 			this.unicodes[i]	= i;
12061 		}
12062 
12063 		this.ascent = 900;
12064 		this.descent = 900;
12065 		this.range = new Array();
12066 		this.range[0] = 0;
12067 		this.range[1] = 0;
12068 		this.range[2] = 900;
12069 		this.range[3] = 1200;
12070 		this.firstChar = 0;
12071 		this.lastChar = 255;
12072 	}
12073 }
12074 //===================================================================
12075 //			pdfCharacterMap$unicodeIndex
12076 //===================================================================
12077 function pdfCharacterMap$unicodeIndex(unicode)
12078 {
12079 	var i;
12080 
12081 	if (unicode == 0) return 0;
12082 	
12083 	for (i=0; i &lt; this.unicodes.length; ++i)
12084 	{
12085 		if (unicode == this.unicodes[i]) return i;
12086 	}
12087 			
12088 	return 0;
12089 }
12090 //===================================================================
12091 //			pdfCharacterMap$getMapping
12092 //===================================================================
12093 function pdfCharacterMap$getMapping(encoding)
12094 {
12095 	var k,cid;
12096 	
12097 	k = this.find(encoding);
12098 	cid = this.getCID(this.values[k]);
12099 	return cid;
12100 }
12101 //==========================================================================
12102 //							pdf$setUnits
12103 //==========================================================================
12104 function pdf$setUnits(name)
12105 {
12106 
12107 	this.unitscale = 72;		// default inches
12108 	
12109 	name = name.toLowerCase();
12110 
12111 	if (name ==        'inch') this.unitscale = 72;
12112 	if (name ==      'inches') this.unitscale = 72;
12113 	if (name ==       'point') this.unitscale = 1;
12114 	if (name ==      'points') this.unitscale = 1;
12115 	if (name ==       'pixel') this.unitscale = 72 / 110;
12116 	if (name ==      'pixels') this.unitscale = 72 / 110;
12117 	if (name ==          'mm') this.unitscale = 72 / 0.039;
12118 	if (name ==          'cm') this.unitscale = 72 / 0.39;
12119 	if (name ==  'centimeter') this.unitscale = 72 / 0.39;
12120 	if (name == 'centimeters') this.unitscale = 72 / 0.39;
12121 	if (name ==  'millimeter') this.unitscale = 72 / 0.039;
12122 	if (name == 'millimeters') this.unitscale = 72 / 0.039;
12123 
12124 }
12125 //==========================================================================
12126 //							pdf$toPoint_
12127 //==========================================================================
12128 function pdf$toPoint_(x,y)
12129 {
12130 	var p;
12131 
12132 	if (arguments.length == 1) return x * this.unitscale ;
12133 
12134 	p = new Object();	
12135 	p.x = (x * this.unitscale) + this.xmin;
12136 	p.y = (y * (-this.unitscale)) + this.ymax;	
12137 	
12138 	return p;
12139 }
12140 //==========================================================================
12141 //							pdf$toPoints_
12142 //==========================================================================
12143 function pdf$toPoints_(points)
12144 {
12145 	var pnts,i;
12146 
12147 	pnts = new Array();
12148 
12149 	for (i=0; i &lt; points.length; ++i)
12150 	{
12151 		pnts[i] = this.toPoint_(points[i].x,points[i].y);
12152 	}
12153 
12154 	return pnts;
12155 }
12156 //==========================================================================
12157 //			pdf$getPosition
12158 //==========================================================================
12159 function pdf$getPosition()
12160 {
12161 	var p,x,y;
12162 	
12163 	x = this.xpos;
12164 	y = this.ypos;
12165 
12166 	p = new Object();	
12167 	p.x = (x - this.xmin) / this.unitscale;
12168 	p.y = (y - this.ymax) / (-this.unitscale);
12169 	
12170 	return p;
12171 }
12172 //=============================================================================
12173 //			pdf$setView
12174 //=============================================================================
12175 function pdf$setView(x,y,width,height)
12176 {
12177 	var p,text,h;
12178 
12179 	this.view = new Object();
12180 	this.view.xmin = this.xmin;
12181 	this.view.ymin = this.ymin;
12182 	this.view.xmax = this.xmax;
12183 	this.view.ymax = this.ymax;
12184 
12185 	p = this.toPoint_(x,y);	
12186 
12187 	if (isNaN(width)) width = 0;
12188 	if (isNaN(height)) height = 0;
12189 
12190 	if (width &lt;= 0) width = this.xmax - p.x;
12191 	if (height &lt;= 0) height = p.y - this.ymin;
12192 
12193 	h = this.fontSize * 1.2;
12194 
12195 	this.xpos = p.x;
12196 	this.ypos = p.y - h;
12197 
12198 	this.xmin = p.x;
12199 	this.ymax = p.y;
12200 	
12201 	this.xmax = p.x + width;
12202 	this.ymin = p.y - height;
12203 
12204 //	this.setClipRegion(this.xmin,this.ymin,this.xmax,this.ymax);
12205 
12206 	width  = this.xmax - this.xmin;
12207 	height = this.ymax - this.ymin;
12208 	
12209 	text = "q\n";
12210 	text = text + this.xmin + ' ' + this.ymin + ' ' + width + ' ' + height + " re W n\n";
12211 	this.catalog.activePage.add(text);
12212 
12213 }
12214 //=============================================================================
12215 //			pdf$setClip
12216 //=============================================================================
12217 function pdf$setClip(x,y,width,height)
12218 {
12219 	var text;
12220 
12221 	if (this.isClip)
12222 	{
12223 		text = "Q\n";
12224 		this.catalog.activePage.add(text);
12225 		this.isClip = false;
12226 	}
12227 	
12228 	if (arguments.length != 4) return;
12229 	
12230 //	this.setGraphicLineWeight(1);
12231 //	this.setGraphicFillColor(0.9);
12232 //	this.plot.rectangle(x,y,x+width,y+height);
12233 	
12234 	text = "q\n";
12235 	text = text + x + ' ' + y + ' ' + width + ' ' + height + " re W n\n";
12236 	this.catalog.activePage.add(text);
12237 	this.isClip = true;
12238 	
12239 }
12240 //=============================================================================
12241 //			pdf$restoreView
12242 //=============================================================================
12243 function pdf$restoreView()
12244 {
12245 	var text;
12246 	
12247 	if (this.view == null) return;
12248 
12249 	this.xmin = this.view.xmin;
12250 	this.ymin = this.view.ymin;
12251 	this.xmax = this.view.xmax;
12252 	this.ymax = this.view.ymax;
12253 
12254 	this.view = null;
12255 
12256 	text = "Q\n";
12257 	this.catalog.activePage.add(text);
12258 
12259 }
12260 //=============================================================================
12261 //			pdf$setPosition
12262 //=============================================================================
12263 function pdf$setPosition(x,y)
12264 {
12265 	var p;
12266 
12267 	if (arguments.length == 1)
12268 	{
12269 		this.xpos = x.x;
12270 		this.ypos = x.y;
12271 		return;
12272 	}
12273 	
12274 	p = this.toPoint_(x,y);	
12275 	this.xpos = p.x;
12276 	this.ypos = p.y;
12277 }
12278 //==========================================================================================
12279 //			pdf$drawBottomLine
12280 //==========================================================================================
12281 function pdf$drawBottomLine()
12282 {
12283 	var x1,y1,x2,y2;
12284 	
12285 	x1 = 0;
12286 	x2 = this.maxWidth;
12287 	y1 = this.ypos - (this.charHeight() * 0.98);
12288 	y2 = y1;
12289 	this.draw.line(x1,y1,x2,y2);
12290 }
12291 //==========================================================================================
12292 //			pdf$drawTableBox
12293 //==========================================================================================
12294 function pdf$drawTableBox(x1,y1,x2,y2,lightColor,darkColor,lineWeight,backgroundColor)
12295 {
12296 	var p1,p2;
12297 	
12298 	p1 = this.toPoint_(x1,y1);
12299 	p2 = this.toPoint_(x2,y2);
12300 	
12301 	x1 = p1.x;
12302 	y1 = p1.y;
12303 	x2 = p2.x;
12304 	y2 = p2.y;
12305 
12306 	if (backgroundColor != '')
12307 	{
12308 		this.setGraphicLineWeight(0);
12309 		this.setGraphicFillColor(backgroundColor);
12310 		this.plot.rectangle(x1,y1,x2,y2);
12311 	}
12312 	
12313 	if (lineWeight &lt;= 0) return;
12314 
12315 	this.plot.setLineWeight(lineWeight);
12316 	this.plot.setLineColor(darkColor);
12317 	this.plot.line(x1,y1,x1,y2);
12318 	this.plot.line(x2,y1,x1,y1);	
12319 	this.plot.setLineColor(lightColor);
12320 	this.plot.line(x2,y2,x2,y1);
12321 	this.plot.line(x1,y2,x2,y2);
12322 }
12323 //==========================================================================================
12324 //			pdf$drawBox
12325 //==========================================================================================
12326 function pdf$drawBox(x1,y1,x2,y2,backgroundColor,lineColor,lineWeight)
12327 {
12328 	var p1,p2;
12329 	
12330 	p1 = this.toPoint_(x1,y1);
12331 	p2 = this.toPoint_(x2,y2);
12332 	
12333 	x1 = p1.x;
12334 	y1 = p1.y;
12335 	x2 = p2.x;
12336 	y2 = p2.y;
12337 
12338 	this.setGraphicColor(lineColor);
12339 	this.setGraphicLineWeight(lineWeight);
12340 	this.setGraphicFillColor(backgroundColor);
12341 
12342 	this.plot.rectangle(x1,y1,x2,y2);
12343 }
12344 //==========================================================================================
12345 //			pdf$setGraphicColor
12346 //==========================================================================================
12347 function pdf$setGraphicColor(color)
12348 {
12349 	if (arguments.length > 0) return this.plot.setLineColor(color);
12350 	this.plot.setLineColor('black');
12351 }
12352 //==========================================================================================
12353 //			pdf$setGraphicFillColor
12354 //==========================================================================================
12355 function pdf$setGraphicFillColor(color)
12356 {
12357 	if (arguments.length > 0) return this.plot.setFillColor(color);
12358 	this.plot.setFillColor('');
12359 }
12360 //==========================================================================================
12361 //			pdf$setGraphicLineWeight
12362 //==========================================================================================
12363 function pdf$setGraphicLineWeight(weight)
12364 {
12365 	if (arguments.length > 0) return this.plot.setLineWeight(weight);
12366 	this.plot.setLineWeight(1);
12367 }
12368 //==========================================================================================
12369 //			pdf$setGraphicLineStyle
12370 //==========================================================================================
12371 function pdf$setGraphicLineStyle(style)
12372 {
12373 	if (arguments.length > 0) return this.plot.setLineStyle(style);
12374 	this.plot.setLineStyle('solid');
12375 }
12376 //==========================================================================================
12377 //			pdf$setGraphicTransparent
12378 //==========================================================================================
12379 function pdf$setGraphicTransparent(value)
12380 {
12381 	if (arguments.length > 0) return this.plot.setTransparent(value);
12382 	this.plot.setTransparent('');
12383 }
12384 //=================================================================
12385 //			pdfPlot.js
12386 //=================================================================
12387 function pdfPlot$(pdf)
12388 {
12389 
12390 	this.pdf = pdf;
12391 	
12392 	this.default_fontSize		= 10;
12393 	this.default_fontName		= 'arial';
12394 
12395 	this.color			= -1;
12396 	this.fillColor			= 0;
12397 	this.grayscale			= 0;
12398 	this.lineWeight			= 1;
12399 	this.lineStyle			= 'solid';
12400 	this.transparent		= '';
12401 
12402 	this.fontSize			= 10;
12403 	this.fontColor			= 'Black';
12404 	this.fontName			= 'arial';
12405 	
12406 	this.clip			= false;	
12407 
12408 	this.lineCap			= 2;			// Extended Lines;
12409 
12410 //----------- public methods ----------------------
12411 
12412 	this.textWidth			= pdfPlot$textWidth;
12413 	this.clear			= pdfPlot$clear;
12414 	this.setBlur			= pdfPlot$setBlur;
12415 
12416 	this.line			= pdfPlot$line;
12417 	this.linestring			= pdfPlot$linestring;
12418 	this.rectangle			= pdfPlot$rectangle;
12419 	this.polygon			= pdfPlot$polygon;
12420 
12421 	this.cone			= pdfPlot$cone;
12422 	this.arc			= pdfPlot$arc;
12423 	this.circle			= pdfPlot$circle;
12424 	this.symbol			= pdfPlot$symbol;
12425 	this.marker			= pdfPlot$marker;
12426 	this.text			= pdfPlot$text;
12427 	this.image			= pdfPlot$image;
12428 	this.grid			= pdfPlot$grid;
12429 
12430 	this.setFontColor		= pdfPlot$setFontColor;
12431 	this.setFontSize		= pdfPlot$setFontSize;
12432 	this.setFontName		= pdfPlot$setFontName;
12433 	this.setFont			= pdfPlot$setFont;
12434 
12435 	this.setFillColor		= pdfPlot$setFillColor;
12436 	this.setLineColor		= pdfPlot$setLineColor;
12437 	this.setLineStyle		= pdfPlot$setLineStyle;
12438 	this.setLineWeight		= pdfPlot$setLineWeight;
12439 	this.setStyle			= pdfPlot$setStyle;
12440 	this.setTransparent		= pdfPlot$setTransparent;
12441 
12442 //--------- internal methods ---------
12443 
12444 	this.clipBegin			= pdfPlot$clipBegin;
12445 	this.clipEnd			= pdfPlot$clipEnd;
12446 	
12447 	this.shapeStyle			= pdfPlot$shapeStyle;
12448 	this.shapeStyleEnd		= pdfPlot$shapeStyleEnd;
12449 
12450 	this.lineStyleText_		= pdfPlot$lineStyleText_;
12451 	this.transparentText_		= pdfPlot$transparentText_;
12452 	this.shape_			= pdfPlot$shape_;
12453 	this.makeArc_			= pdfPlot$makeArc_;
12454 	this.textWidth			= pdfPlot$textWidth;
12455 
12456 }
12457 //==========================================================================================
12458 //				pdfPlot$clear
12459 //==========================================================================================
12460 function pdfPlot$clear()
12461 {
12462 }
12463 //==========================================================================================
12464 //				pdfPlot$setBlur
12465 //==========================================================================================
12466 function pdfPlot$setBlur()
12467 {
12468 
12469 }
12470 //==========================================================================================
12471 //				pdfPlot$textWidth
12472 //==========================================================================================
12473 function pdfPlot$textWidth(text)
12474 {
12475 
12476 	return this.pdf.textWidth(text);
12477 	
12478 }
12479 //==========================================================================================
12480 //				pdfPlot$setFont
12481 //==========================================================================================
12482 function pdfPlot$setFont(color,size,name)
12483 {
12484 
12485 	this.setFontColor(color);
12486 	this.setFontSize(size);
12487 	this.setFontName(name);
12488 }
12489 //==========================================================================================
12490 //				pdfPlot$setStyle
12491 //==========================================================================================
12492 function pdfPlot$setStyle(color,weight,style,fillcolor,transparent)
12493 {
12494 	this.setLineColor(color);
12495 	this.setFillColor(fillcolor);
12496 	this.setLineWeight(weight);
12497 	this.setLineStyle(style);
12498 	this.setTransparent(transparent);
12499 }
12500 //==========================================================================================
12501 //				pdfPlot$text
12502 //==========================================================================================
12503 function pdfPlot$text(x,y,text,url,angle,just,size)
12504 {
12505 	if (arguments.length > 6) this.pdf.fontSize = size;
12506 	this.pdf.placeText_A(x,y,text,url,angle,just);
12507 }
12508 //==========================================================================================
12509 //				pdfPlot$image
12510 //==========================================================================================
12511 function pdfPlot$image(x,y,filename,height,width,angle)
12512 {
12513 	var p;
12514 	
12515 	this.pdf.placeImage_A(x,y,filename,height,width,angle);
12516 }
12517 //==========================================================================================
12518 //				pdfPlot$symbol
12519 //==========================================================================================
12520 function pdfPlot$symbol(x,y,char,angle)
12521 {
12522 	var dx,dy,c,xcos,xsin,textAngle;
12523 	var saveFont,xchr,v,value,width,size,ncolor;
12524 	var text,tran,obj;
12525 	
12526 	saveFont = this.pdf.font.name;
12527 
12528 	c = char.substr(0,1);
12529 	c =  c.toUpperCase();
12530 	value = char.substr(1);
12531 	if (isNaN(value)) c = '';
12532 	v = parseInt(value,8);
12533 	if (isNaN(v)) v = 32;
12534 
12535 	this.setFontName(c);
12536 
12537 	xchr = String.fromCharCode(v);
12538 	size = this.fontSize;
12539 	angle = angle / 180.0 * Math.PI;	
12540 
12541 	width = this.pdf.charWidth(v);
12542 
12543 //	width = 580;
12544 //	width = width / 1000;
12545 //	width = width * size;
12546 
12547 	dx = width / 2;
12548 	dy = width / 2;
12549 
12550 	x = x - ( (Math.cos(angle) * dx) - (Math.sin(angle) * dy) );
12551 	y = y - ( (Math.sin(angle) * dx) + (Math.cos(angle) * dy) );
12552 
12553 
12554 	text = '';
12555 	x = Math.round(x * 100) / 100;
12556 	y = Math.round(y * 100) / 100;
12557 	
12558 	tran = '1 0 0 1 ' + x + ' ' + y + " cm\n";
12559 
12560 	textAngle = '';
12561 	if (Math.abs(angle) > 0.001)
12562 	{
12563 	  xcos = Math.cos(angle);
12564 	  xcos = Math.round(xcos*10000) / 10000;
12565 	  xsin = Math.sin(angle);
12566 	  xsin = Math.round(xsin*10000) / 10000;
12567 	  textAngle = textAngle + xcos + ' ' + (xsin) + ' ' + (-xsin) + ' ' + (xcos) + " 0 0 cm% Rotate\n";
12568 	}
12569 
12570 	text = text + "q\n";
12571 	text = text + "BT\n";
12572 
12573 	text = text + '/' + this.pdf.fontName_() + ' ' + size + " Tf\n";
12574 	text = text + tran;
12575 	text = text + textAngle;
12576 
12577 	obj = this.pdf.parseColor_(this.fontColor);
12578 	text = text + this.pdf.colorText_(obj.color);
12579 	if (this.pdf.fontRender > 0) text = text + this.pdf.fontRender + " Tr\n";
12580 
12581 	text = text + '(' + this.pdf.escape_(xchr) + ") Tj\n";
12582 
12583 	text = text + "ET\n";
12584 	text = text + "Q\n";
12585 
12586 	this.pdf.catalog.activePage.add(text);
12587 	this.pdf.setFontName(saveFont);
12588 }
12589 //==========================================================================================
12590 //				pdfPlot$marker
12591 //==========================================================================================
12592 function pdfPlot$marker(x,y,name,size)
12593 {
12594 	var saveName, text, i;
12595 	var saveSize,saveColor;
12596 
12597 	saveName = this.pdf.font.name;
12598 	saveSize = this.pdf.font.size;
12599 	
12600 	this.pdf.setFontName('dingbats');
12601 	this.pdf.setFontSize(size);
12602 
12603 	text = String.fromCharCode(108);
12604 	name = name.toLowerCase();
12605 	if (name ==  'circle') text = String.fromCharCode(109);
12606 	if (name ==     'box') text = String.fromCharCode(110);
12607 	if (name ==   'check') text = String.fromCharCode(51);
12608 	if (name ==    'star') text = String.fromCharCode(72);
12609 	if (name ==   'arrow') text = String.fromCharCode(225);
12610 
12611 	if (name ==   'heart') text = String.fromCharCode(170);
12612 	if (name ==   'spade') text = String.fromCharCode(171);
12613 	if (name ==    'club') text = String.fromCharCode(168);
12614 	if (name == 'diamond') text = String.fromCharCode(169);
12615 
12616 	this.pdf.setFontName('dingbats');
12617 	this.pdf.placeText_A(x,y,text,'',0,'');
12618 
12619 	this.pdf.setFontName(saveName);
12620 	this.pdf.setFontSize(saveSize);
12621 }
12622 //==========================================================================================
12623 //				pdfPlot$line
12624 //==========================================================================================
12625 function pdfPlot$line(x1,y1,x2,y2)
12626 {
12627 	var weight;
12628 	var text,dy,dx,color;
12629 
12630 	x1 = Math.round(x1 * 1000) / 1000;
12631 	y1 = Math.round(y1 * 1000) / 1000;
12632 
12633 	x2 = Math.round(x2 * 1000) / 1000;
12634 	y2 = Math.round(y2 * 1000) / 1000;
12635 
12636 	weight = this.lineWeight - 1;
12637 	if (weight &lt; 0) return;
12638 
12639 	text = '';
12640 	text = text + this.shapeStyle(false);
12641 	text += x1 + ' ' + y1 + ' m' + "\n";
12642 	text += x2 + ' ' + y2 + ' l' + "\n";
12643 	text = text + this.shapeStyleEnd(true);
12644 
12645 	this.pdf.catalog.activePage.add(text);
12646 }
12647 //==========================================================================================
12648 //				pdfPlot$rectangle
12649 //==========================================================================================
12650 function pdfPlot$rectangle(x1, y1, x2, y2)
12651 {
12652 	var weight;
12653 	var text,dy,dx,color;
12654 
12655 	x1 = Math.round(x1 * 1000) / 1000;
12656 	y1 = Math.round(y1 * 1000) / 1000;
12657 	
12658 	x2 = Math.round(x2 * 1000) / 1000;
12659 	y2 = Math.round(y2 * 1000) / 1000;
12660 	
12661 	dx = x2 - x1;
12662 	dy = y2 - y1;
12663 
12664 	text = '';
12665 	text = text + this.shapeStyle(true);
12666 	text = text + x1 + ' ' + y1 + ' ' + dx + ' ' + dy + " re\n";
12667 	text = text + this.shapeStyleEnd(true);
12668 
12669 	this.pdf.catalog.activePage.add(text);
12670 }
12671 //==========================================================================================
12672 //				pdfPlot$linestring
12673 //==========================================================================================
12674 function pdfPlot$linestring(pnts)
12675 {
12676 	this.shape_(pnts,false);
12677 }
12678 //==========================================================================================
12679 //				pdfPlot$polygon
12680 //==========================================================================================
12681 function pdfPlot$polygon(pnts)
12682 {
12683 	this.shape_(pnts,true);
12684 }
12685 //==========================================================================================
12686 //				pdfPlot$shape_
12687 //==========================================================================================
12688 function pdfPlot$shape_(pnts,closed)
12689 {
12690 	var weight,text;
12691 	var x1,y1,x2,y2,i,code;
12692 
12693 	weight = this.lineWeight - 1;
12694 	if (pnts.length &lt;= 1) return;
12695 
12696 	x1 = Math.round((pnts[0].x) * 1000) / 1000;
12697 	y1 = Math.round((pnts[0].y) * 1000) / 1000;
12698 
12699 	text = this.shapeStyle(closed);
12700 	text += x1 + ' ' + y1 + ' m' + "\n";
12701 	
12702 	for (i=1; i &lt; pnts.length; ++i)
12703 	{
12704 		x2 = Math.round((pnts[i].x) * 1000) / 1000;
12705 		y2 = Math.round((pnts[i].y) * 1000) / 1000;
12706 		code = ' l';
12707 		if (pnts[i].code != 'undefined' && pnts[i].code == 'M') code = ' m';
12708 		text += x2 + ' ' + y2 + code + "\n";
12709 	}
12710 
12711 	text += this.shapeStyleEnd(closed);	
12712 	this.pdf.catalog.activePage.add(text);
12713 }
12714 //==========================================================================================
12715 //				pdfPlot$circle
12716 //==========================================================================================
12717 function pdfPlot$circle(cx,cy,radius)
12718 {
12719 	var weight;
12720 	var text,dy,dx,color;
12721 	var x1,y1,x2,y2,x3,y3,x2,y2,x3,y3;
12722 	var q1,q2,q3,q4;
12723 	var x0,y0,r,d;
12724 
12725 	cx = Math.round(cx * 1000) / 1000;
12726 	cy = Math.round(cy * 1000) / 1000;
12727 
12728 	r = Math.round(radius * 1000) / 1000;
12729 	d = r * 0.552284749;		// 4 ( sqrt(2) - 1) / 3) * Radius
12730 //------- q1 ---------
12731 
12732 	x0 = cx + r;
12733 	y0 = cy;
12734 
12735 	x1 = x0;
12736 	y1 = y0 + d;
12737 	
12738 	x3 = cx;
12739 	y3 = cy + r;
12740 	
12741 	x2 = x3 + d;
12742 	y2 = y3;	
12743 	q1 = x1 + ' ' + y1 + ' ' + x2 + ' ' + y2 + ' ' + x3 + ' ' + y3 + ' c' + "\n";
12744 
12745 //------- q2 ---------
12746 
12747 	x1 = x3 - d;
12748 	y1 = y3;
12749 	
12750 	x3 = cx - r;
12751 	y3 = cy;
12752 	x2 = x3;
12753 	y2 = y3 + d;	
12754 	q2 = x1 + ' ' + y1 + ' ' + x2 + ' ' + y2 + ' ' + x3 + ' ' + y3 + ' c' + "\n";
12755 
12756 //------- q3 ---------
12757 
12758 	x1 = x3;
12759 	y1 = y3 - d;
12760 	
12761 	x3 = cx;
12762 	y3 = cy - r;
12763 	x2 = x3 - d;
12764 	y2 = y3;	
12765 	q3 = x1 + ' ' + y1 + ' ' + x2 + ' ' + y2 + ' ' + x3 + ' ' + y3 + ' c' + "\n";
12766 
12767 //------- q4 ---------
12768 
12769 	x1 = x3 + d;
12770 	y1 = y3;
12771 	
12772 	x3 = cx + r;
12773 	y3 = cy;
12774 	x2 = x3;
12775 	y2 = y3 - d;	
12776 	q4 = x1 + ' ' + y1 + ' ' + x2 + ' ' + y2 + ' ' + x3 + ' ' + y3 + ' c' + "\n";
12777 
12778 	text = this.shapeStyle(true);
12779 	
12780 	text = text + x0 + ' ' + y0 + ' m' + "\n" + 
12781 			q1 + q2 + q3 + q4;
12782 	
12783 	text = text + this.shapeStyleEnd(true);
12784 
12785 	this.pdf.catalog.activePage.add(text);
12786 }
12787 //==========================================================================================
12788 //				pdfPlot$makeArc_
12789 //==========================================================================================
12790 function pdfPlot$makeArc_(cx,cy,radius,start,sweep,first,cone)
12791 {
12792 	var d,text;
12793 	var a1,a2,x1,y1,x2,y2;
12794 	var p0x,p0y,p1x,p1y,p2x,p2y,p3x,p3y;
12795 	var d1_x,d1_y,d2_x,d2_y,f,z;
12796 
12797 	z = 0.552284749;		// 4 ( sqrt(2) - 1) / 3) * Radius
12798 	f = sweep / 90;
12799 	z = z * f;
12800 	
12801 	d = radius * z;		// 4 ( sqrt(2) - 1) / 3) * Radius
12802 
12803 	a1 = start;
12804 	a2 = (-(90 - sweep)) + start;
12805 	a1 = (a1 / 180) * Math.PI;
12806 	a2 = (a2 / 180) * Math.PI;
12807 
12808 	x1 = radius;
12809 	y1 = 0;
12810 
12811 	x2 = 0;
12812 	y2 = radius;
12813 
12814 	d1_x = radius;
12815 	d1_y = d;
12816 
12817 	d2_x = d;
12818 	d2_y = radius;
12819 
12820 	p0x = x1 * Math.cos(a1);
12821 	p0y = x1 * Math.sin(a1);
12822 	
12823 	p1x = (d1_x * Math.cos(a1)) - (d1_y * Math.sin(a1));
12824 	p1y = (d1_x * Math.sin(a1)) + (d1_y * Math.cos(a1));
12825 	
12826 	p2x = - (y2 * Math.sin(a2));
12827 	p2y = y2 * Math.cos(a2);
12828 	
12829 	p3x = (d2_x * Math.cos(a2)) - (d2_y * Math.sin(a2));
12830 	p3y = (d2_x * Math.sin(a2)) + (d2_y * Math.cos(a2));
12831 
12832 	p0x = p0x + cx;
12833 	p0y = p0y + cy;
12834 
12835 	p1x = p1x + cx;
12836 	p1y = p1y + cy;
12837 
12838 	p2x = p2x + cx;
12839 	p2y = p2y + cy;
12840 
12841 	p3x = p3x + cx;
12842 	p3y = p3y + cy;
12843 
12844 	text = '';
12845 	if (first) 
12846 	{		
12847 		if (cone)
12848 		{
12849 			text = text +  cx + ' ' +  cy + ' m' + "\n";
12850 			text = text + p0x + ' ' + p0y + ' l' + "\n";
12851 		}
12852 		else 
12853 		{
12854 			text = text + p0x + ' ' + p0y + ' m' + "\n";
12855 		}
12856 		
12857 	}
12858 
12859 	text = text + p1x + ' ' + p1y + ' ' + p3x + ' ' + p3y + ' ' + p2x + ' ' + p2y + ' c' + "\n";
12860 
12861 	return text;
12862 }
12863 //==========================================================================================
12864 //				pdfPlot$arc
12865 //==========================================================================================
12866 function pdfPlot$arc(cx,cy,radius,start,sweep)
12867 {
12868 	var weight;
12869 	var text,dy,dx,color;
12870 	var x1,y1,x2,y2,x3,y3,x2,y2,x3,y3;
12871 	var q1,q2,q3,q4;
12872 	var x0,y0,r,d;
12873 	var xstart,xsweep,swp,first;
12874 
12875 	cx = Math.round(cx * 1000) / 1000;
12876 	cy = Math.round(cy * 1000) / 1000;
12877 
12878 	r = Math.round(radius * 1000) / 1000;
12879 	d = r * 0.552284749;		// 4 ( sqrt(2) - 1) / 3) * Radius
12880 
12881 	if (sweep &lt; 0)
12882 	{
12883 		start = start + sweep;
12884 		sweep = - sweep;
12885 	}
12886 
12887 	start = (start + 360) % 360;
12888 	if (sweep &lt; 0) sweep = (sweep + 360) % 360;
12889 	
12890 //------- q1 ---------
12891 
12892 	text = '';
12893 	text = text + this.shapeStyle(true);
12894 
12895 	xstart = start;
12896 	xsweep = sweep;
12897 	first = true;
12898 
12899 	while (xsweep > 0)
12900 	{
12901 		swp = 90;
12902 		if (swp > xsweep) swp = xsweep;
12903 		xsweep = xsweep - swp;
12904 		text = text + this.makeArc_(cx,cy,radius,xstart,swp,first);
12905 		first = false;
12906 		xstart = xstart + swp;
12907 	}
12908 	
12909 	text = text + this.shapeStyleEnd(true);
12910 
12911 	this.pdf.catalog.activePage.add(text);
12912 }
12913 //==========================================================================================
12914 //				pdfPlot$cone
12915 //==========================================================================================
12916 function pdfPlot$cone(cx,cy,radius,start,sweep)
12917 {
12918 	var weight;
12919 	var text,dy,dx,color;
12920 	var x1,y1,x2,y2,x3,y3,x2,y2,x3,y3;
12921 	var q1,q2,q3,q4;
12922 	var x0,y0,r,d;
12923 	var xstart,xsweep,swp,first;
12924 	
12925 	cx = Math.round(cx * 1000) / 1000;
12926 	cy = Math.round(cy * 1000) / 1000;
12927 
12928 	r = Math.round(radius * 1000) / 1000;
12929 	d = r * 0.552284749;		// 4 ( sqrt(2) - 1) / 3) * Radius
12930 
12931 	if (sweep &lt; 0)
12932 	{
12933 		start = start + sweep;
12934 		sweep = - sweep;
12935 	}
12936 
12937 	start = (start + 360) % 360;
12938 	if (sweep &lt; 0) sweep = (sweep + 360) % 360;
12939 
12940 //------- q1 ---------
12941 
12942 	text = '';
12943 	text = this.shapeStyle(true);
12944 
12945 	xstart = start;
12946 	xsweep = sweep;
12947 	first = true;
12948 
12949 	while (xsweep > 0)
12950 	{
12951 		swp = 90;
12952 		if (swp > xsweep) swp = xsweep;
12953 		xsweep = xsweep - swp;
12954 		text = text + this.makeArc_(cx,cy,radius,xstart,swp,first,true);
12955 		first = false;
12956 		xstart = xstart + swp;
12957 	}
12958 	
12959 	text = text + 'h ' + "\n";		// close cone;
12960 	text = text + this.shapeStyleEnd(true);
12961 
12962 	this.pdf.catalog.activePage.add(text);
12963 
12964 }
12965 //==========================================================================================
12966 //				pdfPlot$grid
12967 //==========================================================================================
12968 function pdfPlot$grid(x1, y1, x2, y2, rows, cols)
12969 {
12970 	var weight;
12971 	var text,dy,dx,color;
12972 	var dr,dc,r,c,tx,ty;
12973 	var rows;
12974 
12975 	x1 = Math.round(x1 * 1000) / 1000;
12976 	y1 = Math.round(y1 * 1000) / 1000;
12977 	
12978 	x1 = Math.round(x1 * 1000) / 1000;
12979 	y1 = Math.round(y1 * 1000) / 1000;
12980 
12981 	x2 = Math.round(x2 * 1000) / 1000;
12982 	y2 = Math.round(y2 * 1000) / 1000;
12983 	
12984 	dx = x2 - x1;
12985 	dy = y2 - y1;
12986 	weight = this.lineWeight;
12987 
12988 	text = '';
12989 	text = text + this.shapeStyle(true);
12990 	text = text + x1 + ' ' + y1 + ' ' + dx + ' ' + dy + " re\n";
12991 
12992 	if (cols &lt; 1) cols = 1;
12993 	if (rows &lt; 1) rows = 1;
12994 
12995 	dr = dy / rows;
12996 	dc = dx / cols;
12997 	
12998 	ty = y1;
12999 	tx = x1;
13000 
13001 	for (r = 0; r &lt; rows; ++r)
13002 	{
13003 		ty += dr;
13004 		text = text + x1 + ' ' + ty + " m\n";
13005 		text = text + x2 + ' ' + ty + " l\n";
13006 	}
13007 
13008 	for (c = 0; c &lt; cols; ++c)
13009 	{
13010 		tx += dc;
13011 		text = text + tx + ' ' + y1 + " m\n";
13012 		text = text + tx + ' ' + y2 + " l\n";
13013 	}
13014 
13015 	text = text + this.shapeStyleEnd(true);
13016 //	text = text + "S\n";	
13017 	this.pdf.catalog.activePage.add(text);
13018 }
13019 
13020 //==========================================================================================
13021 //				pdfPlot$shapeStyle
13022 //==========================================================================================
13023 function pdfPlot$shapeStyle(closed)
13024 {
13025 	var text,weight;
13026 	
13027 	text = 'q' + "\n";
13028 	
13029 	weight = this.lineWeight - 1;
13030 	if (weight >= 0) text += weight + ' w' + "\n";
13031 
13032 	text += this.pdf.colorText_(this.color).toUpperCase();
13033 	text += this.lineStyleText_(this.lineStyle);
13034 	text += this.transparentText_();
13035 
13036 	if (! closed) return text;
13037 
13038 	text += this.pdf.colorText_(this.fillColor);
13039 	if (this.grayscale > 0) text = text + this.grayscale + ' g' + "\n";
13040 
13041 	return text;
13042 }
13043 //==========================================================================================
13044 //				pdfPlot$shapeStyleEnd
13045 //==========================================================================================
13046 function pdfPlot$shapeStyleEnd(closed)
13047 {
13048 	var text,weight;
13049 
13050 	text = '';
13051 	weight = this.lineWeight - 1;
13052 	if (! closed) 
13053 	{
13054 		if (weight &lt; 0) return '';
13055 		return 'S' + "\n";
13056 	}
13057 
13058 	if ( ( (this.grayscale > 0) || (this.fillColor != '')))
13059 	{
13060 		if (weight &lt; 0)
13061 		{
13062 			 text += 'F' + "\n";
13063 		}
13064 		else 
13065 		{
13066 			text += 'B' + "\n";
13067 		}
13068 	}
13069 	else 
13070 	{
13071 		if (weight &lt; 0) return '';
13072 		text += 'S' + "\n";
13073 	}
13074 
13075 	text += 'Q' + "\n";
13076 
13077 	return text;
13078 }
13079 //==========================================================================================
13080 //				pdfPlot$transparentText_
13081 //==========================================================================================
13082 function pdfPlot$transparentText_()
13083 {
13084 	var text,index;
13085 
13086 	if (! this.transparent) this.transparent = '';
13087 	if (this.transparent == '') return '';
13088 //	if (this.transparent == 1) return '';
13089 
13090 	index = this.pdf.catalog.addExtGState('' + this.transparent);
13091 	text = '/GS' + index + ' gs' + "\n";
13092 	return text;
13093 
13094 }
13095 //==========================================================================================
13096 //				pdfPlot$lineStyleText_
13097 //==========================================================================================
13098 function pdfPlot$lineStyleText_(name)
13099 {
13100 	name = '' + name;
13101 	name = name.toLowerCase();
13102 
13103 	if (name == '') return "[] 0 d\n";
13104 	if (name == 'dot') return "[1 2] 1 d\n";
13105 	if (name == 'dash') return "[4 2] 2 d\n";
13106 	if (name == 'solid') return "[] 0 d\n";
13107 
13108 
13109 
13110 	if (name.indexOf('[') &lt; 0) return "[] 0 d\n";	// solid	
13111 	return name + " d\n";		// pattern
13112 }
13113 //==========================================================================================
13114 //				pdfPlot$setLineStyle
13115 //==========================================================================================
13116 function pdfPlot$setLineStyle(value)
13117 {
13118 	this.lineStyle = "" + value;
13119 	this.lineStyle = this.lineStyle.toLowerCase();
13120 }
13121 //==========================================================================================
13122 //				pdfPlot$setLineColor
13123 //==========================================================================================
13124 function pdfPlot$setLineColor(value)
13125 {
13126     var obj;
13127     
13128     obj = this.pdf.parseColor_(value);
13129     this.color = obj.color;
13130     this.transparent = obj.opaque;
13131 
13132 }
13133 //==========================================================================================
13134 //				pdfPlot$setFillColor
13135 //==========================================================================================
13136 function pdfPlot$setFillColor(value)
13137 {
13138 	var g,obj;
13139 	
13140 	this.grayscale = 0;
13141 	this.fillColor = 0;
13142 	obj = this.pdf.parseColor_(value);
13143 	this.transparent = obj.opaque;
13144 
13145 	g = parseFloat(value);
13146 	if (isNaN(g) || (g &lt;= 0) || (g > 1))
13147 	{
13148 	    this.fillColor = obj.color;
13149 	    this.garyscale = obj.opaque;
13150 	}
13151 	else 
13152 	{
13153 		this.grayscale = g;
13154 		this.fillColor = 0xfff00;	// needed for grayscale
13155 	}
13156 }
13157 //==========================================================================================
13158 //				pdfPlot$setLineWeight
13159 //==========================================================================================
13160 function pdfPlot$setLineWeight(value)
13161 {
13162 	this.lineWeight = 1;
13163 	value = parseInt(value);
13164 	if (isNaN(value)) return;
13165 	this.lineWeight = value;
13166 
13167 }
13168 //==========================================================================================
13169 //				pdfPlot$setTransparent
13170 //==========================================================================================
13171 function pdfPlot$setTransparent(value)
13172 {
13173 	if (! value) value = '';
13174 	this.transparent = '' + value;
13175 }
13176 //==========================================================================================
13177 //				pdf$clipBegin
13178 //==========================================================================================
13179 function pdfPlot$clipBegin(x1, y1, x2, y2)
13180 {
13181 	var weight;
13182 	var text,dy,dx,color;
13183 
13184 	if (! this.clip) return;
13185 	
13186 	x1 = Math.round(x1 * 1000) / 1000;
13187 	y1 = Math.round(y1 * 1000) / 1000;
13188 
13189 	x2 = Math.round(x2 * 1000) / 1000;
13190 	y2 = Math.round(y2 * 1000) / 1000;
13191 	
13192 	dx = x2 - x1;
13193 	dy = y2 - y1;
13194 
13195 	text = "q\n";
13196 	text = text + "W\n";
13197 	text = text + x1 + ' ' + y1 + ' ' + dx + ' ' + dy + " re\n";
13198 	text = text + "n\n";
13199 	this.pdf.catalog.activePage.add(text);
13200 }
13201 //==========================================================================================
13202 //				pdfPlot$clipEnd
13203 //==========================================================================================
13204 function pdfPlot$clipEnd()
13205 {
13206 	var text;
13207 
13208 	if (! this.clip) return;
13209 	
13210 
13211 	text = "Q\n";
13212 	this.pdf.catalog.activePage.add(text);
13213 }
13214 //==========================================================================================
13215 //				pdfPlot$setFontSize
13216 //==========================================================================================
13217 function pdfPlot$setFontSize(size)
13218 {
13219 	this.fontSize = parseFloat(size);
13220 	this.pdf.setFontSize(size);
13221 }
13222 //==========================================================================================
13223 //				pdfPlot$setFontColor
13224 //==========================================================================================
13225 function pdfPlot$setFontColor(color)
13226 {
13227 	this.fontColor = color;
13228 	this.pdf.setFontColor(color);
13229 }
13230 //==========================================================================================
13231 //				pdfPlot$setFontName
13232 //==========================================================================================
13233 function pdfPlot$setFontName(name)
13234 {
13235 	this.fontName = name;
13236 	this.pdf.setFontName(name);
13237 }
13238 
13239 <font color=blue>"use strict";
13240 //========================================================================================
13241 //								Html.js
13242 //	Author: Clifford L. Collins				Date: Feb 2013
13243 //-----------------------------------------------------------------------------------------
13244 //	Collins Software
13245 //	7710 Janak Drive, Houston Texas 77055
13246 //	http://CollinsSoftware.com
13247 //=========================================================================================
13248 
13249 //=========================================================================================
13250 //									html
13251 //=========================================================================================
13252 function html$(sys,data,parent)
13253 {
13254 	var NODE_TEXT = 3;
13255 	var NODE_TAG  = 1;
13256 	var tag,i,name;
13257 
13258 	this.sys			= sys;
13259 	this.holdTag			= false;
13260 
13261 	this.PDF_eventPrefix		= 'pdf';
13262 	this.trace_border		= false;
13263 	this.trace_mathml		= false;
13264 	this.convertImageCommand = '';
13265 	this.firstPdf			= null;
13266 	this.onWordWidth		= null;
13267 	this.onCharWidth		= null;
13268 
13269 	this.database			= '';
13270 	this.questionType		= 'mc';
13271 	this.outputType			= '';
13272 	this.formatRow			= true;
13273 
13274 //	this.convertImageCommand = 'http://your-site/cgi-bin/CollinsImage.cgi?input={href}&format=.jpg';
13275 
13276 	this.parent			= null;
13277 	if (arguments.length > 3) this.parent = parent;
13278 
13279 	if (parent == null)
13280 	{
13281 		 this.storage = new htmlstorage$(this);		// global macro storage
13282 	}
13283 	else
13284 	{
13285 		 this.storage = parent.storage;
13286 	}
13287 	
13288 	this.isLoop			= false;
13289 	this.nowrap			= false;
13290 	this.graphicScale		= 110 / 72;
13291 	this.resolved			= null;
13292 
13293 	this.document			= null;
13294 	this.cnn			= null;
13295 	this.keepUnresolved		= true;
13296 
13297 	this.remove_A			= true;
13298 
13299 	this.default_fontName = 'helvetica';
13300 //	this.default_fontName = 'times';
13301 	this.default_fontSize = 10;
13302 
13303 	this.initializeForeignOutput	= html$initializeForeignOutput;
13304 
13305 	this.clear			= html$clear;	
13306 	this.resize			= html$resize;
13307 	this.writeToPdf			= html$writeToPdf;
13308 	this.writeToPdfScale		= html$writeToPdfScale;
13309 	this.writeToPdfFit		= html$writeToPdfFit;
13310 	this.writePageBreak		= html$writePageBreak;
13311 	this.getPdfHeight		= html$getPdfHeight;
13312 
13313 	this.parse			= html$parse;
13314 	this.loadFromUrl		= html$loadFromUrl;
13315 	this.loadFromFile		= html$loadFromFile;
13316 
13317 	this.setFontName		= html$setFontName;
13318 
13319 	this.extractFileName		= html$extractFileName;
13320 	this.setStyle			= html$setStyle;
13321 	this.check_fit			= html$check_fit;
13322 
13323 	this.pixelToPoint		= html$pixelToPoint;
13324 	this.pointToPixel		= html$pointToPixel;
13325 
13326 	this.pixelToInch_x		= html$pixelToInch_x;
13327 	this.pixelToInch_y		= html$pixelToInch_y;
13328 
13329 	this.getElementsByTagName	= html$getElementsByTagName;
13330 	this.getElementsByTagName_A	= html$getElementsByTagName_A;
13331 	
13332 	this.tableAdjustCells_		= html$tableAdjustCells_;
13333 	this.getAll				= html$getAll;
13334 	this.getElements		= html$getElements;
13335 	
13336 	this.check_P			= html$check_P;
13337 	this.parse_A			= html$parse_A;
13338 	this.addText_			= html$addText_;
13339 	this.parseTag_			= html$parseTag_;
13340 
13341 	this.skipTag			= html$skipTag;
13342 	this.skipScript_		= html$skipScript_;
13343 	this.skipScript_A		= html$skipScript_A;
13344 	this.addOutline			= html$addOutline;
13345 
13346 	this.loadStyle_		= html$loadStyle_;
13347 	this.loadGraphic_		= html$loadGraphic_;
13348 	this.loadHtml_			= html$loadHtml_;
13349 	this.processStart_		= html$processStart_;
13350 	this.processEnd_		= html$processEnd_;
13351 	this.createElement_		= html$createElement_;
13352 	this.end_			= html$end_;
13353 	this.end_TR			= html$end_TR;
13354 	this.end_TD			= html$end_TD;
13355 	this.end_TH			= html$end_TH;
13356 	this.end_TIMELINE		= html$end_TIMELINE;
13357 
13358 	this.findParent_		= html$findParent_;
13359 	this.defineTable_		= html$defineTable_;
13360 	this.defineTable_A		= html$defineTable_A;
13361 
13362 	this.setOutput_			= html$setOutput_;
13363 	this.getSize			= html$getSize;
13364 	
13365 	this.parseXml_			= html$parseXml_;
13366 	this.startXml_			= html$startXml_;
13367 	this.endXml_			= html$endXml_;
13368 	this.mathML			= html$mathML;
13369 	this.mathML_A			= html$mathML_A;
13370 	this.mathML_decode		= html$mathML_decode;
13371 	this.mathML_simpleChildren	= html$mathML_simpleChildren;
13372 	
13373 	this.start_MAP			= html$start_MAP;
13374 	this.start_AREA			= html$start_AREA;
13375 	this.start_LINK			= html$start_LINK;
13376 
13377 	this.start_BR			= html$start_BR;
13378 	this.start_META			= html$start_META;
13379 	this.start_TITLE		= html$start_TITLE;
13380 	this.start_BODY			= html$start_BODY;
13381 
13382 	this.start_DT			= html$start_DT;
13383 	this.start_DD			= html$start_DD;
13384 	this.start_DL			= html$start_DL;
13385 
13386 	this.start_OTHER		= html$start_OTHER;
13387 	this.start_LABEL		= html$start_LABEL;
13388 	this.start_P			= html$start_P;
13389 	this.start_A			= html$start_A;
13390 	this.start_FORM			= html$start_FORM;
13391 	this.start_INPUT		= html$start_INPUT;
13392 	this.start_TEXTAREA		= html$start_TEXTAREA;
13393 	this.start_SELECT		= html$start_SELECT;
13394 	this.start_OPTION		= html$start_OPTION;
13395 	this.start_LI			= html$start_LI;
13396 	this.start_BLOCKQUOTE		= html$start_BLOCKQUOTE;
13397 	this.start_UL			= html$start_UL;
13398 	this.start_OL			= html$start_OL;
13399 	this.start_DIV			= html$start_DIV;
13400 	this.start_FONT			= html$start_FONT;
13401 	this.start_SMALL		= html$start_SMALL;
13402 	this.start_BIG			= html$start_BIG;
13403 	this.start_SPAN			= html$start_SPAN;
13404 	this.start_PAGEBREAK		= html$start_PAGEBREAK;
13405 
13406 	this.start_TABLE		= html$start_TABLE;
13407 	this.start_THEAD		= html$start_THEAD;
13408 	this.start_TFOOT		= html$start_TFOOT;
13409 	this.start_TBODY		= html$start_TBODY;
13410 	this.start_TR			= html$start_TR;
13411 	this.start_TD			= html$start_TD;
13412 	this.start_TH			= html$start_TH;
13413 
13414 	this.start_IMG			= html$start_IMG;
13415 	this.start_MACRO		= html$start_MACRO;
13416 	this.start_PRE			= html$start_PRE;
13417 	this.start_ECHO			= html$start_ECHO;
13418 	this.start_TRACE		= html$start_TRACE;
13419 
13420 	this.findMacro			= html$findMacro;
13421 
13422 	this.start_B			= html$start_B;
13423 	this.start_STRONG		= html$start_STRONG;
13424 	this.start_I			= html$start_I;
13425 	this.start_EM			= html$start_EM;
13426 	this.start_U			= html$start_U;
13427 
13428 	this.start_H			= html$start_H;
13429 	this.start_HR			= html$start_HR;
13430 	
13431 	this.start_FRAMESET		= html$start_FRAMESET;
13432 	this.start_FRAME		= html$start_FRAME;
13433 	this.start_IFRAME		= html$start_IFRAME;
13434 
13435 	this.start_DOC			= html$start_DOC;
13436 
13437 	this.start_CONFIG		= html$start_CONFIG;
13438 	this.start_GROUP		= html$start_GROUP;
13439 	this.start_LOOP			= html$start_LOOP;
13440 	this.start_GRAPHIC		= html$start_GRAPHIC;
13441 	this.start_RAISE		= html$start_RAISE;
13442 	this.start_DIVIDE		= html$start_DIVIDE;
13443 	this.start_BY			= html$start_BY;
13444 	this.start_POWER		= html$start_POWER;
13445 
13446 	this.start_TIMELINE		= html$start_TIMELINE;
13447 	this.start_SCHEDULE		= html$start_SCHEDULE;
13448 
13449 	this.start_CALENDAR		= html$start_CALENDAR;
13450 	this.start_EVENT		= html$start_EVENT;
13451 
13452 	this.start_MATRIX		= html$start_MATRIX;
13453 	this.start_CELL			= html$start_CELL;
13454 	this.start_ROOT			= html$start_ROOT;
13455 	this.start_QUANTITY		= html$start_QUANTITY;
13456 	this.start_EXPONENT		= html$start_EXPONENT;
13457 
13458 	this.start_INTEGRAL		= html$start_INTEGRAL;
13459 	this.start_MIN			= html$start_MIN;
13460 	this.start_MAX			= html$start_MAX;
13461 
13462 	this.start_SUMMATION		= html$start_SUMMATION;
13463 	this.start_RANGE		= html$start_RANGE;
13464 
13465 	this.start_SET			= html$start_SET;
13466 	this.start_SUB			= html$start_SUB;
13467 	this.start_SUP			= html$start_SUP;
13468 	this.start_ROW			= html$start_ROW;
13469 
13470 	this.start_MC			= html$start_MC;
13471 	this.start_E			= html$start_E;
13472 	this.start_TF			= html$start_TF;
13473 	this.start_FIB			= html$start_FIB;
13474 	this.start_PDF			= html$start_PDF;
13475 	this.start_HTML			= html$start_HTML;
13476 
13477 	this.start_REPORT		= html$start_REPORT;
13478 	this.start_REPORTGROUP		= html$start_REPORTGROUP;
13479 	this.start_REPORTTABLE		= html$start_REPORTTABLE;
13480 	this.start_DETAIL		= html$start_DETAIL;
13481 	this.start_HEADER		= html$start_HEADER;
13482 	this.start_FOOTER		= html$start_FOOTER;
13483 	this.start_COLUMN		= html$start_COLUMN;
13484 	this.start_RECORDS		= html$start_RECORDS;
13485 	this.start_EVAL			= html$start_EVAL;
13486 
13487 	this.dump			= html$dump;
13488 	this.toString			= html$toString;
13489 	this.toString_A			= html$toString_A;
13490 	this.space_			= html$space_;
13491 	this.decode_			= html$decode_;
13492 
13493 	this.calendarToPdf		= html$calendarToPdf;
13494 	this.timelineToPdf		= html$timelineToPdf;
13495 	this.timelinePlace		= html$timelinePlace;
13496 	this.scheduleToPdf		= html$scheduleToPdf;
13497 	
13498 	this.groupToPdf			= html$groupToPdf;
13499 
13500 	this.reportToPdf		= html$reportToPdf;
13501 	this.reportToPdf_A		= html$reportToPdf_A;
13502 
13503 	this.textToPdf			= html$textToPdf;
13504 	this.tabReplace			= html$tabReplace;
13505 
13506 	this.reportWriteDetail		= html$reportWriteDetail;
13507 	this.reportWriteDetail_A	= html$reportWriteDetail_A;
13508 	this.reportWriteDetail_B	= html$reportWriteDetail_B;
13509 
13510 	this.reportGroupHeader		= html$reportGroupHeader;
13511 	this.reportGroupFooter		= html$reportGroupFooter;
13512 
13513 	this.reportWriteDetailHeader	= html$reportWriteDetailHeader;
13514 
13515 	this.resolve			= html$resolve;
13516 	this.resolve_A			= html$resolve_A;
13517 	this.resolveTag			= html$resolveTag;
13518 	this.getResolve			= html$getResolve;
13519 	this.resolveFunction		= html$resolveFunction;
13520 	this.resolveWindow		= html$resolveWindow;
13521 
13522 	this.formatDate			= html$formatDate;
13523 	this.formatTime			= html$formatTime;
13524 	this.formatDateTime		= html$formatDateTime;
13525 	
13526 	this.fromCsv			= html$fromCsv;
13527 	this.fromCsv_A			= html$fromCsv_A;
13528 
13529 	this.sqlList			= html$sqlList;
13530 	this.sqlList_A			= html$sqlList_A;
13531 	this.sqlValue			= html$sqlValue;
13532 	this.sqlValueAll		= html$sqlValueAll;
13533 
13534 	this.imageFilename		= html$imageFilename;
13535 
13536 	this.groupReplaceValue		= html$groupReplaceValue;
13537 
13538 	this.executeLoop		= html$executeLoop;
13539 	this.getImageSize		= html$getImageSize;
13540 	this.getImageSize_A		= html$getImageSize_A;
13541 	this.jpegSize			= html$jpegSize;
13542 
13543 	this.filename_size		= html$filename_size;
13544 
13545 	this.trace			= html$trace;
13546 	this.traceNode			= html$traceNode;
13547 	this.trace_A			= html$trace_A;
13548 
13549 	this.init			= html$init;
13550 	this.getHeight			= html$getHeight;
13551 	this.getWidth			= html$getWidth;
13552 	this.isUrl_			= html$isUrl_;
13553 	this.removeScriptComments_	= html$removeScriptComments_;
13554 	
13555 	this.addHours			= html$addHours;
13556 	this.addDays			= html$addDays;
13557 	this.getDaysInMonth		= html$getDaysInMonth;
13558 	this.addDuration		= html$addDuration;
13559 
13560 	this.r8				= html$r8;
13561 	this.size_4			= html$size_4;
13562 	this.trim			= html$trim;
13563 	this.comma			= html$comma;
13564 	this.find			= html$find;
13565 	this.radian			= html$radian;
13566 	this.colorByCount		= html$colorByCount;
13567 	this.inlist			= html$inlist;
13568 	this.compress			= html$compress;	
13569 	this.parseFontSize		= html$parseFontSize;
13570 	
13571 	this.getMacro			= html$getMacro;
13572 	this.init(10);
13573 
13574 	if (arguments.length &lt; 2) return;
13575 
13576 //	if (data == '') return;
13577 //	this.parse(data);
13578 }
13579 //===================================================
13580 //			html$getAll
13581 //===================================================
13582 function html$getAll(tag)
13583 {
13584 	var all;
13585 
13586 	all = new Array();
13587 	this.body.getAll(all,[]);
13588 	return all;
13589 
13590 }
13591 //===================================================
13592 //			html$getElements
13593 //===================================================
13594 function html$getElements(tags)
13595 {
13596 	var all;
13597 
13598 	all = new Array();
13599 	this.body.getAll(all,tags);
13600 	return all;
13601 
13602 }
13603 //===================================================
13604 //			html$getMacro
13605 //===================================================
13606 function html$getMacro()
13607 {
13608 	var i,m,list;
13609 
13610 	list = new Array();
13611 	for (i=0; i &lt; this.macros.length; ++i)
13612 	{
13613 		m = this.macros[i];
13614 		list[m.id] = m.bin.last;
13615 	}
13616 
13617 	return list;
13618 }
13619 //===================================================
13620 //                   html$addOutline
13621 //===================================================
13622 function html$addOutline(outline,xpos,ypos)
13623 { 
13624 	var i,list,text,zoomFactor,title,a,owner,zoom;
13625 	var x,y,tx,ty,pageLength,topMargin,leftMargin;
13626 
13627 	pageLength = this.pdf.pageLength * 110;
13628 
13629 	topMargin = pageLength - (this.pdf.ymax / 72 * 110);
13630 	leftMargin = this.pdf.xmin / 72 * 110;
13631 
13632 	xpos = leftMargin + xpos;
13633 	ypos = topMargin + ypos;
13634 	
13635 	zoomFactor = 1;
13636 	owner = '';
13637 
13638 	i = outline.indexOf(';');
13639 	if (i >= 0)
13640 	{
13641 		list = outline.split(';');
13642 		
13643 		for (i = 0; i &lt; list.length; ++i)
13644 		{
13645 			text = this.trim(list[i]);
13646 			if (text == '') continue;
13647 			a = text.split(':');
13648 			if (a.length &lt; 2) continue;
13649 
13650 			name = this.trim(a[0]);
13651 			name = name.toLowerCase();
13652 			text = this.trim(a[1]);
13653 			
13654 			if (name == 'title')
13655 			{
13656 				title = this.trim(a[1]);
13657 				if (title != '') outline = title;
13658 			}
13659 
13660 			if (name == 'top')
13661 			{
13662 				y = parseInt(text);
13663 				if (isNaN(y)) continue;
13664 				if (text.substr(0,1) == '+') y = ypos + y;
13665 				if (text.substr(0,1) == '-') y = ypos + y;		
13666 				ypos = y;
13667 			}
13668 
13669 			if (name == 'left')
13670 			{
13671 				x = parseInt(text);
13672 				if (isNaN(x)) continue;
13673 				if (text.substr(0,1) == '+') x = xpos + x;
13674 				if (text.substr(0,1) == '-') x = xpos + x;		
13675 				xpos = x;
13676 			}
13677 
13678 			if (name == 'zoom')
13679 			{
13680 				y = parseInt(text);
13681 				if (isNaN(y)) continue;
13682 				if (y  &lt; 10) continue ;
13683 				if ( y > 6000) continue;
13684 				zoomFactor = y / 100;
13685 			}
13686 
13687 			if (name == 'owner')
13688 			{
13689 				owner = this.trim(a[1]) + '~';
13690 			}
13691 		}
13692 	}
13693 
13694 	tx = xpos / 110 * 72;
13695 	ty = (pageLength - ypos) / 110 * 72;
13696 
13697 	this.pdf.addOutline(owner + outline,tx,ty,zoomFactor);	
13698 }
13699 //===================================================
13700 //                   html$isUrl_
13701 //===================================================
13702 function html$isUrl_(filename)
13703 { 
13704 	var temp;
13705 
13706 	if (filename.substr(0,7).toUpperCase() == 'BASE64,')	return false;
13707 	if (filename.substr(0,4).toUpperCase() == 'HEX,')	return false;
13708 	if (filename.substr(0,8).toUpperCase() == 'ASCII85,')	return false;
13709 	if (filename.substr(0,7).toUpperCase() == 'CANVAS:')	return false;
13710 	if ((filename.substr(0,5).toUpperCase() == 'FILE,'))	return false;
13711 
13712 	if (this.sys.isClient) return true;
13713 
13714 	temp = filename.toLowerCase();
13715 	if (temp.substr(0,6) == 'https:') return true;
13716 	if (temp.substr(0,5) == 'http:') return true;
13717 	
13718 	return false;
13719 }
13720 //=====================================================
13721 //		html$clear
13722 //=====================================================
13723 function html$clear()
13724 {
13725 
13726 	this.init(this.default_fontSize);
13727 
13728 }
13729 //=====================================================
13730 //		html$getHeight
13731 //=====================================================
13732 function html$getHeight()
13733 {
13734 	return this.body.offsetHeight;
13735 }
13736 //=====================================================
13737 //		html$getWidth
13738 //=====================================================
13739 function html$getWidth()
13740 {
13741 	return this.body.offsetWidth;
13742 }
13743 //=====================================================
13744 //		html$trace
13745 //=====================================================
13746 function html$trace()
13747 {
13748 	var text;
13749 	text = this.trace_A(this.body,0,'',false);
13750 	return text;
13751 }
13752 //=====================================================
13753 //		html$traceNode
13754 //=====================================================
13755 function html$traceNode()
13756 {
13757 	var text;
13758 
13759 	text = this.trace_A(this.body,0,'',true);
13760 	return text;
13761 }
13762 //=====================================================
13763 //		html$trace_A
13764 //=====================================================
13765 function html$trace_A(ele,level,pname,nodes)
13766 {
13767 	var text,cname;
13768 
13769 	cname = pname;
13770 
13771 	text = '';
13772 
13773 	if ((nodes && ele.isNode()) || (! nodes))
13774 	{
13775 		cname = ele.tagName;
13776 		if (pname != '') cname = pname + '.' + ele.tagName;
13777 	
13778 		if (ele.nodeType == 3)
13779 		{
13780 			 text = level + ') ' + cname + ' "' + ele.text + '"\r\n';
13781 		}
13782 		else text = level + ') ' + cname + ' x: ' + ele.offsetLeft + ' y: ' + ele.offsetTop + ' height: ' + ele.offsetHeight + ' width: ' + ele.offsetWidth + '\r\n';
13783 	}
13784 	
13785 	if (ele.firstChild != null) text += this.trace_A(ele.firstChild,level+1,cname,nodes);
13786 	if (ele.nextSibling != null) text += this.trace_A(ele.nextSibling,level,pname,nodes);
13787 
13788 	return text;
13789 
13790 }
13791 //============================================================================================
13792 //			html$loadFromUrl
13793 //============================================================================================
13794 function html$loadFromUrl(url)
13795 {
13796 	var data;
13797 
13798 	this.document = new htmlDocument$(this,url);
13799 	data = this.document.read();
13800 	this.parse('' + data);
13801 }
13802 //============================================================================================
13803 //			html$loadFromFile
13804 //============================================================================================
13805 function html$loadFromFile(url)
13806 {
13807 	var data;
13808 	
13809 	data = this.sys.fileRead(url);
13810 	this.parse(data);
13811 }
13812 //============================================================================================
13813 //			html$init
13814 //============================================================================================
13815 function html$init(fontSize)
13816 {		
13817 
13818 	var fsize;
13819 	
13820 	fsize = parseFloat(fontSize);
13821 	if (isNaN(fsize)) fsize = this.default_fontSize;
13822 	
13823 	this.level = new Object();
13824 	this.level.B = 0;
13825 	this.level.I = 0;
13826 	this.level.U = 0;
13827 	this.level.SUB = 0;
13828 	this.level.SUP = 0;
13829 
13830 	this.macros		= new Array();
13831 	this.reports		= new Array();
13832 	this.tables		= new Array();
13833 	this.maps		= new Array();
13834 	this.links		= new Array();
13835 	this.metas		= new Array();
13836 	this.framesets		= new Array();
13837 	this.recordsets		= new Array();
13838 	this.scripts		= new Array();
13839 	
13840 	this.marginLeft		= 0;
13841 	this.marginRight	= 0;
13842 	this.marginTop		= 0;
13843 	this.marginBottom	= 0;
13844 	
13845 	this.title		= '';
13846 	this.script		= '';
13847 
13848 	this.bpi		= 110;		// bits per inch;
13849 	this.imageScale		= 1;		// scale factor for all images
13850 	this.factor		= 1;		// scale fortor for all elements;
13851 
13852 	this.fontName		= this.default_fontName;	// default font, select 1 of times, courier, or Helvetica
13853 	this.graphic		= '';
13854 	this.group		= '';
13855 	this.loop		= '';
13856 
13857 	this.out		= null;
13858 	this.pageHeader		= '';
13859 	this.pageFooter		= '';
13860 	this.column		= '';
13861 	this.event		= '';
13862 	
13863 	this.rs			= null;
13864 
13865 	this.activeFontName	= '';
13866 	this.setFontName(this.fontName,true);
13867 
13868 	this.style		= new htmlStyle$(this,'font-size:10; font-color:black',null);		// active Style
13869 
13870 	this.href		= '';
13871 	this.href_target	= '';
13872 	this.href_title		= '';
13873 
13874 	this.maxWidth		= 8.25 * this.bpi;
13875 	this.x			= 0;
13876 	this.y			= 0;
13877 
13878 	this.font		= null;
13879 	this.fonts		= new Array();
13880 	this.fontCount		= 0;
13881 
13882 	this.css		= new htmlCss$(this);
13883 	this.pages = new Array();
13884 
13885 	this.x			= 0;
13886 	this.y			= 0;
13887 	this.body = new htmlElement$(this,'body',0);
13888 
13889 	this.body.style	= new htmlStyle$(this,'font-family:' + this.fontName + ';font-size:' + fsize + 'pt;color:black',null);
13890 	this.body.setActive();
13891 
13892 	this.activeElement	= this.body;
13893 	this.fontSize		= fsize;	
13894 	this.nowrap		= false;
13895 }
13896 //============================================================
13897 //			html$setFontName
13898 //============================================================
13899 function html$setFontName(name,force)
13900 {
13901 	var i;
13902 	
13903 	if ((! force) && (name == this.activeFontName)) return;
13904 
13905 	if (name == '') name = this.default_fontName;
13906 	name = '' + name;
13907 	name = name.toLowerCase();
13908 	this.activeFontName = name;
13909 	this.fontName = name;
13910 	
13911 	if (this.pdf != null)
13912 	{
13913 		this.pdf.setFontName(name,this.font_widths);
13914 		return;
13915 	}
13916 
13917 //--------- Times Roman ----------
13918 	
13919 	if (name == 'times')
13920 	{
13921 	this.activeFontName = 'Times';
13922 
13923 	this.font_widths = new Array(531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,
13924 		531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,253,
13925 		335,409,503,503,835,2,179,333,333,501,565,251,338,250,280,501,501,
13926 		501,501,501,501,501,501,501,501,276,276,0,566,566,444,927,726,669,
13927 		669,727,612,559,727,727,333,389,726,614,896,729,727,558,727,671,559,
13928 		614,727,727,952,726,726,614,331,276,331,464,512,333,444,501,444,501,
13929 		446,335,503,503,278,278,503,278,784,503,503,503,503,333,391,278,503,
13930 		503,747,504,504,446,0,0,483,545,350,503,350,333,503,446,1009,503,
13931 		503,335,995,561,335,897,350,616,350,350,333,333,446,446,350,503,1011,
13932 		335,989,389,335,727,352,446,727,242,335,503,503,503,503,198,503,335,
13933 		766,276,503,568,335,766,333,402,568,301,301,317,513,455,250,333,299,
13934 		312,503,756,756,756,446,727,727,727,727,727,727,897,673,616,616,616,
13935 		616,335,335,335,335,727,727,727,727,727,727,727,568,727,727,727,727,
13936 		727,727,559,503,448,448,448,448,448,673,444,444,0,1227,444,444,278,
13937 		278,278,278,503,503,503,503,503,503,503,570,503,503,503,503,503,503,
13938 		503,503);
13939 		return;
13940 	}
13941 
13942 	if (name == 'courier')
13943 	{
13944 		this.activeFontName = 'Courier';
13945 
13946 		this.font_widths = new Array();
13947 		for (i=0; i &lt; 256; ++i)
13948 		{
13949 			this.font_widths[i] = 600;
13950 		}
13951 		return;
13952 	}
13953 
13954 //--------- Helvetica ----------
13955 
13956 //	this.activeFontName = 'Helvetica';
13957 
13958 	this.font_widths = new Array(750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,
13959 			750,750,750,750,750,750,750,750,750,750,750,750,
13960 			750,750,278,278,355,556,556,889,667,191,333,333,
13961 			389,584,278,333,278,278,556,556,556,556,556,556,556,556,556,556,278,278,584,584,584,556,
13962 			1015,667,667,722,722,667,611,778,722,278,500,667,556,833,722,778,667,778,722,667,611,722,
13963 			667,944,667,667,611,278,278,278,469,556,333,556,556,500,556,556,278,556,556,222,222,500,
13964 			222,833,556,556,556,556,333,500,278,556,500,722,500,500,500,334,260,334,584,750,556,750,
13965 			222,556,333,1000,556,556,333,1000,667,333,1000,750,611,750,750,222,222,333,333,350,556,
13966 			1000,333,1000,500,333,944,750,500,667,278,333,556,556,556,556,260,556,333,737,370,556,
13967 			584,333,737,552,400,549,333,333,333,576,537,278,333,333,365,556,834,834,834,611,667,667,
13968 			667,667,667,667,1000,722,667,667,667,667,278,278,278,278,722,722,778,778,778,778,778,584,
13969 			778,722,722,722,722,667,667,611,556,556,556,556,556,556,889,500,556,556,556,556,278,278,
13970 			278,278,556,556,556,556,556,556,556,549,611,556,556,556,556,500,556,500);
13971 }
13972 //============================================================
13973 //                          html$getDaysInMonth
13974 //============================================================
13975 function html$getDaysInMonth(m,y) 
13976 {
13977 	var daysInMonth = new Array(31,28,31,30,31,30,31,31,30,31,30,31);
13978 	var n;
13979 	var a;
13980 	
13981 	n = daysInMonth[m];
13982 	if (m != 1) return n;		// not Feb.
13983 
13984 	a = 0;
13985 	if ((y % 4) == 0) a = 1;	// not a leap year;
13986 	if ((y % 100) == 0) a = 0;  // cannot fall on 100 years (except if div by 400)
13987 	if ((y % 400) == 0) a = 1;   // Leap year is every 400 years
13988 
13989 	n = n + a;				// feb;
13990 	return n;
13991 }
13992 
13993 //============================================================================================
13994 //				html$addDuration
13995 //============================================================================================
13996 function html$addDuration(startDate,value)
13997 {
13998 	var HOURS_PER_DAY   =  24;
13999 	var HOURS_PER_WEEK  =   7 * HOURS_PER_DAY;
14000 	var n,dim,list,i,g;
14001 	var y,m,d;
14002 	var endDate;
14003 	
14004 	value = this.trim(value);
14005 	if (value == '') return startDate;
14006 		
14007 	list = value.split(' ');
14008 
14009 	if (list.length != 2) return startDate;
14010 	n = parseFloat(list[0]);
14011 
14012 	if (isNaN(n)) return startDate;
14013 	if (n &lt;= 0) return startDate;
14014 	
14015 	if (list[1] ==  'hour') return this.addHours(startDate,n);
14016 	if (list[1] ==   'day') return this.addHours(n * HOURS_PER_DAY);
14017 	if (list[1] ==  'week') return this.addHours(n * HOURS_PER_WEEK);
14018 
14019 	y = startDate.getYear();
14020 	m = startDate.getMonth();
14021 	d = startDate.getDate();
14022 
14023 	if (list[1] == 'month')
14024 	{
14025 		for (i = 0; i &lt; n; ++i)
14026 		{
14027 			m = m + 1;
14028 			if (m > 11)
14029 			{
14030 				m = 0;
14031 				y = y + 1;
14032 			}
14033 		}
14034 		
14035 		dim = this.getDaysInMonth(m,y);
14036 		if (g > dim) d = dim;
14037 		endDate = new Date(y,m,d);
14038 		return endDate;
14039 	}
14040 	
14041 	if (list[1] ==  'year')
14042 	{
14043 		y = y + n;
14044 		dim = this.getDaysInMonth(m,y);
14045 		if (d > dim) d = dim;
14046 		endDate = new Date(y,m,d);
14047 		return endDate;
14048 	}
14049 	
14050 	return startDate;
14051 
14052 }
14053 //============================================================
14054 //                      html$addHours
14055 //============================================================
14056 function  html$addDays(ydate,days)
14057 {
14058 	var hours;
14059 	
14060 	hours = days * 24;
14061 	return this.addHours(ydate,hours);
14062 
14063 }
14064 //============================================================
14065 //                       html$addHours
14066 //============================================================
14067 function  html$addHours(ydate,hours)
14068 {
14069 	var y,d,m;
14070 	var xdate,dh,dm,h,m,mth;
14071 
14072 	xdate = new Date(ydate);
14073 
14074 	if (hours == 0) return xdate;
14075 
14076 	dh = xdate.getHours();
14077 	dm = xdate.getMinutes();
14078 	h = dh + hours + (dm / 60);
14079 	dh = Math.floor(h);
14080 	m = Math.round((h - dh) * 60);
14081 
14082 	while (dh &lt; 0)
14083 	{
14084 		xdate = this.addDays(xdate,-1);
14085 		dh = dh + 24;		
14086 	}
14087 
14088 	while (dh > 24)
14089 	{
14090 		xdate = this.addDays(xdate,1);
14091 		dh = dh - 24;
14092 	}
14093 
14094 	y   = xdate.getFullYear();
14095 	mth = xdate.getMonth();
14096 	d   = xdate.getDate();
14097 
14098 	xdate = new Date(y,mth,d,dh,m);
14099 	return xdate;
14100 }
14101 //============================================================================================
14102 //				html$timelineToPdf
14103 //============================================================================================
14104 function html$timelineToPdf(pdf,ele,x,y,height,width)
14105 {
14106 	var min,max,month,r,xhtml;
14107 	var height,width,cal,i,j,k,e,n;
14108 	var row,col,day,xmin,ymin,xmax,ymax;
14109 	var save,xday,g,line;
14110 	var startDate,endDate,resolution;
14111 	var xhtml,margin,gutter,align,xpos,pnt;
14112 	var x1,y1,x2,y2,offset;
14113 	var points,ypos,px,py;
14114 	
14115 	startDate = ele.startDate;
14116 	endDate = ele.endDate;
14117 	
14118 	if (ele.duration != '') endDate = this.addDuration(startDate,ele.duration);
14119 	
14120 	pdf.drawTimeline(startDate,endDate,x,y,height,width,ele);
14121 
14122 	xhtml = new html$(this.sys);
14123 
14124 	align = 0;
14125 	if (align == 'center') align = 0.5;
14126 	if (align == 'right') align = 1;
14127 
14128 	margin = 10;
14129 	gutter = 4;
14130 
14131 //------------------- Make List of Timeline Points ----------------
14132 
14133 	points = new Array();
14134 
14135 	for (i=0; i &lt; ele.events.length; ++i)
14136 	{
14137 		e = ele.events[i];
14138 		xhtml.init(ele.eventFontSize);
14139 		xhtml.parse(e.htmlData);
14140 		xhtml.resize(width,height);
14141 
14142 		e.height = xhtml.body.offsetHeight;
14143 		e.width = xhtml.body.offsetWidth;
14144 	
14145 		xpos = pdf.graphic.timelinePosition(e.startDate);
14146 		if (xpos &lt; 0) continue;					// not on timeline
14147 
14148 		n = points.length;						// assume new entry;
14149 
14150 //------------------- insert sortted -----------------
14151 			
14152 		for (j=0;  j &lt; points.length; ++j)
14153 		{
14154 			pnt = points[j];
14155 			if (pnt.xpos == xpos)
14156 			{
14157 				pnt.list[pnt.list.length] = e;	// stack events;
14158 				if (e.width > pnt.width) pnt.width = e.width;
14159 				pnt.height = pnt.height + e.height;
14160 				n = -1;    // no entry;
14161 				break;
14162 			}
14163 			
14164 			if (pnt.xpos > xpos)
14165 			{
14166 				for (k = points.length; k > j;  --k) 
14167 				{
14168 					points[k] = points[k-1];
14169 					points[k].index = k;
14170 				}
14171 				n = j;
14172 				break;
14173 			}
14174 		}
14175 		
14176 		if (n >= 0) 
14177 		{
14178 			pnt = new Object();
14179 			pnt.xpos = xpos;
14180 			pnt.ypos = 0;
14181 			pnt.height = e.height;
14182 			pnt.width = e.width;
14183 			pnt.list = new Array();
14184 			pnt.list[0] = e;
14185 			pnt.index = n;
14186 			points[n] = pnt;
14187 		}
14188 	}		
14189 	
14190 //---------------------------- place events -------------------------------
14191 
14192 	if (ele.eventPlacement == 'down') margin = -margin;
14193 
14194 	pdf.setGraphicFillColor('');
14195 
14196 	pdf.setGraphicColor(ele.leaderColor);
14197 	pdf.setGraphicLineStyle(ele.leaderStyle);
14198 	pdf.setGraphicLineWeight(ele.leaderWidth);
14199 //	pdf.setGraphicFillColor(ele.leaderFillColor);
14200 
14201 	pdf.holdPage = true;
14202 
14203 	for (i=points.length-1; i >= 0; --i)
14204 	{
14205 		pnt = points[i];
14206 		pdf.setGraphicFillColor('');
14207 
14208 		this.timelinePlace(pdf,pnt,points,margin,align,ele.eventPlacement,1);
14209 		pdf.graphic.timelineLeader(pnt.xpos,pnt.xmin,pnt.ymin,pnt.xmax,pnt.ymax,ele.leaderType);
14210 		
14211 		ypos = pdf.graphic.timeline.cy + pnt.ymax;
14212 
14213 		e = pnt.list[0];
14214 		px = pnt.xpos;
14215 		py = pdf.graphic.timeline.cy;
14216 		pdf.setFontSize(e.markerSize);
14217 		pdf.setFontColor(e.markerColor);
14218 		pdf.setGraphicFillColor('');
14219 		
14220 		if (e.markerShape == 'circle') pdf.drawSymbol_A(px,py,'Z154',0);
14221 		if (e.markerShape == 'box') pdf.drawSymbol_A(px,py,'Z156',0);
14222 		if (e.markerShape == 'square') pdf.drawSymbol_A(px,py,'Z156',0);
14223 		if (e.markerShape == 'star') pdf.drawSymbol_A(px,py,'Z110',0);
14224 		if (e.markerShape == 'triangle') pdf.drawSymbol_A(px,py,'Z163',0);
14225 		if (e.markerShape == 'diamond') pdf.drawSymbol_A(px,py,'Z165',0);
14226 		if (e.markerShape == 'club') pdf.drawSymbol_A(px,py,'Z250',0);
14227 		if (e.markerShape == 'heart') pdf.drawSymbol_A(px,py,'Z252',0);
14228 		if (e.markerShape == 'spade') pdf.drawSymbol_A(px,py,'Z253',0);
14229 
14230 		offset = 0;
14231 		
14232 		for (j=0; j &lt; pnt.list.length; ++j)
14233 		{
14234 			e = pnt.list[j];
14235 			xhtml.init(ele.eventFontSize);
14236 			xhtml.parse(e.htmlData);
14237 
14238 			xhtml.resize(width,height);
14239 
14240 			pdf.setGraphicFillColor(e.color);
14241 
14242 			y1 = pdf.graphic.timeline.cy;
14243 			y2 = y1 - e.height;
14244 			x1 = pnt.xmin;
14245 			x2 = pnt.xmax;
14246 
14247 			if (e.color != '')
14248 			{
14249 
14250 				pdf.setGraphicFillColor(e.color);
14251 				pdf.drawRectangle_A(x1,y1,x2,y2);
14252 			}
14253 
14254 			offset = offset - e.height;
14255 
14256 			xhtml.body.write(pdf,x1,y1);
14257 		}
14258 	}
14259 
14260 
14261 	pdf.setGraphicFillColor('');
14262 	pdf.holdPage = false;
14263 
14264  }
14265 //============================================================================================
14266 //				html$timelinePlace
14267 //============================================================================================
14268 function html$timelinePlace(pdf,pnt,points,ypos,align,placement,cnt)
14269 {
14270 	var i,y,p;
14271 	
14272 	if (cnt > 30) return;
14273 
14274 	pnt.xmin = (pnt.xpos + (pnt.width * align)) - 0;
14275 	pnt.xmax = (pnt.xmin + pnt.width) + 4 ;
14276 	pnt.ymin = ypos;
14277 	
14278 	if (ypos >= 0) 
14279 	{	
14280 		pnt.ymin = ypos;
14281 		pnt.ymax = pnt.ymin + pnt.height;
14282 	}
14283 	else
14284 	{
14285 		pnt.ymax = ypos - 8;
14286 		pnt.ymin = pnt.ymax - pnt.height;
14287 	}
14288 
14289 	for (i=pnt.index+1; i &lt; points.length; ++i)
14290 	{
14291 		p = points[i];
14292 	  
14293 		if ((pnt.xmax &lt;= p.xmin) || (pnt.xmin >= p.xmax)) continue;
14294 		if ((ypos &lt; 0) && (pnt.ymax &lt;= (p.ymin - 4))) continue;
14295 		if ((ypos > 0) && (pnt.ymin >= (p.ymax + 4))) continue;
14296 
14297 		if (placement == 'updown')
14298 		{
14299 			if (ypos > 0) 
14300 			{
14301 			this.timelinePlace(pdf,pnt,points,-ypos,align,placement,cnt+1);
14302 				return;
14303 			}
14304 		}
14305 
14306 		y = Math.abs(ypos) + 8;
14307 		this.timelinePlace(pdf,pnt,points,y,align,placement,cnt+1);
14308 		return;
14309 	}
14310 }
14311 //============================================================================================
14312 //				html$scheduleToPdf
14313 //============================================================================================
14314 function html$scheduleToPdf(pdf,ele,x,y,height,width)
14315 {
14316 
14317 }
14318 //============================================================================================
14319 //				html$calendarToPdf
14320 //============================================================================================
14321 function html$calendarToPdf(pdf,ele,x,y,height,width)
14322 {
14323 	var min,max,month,r,xhtml;
14324 	var height,width,cal,i,e,text;
14325 	var row,col,day,xmin,ymin,xmax,ymax;
14326 	var save,xday;
14327 	
14328 	cal = pdf.drawCalendar(ele.year,ele.month,x,y,height,width,ele.border,ele.events,ele.noref);
14329 
14330 //	return;
14331 	xhtml = new html$(this.sys);
14332 
14333 	xhtml.fontSize = 8;	
14334 	
14335 	pdf.holdPage = true;
14336 
14337 	for (day=1; day &lt;= cal.dim; ++day)
14338 	{
14339 		e = ele.events[day];
14340 		if (this.trim(e.htmlData) == '') continue;		
14341 		text = this.resolve(e.htmlData);
14342 		if (text == '') continue;
14343 	
14344 		xday = (cal.firstColumn + day) - 1;
14345 		row = Math.floor(xday / 7);
14346 		col = xday % 7;
14347 		
14348 
14349 		xmin = cal.x + (col * cal.dx);
14350 		xmax = xmin + cal.offsetWidth;
14351 //		ymin = (cal.y - (row * cal.dy)) - (cal.dy - cal.offsetHeight);
14352 		ymin = (cal.y - ((row + 1) * cal.dy));
14353 		ymax = ymin + cal.offsetHeight;
14354 
14355 		xhtml.init(10);
14356 		xhtml.parse(text);
14357 
14358 		xhtml.resize(cal.dx / 72 * 110,cal.dy / 72 * 110);
14359 
14360 		x = (xmin - pdf.xmin) / 72 * 110;
14361 		y = (pdf.ymax - ymin) / 72 * 110;
14362 
14363 		y = y - xhtml.body.offsetHeight;
14364 
14365 		xhtml.body.write(pdf,x+2,y-4);
14366 	}
14367 
14368 	pdf.holdPage = false;
14369 
14370 }
14371 //============================================================================================
14372 //				html$textToPdf
14373 //============================================================================================
14374 function html$textToPdf(out,x,y,text)
14375 {
14376 	var lines,i;
14377 	
14378 	lines = text.split(String.fromCharCode(3));
14379 	out.setPosition(x,y);
14380 	out.setFontName('courier');
14381 	out.setFontSize('10');
14382 
14383 	for (i=0; i &lt; lines.length; ++i)
14384 	{
14385 		out.addText(this.tabReplace(lines[i]));
14386 		out.lineBreak();
14387 	}
14388 }
14389 //============================================================================================
14390 //				html$tabReplace
14391 //============================================================================================
14392 function html$tabReplace(text)
14393 {
14394 	var data,blank,i,c,n,r;
14395 	
14396 	blank = '      ';
14397 	data = '';
14398 	for (i=0; i &lt; text.length; ++i)
14399 	{
14400 		c = text.charAt(i);
14401 		if (c == "\t") 
14402 		{
14403 			n = data.length;
14404 			r = 4 - (n % 4);
14405 			data += blank.substr(0,n);
14406 			continue;
14407 		}
14408 		data += c;
14409 	}	
14410 	
14411 	return data;
14412 }
14413 //============================================================================================
14414 //				html$reportToPdf
14415 //============================================================================================
14416 function html$reportToPdf(out,x,y,ele)
14417 {
14418 	var xmin,ymin,xmax,ymax;
14419 	var px1,py1,px2,py2;
14420 	var pageHeight,pageWidth;
14421 	var height,width;
14422 	var padWidth,padHeight;
14423 	var clipReport,text;
14424 
14425 	clipReport = false;
14426 	if ((ele.fixed_width) && (ele.fixed_width)) clipReport = true;
14427 
14428 	if (ele.fit && clipReport) clipReport = false;
14429 		
14430 	if (clipReport)
14431 	{	
14432 		xmin = x;
14433 		ymin = y;
14434 		xmax = xmin + ele.iwidth;
14435 		ymax = ymin + ele.iheight;
14436 
14437 		px1 = this.pixelToInch_x(xmin);
14438 		py1 = this.pixelToInch_y(ymin);
14439 		px2 = this.pixelToInch_x(xmax);
14440 		py2 = this.pixelToInch_y(ymax);
14441 
14442 		ele.writeBackground(out,xmin,ymin,xmax,ymax);
14443 		ele.writeBorder(out,xmin,ymin,xmax,ymax);
14444 
14445 		out.clip = true;
14446 		out.clipBegin(px1,py1,px2,py2);
14447 	}
14448 	
14449 	this.reportToPdf_A(out,x,y,ele);
14450 
14451 	if (clipReport)
14452 	{	
14453 		out.clipEnd();
14454 		out.clip = false;
14455 		ele.offsetWidth = ele.iwidth;
14456 		ele.offsetHeight = ele.iheight;
14457 		return;
14458 	}
14459 
14460 	if (ele.fit)
14461 	{
14462 
14463 		padWidth = out.marginLeft + out.marginRight;		
14464 		padHeight = out.marginTop + out.marginBottom;
14465 
14466 		xmin = x;
14467 		ymin = y;
14468 		xmax = x + ele.clientWidth;
14469 		ymax = y + ele.clientHeight;
14470 		ele.writeBorder(out,xmin,ymin,xmax,ymax);
14471 
14472 		width = xmax + (padWidth * 110 / 72);
14473 		height = ymax + (padHeight * 110 / 72);
14474 
14475 		if (height &lt; (11 * 110)) height = 11 * 110;
14476 		if (width &lt; (8.5 * 110)) width = 8.5 * 110;
14477 
14478 		pageHeight = height + this.marginTop + this.marginBottom + 0;
14479 		pageWidth = width;
14480 
14481 		this.body.active.maxHeight = pageHeight;
14482 
14483 		pageHeight = pageHeight / 110;
14484 		pageWidth = pageWidth / 110;
14485 
14486 		text = pageWidth + ',' + pageHeight;
14487 		out.setPageSize(text,true);
14488 	}
14489 }
14490 //============================================================================================
14491 //				html$reportToPdf_A
14492 //============================================================================================
14493 function html$reportToPdf_A(out,x,y,ele)
14494 {
14495 	var xhtml,list,i,data,value;
14496 	var height,dy,last,sql,index;
14497 	var min,max,rs,g,keys,sql;
14498 	var left,right;
14499 	var wudth,filler,detail;
14500 
14501 	min = 0;
14502 	max = -1;
14503 
14504 	this.keepUnresolved = true;
14505 	this.rs = null;
14506 
14507 	if (ele.table != '')
14508 	{
14509 		for (i=0; i &lt; this.recordsets.length; ++i)
14510 		{
14511 			if (this.recordsets[i].id == ele.table)
14512 			{
14513 				this.rs = this.recordsets[i];
14514 				this.rs.pos = 0;
14515 				min = 1;
14516 				max = this.rs.records.length;
14517 				break;
14518 			}
14519 		}
14520 		if ((rs == null) && (this.parent != null))
14521 		{
14522 	
14523 			for (i=0; i &lt; this.parent.recordsets.length; ++i)
14524 			{
14525 				if (this.parent.recordsets[i].id == ele.table)
14526 				{
14527 					this.rs = this.parent.recordsets[i];
14528 					this.rs.pos = 0;
14529 					min = 1;
14530 					max = this.rs.records.length;
14531 					break;
14532 				}
14533 			}
14534 		}
14535 	}
14536 
14537 	if (ele.sql != '')
14538 	{
14539 		sql = this.resolve(ele.sql);
14540 		this.rs = this.sys.sqlRead(sql);
14541 		if (this.rs == null) return;
14542 		min = 1;
14543 		this.rs.MoveLast();
14544 		max = this.rs.RecordCount;
14545 		this.rs.MoveFirst();
14546 	}
14547 
14548 	xhtml = new Array();
14549 
14550 	for (i=0; i &lt; ele.maxColumn; ++i)
14551 	{
14552 		xhtml[i] = new html$(this.sys,'',this);
14553 		xhtml[i].parent = this;
14554 		xhtml[i].default_fontName = ele.font.fontName;
14555 		xhtml[i].default_fontSize = ele.font.fontSize;
14556 
14557 	}
14558 
14559 	out.html = this;
14560 	this.grid = new htmlGrid$(this,out,ele,x,y);
14561 	this.grid.xhtml = xhtml;
14562 	
14563 	keys = new Array(ele.groups.length);
14564 
14565 	this.keeptogether = false;
14566 	for (i=0; i &lt; ele.groups.length; ++i)
14567 	{
14568 
14569 			g = ele.groups[i];
14570 			g.count	= 0;
14571 			g.rowCount	= 0;
14572 			g.index		= i;
14573 			g.keyValue	= '';
14574 
14575 			if (g.keeptogether) this.keeptogether = true;
14576 	}
14577 
14578 //------------------- report header -------------
14579 
14580 	if (ele.header != null)
14581 	{
14582 		if (ele.header.pageBreakBeore) this.grid.pageBreak();
14583 		this.grid.writeFull(ele.header.data);
14584 		if (ele.header.pageBreakAfter) this.grid.pageBreak();
14585 	}
14586 
14587 //------------------ report details  --------------
14588 
14589 		this.reportWriteDetail(min,max);
14590 
14591 //----------------- report flush ------------
14592 
14593 	if (this.rs != null)
14594 	{
14595 		this.rs.Close();
14596 		this.rs = null;
14597 	}
14598 
14599 	for (index=0; index &lt; ele.groups.length; ++index)
14600 	{
14601 		g = ele.groups[index];
14602 		this.reportGroupFooter(out,g,false);
14603 	}
14604 
14605 
14606 	this.grid.done();
14607 	 
14608 //--------------------- report footer ---------------
14609 
14610 	if (ele.footer != null)
14611 	{
14612 		if (ele.footer.pageBreakBeore) this.grid.pageBreak();
14613 		this.grid.writeFull(ele.footer.data);
14614 		if (ele.footer.pageBreakAfter) this.grid.pageBreak();
14615 	}
14616 
14617 	ele.clientHeight = this.grid.offsetHeight;
14618 	ele.clientWidth = this.grid.offsetWidth;
14619 	this.body.offsetHeight = this.grid.offsetHeight;
14620 	this.body.offsetWidth = this.grid.offsetWidth;
14621 }
14622 //============================================================================================
14623 //				html$reportWriteDetail
14624 //============================================================================================
14625 function html$reportWriteDetail(min,max)
14626 {
14627 	var ele,i,g;
14628 
14629 	ele = this.grid.ele;
14630 
14631 //	if (ele.rowsPerColumn != '') return this.reportWriteDetail_look(min,max);
14632 //	if (this.keeptogether) return this.reportWriteDetail_keep(min,max,0);
14633 
14634 //----------- simple ---------------
14635 
14636 	if (this.rs == null) return;
14637 
14638 //	this.rs.Move(min+1,1);
14639 	for (i=min; i &lt;= max; ++i)
14640 	{
14641 		this.reportWriteDetail_B(i);
14642 		this.rs.MoveNext();
14643 	}
14644 
14645 	for (i = ele.groups.length-1; i >= 0; --i)
14646 	{
14647 		g = ele.groups[i];
14648 		this.reportGroupFooter(g);
14649 		g.rowCount = 0;
14650 	}
14651 
14652 }
14653 //============================================================================================
14654 //				html$reportWriteDetail_B
14655 //============================================================================================
14656 function html$reportWriteDetail_B(count)
14657 {
14658 	var i,j,c,text,g,name,detail,index,key,m;
14659 	var dx,dy,column,d,ypos,continued;
14660 	var maxHeight,x,b,list,newgroup;
14661 	var xmin,ymin,xmax,ymax,header,n,remain;
14662 	var xoff,yoff,text,ele,xhtml,width;
14663 	var used,need,filler,dname,footer;
14664 	var xpad,ypad,dname;
14665 	
14666 	xhtml = this.grid.xhtml;
14667 	ele = this.grid.ele;
14668 
14669 	newgroup = false;
14670 	g == null;
14671 
14672 	for (index=0; index &lt; ele.groups.length; ++index)
14673 	{
14674 		g = ele.groups[index];
14675 		key = this.resolve(g.key).toLowerCase();
14676 		if ((g.rowCount == 0) || (g.keyValue != key)) newgroup = true;
14677 		if (newgroup)  this.reportGroupHeader(ele.groups,index,key);
14678 		g.keyValue = key;
14679 		g.rowCount += 1;
14680 	}
14681 
14682 	name = this.resolve(ele.detail);
14683 	detail = ele.details[0];
14684 
14685 	xpad = 0;
14686 	if (detail.borderLeft > 0) xpad += detail.borderLeft-1;
14687 	if (detail.borderRight > 0) xpad += detail.borderRight-1;
14688 
14689 	ypad = 0;
14690 	if (detail.borderTop > 0) ypad += detail.borderTop-1;
14691 	if (detail.borderBottom > 0) ypad += detail.borderBottom-1;
14692 
14693 	if (newgroup)
14694 	{
14695 		for (i=0; i &lt; ele.details.length; ++i) ele.details[i].count = 0;
14696 	}
14697 	
14698 	d = null;
14699 	for (i=0; i &lt; ele.details.length; ++i)
14700 	{
14701 		d = ele.details[i];
14702 		dname = this.resolve(d.id);
14703 		if (name == dname.toLowerCase())
14704 		{
14705 			detail = d;
14706 			break;
14707 		}
14708 	}
14709 
14710 //----------------------- Run Macros ----------------------------
14711 
14712 	for (i=0; i &lt; detail.macros.length; ++i)	
14713 	{
14714 		m = detail.macros[i];
14715 		m.run(this);
14716 	}	
14717 
14718 //----------------------- detail header ----------------------------
14719 
14720 	if (! detail.defined)
14721 	{
14722 		detail.defined = true;
14723 		detail.count = 0;
14724 		detail.headerHeight = 0;
14725 		detail.footerHeight = 0;
14726 		c = -1;
14727 
14728 //-------------------------- columns -----------------------------------
14729 
14730 		used = 0;
14731 		need = new Array();
14732 		
14733 
14734 		for (i=0; i &lt; detail.columns.length; ++i)
14735 		{
14736 			column = detail.columns[i];
14737 			width = column.width;
14738 			if ((width == '') || (width == '*')) 
14739 			{
14740 				need[need.length] = i;
14741 			}
14742 			else
14743 			{
14744 				width = parseInt(column.width);
14745 				if (isNaN(width)) 
14746 				{
14747 					need[need.length] = i;
14748 					continue;
14749 				}
14750 			
14751 				if (column.width.substr(column.width.length-1) == '%')
14752 				{
14753 					width = Math.floor((width / 100) * this.grid.columnWidth);
14754 				}
14755 
14756 				column.width = width;
14757 				used += width;
14758 			}
14759 		}
14760 				
14761 		if (need.length > 0)
14762 		{
14763 		    width = (this.grid.columnWidth - used) / need.length;
14764 		    for (i=0; i &lt; need.length; ++i)
14765 		    {
14766 			column = detail.columns[need[i]];
14767 			column.width = width;
14768 		    }
14769 		}		    
14770 				
14771 //----------------------- header ---------------------------------------
14772 
14773 		for (i=0; i &lt; detail.headers.length; ++i)
14774 		{
14775 			header = detail.headers[i];
14776 			width = 0;
14777 			for (j=0; j &lt; header.colspan; ++j)
14778 			{
14779 				c = c + 1;
14780 				if (c >= detail.columns.length) continue;
14781 				column = detail.columns[c];
14782 				width += column.width;
14783 				if (j > 0) width += detail.cellspacing + ypad;
14784 			}
14785 
14786 			header.width = width;
14787 			header.html = new html$(this.sys,'',this);
14788 			header.html.default_fontName = detail.font.fontName;
14789 			header.html.init(ele.font.size);
14790 			header.html.parse('&lt;font color=' + detail.headColor + ' face="' + detail.font.fontName + '">' + header.data + '&lt;/font>');
14791 
14792 			header.html.resize(width,0);
14793 			if (header.html.body.offsetHeight > detail.headerHeight) detail.headerHeight = header.html.body.offsetHeight;
14794 
14795 		}	
14796 		if (detail.headerHeight > 0) detail.headerHeight += detail.cellpadding * 2 + detail.borderBottom;
14797 
14798 //---------------------------- footer ------------------------------------------
14799 		c = -1;
14800 
14801 		for (i=0; i &lt; detail.footers.length; ++i)
14802 		{
14803 			footer = detail.footers[i];
14804 			width = 0;
14805 			for (j=0; j &lt; footer.colspan; ++j)
14806 			{
14807 				c = c + 1;
14808 				if (c >= detail.columns.length) continue;
14809 				column = detail.columns[c];
14810 				width += column.width;
14811 				if (j > 0) width += detail.cellspacing + (detail.cellpadding + detail.border) * 2;
14812 			}
14813 
14814 			footer.width = width;
14815 			footer.html = new html$(this.sys,'',this);
14816 			footer.html.default_fontName = detail.font.fontName;
14817 
14818 			footer.html.init(detail.font.size);
14819 			footer.html.parse(footer.data);
14820 
14821 			footer.html.resize(width,0);
14822 			if (footer.html.body.offsetHeight > detail.footerHeight) detail.footerHeight = footer.html.body.offsetHeight;
14823 
14824 		}	
14825 
14826 		if (detail.footerHeight > 0) detail.footerHeight += ((detail.cellpadding + detail.border) * 2);
14827 
14828 
14829 	}
14830 
14831 //----------------------- Fit Columns ----------------------------
14832 
14833 	maxHeight = 0;
14834 	detail.count += 1;
14835 
14836 	for (i=0; i &lt; detail.columns.length; ++i)
14837 	{
14838 		column = detail.columns[i];
14839 
14840 		width = column.width - (detail.cellpadding * 2);
14841 		if (width &lt;= 0) width = this.grid.maxWidth;
14842 
14843 		text = column.data;
14844 		text = text.replace(/\{count\}/ig,count);
14845 		text = text.replace(/\{detail\}/ig,detail.count);
14846 		text = this.resolve(text);
14847 
14848 		xhtml[i].default_fontName = detail.font.fontName;
14849 		xhtml[i].init(detail.font.fontSize);
14850 		xhtml[i].nowrap = column.nowrap;
14851 		xhtml[i].parse(text);
14852 
14853 		xhtml[i].resize(width,0);
14854 
14855 		b = xhtml[i].body;
14856 		if (xhtml[i].body.offsetHeight > maxHeight) maxHeight = xhtml[i].body.offsetHeight;
14857 	}
14858 
14859 	this.reportWriteDetail_A(maxHeight,detail);
14860 }
14861 //==================================================================================
14862 //				reportWriteDetail_A
14863 //==================================================================================
14864 function html$reportWriteDetail_A(maxHeight,detail)
14865 {
14866 	var i,x,xhtml,dx,dy,xoff,yoff;
14867 	var xmin,ymin,xmax,ymax,px,py;
14868 	var column,hoffset;
14869 	var xpad,ypad,save;
14870 
14871 
14872 	xhtml = this.grid.xhtml;
14873 
14874 	this.lastDetail = detail;
14875 
14876 	xpad = 0;
14877 	if (detail.borderLeft > 0) xpad += detail.borderLeft - 1;
14878 	if (detail.borderRight > 0) xpad += detail.borderRight - 1;
14879 
14880 	ypad = 0;
14881 	if (detail.borderTop > 0) ypad += detail.borderTop-1;
14882 	if (detail.borderBottom > 0) ypad += detail.borderBottom-1;
14883 
14884 //------------------ startDetail -----------------
14885 
14886 	if ((this.grid.row == 1) || (detail.count == 1))
14887 	{
14888 		hoffset = detail.headerHeight + detail.cellspacing + detail.borderTop;		
14889 		maxHeight += hoffset;
14890 		this.grid.pos(maxHeight);
14891 		this.grid.start(maxHeight);
14892 		this.reportWriteDetailHeader(detail);
14893 	}
14894 	else
14895 	{
14896 		hoffset = 0;
14897 		this.grid.pos(maxHeight);
14898 		
14899 		if (this.grid.row == 1)
14900 		{
14901 			hoffset = detail.headerHeight + detail.cellspacing + detail.borderTop + detail.borderBottom;		
14902 			maxHeight += hoffset;
14903 
14904 			this.grid.start(maxHeight);
14905 			this.reportWriteDetailHeader(detail);
14906 		}
14907 		else
14908 		{
14909 		 this.grid.start(maxHeight);
14910 		}
14911 	}	
14912  
14913 //------------------ write detail ----------------
14914 
14915 	x = this.grid.xpos + this.grid.x + detail.border;
14916 
14917 	for (i=0; i &lt; detail.columns.length; ++i)
14918 	{
14919 		column = detail.columns[i];
14920 		dy = maxHeight - (xhtml[i].body.offsetHeight + detail.cellpadding + detail.border + hoffset);
14921 		dx = column.width - (xhtml[i].body.offsetWidth + ((detail.cellpadding + xpad) * 2));
14922 
14923 		xoff = 0;
14924 		yoff = 0;
14925 		if (column.align == 'center') xoff = dx / 2;
14926 		if (column.align == 'right')  xoff = dx;
14927 
14928 		if (column.valign == 'center') yoff = dy / 2;
14929 		if (column.valign == 'middle') yoff = dy / 2;
14930 		if (column.valign == 'bottom') yoff = dy;
14931 
14932 		px = x + xoff + detail.cellpadding;
14933 		py = this.grid.ypos + this.grid.y + yoff + hoffset + detail.cellpadding;
14934 		
14935 		xmin = x;
14936 		ymin = this.grid.ypos + this.grid.y + hoffset;
14937 		xmax = xmin + column.width;
14938 		ymax = (ymin + maxHeight + (detail.cellpadding * 2)) - hoffset; 
14939 
14940 		this.grid.updateSize(xmax,ymax);
14941 
14942 		save = detail.style.backgroundColor;
14943 		if (column.bgcolor != '')
14944 		{
14945 			detail.style.backgroundColor = this.resolve(column.bgcolor);
14946 		}
14947 
14948 		detail.writeBackground(this.grid.out,xmin,ymin,xmax,ymax);
14949 		detail.writeBorder(this.grid.out,xmin,ymin,xmax,ymax);
14950 
14951 		detail.style.backgroundColor = save;
14952 
14953 		xhtml[i].body.write(this.grid.out,px,py);
14954 		x += column.width + detail.cellspacing + xpad;
14955 	}		
14956 
14957 //------------------ end detail -----------------
14958 
14959 	maxHeight = maxHeight + detail.cellspacing + detail.borderTop + (detail.cellpadding * 2);
14960 
14961 	this.grid.end(maxHeight);
14962 		
14963 }
14964 //==================================================================================
14965 //				reportWriteDetailHeader
14966 //==================================================================================
14967 function html$reportWriteDetailHeader(detail)
14968 {
14969 	var i,x,xhtml,dx,dy,xoff,yoff;
14970 	var xmin,ymin,xmax,ymax,px,py;
14971 	var column,header,j,c,width;
14972 	var maxHeight;
14973 	var xpad,ypad;
14974 	 
14975 //------------------ write detail ----------------
14976 
14977 	x = this.grid.xpos + this.grid.x + detail.border + detail.cellspacing;
14978 
14979 	xpad = 0;
14980 	if (detail.borderLeft > 0) xpad += detail.borderLeft - 1;
14981 	if (detail.borderRight > 0) xpad += detail.borderRight - 1;
14982 
14983 	ypad = 0;
14984 	if (detail.borderTop > 0) ypad += detail.borderTop-1;
14985 	if (detail.borderBottom > 0) ypad += detail.borderBottom-1;
14986 
14987 	c = -1;
14988 	for (i=0; i &lt; detail.headers.length; ++i)
14989 	{
14990 		header = detail.headers[i];
14991 		if (header.width == 0) continue;
14992 
14993 		dy = detail.headerHeight - (header.html.body.offsetHeight + (detail.cellpadding * 2) + detail.borderTop + detail.borderBottom);
14994 		dx = header.width - (header.html.body.offsetWidth + (detail.cellpadding * 2) + detail.borderLeft + detail.borderRight);
14995 
14996 		xoff = 0;
14997 		yoff = 2;
14998 		if (header.align == 'center') xoff = dx / 2;
14999 		if (header.align == 'right')  xoff = dx;
15000 
15001 		if (header.valign == 'center') yoff = dy / 2;
15002 		if (header.valign == 'middle') yoff = dy / 2;
15003 		if (header.valign == 'bottom') yoff = dy;
15004 
15005 		px = x + xoff + detail.cellpadding + detail.borderLeft;
15006 		py = this.grid.ypos + this.grid.y + yoff + detail.cellpadding;
15007 		
15008 		xmin = x;
15009 		ymin = this.grid.ypos + this.grid.y;
15010 		xmax = xmin + header.width;
15011 		ymax = ymin + detail.headerHeight; 
15012 
15013 		this.grid.updateSize(xmax,ymax);
15014 
15015 		header.style.backgroundColor = detail.headBackground;
15016 
15017 		
15018 		header.writeBackground(this.grid.out,xmin,ymin,xmax,ymax);
15019 		detail.writeBorder(this.grid.out,xmin,ymin,xmax,ymax);
15020 
15021 		header.html.body.write(this.grid.out,px,py);
15022 		x += header.width + detail.cellspacing + xpad;
15023 	}		
15024 }
15025 //============================================================================================
15026 //				html$onGroupHeader
15027 //============================================================================================
15028 function html$reportGroupHeader(groups,index,key)
15029 {
15030 	var g, width, xhtml,i;
15031 
15032 	xhtml = this.grid.xhtml[0];
15033 
15034 	for (i=index; i &lt; groups.length; ++i)
15035 	{
15036 		g = groups[i];
15037 		this.reportGroupFooter(g);
15038 		g.rowCount = 0;
15039 	}
15040 
15041 	g = groups[index];
15042 	g.count = g.count + 1;
15043 
15044 	if (this.grid.columnOrder) 
15045 	{
15046 		width = this.grid.ele.active.maxWidth;
15047 		this.grid.reset();
15048 	}
15049 	else
15050 	{
15051 		width = this.grid.columnWidth;
15052 	}
15053 
15054 	if (g.header == null) return;
15055 	if (g.header.pageBreakBefore) this.grid.pageBreak();
15056 	this.grid.write_A(g.header.data,width);
15057 	if (g.header.pageBreakAfter) this.grid.pageBreak();
15058 }
15059 //============================================================================================
15060 //				html$reportGroupFooter
15061 //============================================================================================
15062 function html$reportGroupFooter(g)
15063 {
15064 	var xhtml, width;
15065 
15066 	if (g.footer == null) return;
15067 
15068 	if (g.count == 0) return;
15069 	if ((g.rowCount == 0) && g.skipIfBlank) return;
15070 
15071 	xhtml = this.grid.xhtml[0];
15072 
15073 	width = this.grid.columnWidth;
15074 	if (this.grid.columnOrder) width = this.grid.ele.active.maxWidth;
15075 
15076 	this.grid.ypos += this.grid.maxRowHeight;
15077 	this.grid.maxRowHeight = 0;
15078 	if (this.grid.columnOrder) this.grid.curColumn = 0;
15079 
15080 	if (g.footer.pageBreakBefore) this.grid.pageBreak();
15081 
15082 	this.grid.write_A(g.footer.data,width);	
15083 	if (g.footer.pageBreakAfter) this.grid.pageBreak();
15084 }
15085 //============================================================================================
15086 //				html$executeLoop
15087 //============================================================================================
15088 function html$executeLoop(ele)
15089 {
15090 	var xhtml,rs,count,rad,re,by,index;
15091 	var list,min,max,i,data,value,last;
15092 	
15093 	xhtml = new html$(this.sys,'',this);
15094 	xhtml.isLoop = true;
15095 
15096 	list = new Array();		// assume none;
15097 
15098 	min = ele.min;
15099 	max = ele.max;
15100 	by  = ele.increment;
15101 
15102 	rs = null;
15103 
15104 	if (ele.list != '') 
15105 	{
15106 		list = this.fromCsv(ele.list);
15107 		min = 0;
15108 		max = list.length-1;
15109 		by = 1;
15110 	}
15111 	
15112 	if (ele.sql != '') 
15113 	{
15114 		rs = this.sys.sqlRead(ele.sql);
15115 		min = 1;
15116 		max = rs.RecordCount;
15117 		if (rs == null) return;
15118 		by = 1;
15119 	}	
15120 
15121 	last = '';
15122 	count = 0;
15123 	if (ele.id == '') ele.id = 'loop';
15124 
15125 	for (i=min; i &lt;= max; i+=by)
15126 	{
15127 		index = count;
15128 		count = count + 1;
15129 
15130 		value = i;
15131 
15132 		if (i &lt; list.length) value = list[i];
15133 		if (rs != null) value = rs(0).Value;
15134 
15135 		data = ele.loop;
15136 
15137 		re = new RegExp('{' + ele.id + '}','ig');
15138 		data = data.replace(re,'' + value);
15139 
15140 		re = new RegExp('{' + ele.id + '.count}','ig');
15141 		data = data.replace(re, '' + count);
15142 
15143 		re = new RegExp('{' + ele.id + '.index}','ig');
15144 		data = data.replace(re,'' + index);
15145 
15146 		re = new RegExp('{' + ele.id + '.last}','ig');
15147 		data = data.replace(re,last);
15148 
15149 		rad = parseFloat(value);
15150 		if (isNaN(rad)) rad = 0;
15151 		rad = rad / 180 * Math.PI;
15152 		
15153 		re = new RegExp('{' + ele.id + '.radian}','ig');
15154 		data = data.replace(re,rad);
15155 
15156 		last = value;
15157 
15158 		xhtml.init(10);
15159 		xhtml.parse(data);
15160 		if (rs != null) rs.MoveNext();
15161 	}
15162 
15163 }
15164 //============================================================================================
15165 //				html$groupReplaceValue
15166 //============================================================================================
15167 function html$groupReplaceValue(data,id,value,count,row,last,rs,total)
15168 {
15169 	var re,name,index,i;
15170 	
15171 	index = count - 1;
15172 	
15173 	re = new RegExp('{' + id + '}','ig');
15174 	data = data.replace(re,value);
15175 
15176 	re = new RegExp('{' + id + '.index}','ig');
15177 	data = data.replace(re,index);
15178 
15179 	re = new RegExp('{' + id + '.count}','ig');
15180 	data = data.replace(re,count);
15181 
15182 	re = new RegExp('{' + id + '.row}','ig');
15183 	data = data.replace(re,row);
15184 
15185 	re = new RegExp('{' + id + '.last}','ig');
15186 	data = data.replace(re,last);
15187 
15188 	re = new RegExp('{' + id + '.total}','ig');
15189 	data = data.replace(re,total);
15190 
15191 	if (rs == null) return data;
15192 	for (i=0; i &lt; rs.Fields.count; ++i)
15193 	{
15194 		name = id + '.' + rs.Fields(i).Name;
15195 		re = new RegExp('{' + id + '.last}','ig');		
15196 		data = data.replace(re,name);
15197 	}
15198 
15199 	return data;
15200 }
15201 //============================================================================================
15202 //				html$groupToPdf
15203 //============================================================================================
15204 function html$groupToPdf(x,y,out,ele)
15205 {
15206 	var xhtml,list,i,data,value;
15207 	var height,dy,last;
15208 	var min,max,rs;
15209 	var total,count;
15210 
15211 	xhtml = new Array();
15212 	xhtml[0] = new html$(this.sys,'',this);
15213 
15214 	list = new Array();		// assume none;
15215 
15216 	min = ele.min;
15217 	max = ele.max;
15218 	rs = null;
15219 
15220 	if (ele.list != '') 
15221 	{
15222 		list = this.fromCsv(ele.list);
15223 		min = 0;
15224 		max = list.length-1;
15225 	}
15226 	
15227 	if (ele.sql != '') 
15228 	{
15229 		rs = this.sys.sqlRead(ele.sql);
15230 		min = 1;
15231 		max = rs.RecordCount;
15232 		if (rs == null) return;
15233 	}	
15234 
15235 	last = '';
15236 
15237 	out.html = this;
15238 	this.grid = new htmlGrid$(this,out,ele,x,y);
15239 	this.grid.xhtml = xhtml;
15240 
15241 	total = (max - min) + 1;
15242 	
15243 	count = 0;
15244 	
15245 	for (i=min; i &lt;= max; ++i)
15246 	{
15247 		value = i;
15248 		count += 1;
15249 		if (i &lt; list.length) value = list[i];
15250 		if (rs != null) value = rs(0).Value;
15251 		data = this.groupReplaceValue(ele.group,ele.id,value,count,i,last,rs,total);
15252 //		data = this.resolve(data);
15253 		last = value;
15254 
15255 		this.grid.write(data);
15256 
15257 		if (rs != null) rs.MoveNext();
15258 	}
15259 
15260 	ele.clientHeight = this.grid.offsetHeight;
15261 	ele.clientWidth = this.grid.offsetWidth;
15262 
15263 }
15264 //============================================================================================
15265 //				html$sqlList
15266 //============================================================================================
15267 function html$sqlList(sql)
15268 {
15269 	var result;
15270 	
15271 try
15272 {
15273 	result = this.sqlList_A(sql);
15274 }
15275 catch (e) { result = null; }
15276 
15277 	if (this.cnn == null) return result;
15278 	if (this.cnn.State == 1) this.cnn.Close();
15279 
15280 	return result;
15281 
15282 }
15283 //============================================================================================
15284 //				html$sqlList
15285 //============================================================================================
15286 function html$sqlList_A(sql)
15287 {
15288 	var list,rs,f;
15289 
15290 	list = new Array();
15291 //	if (this.client) return list;
15292 
15293 	sql = sql.toLowerCase();
15294 	if (sql.indexOf(':') >= 0) return list;
15295 	if (sql.indexOf('script') >= 0) return list;
15296 
15297 	rs = this.sys.sqlRead(sql);
15298 	if (rs == null) return list;
15299 
15300 	
15301 	rs.MoveFirst();
15302 	while (! rs.EOF)
15303 	{
15304 		f = rs.Fields(0);
15305 		if (f.value != null) 
15306 		{
15307 			if (f.value != '')
15308 			{ 
15309 				list[list.length] = f.value;
15310 				if (list.length >= 20) break;
15311 			}
15312 		}
15313 		
15314 		rs.MoveNext();
15315 	}
15316 
15317 	rs.Close();
15318 	return list;
15319 }
15320 //============================================================================================
15321 //				html$sqlValue
15322 //============================================================================================
15323 function html$sqlValue(sql)
15324 {
15325 	var value,rs,f;
15326 
15327 	sql = sql.toLowerCase();
15328 	if (sql.indexOf(':') >= 0) return '';
15329 	if (sql.indexOf('script') >= 0) return '';
15330 
15331 	value = '';
15332 	rs = this.sys.sqlRead(sql);
15333 	if (rs == null) return;
15334 
15335 	f = rs.Fields(0);
15336 	if (f.value != null) value = f.value;
15337 
15338 	rs.Close();
15339 	return value;
15340 }
15341 //============================================================================================
15342 //				html$sqlValueAll
15343 //============================================================================================
15344 function html$sqlValueAll(sql)
15345 {
15346 	var value,rs,f;
15347 
15348 	sql = sql.toLowerCase();
15349 	if (sql.indexOf(':') >= 0) return '';
15350 	if (sql.indexOf('script') >= 0) return '';
15351 
15352 	value = '';
15353 	rs = this.sys.sqlRead(sql);
15354 	if (rs == null) return '';
15355 
15356 	while (! rs.EOF)
15357 	{
15358 		f = rs.Fields(0);
15359 		if (f.value != null) value += f.value;
15360 	
15361 		rs.MoveNext();
15362 	}	
15363 
15364 	rs.Close();
15365 	return value;
15366 }
15367 //============================================================================================
15368 //				i4
15369 //============================================================================================
15370 function html$i4(text)
15371 {
15372 	var value;
15373 try
15374 {
15375 
15376 	value = parseInt(text);
15377 	if (isNaN(value)) value = 0;
15378 	return value;
15379 
15380 }
15381 catch (e) { }
15382 	return 0;
15383 } 
15384 //============================================================================================
15385 //				trim
15386 //============================================================================================
15387 function html$trim(text)
15388 {
15389      text = '' + text;
15390      text = text.replace(/\003/g,' ');
15391      return text.replace(/^\s+|\s+$/g,'');
15392 } 
15393 //============================================================================================
15394 //				trimLeft
15395 //============================================================================================
15396 function html$trimLeft(text)
15397 {
15398      text = '' + text;   
15399      return text.replace(/^\s+/g,'');
15400 } 
15401 //============================================================================================
15402 //				htmlCss$
15403 //============================================================================================
15404 function htmlCss$(html)
15405 {
15406 
15407 	this.html		= html;
15408 	this.top		= null;
15409 	
15410 	this.media		= 'screen';
15411 	this.count		= 0;
15412 	this.mode		= '';
15413 
15414 //------------------ methods ---------------------
15415 	
15416 	this.load		= htmlCss$load;
15417 	this.load_A		= htmlCss$load_A;
15418 	this.parseSelector	= htmlCss$parseSelector;
15419 
15420 	this.style		= htmlCss$style;
15421 	this.compare		= htmlCss$compare;
15422 	this.copy		= htmlCss$copy;
15423 	this.insert		= htmlCss$insert;
15424 	this.loadMedia		= htmlCss$loadMedia;
15425 	this.removeComments	= htmlCss$removeComments;
15426 	this.selectMedia	= htmlCss$selectMedia;
15427 	this.changeBorder	= htmlCss$changeBorder;
15428 }
15429 //============================================================================================
15430 //						htmlCss$changeBorder
15431 //============================================================================================
15432 function htmlCss$changeBorder(border,ele)
15433 {
15434 	var list;
15435 
15436 	if (! (ele.tagName == 'TH' || ele.tagName == 'TD' || ele.tagName == 'TABLE')) return border;
15437 	list = border.split(' ');
15438 	list[0] = ele.border;
15439 	return list.join(' ');
15440 
15441 }
15442 //============================================================================================
15443 //				html$inlist
15444 //============================================================================================
15445 function html$inlist(list,value)
15446 {
15447 	var i;
15448 
15449 	value = value.toLowerCase();
15450 
15451 	for (i=0; i &lt; list.length; ++i)
15452 	{
15453 		if (list[i] == value) return true;
15454 	}		
15455 
15456 	return false;
15457 }
15458 //============================================================================================
15459 //				htmlCss$style
15460 //============================================================================================
15461 function htmlCss$style(ele,style)
15462 {
15463 	var text,i,s,node;
15464 
15465 	node = this.top;
15466 
15467 	this.mode = '';
15468 	if (ele.href != '') this.mode = 'alink';
15469 		
15470 	while (node != null)
15471 	{
15472 		this.pc = node.match.length-1;
15473 
15474 		if (this.compare(ele,node.match))
15475 		{
15476 			this.copy(node.style,style,ele);
15477 			return;
15478 		}		
15479 	
15480 		node = node.next;
15481 	}
15482 }
15483 //============================================================================================
15484 //				htmlCss$compare
15485 //============================================================================================
15486 function htmlCss$compare(ele,match)
15487 {
15488 	var i,pc,m,parent,sibling;
15489 	var tag,value,clist,name;
15490 	
15491 	if (this.pc &lt; 0) return true;
15492 
15493 	tag = ele.tagName;
15494 
15495 	name = this.html.trim(ele.className).toLowerCase();
15496 	clist = name.split(' ');
15497 	
15498 	while (this.pc >= 0) 
15499 	{
15500 		m = match[this.pc];
15501 
15502 		switch (m.op)
15503 		{
15504 		case        "tag": if (m.value != ele.tagName.toLowerCase()) return false; break;
15505 		case         "id": if (m.value != ele.id.toLowerCase()) return false; break;
15506 		case      "class": if (! this.html.inlist(clist,m.value)) return false; break;
15507 		case       "mode": if (m.value != 'link') return false;  break;
15508 		case  "getparent": 
15509 			{
15510 				if (ele.parentElement == null) return false; 
15511 				parent = ele.parentElement;
15512 				pc = this.pc-1;
15513 				while (parent != null)
15514 				{
15515 					this.pc = pc;
15516 					if (this.compare(parent,match)) return true;
15517 					parent = parent.parentElement;
15518 				}
15519 				return false;
15520 			}
15521 
15522 		case    "parent": if (ele.parentElement == null) return false; ele = ele.parentElement; break;
15523 
15524 		case    "sibling": 
15525 			{
15526 				if (ele.parentElement == null) return false;
15527 				parent = ele.parentElement;
15528 				sibling = parent.firstChild;
15529 				pc = this.pc-1;
15530 				while (sibling != null)
15531 				{
15532 					if (sibling != ele)
15533 					{
15534 						this.pc = pc;
15535 						if (this.compare(sibling,match)) return true;
15536 					}
15537 					sibling = sibling.nextSibling;
15538 				}
15539 				return false;
15540 			}
15541 		case       "attr": 
15542 				value = eval("ele." + m.name);
15543 				if (value == undefined) return false;
15544 		default: return false;
15545 		}
15546 
15547 		this.pc = this.pc - 1;
15548 	}
15549 
15550 	return true;		
15551 }
15552 
15553 //============================================================================================
15554 //				htmlCss$loadMedia
15555 //============================================================================================
15556 function htmlCss$loadMedia(data)
15557 {
15558 	var i,j,list,name,data,medias,temp;
15559 	var text,level,c,media,level,c,text;
15560 
15561 	i = data.indexOf('{');
15562 	if (i &lt; 0) return '';
15563 	
15564 	media = data.substr(0,i);
15565 	data = data.substr(i+1);
15566 	
15567 	media = this.html.trim(media);
15568 	
15569 	level = 0;
15570 	
15571 	for (i=0; i &lt; data.length; ++i)
15572 	{
15573 		c = data.charAt(i);
15574 		if (c == '{') level = 1;
15575 		if (c != '}') continue;
15576 		
15577 		if (level == 0) break; 
15578 		level = 0;
15579 	}
15580 
15581 	
15582 	text = data.substr(0,i-1);
15583 	data = data.substr(i+1);
15584 
15585 	if (this.selectMedia(media)) return text + data;
15586 
15587 	return data;		
15588 }
15589 //============================================================================================
15590 //				htmlCss$selectMedia
15591 //============================================================================================
15592 function htmlCss$selectMedia(names)
15593 {
15594 	var list,i,j,name,medias,temp;
15595 
15596 	names = this.html.trim(names);
15597 	if (names == '') return true;
15598 
15599 	names = names.toLowerCase();
15600 	list = names.split(',');
15601 	
15602 	temp = this.media.toLowerCase();
15603 	medias = temp.split(',');
15604 		
15605 	for (i=0; i &lt; list.length; ++i)
15606 	{
15607 		name = this.html.trim(list[i]);
15608 		if (name == '') continue;
15609 		
15610 		for (j =0 ; j &lt; medias.length; ++j)
15611 		{
15612 			if (this.html.trim(medias[j]) == name) return true;
15613 		}
15614 	}
15615 
15616 	return false;
15617 }
15618 //============================================================================================
15619 //				htmlCss$removeComments
15620 //============================================================================================
15621 function htmlCss$removeComments(data)
15622 {
15623 	var i,a,value,j,comment;
15624 
15625 //-------------- strip comments -----------------
15626 
15627 	data = this.html.trim(data);
15628 
15629 	i = data.indexOf('/*');
15630 	if (i &lt; 0) return data;
15631 
15632 	a = '';
15633 	
15634 	while (i >= 0)
15635 	{
15636 		if (i > 0) a += data.substr(0,i);
15637 		data = data.substr(i+2);
15638 		j = data.indexOf('*/');
15639 		if (j &lt; 0) break;
15640 
15641 		comment = data.substr(0,j);
15642 		data = data.substr(j+2);
15643 		i = data.indexOf('/*');
15644 		if (i &lt; 0) a += data;
15645 	}
15646 	
15647 	return this.html.trim(a);
15648 
15649 }	
15650 //============================================================================================
15651 //				htmlCss$load
15652 //============================================================================================
15653 function htmlCss$load(data,doc)
15654 {
15655 	var temp,i,url,a,value,j,changed;
15656 	var activeDoc,xdoc,xdata;
15657 
15658 	data = this.removeComments(data);
15659 	if (data == '') return;	
15660 
15661 	a = '';
15662 	changed = false;
15663 
15664 	i = data.indexOf('@');
15665 	while (i >= 0)
15666 	{
15667 		changed = true;
15668 		if (i > 0) a += data.substr(0,i);
15669 		data = data.substr(i+1);
15670 		temp = data.substr(0,20);
15671 		temp = this.html.trim(temp.toLowerCase());
15672 
15673 		if (temp.substr(0,5) == 'media') 
15674 		{
15675 			data = data.substr(5);
15676 			data = this.loadMedia(data);
15677 			i = data.indexOf('@');
15678 			continue;
15679 		}
15680 		
15681 		if (temp.substr(0,6) == 'import') 
15682 		{
15683 
15684 			data = data.substr(6);
15685 			j = data.indexOf(';');
15686 			if (j &lt; 0) j = data.length;
15687 			value = data.substr(0,j);
15688 			data = data.substr(j+1);	
15689 			i = data.indexOf('@');
15690 
15691 			j = value.indexOf('(');
15692 			if (j &lt; 0) continue;
15693 			temp = value.substr(j+1);
15694 			j = temp.indexOf(')');
15695 			if (j &lt; 0) continue;
15696 			
15697 			temp = temp.substr(0,j);
15698 			if (! this.html.document) continue;
15699 
15700 			url = this.html.document.resolve(temp);
15701 			temp = this.html.document.read(url);		// non-recursive
15702 			xdata =  this.removeComments(temp);
15703 
15704 			xdoc = new htmlDocument$(this.html,this.html.document.href);
15705 			this.load_A(xdata,xdoc);
15706 			
15707 			continue;
15708 		}	 
15709 
15710 		data = '';		// unknown syntax;
15711 		break;
15712 	}
15713 	
15714 	if (changed) data = a + data;
15715 	this.load_A(data,doc);
15716 
15717 }
15718 //============================================================================================
15719 //				htmlCss$insert
15720 //============================================================================================
15721 function htmlCss$insert(select)
15722 {
15723 	var next,prev,node;
15724 
15725 	select.next = null;
15726 	select.index = this.count;
15727 	this.count += 1;
15728 
15729 	if (this.top == null)
15730 	{
15731 		this.top = select;
15732 		return;
15733 	}
15734 	
15735 	node = this.top;
15736 	prev = null;
15737 	
15738 	while (node != null)
15739 	{
15740 		if (node.order &lt;= select.order) break;
15741 		prev = node;
15742 		node = node.next;
15743 	}
15744 	
15745 	if (node == null)
15746 	{
15747 		prev.next = select;
15748 		return;
15749 	}
15750 
15751 	if (prev == null)
15752 	{
15753 		select.next = this.top;
15754 		this.top = select;
15755 		return;
15756 	}
15757 	
15758 	select.next = prev.next;
15759 	prev.next = select;			
15760 		
15761 }
15762 //============================================================================================
15763 //				htmlCss$load_A
15764 //============================================================================================
15765 function htmlCss$load_A(data,doc)
15766 {
15767 	var i,j,text,style,selector,list,s,name,xlist;
15768 	var a,comment,match,select;
15769 	
15770 
15771 //---------------- parse Styles ----------------
15772 
15773 	while (data != '')
15774 	{
15775 		i = data.indexOf('{');
15776 		if (i &lt; 0) return;
15777 		selector = data.substr(0,i);
15778 		selector = this.html.trim(selector);
15779 		data = data.substr(i+1);
15780 		i = data.indexOf('}');
15781 		if (i &lt; 0) i = data.length;
15782 
15783 		text = data.substr(0,i);
15784 		data = this.html.trim(data.substr(i+1));
15785 
15786 		i = text.indexOf('!');
15787 		if (i >= 0) text = text.substr(0,i-1);
15788 	
15789 		style = new htmlStyle$(this.html,text,doc);
15790 
15791 		list = selector.split(',');
15792 
15793 		for (i=0; i &lt; list.length; ++i)
15794 		{
15795 
15796 			name = this.html.trim(list[i]);
15797 			if (name == '') continue;
15798 			
15799 			select = this.parseSelector(name);
15800 			if (select != null)
15801 			{
15802 				select.style = style;
15803 				this.insert(select);
15804 			}
15805 	
15806 		}
15807 	}
15808 }
15809 //============================================================================================
15810 //				htmlCss$parseSelector
15811 //============================================================================================
15812 function htmlCss$parseSelector(name)
15813 {
15814 	var list,a,c,match,op,i,data,obj,value;
15815 	var A,B,C,D,select,loop;
15816 	var name;
15817 	
15818 	name = this.html.trim(name);
15819 	name = this.html.compress(name);
15820 	name = name.toLowerCase();
15821 
15822 	name = name.replace(/\s>/g,'>');
15823 	name = name.replace(/>\s/g,'>');
15824 	
15825 	name = name.replace(/\s\+/g,'+');
15826 	name = name.replace(/\+\s/g,'+');
15827 
15828 	name = name + '!';
15829 
15830 	A = 0;
15831 	B = 0;
15832 	C = 0;
15833 	D = 0;
15834 
15835 	if (name == '') return null;
15836 
15837 	match = new Array();
15838 
15839 	op = 'tag';
15840 	
15841 	while (name != '')
15842 	{
15843 		for (i=0; i &lt; name.length; ++i)
15844 		{
15845 			c = name.charCodeAt(i);
15846 			if (c &lt;= 32) c = 32;
15847 			c = String.fromCharCode(c);
15848 			loop = true;
15849 		
15850 		switch (c)
15851 			{
15852 		case '!': 
15853 				if (i != name.length-1) break;
15854 				loop = false;
15855 				value = name.substr(0,i);
15856 				name = '';
15857 				if ((value == '') || (value == '*')) break;
15858 				obj = new Object();
15859 				obj.op = op;
15860 				obj.value = value;
15861 
15862 				if (op == 'tag') D += 1;
15863 	
15864 				match[match.length] = obj;
15865 				break;
15866 	
15867 		case " ":
15868 				loop = false;
15869 				value = name.substr(0,i);
15870 				name = name.substr(i+1);
15871 				if (!  ((value == '') || (value == '*')))
15872 				{
15873 					obj = new Object();
15874 					obj.op = op;
15875 					obj.value = value;
15876 					if (op == 'tag') D += 1;
15877 					if (op == 'class') D += 1;
15878 					match[match.length] = obj;
15879 				}
15880 	
15881 				obj = new Object();
15882 				obj.op = 'getparent';
15883 				obj.value = '';
15884 				match[match.length] = obj;
15885 
15886 				op = 'tag';	
15887 				break;
15888 
15889 		case ".":
15890 				loop = false;
15891 				value = name.substr(0,i);
15892 				name = name.substr(i+1);
15893 				if (! ((value == '') || (value == '*')))	
15894 				{
15895 					obj = new Object();
15896 					obj.op = op;
15897 					obj.value = value;
15898 					if (op == 'tag') D += 1;
15899 					match[match.length] = obj;
15900 				}
15901 				if (op != 'class') C += 1;
15902 				op = 'class';
15903 				break;
15904 
15905 		case '#':
15906 				loop = false;
15907 				value = name.substr(0,i);
15908 				name = name.substr(i+1);
15909 				if (! ((value == '') || (value == '*')))
15910 				{
15911 					obj = new Object();
15912 					obj.op = op;
15913 					obj.value = value;
15914 					if (op == 'tag') D += 1;
15915 					match[match.length] = obj;
15916 				}
15917 				op = 'id';
15918 				B += 1;
15919 				break;
15920 				
15921 		case '>':
15922 				loop = false;
15923 				value = name.substr(0,i);
15924 				name = name.substr(i+1);
15925 				if (! ((value == '') || (value == '*')))
15926 				{
15927 					obj = new Object();
15928 					obj.op = op;
15929 					obj.value = value;
15930 					if (op == 'tag') D += 1;
15931 					match[match.length] = obj;
15932 				}
15933 				
15934 				obj = new Object();
15935 				obj.op = 'parent';
15936 				obj.value = '';
15937 				
15938 				match[match.length] = obj;
15939 					
15940 				op = 'tag';
15941 				break;
15942 
15943 		case '+':
15944 				loop = false;
15945 				value = name.substr(0,i);
15946 				name = name.substr(i+1);
15947 				if (! ((value == '') || (value == '*')))
15948 				{
15949 					obj = new Object();
15950 					obj.op = op;
15951 					obj.value = value;
15952 					if (op == 'tag') D += 1;
15953 					match[match.length] = obj;
15954 				}
15955 					
15956 				obj = new Object();
15957 				obj.op = 'sibling';
15958 				obj.value = '';
15959 				match[match.length] = obj;
15960 					
15961 				op = 'tag';
15962 				break;
15963 
15964 		case ':':
15965 				{
15966 				loop = false;
15967 				value = name.substr(0,i);
15968 				name = name.substr(i+1);
15969 				if (! ((value == '') || (value == '*')))
15970 				{
15971 					obj = new Object();
15972 					obj.op = op;
15973 					obj.value = value;
15974 					if (op == 'tag') D += 1;
15975 					match[match.length] = obj;
15976 				}
15977 
15978 				C += 1;
15979 				op = 'mode';
15980 				break;
15981 				}
15982 				
15983 		case '[':
15984 				loop = false;
15985 				value = name.substr(0,i);
15986 				name = name.substr(i+1);
15987 				if (! ((value == '') || (value == '*')))
15988 				{
15989 					obj = new Object();
15990 					obj.op = op;
15991 					obj.value = value;
15992 					if (op == 'tag') D += 1;
15993 					match[match.length] = obj;
15994 				}
15995 
15996 				i = name.indexOf(']');
15997 				if (i &lt; 0) i = name.length;
15998 				value = name.substr(0,i-1);
15999 
16000 				i = value.indexOf('=');
16001 				if (i &lt; 0) i = value.length;
16002 				
16003 				obj = new Object();
16004 				obj.op = 'attr';
16005 				obj.name  = this.html.trim(value.substr(0,i));
16006 				obj.value = this.html.trim(value.substr(i+1));
16007 				if (obj.value.substr(0,1) == '"') 
16008 				{	
16009 					obj.value = obj.value.substr(1,obj.value.length-1);
16010 				}
16011 				else
16012 				{
16013 					if (obj.value.substr(0,1) == "'") obj.value = obj.value.substr(1,obj.value.length-1);
16014 				}
16015 				match[match.length] = obj;
16016 					
16017 				C += 1;
16018 				op = 'tag';
16019 				break;
16020 			}
16021 			
16022 			if (! loop) break;
16023 		}
16024 	}
16025 	
16026 	if (match.length == 0) return null;
16027 	
16028 	select = new Object();
16029 	select.match = match;
16030 	select.order = (A * 1000000) + (B * 10000) + (C * 100) + D;
16031 	
16032 	return select;
16033 }
16034 //============================================================================================
16035 //					htmlCss$copy
16036 //============================================================================================
16037 function htmlCss$copy(a,b,ele)
16038 {
16039 
16040 	if (a.clear			!= '') b.clear = a.clear;
16041 	if (a.top			!= '') b.top = a.top;
16042 	if (a.left			!= '') b.left = a.left;
16043 	if (a.height			!= '') b.height = a.height;
16044 	if (a.width			!= '') b.width = a.width;
16045 	if (a.color			!= '') b.color = a.color;
16046 	if (a.opacity			!= '') b.opacity= a.opacity;
16047 	if (a.fit			!= '') b.fit = a.fit;
16048 	if (a.backgroundColor		!= '') b.backgroundColor = a.backgroundColor;
16049 	if (a.backgroundImage		!= '') b.backgroundImage = a.backgroundImage;
16050 	if (a.backgroundRepeat		!= '') b.backgroundRepeat = a.backgroundRepeat;
16051 	if (a.backgroundPosition	!= '') b.backgroundPosition = a.backgroundPosition;
16052 	
16053 	if (a.borderLeft		!= '') b.borderLeft = this.changeBorder(a.borderLeft,ele);
16054 	if (a.borderRight		!= '') b.borderRight = this.changeBorder(a.borderRight,ele);
16055 	if (a.borderTop		!= '') b.borderTop = this.changeBorder(a.borderTop,ele);
16056 	if (a.borderBottom		!= '') b.borderBottom = this.changeBorder(a.borderBottom,ele);
16057 	
16058 	if (a.position			!= '') b.position = a.position ;
16059 	if (a.zIndex			!= '') b.zIndex = a.zIndex ;
16060 	if (a.display			!= '') b.display = a.display ;
16061 	if (a.visibility		!= '') b.visibility = a.visibility ;
16062 
16063 	if (a.float			!= '') b.float = a.float;
16064 
16065 	if (a.fontFamily		!= '') b.fontFamily = a.fontFamily;
16066 	if (a.fontSize			!= '') b.fontSize = a.fontSize;
16067 	if (a.fontSizeAdjust		!= '') b.fontSizeAdjust = a.fontSizeAdjust;
16068 	if (a.fontStretch		!= '') b.fontStretch = a.fontStretch;
16069 	if (a.fontStyle		!= '') b.fontStyle = a.fontStyle;
16070 	if (a.fontVariant		!= '') b.fontVariant = a.fontVariant;	 
16071 	if (a.fontWeight		!= '') b.fontWeight = a.fontWeight; 
16072 	if (a.letterSpacing		!= '') b.letterSpacing = a.letterSpacing;
16073 	if (a.fontRender		!= '') b.fontRender = a.fontRender;
16074 	if (a.fontSkew			!= '') b.fontSkew = a.fontSkew;
16075 	if (a.fontScale			!= '') b.fontScale = a.fontScale;
16076 
16077 	if (a.lineHeight		!= '') b.lineHeight = a.lineHeight ;
16078 	if (a.textAlign			!= '') b.textAlign = a.textAlign; 
16079 	if (a.textDecoration		!= '') b.textDecoration = a.textDecoration ;
16080 	if (a.textIndent		!= '') b.textIndent = a.textIndent ;
16081 	if (a.textShadow		!= '') b.textShadow = a.textShadow ;
16082 	if (a.textTransform		!= '') b.textTransform = a.textTransform;
16083 
16084 	if (a.vertialAlign		!= '') b.vertialAlign = a.vertialAlign;
16085 	if (a.textTransform		!= '') b.textTransform = a.textTransform;
16086 	if (a.textAlign			!= '') b.textAlign = a.textAlign;
16087 	if (a.textIndent		!= '') b.textIndent = a.textIndent;
16088 	
16089 	if (a.margin			!= '') b.margin = a.margin;
16090 	if (a.marginTop			!= '') b.marginTop = a.marginTop;
16091 	if (a.marginLeft		!= '') b.marginLeft = a.marginLeft;
16092 	if (a.marginRight		!= '') b.marginRight = a.marginRight;
16093 	if (a.marginBottom		!= '') b.marginBottom = a.marginBottom;
16094 	
16095 	if (a.padding			!= '') b.padding = a.padding;
16096 	if (a.paddingTop		!= '') b.paddingTop = a.paddingTop;
16097 	if (a.paddingLeft		!= '') b.paddingLeft = a.paddingLeft;
16098 	if (a.paddingRight		!= '') b.paddingRight = a.paddingRight;
16099 	if (a.paddingBottom		!= '') b.paddingBottom = a.paddingBottom;
16100 	
16101 	if (a.pageBreakBefore		!= '') b.pageBreakBefore = a.pageBreakBefore;
16102 	if (a.pageBreakAfter		!= '') b.pageBreakAfter = a.pageBreakAfter;
16103 	if (a.clip			!= '') b.clip = a.clip;
16104 	if (a.filter			!= '') b.filter = a.filter;
16105 	if (a.tableLayout		!= '') b.tableLayout = a.tableLayout;
16106 	if (a.borderCollapse		!= '') b.borderCollapse = a.borderCollapse;
16107 	if (a.direction			!= '') b.direction = a.direction;
16108 	if (a.behavior			!= '') b.behavior = a.behavior;
16109 	if (a.wordBreak			!= '') b.wordBreak = a.wordBreak;
16110 	if (a.lineBreak			!= '') b.lineBreak = a.lineBreak;
16111 	if (a.texJustify		!= '') b.texJustify = a.texJustify;
16112 	if (a.textJustifyTrim		!= '') b.textJustifyTrim = a.textJustifyTrim;
16113 	if (a.textAutospace		!= '') b.textAutospace = a.textAutospace;
16114 	if (a.overflowX			!= '') b.overflowY = a.overflowY;
16115 	if (a.overflowY			!= '') b.overflowY = a.overflowY;
16116 	if (a.layoutFlow		!= '') b.layoutFlow = a.layoutFlow;
16117 	if (a.zoom			!= '') b.zoom = a.zoom;
16118 	if (a.wordWrap			!= '') b.wordWrap = a.wordWrap;
16119 	if (a.writingMode		!= '') b.writingMode = a.writingMode;
16120 	if (a.textAlignLast		!= '') b.textAlignLast = a.textAlignLast;
16121 	if (a.textOverflow		!= '') b.textOverflow = a.textOverflow;
16122 	if (a.minHeight			!= '') b.minHeight = a.minHeight;
16123 	if (a.minWidth			!= '') b.minWidth = a.minWidth;
16124 	if (a.maxHeight			!= '') b.maxHeight = a.maxHeight;
16125 	if (a.maxWidth			!= '') b.maxWidth = a.maxWidth;
16126 
16127 	if (a.listStyleType		!= '') b.listStyleType = a.listStyleType;
16128 	if (a.listStyleImage		!= '') b.listStyleImage = a.listStyleImage;	
16129 	
16130 }
16131 //============================================================================================
16132 //									htmlActive
16133 //============================================================================================
16134 function htmlActive$()
16135 {
16136 	this.xpos		= 0;
16137 	this.ypos		= 0;
16138 	this.Lcount		= 0;
16139 	this.Rcount		= 0;
16140 	this.Lstack		= new Array();
16141 	this.Rstack		= new Array();
16142 	this.marginLeft		= 0;
16143 	this.leftBottom		= 0;
16144 	this.marginRight	= 0;
16145 	this.rightBottom	= 0;
16146 	this.rowHeight		= 0;
16147 	this.columns		= 0;
16148 	this.width		= 0;
16149 	this.maxWidth		= 0;
16150 	this.remain		= 0;
16151 	this.aligned		= false;
16152 	this.counter		= 0;
16153 	this.xmax		= 0;
16154 	this.rowCount		= 0;
16155 
16156 	this.rows		= new Array();
16157 }
16158 //============================================================================================
16159 //				htmlelement
16160 //============================================================================================
16161 function htmlElement$(html,tagName,level)
16162 {
16163 	var NODE_TEXT = 3;
16164 	var NODE_TAG  = 1;
16165 
16166 	this.html			= html;
16167 	this.className			= '';
16168 	this.id				= '';
16169 	this.htmlData			= '';
16170 	this.outline			= '';
16171 
16172 	this.xjust			= 0;
16173 	this.yjust			= 0;
16174 	this.baseY			= 0;
16175 	this.level			= 0;
16176 
16177 	this.isNode			= htmlElement$isNode;
16178 
16179 	this.write			= htmlElement$write;
16180 	this.write_A			= htmlElement$write_A;	
16181 	this.writeElement		= htmlElement$writeElement;	
16182 	this.writeElementText		= htmlElement$writeElementText;
16183 	this.writeElementMatrix		= htmlElement$writeElementMatrix;
16184 	this.getText			= htmlElement$getText;
16185 	this.getInnerText		= htmlElement$getInnerText;
16186 	this.getInnerText_A		= htmlElement$getInnerText_A;
16187 	
16188 	this.placeColumn_nocolspan	= htmlElement$placeColumn_nocolspan;
16189 	
16190 	this.writeBorder		= htmlElement$writeBorder;	
16191 	this.writeBackground		= htmlElement$writeBackground;	
16192 	this.traceBorder		= htmlElement$traceBorder;
16193 	this.scale			= htmlElement$scale;
16194 	
16195 	this.findColumn		= htmlElement$findColumn;
16196 	this.adjustSpannedColumns	= htmlElement$adjustSpannedColumns;
16197 	this.adjustColumn		= htmlElement$adjustColumn;
16198 	this.findParentNode		= htmlElement$findParentNode;
16199 		
16200 	this.appendChild		= htmlElement$appendChild;
16201 	this.toString			= htmlElement$toString;
16202 	this.place			= htmlElement$place;
16203 	this.init			= htmlElement$init;
16204 	this.xpos			= htmlElement$xpos;
16205 	this.ypos			= htmlElement$ypos;
16206 	this.lastChild			= htmlElement$lastChild;
16207 	this.setSize			= htmlElement$setSize;
16208 	this.align_dx			= htmlElement$align_dx;
16209 	this.align_dy			= htmlElement$align_dy;
16210 
16211 	this.wordWidth			= htmlElement$wordWidth;
16212 	this.charWidth			= htmlElement$charWidth;
16213 	this.charHeight			= htmlElement$charHeight;
16214 
16215 	this.justifyCell		= htmlElement$justifyCell;
16216 
16217 	this.pushLeft_			= htmlElement$pushLeft_;
16218 	this.pushRight_			= htmlElement$pushRight_;
16219 	this.newRow_			= htmlElement$newRow_;
16220 	this.flushRow_			= htmlElement$flushRow_;
16221 	this.countText_			= htmlElement$countText_;
16222 	this.roman_			= htmlElement$roman_;
16223 	this.justify_			= htmlElement$justify_;
16224 	this.updateSize_		= htmlElement$updateSize_;
16225 
16226 	this.setActive			= htmlElement$setActive;
16227 	this.setMargin			= htmlElement$setMargin;
16228 
16229 	this.placeChildren		= htmlElement$placeChildren;
16230 	this.place			= htmlElement$place;
16231 	this.placeDone_			= htmlElement$placeDone_;
16232 
16233 	this.place_text			= htmlElement$place_text;
16234 	this.place_IMG			= htmlElement$place_IMG;
16235 	this.place_GRAPHIC		= htmlElement$place_GRAPHIC;
16236 	this.place_GROUP		= htmlElement$place_GROUP;
16237 	this.place_LI			= htmlElement$place_LI;
16238 	this.place_DIV			= htmlElement$place_DIV;
16239 	this.place_INPUT		= htmlElement$place_INPUT;
16240 	this.place_SELECT		= htmlElement$place_SELECT;
16241 	this.place_TEXTAREA		= htmlElement$place_TEXTAREA;
16242 	this.place_BLOCKQUOTE		= htmlElement$place_BLOCKQUOTE;
16243 	this.place_UL			= htmlElement$place_UL;
16244 	this.place_BR			= htmlElement$place_BR;
16245 	this.place_HR			= htmlElement$place_HR;
16246 	this.place_SUP			= htmlElement$place_SUP;
16247 	this.place_SUB			= htmlElement$place_SUB;
16248 	this.place_TABLE		= htmlElement$place_TABLE;
16249 	this.place_TABLE_A		= htmlElement$place_TABLE_A;
16250 	this.place_P			= htmlElement$place_P;
16251 	this.place_LABEL		= htmlElement$place_LABEL;
16252 	this.place_FRAME		= htmlElement$place_FRAME;
16253 	this.place_IFRAME		= htmlElement$place_IFRAME;
16254 	this.place_FRAMESET		= htmlElement$place_FRAMESET;
16255 
16256 	this.widthAvail			= htmlElement$widthAvail;
16257 	this.writeMap			= htmlElement$writeMap;
16258 
16259 	this.place_text_A		= htmlElement$place_text_A;
16260 	this.place_text_B		= htmlElement$place_text_B;
16261 
16262 	this.place_TIMELINE		= htmlElement$place_TIMELINE;
16263 	this.place_SCHEDULE		= htmlElement$place_SCHEDULE;
16264 
16265 	this.place_CALENDAR		= htmlElement$place_CALENDAR;
16266 	this.place_DIVIDE		= htmlElement$place_DIVIDE;
16267 	this.place_RAISE		= htmlElement$place_RAISE;
16268 	this.place_ROOT			= htmlElement$place_ROOT;
16269 	this.place_QUANTITY		= htmlElement$place_QUANTITY;
16270 	this.place_MATRIX		= htmlElement$place_MATRIX;
16271 	this.place_INTEGRAL		= htmlElement$place_INTEGRAL;
16272 
16273 	this.place_SUMMATION		= htmlElement$place_SUMMATION;
16274 
16275 	this.dy				= htmlElement$dy;
16276 	this.positionChild_		= htmlElement$positionChild_;
16277 	this.addImage_			= htmlElement$addImage_;
16278 
16279 	this.getBorder_			= htmlElement$getBorder_;
16280 	this.getBorder_A		= htmlElement$getBorder_A;
16281 
16282 	this.padWidth			= htmlElement$padWidth;
16283 	this.padLeft			= htmlElement$padLeft;
16284 	this.padRight			= htmlElement$padRight;
16285 	this.padTop			= htmlElement$padTop;
16286 	this.padBottom			= htmlElement$padBottom;
16287 	
16288 	this.inherit			= htmlElement$inherit;
16289 	this.loadCell			= htmlElement$loadCell;
16290 	
16291 	this.adjustTableHeight		= htmlElement$adjustTableHeight;
16292 	this.adjustRowHeight		= htmlElement$adjustRowHeight;
16293 	this.adjustSpannedRowHeight	= htmlElement$adjustSpannedRowHeight;
16294 
16295 	this.initTable			= htmlElement$initTable;
16296 	this.getAll			= htmlElement$getAll;
16297 	this.fullName			= htmlElement$fullName;
16298 
16299 	this.tagName			= tagName.toUpperCase();
16300 	this.nodeType		= NODE_TAG;
16301 	this.firstChild		= null;
16302 	this.nextSibling		= null;
16303 	this.parentElement		= null;
16304 	this.parentNode			= null;
16305 	this.offsetLeft			= 0;
16306 	this.offsetTop			= 0;
16307 	this.offsetHeight		= 0;
16308 	this.offsetWidth		= 0;
16309 	this.x				= 0;
16310 	this.y				= 0;
16311 	this.style			= null;
16312 
16313 	this.aheight			= 0;		// actual
16314 	this.awidth			= 0;
16315 	this.fixedHeight		= false;
16316 	this.fixedWidth			= false;
16317 
16318 	this.percent_width		= false;
16319 	this.percent_height		= false;
16320 	this.fixed_width		= false;
16321 	this.fixed_height		= false;
16322 	this.iheight			= 0;
16323 	this.iwidth			= 0;
16324 
16325 	this.marginTop			= 0;
16326 	this.marginBottom		= 0;
16327 	this.marginRight		= 0;
16328 	this.marginLeft			= 0;
16329 
16330 	this.paddingTop			= 0;
16331 	this.paddingBottom		= 0;
16332 	this.paddingRight		= 0;
16333 	this.paddingLeft		= 0;
16334 	
16335 	this.borderTop			= '';
16336 	this.borderBottom		= '';
16337 	this.borderRight		= '';
16338 	this.borderLeft			= '';
16339 	
16340 	this.fillColor			= '';
16341 	this.borderColor		= '';
16342 	this.borderLineWidth		= 0;
16343 	this.borderLineStyle		= '';
16344 
16345 	this.id				= '';
16346 	this.name			= '';
16347 
16348 	this.font			= new htmlFont$(html);
16349 
16350 	this.dump			= htmlElement$dump;
16351 	
16352 	this.active			= new htmlActive$();
16353 }
16354 //============================================================================================
16355 //				htmlElement$getText
16356 //============================================================================================
16357 function htmlElement$getText()
16358 {
16359 	var text,j;
16360 	
16361 	text = '';
16362 	if (this.parts)
16363 	{
16364 		for (j=0; j &lt; this.parts.length; ++j)
16365 		{
16366 			if (text += '') text += ' ';
16367 			text += this.html.trim(this.parts[j].text);
16368 		}
16369 	}
16370 	else
16371 	{
16372 		if (this.tagName == '#TEXT') text = this.text;
16373 	}
16374 
16375 	return text;
16376 }
16377 //============================================================================================
16378 //				htmlElement$getInnerText
16379 //============================================================================================
16380 function htmlElement$getInnerText()
16381 {
16382 	var text,temp,j,child;
16383 	
16384 	text = '';
16385 	if (this.parts)
16386 	{
16387 		for (j=0; j &lt; this.parts.length; ++j)
16388 		{
16389 			if (text += '') text += ' ';
16390 			text += this.html.trim(this.parts[j].text);
16391 		}
16392 	}
16393 	else
16394 	{
16395 		if (this.tagName == '#TEXT') text = this.text;
16396 	}
16397 
16398 	if (this.tagName == '#TEXT') return text;
16399 
16400 //--------------------- Formatted Row ----------------------------
16401 
16402 	if ((this.tagName == 'TR' || this.tagName == 'TH') && this.html.formatRow) 
16403 	{
16404 		child = this.firstChild;
16405 		while (child != null)
16406 		{
16407 			temp = child.getInnerText_A();
16408 			if (text != '') text += ',';
16409 			text += temp;
16410 			child = child.nextSibling;
16411 		}
16412 		
16413 		return text;
16414 	}	
16415 
16416 //--------------------- Formatted Table ----------------------------
16417 
16418 	if (this.tagName == 'TABLE' && this.html.formatRow) 
16419 	{
16420 		child = this.firstChild;
16421 		while (child != null)
16422 		{
16423 			temp = child.getInnerText_A();
16424 			if (text != '') text += '\r\n';
16425 			text += temp;
16426 			child = child.nextSibling;
16427 		}
16428 		
16429 		return text;
16430 	}	
16431 
16432 //-------------------------------------------------------------------- 
16433 
16434 	if (this.firstChild != null) 
16435 	{
16436 		text += ' ' +  this.firstChild.getInnerText_A();
16437 	}	
16438 
16439 	text =	this.html.trim(text) 
16440 	return text;
16441 }
16442 //============================================================================================
16443 //				htmlElement$getInnerText_A
16444 //============================================================================================
16445 function htmlElement$getInnerText_A()
16446 {
16447 	var text,temp,j,c,child,node;
16448 
16449 
16450 	text = '';	
16451 	if (this.parts)
16452 	{
16453 		for (j=0; j &lt; this.parts.length; ++j)
16454 		{
16455 			if (text += '') text += ' ';
16456 			text += this.html.trim(this.parts[j].text);
16457 		}
16458 	}
16459 	else
16460 	{
16461 		if (this.tagName == '#TEXT') text = this.text;
16462 	}
16463 
16464 	if (this.tagName == '#TEXT') return text;
16465 
16466 	if (this.firstChild != null)
16467 	{
16468 		child = this.firstChild;
16469 		temp = child.getInnerText();
16470 		if (temp != '') text += ' ' + temp;
16471 	}
16472 	
16473 	node = this.nextSibling;
16474 	while (node != null)
16475 	{
16476 		temp = node.getInnerText();
16477 		if (temp != '') text += ' ' + temp;
16478 		node = node.nextSibling;
16479 	}
16480 
16481 	text =	this.html.trim(text);
16482 	return text;
16483 }
16484 //============================================================================================
16485 //				htmlElement$getAll
16486 //============================================================================================
16487 function htmlElement$getAll(all,tags)
16488 {
16489 	var found;
16490 	
16491 	found = true;
16492 	if (tags.length > 0) 
16493 	{
16494 		found = false;
16495 		for (i=0; i &lt; tags.length; ++i)
16496 		{
16497 			if (tags[i] == this.tagName)
16498 			{
16499 				found = true;
16500 				break;
16501 			}
16502 		}
16503 	}
16504 
16505 	if (found) all[all.length] = this;
16506 		
16507 	if (this.firstChild != null) this.firstChild.getAll(all,tags);
16508 	if (this.nextSibling != null) this.nextSibling.getAll(all,tags);
16509 }
16510 //============================================================================================
16511 //				htmlElement$fullName
16512 //============================================================================================
16513 function htmlElement$fullName()
16514 {
16515 	var name,id;
16516 
16517 	name = this.tagName;
16518 	id = this.id;
16519 	if (id != '') name += ':' + id;
16520 	
16521 	if (this.parentElement == null) return name ;
16522 	
16523 	name = this.parentElement.fullName() + '/' + name;
16524 	return name;
16525 		
16526 }
16527 //============================================================================================
16528 //				htmlElement$dump
16529 //============================================================================================
16530 function htmlElement$dump()
16531 {
16532 	var text,a, j, tx,ty;
16533 
16534 	a = this;
16535 		
16536 	text = ' x: ' + this.offsetLeft + ' y: ' + this.offsetTop + ' width: ' + this.offsetWidth + ' height: ' + this.offsetHeight;
16537 	
16538 	if (! this.parts) return text;
16539 
16540 	for (j=0; j &lt; this.parts.length; ++j)
16541 	{
16542 		text = this.html.trim(this.parts[j].text);
16543 		if (text == '') continue;
16544 
16545 		tx = (this.parts[j].offsetLeft + this.parts[j].xjust);
16546 		ty = (this.parts[j].offsetTop + this.parts[j].yjust);
16547 
16548 		text += 'part: ' + j + ' tx: ' + tx + ' ty: ' + ty + text + '\r\n';
16549 	}
16550 
16551 
16552 	return text;
16553 }
16554 //============================================================================================
16555 //				htmlElement$inherit
16556 //============================================================================================
16557 function htmlElement$inherit(name)
16558 {
16559 	var value;
16560 	
16561 	if (! this.style) return '';
16562 	value = eval('this.style.' + name);
16563 	if (value == undefined) value = '';
16564 	if (value != '') return value;
16565 	
16566 	if (this.parentElement == null) return '';
16567 
16568 	if (this.tagName == 'TH') return '';
16569 	if (this.tagName == 'TD') return '';
16570 	if (this.tagName == 'TABLE') return '';
16571 	
16572 	return this.parentElement.inherit(name);
16573 	
16574 }
16575 //============================================================================================
16576 //				htmlElement$justifyCell
16577 //============================================================================================
16578 function htmlElement$justifyCell(row,rowHeight)
16579 {
16580 
16581 		var dx,dy,xmax,ele,c,align,valign,t;
16582 		var height,width,tx,ty,xrow,i;
16583 
16584 		t = this;
16585 		
16586 		align = this.align;
16587 		valign = this.valign;
16588 		if (this.style.verticalAlign != '') valign = this.style.verticalAlign;
16589 	
16590 		if (align == '') align = this.parentElement.align;
16591 		if (valign == '') valign = this.parentElement.valign;
16592 		
16593 		if (valign == '') valign = 'middle';
16594 
16595 		width = this.clientWidth;
16596 		width = width - (this.paddingLeft + this.paddingRight + this.borderLeft + this.borderRight);
16597 
16598 //		dy = row.offsetHeight - this.clientHeight;
16599 		dy = rowHeight - this.clientHeight;
16600 
16601 		if (dy &lt; 0) dy = 0;
16602 		dx = this.offsetWidth - this.clientWidth;
16603 		if (dx &lt; 0) dx = 0;
16604 
16605 		tx = 0;
16606 		if (align == 'center') tx = Math.floor(dx / 2);
16607 		if (align == 'middle') tx = Math.floor(dx / 2);
16608 		if (align ==  'right') tx = dx;
16609 	
16610 		ty = 0;
16611 		if (valign == 'center') ty = Math.floor(dy / 2);
16612 		if (valign == 'middle') ty = Math.floor(dy / 2);
16613 		if (valign == 'bottom') ty = dy;
16614 			
16615 		xmax = width ;
16616 
16617 		for (i=0; i &lt; this.active.rows.length; ++i)
16618 		{
16619 			xrow = this.active.rows[i];
16620 	
16621 			for (c = 0; c &lt; xrow.cells.length; ++c)
16622 			{
16623 				ele = xrow.cells[c];
16624 			    dx =  this.align_dx(align,ele.offsetWidth,width);
16625 
16626 				ele.xjust = tx + dx;
16627 				ele.yjust = ty;
16628 			}
16629 		}
16630 }
16631 //============================================================================================
16632 //				html$initTable
16633 //============================================================================================
16634 function htmlElement$initTable()
16635 {
16636 	var i,obj,j,col,wid;
16637 	var row,cell,border,r;
16638 
16639 	for (r=0; r &lt; this.rows.length; ++r)
16640 	{
16641 		row = this.rows[r];
16642 		row.maxHeight = 0;			// non-spanned rows max height
16643 	}
16644 
16645 	this.setActive();
16646 	this.offsetHeight = 0;
16647 	this.offsetWidth = 0;
16648 
16649 	this.active.width = 0;
16650 	this.active.remain = 0;
16651 
16652 	border = 0;
16653 	if (this.border > 0) border = 1;
16654 
16655 //----------- Set column Widths ---------------
16656 
16657 	this.colWidths = new Array();
16658 	
16659 	for (i=0; i &lt;= this.maxColumnIndex; ++i)
16660 	{
16661 		obj = new Object();
16662 		obj.width		= 0;
16663 		obj.fixed		= false;
16664 		obj.percent	= false;
16665 		obj.used		= false;
16666 		this.colWidths[i] = obj;
16667 	}
16668 
16669 	for (i = 0; i &lt; this.rows.length; ++i)
16670 	{
16671 		row = this.rows[i];
16672 		row.maxHeight = 0;			// non-spanned rows max height
16673 		row.active.maxWidth = this.active.maxWidth - ((this.cellspacing * 2) + this.borderLeft + this.borderRight);
16674 	
16675 		for (j=0; j &lt; row.cells.length; ++j)
16676 		{
16677 			cell = row.cells[j];
16678 			cell.setMargin();	
16679 
16680 			if (cell.colspan > 1) continue;
16681 			col = this.colWidths[cell.colIndex];
16682 			col.scanned = false;
16683 
16684 			if (col.fixed || col.percent) continue;
16685 			
16686 			if (cell.fixed_width)
16687 			{
16688 				col.fixed = true;
16689 				col.width = cell.iwidth;
16690 				col.used  = true;
16691 				continue;
16692 			}
16693 		
16694 			if (cell.percent_width)
16695 			{
16696 				col.percent = true;
16697 				col.width = cell.iwidth;
16698 				col.used  = true;
16699 				continue;
16700 			}
16701 		
16702 		}
16703 	}	
16704 
16705 }
16706 //============================================================================================
16707 //				htmlElement$countText_
16708 //============================================================================================
16709 function htmlElement$countText_(name)
16710 {
16711 	var value,n;
16712 	var greek = new Array("Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi",
16713 						   "Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega");
16714 
16715 	value = this.count + '.';
16716 	name = name.toLowerCase();
16717 	switch (name)
16718 	{
16719 	case     "decimal": return value;
16720 	case "upper-roman": return this.roman_(this.count) + '.';  
16721 	case "lower-roman": return this.roman_(this.count).toLowerCase() + '.';
16722 	case "upper-alpha": return String.fromCharCode(this.count + 64) + '.';
16723 
16724 	case "lower-alpha": return String.fromCharCode(this.count + 96) + '.';
16725 	case "lower-alpha": return String.fromCharCode(this.count + 96) + '.';
16726 	}
16727 
16728 	return value;
16729 }
16730 //============================================================================================
16731 //				htmlElement$roman
16732 //============================================================================================
16733 function htmlElement$roman_(value)
16734 {
16735 	var n,c,val;
16736 	
16737 	var rnumber = new Array('I','II','III','IV','V','VI','VII','VIII','IX','X','XI','XII','XIII','XIV','XV','XVI','XVII','XVIII',
16738 		'XIX','XX','XXI','XXII','XXIII','XXIV','XXV','XXVI','XXVII','XXVIII','XXIX','XXX','XXXI','XXXII','XXXIII','XXXIV',
16739 		'XXXV','XXXVI','XXXVII','XXXVIII','XXXIX','XL','XLI','XLII','XLIII','XLIV','XLV','XLVI','XLVII','XLVIII','XLIX',
16740 		'L','LI','LII','LIII','LIV','LV','LVI','LVII','LVIII','LIX','LX','LXI','LXII','LXIII','LXIV','LXV','LXVI',
16741 		'LXVII','LXVIII','LXIX','LXX','LXXI','LXXII','LXXIII','LXXIV','LXXV','LXXVI','LXXVII','LXXVIII','LXXIX','LXXX',
16742 		'LXXXI','LXXXII','LXXXIII','LXXXIV','LXXXV','LXXXVI','LXXXVII','LXXXVIII','LXXXIX','XC','XCI','XCII','XCIII',
16743 		'XCIV','XCV','XCVI','XCVII','XCVIII','XCIX','C');
16744 
16745 
16746 	n = html$i4(value);
16747 	if (n &lt;= 0) return 'I';
16748 
16749 	c = Math.floor(n / 100);
16750 	n = (n-1) % 100;
16751 	
16752 	if (c ==  0) return rnumber[n];
16753 	if (c ==  1) return 'C' + rnumber[n];
16754 	if (c ==  2) return 'CC' + rnumber[n];
16755 	if (c ==  3) return 'CCC' + rnumber[n];
16756 	if (c ==  4) return 'CD' + rnumber[n];
16757 	if (c ==  5) return 'D' + rnumber[n];
16758 	if (c ==  6) return 'DC' + rnumber[n];
16759 	if (c ==  7) return 'DCC' + rnumber[n];
16760 	if (c ==  8) return 'DCCC' + rnumber[n];
16761 	if (c ==  9) return 'CM' + rnumber[n];
16762 
16763 	if (c >=  10) 
16764 	{
16765 		val = html$i4(value) - 1000;
16766 		return 'M' + this.roman_(val);
16767 	}
16768 
16769 	return rnumber[n];
16770 }
16771 //============================================================================================
16772 //			html$parseFontSize (points)
16773 //============================================================================================
16774 function html$parseFontSize(value)
16775 {
16776 	var r8,units,fsize;
16777 
16778 	if (value == undefined) return this.default_fontSize;
16779 	if (value == '') return this.default_fontSize;
16780 	if (value == 0) return this.default_fontSize;
16781 	
16782 	value = '' + value;
16783 
16784 	value = value.toLowerCase();
16785 	if (value == 'x-small') return 8;
16786 	if (value == 'small') return 10;
16787 	if (value == 'mediam') return 12;
16788 	if (value == 'large') return 16;
16789 
16790 	r8 = parseFloat(value);
16791 	if (isNaN(r8)) return this.default_fontSize;
16792 	if (r8 &lt;= 0) return this.default_fontSize;
16793 	if (value.length &lt; 3) return r8;
16794 	
16795 	units = value.substr(value.length-2);
16796 	units = units.toLowerCase();
16797 
16798 	fsize = this.default_fontSize;
16799 	
16800 	if (value.substr(value.length-1,1) == '%') return Math.round((r8 / 100) * fsize);
16801 
16802 	if (units == 'ex')return r8 / 110 * 72;
16803 	
16804 	if (units == 'em') return Math.round(r8 * fsize);
16805 	if (units == 'px') return r8 / 110 * 72;
16806 	if (units == 'in') return Math.round(r8 * this.html.bpi);
16807 	if (units == 'cm') return Math.round((r8 * this.html.bpi) / 2.54);
16808 	if (units == 'mm') return Math.round((r8 * this.html.bpi) / 25.4);
16809 	if (units == 'pt') return r8;
16810 	if (units == 'pc') return Math.round(r8 * 10);
16811 	
16812 	return Math.round(r8 / 110 * 72);
16813 }
16814 //============================================================================================
16815 //				htmlelement$size (pixels)
16816 //============================================================================================
16817 function html$getSize(value,e)
16818 {
16819 	var value,r8,units;
16820 	var w,percent,fsize;
16821 
16822 	if (value == '') return 0;
16823 	if (value == 0) return 0;
16824 
16825 	value = '' + value;
16826 
16827 	if (e)
16828 	if (value.substr(value.length-1) == '%')
16829 	{
16830 		percent = html$i4(value);
16831 		percent = percent / 100;
16832 		
16833 		if (e.parentNode != null)	
16834 		{
16835 			w = e.parentNode.active.maxWidth;
16836 			value = w * percent;
16837 			return value;
16838 		}
16839 	}
16840 					
16841 	r8 = parseFloat(value);
16842 	if (isNaN(r8)) return 0;
16843 	if (r8 &lt;= 0) return 0;
16844 
16845 	value = '' + value;
16846 	if (value.length &lt; 3) return r8;
16847 	
16848 	units = value.substr(value.length-2);
16849 	units = units.toLowerCase();
16850 
16851 	fsize = this.default_fontSize;
16852 
16853 	if (units == 'em') return Math.round(r8 * fsize);
16854 	if (units == 'px') return r8;
16855 	if (units == 'in') return Math.round(r8 * this.bpi);
16856 	if (units == 'cm') return Math.round((r8 * this.bpi) / 2.54);
16857 	if (units == 'mm') return Math.round((r8 * this.bpi) / 25.4);
16858 	if (units == 'pt') return Math.round(r8 * 110 / 72);
16859 	if (units == 'pc') return Math.round(r8 * 10);
16860 	
16861 	return Math.round(r8);
16862 }
16863 //============================================================================================
16864 //			htmlelement#lastChild
16865 //============================================================================================
16866 function htmlElement$lastChild()
16867 {
16868 	var c;
16869 	
16870 	c = this.firstChild;
16871 	if (c == null) return null;
16872 
16873 	while (c.nextSibling != null) c = c.nextSibling;
16874 	
16875 	return c;	
16876 }
16877 //============================================================================================
16878 //			htmlelement$xpos
16879 //============================================================================================
16880 function htmlElement$xpos()
16881 {
16882 	var x,p;
16883 
16884 	x = this.offsetLeft;
16885 	p = this.parentNode;
16886 	while (p != null)
16887 	{
16888 		x = x + p.offsetLeft;
16889 		p = p.parentNode;
16890 	}
16891 
16892 	return x;
16893 }
16894 //============================================================================================
16895 //			htmlelement$ypos
16896 //============================================================================================
16897 function htmlElement$ypos()
16898 {
16899 	var y,p;
16900 
16901 	y = this.offsetTop;
16902 	p = this.parentNode;
16903 	while (p != null)
16904 	{
16905 		y = y + p.offsetTop;
16906 		p = p.parentNode;
16907 	}
16908 
16909 	return y;
16910 }
16911 //============================================================================================
16912 //			htmlelement$init
16913 //============================================================================================
16914 function htmlElement$init()
16915 {
16916 	var width,height,percent;
16917 	var e;
16918 	
16919 	e = this;
16920 
16921 	width = '';
16922 	height = '';
16923 
16924 	if (this.width != undefined) width = '' + this.width;
16925 	if (this.height != undefined) height = '' + this.height;
16926 
16927 	if (this.style)
16928 	{	
16929 		if (this.style.width != '') width = '' + this.style.width;
16930 		if (this.style.height != '') height = '' + this.style.height;
16931 	}
16932 
16933 //--------- width ----------
16934 	
16935 	if (width != '')
16936 	{
16937 		if (width.substr(width.length-1) == '%')
16938 		{
16939 			percent = html$i4(width);				
16940 			this.percent_width = true;
16941 			this.iwidth = percent;
16942 
16943 		}
16944 		else
16945 		{
16946 			this.iwidth = html$i4(width);
16947 			this.fixed_width = true;
16948 		}						
16949 	}
16950 
16951 //--------- height ----------
16952 
16953 	if (height != '')
16954 	{
16955 		if (height.substr(height.length-1) == '%')
16956 		{
16957 			percent = html$i4(height);
16958 			this.percent_height = true;
16959 			this.iheight = percent;
16960 		}
16961 		else
16962 		{
16963 			this.iheight = html$i4(height);			
16964 			this.fixed_height = true;
16965 		}
16966 	}
16967 }
16968 //============================================================================================
16969 //			htmlelement$toString
16970 //============================================================================================
16971 function htmlElement$toString()
16972 {
16973 	var NODE_TEXT = 3;
16974 	var NODE_TAG  = 1;
16975 
16976 	var text,t,i,p,href,row;
16977 	
16978 	t = this;
16979 	
16980 	text = this.tagName;
16981 	if (this.tagName == 'BR') return text;
16982 
16983 //	text += ' type: ' + this.nodeType;
16984 
16985 	if (this.nodeType == NODE_TAG)
16986 	{
16987 		if (this.id != '') text += ' id: ' + this.id;
16988 		if (this.name != '') text += ' name: ' + this.name;
16989 		if (this.className != '') text += ' class: ' + this.className;
16990  + this.offsetTop + ' height: ' + this.offsetHeight + ' width: ' + this.offsetWidth;
16991 	}
16992 	
16993 	if (this.tagName == '#TEXT') 
16994 	{
16995 
16996 		text += ' text: ' + this.text;
16997 		if (this.html.href != '')
16998 		{
16999 			 href = this.html.href;
17000 			 if (this.html.document) href = this.html.document.resolve(href);
17001 			 text += ' href: ' + href;
17002 			 if (this.html.href_title != '') text += ' title: ' + this.html.href_title;
17003 			 if (this.html.href_target != '') text += ' target: ' + this.html.href_target;
17004 				 
17005 		}
17006 
17007 		if (this.parts)
17008 		{
17009 			for (i=0; i &lt; this.parts.length; ++i)
17010 			{
17011 				p = this.parts[i];
17012 				text += ' | x:' + p.offsetLeft + ' y:' + p.offsetTop + ' h:';
17013 				text += p.offsetHeight + ' w:' + p.offsetWidth + ' T: ' + p.text;
17014 
17015 			}
17016 		}
17017 	
17018 		return text;
17019 	}
17020 
17021 	if (this.active.rows == undefined) return text;
17022 
17023 	text += ' rows: ' + this.active.rows.length;
17024 	for (i=0; i &lt; this.active.rows.length; ++i)
17025 	{
17026 		row = this.active.rows[i];
17027 		text += ') ' +  i + ' cells: ' + row.cells.length;
17028 	}
17029 	return text;
17030 
17031 }
17032 //============================================================================================
17033 //			htmlElement$isNode
17034 //============================================================================================
17035 function htmlElement$isNode()
17036 {
17037 
17038 		switch (this.tagName)
17039 		{
17040 			case       "BODY": return true;
17041 			case        "DIV": return true;
17042 			case       "SPAN": return true;
17043 			case          "P": return true;
17044 			case          "A": return true;
17045 			case         "TD": return true;
17046 			case         "TH": return true;
17047 			case         "TR": return true;
17048 			case      "TABLE": return true;
17049 			case     "CENTER": return true;
17050 			case "BLOCKQUOTE": return true;
17051 			case         "H1": return true;
17052 			case         "H2": return true;
17053 			case         "H3": return true;
17054 			case         "H4": return true;
17055 			case         "H5": return true;
17056 			case         "H6": return true;
17057 			case      "LABEL": return true;
17058 			case       "EVAL": return true;
17059 
17060 			case      "RAISE": return true;
17061 			case     "DIVIDE": return true;
17062 			case  "NUMERATOR": return true;
17063 			case	     "BY": return true;
17064 			case	  "POWER": return true;
17065 			case	   "ROOT": return true;
17066 			case    "RADICAL": return true;
17067 			case   "EXPONENT": return true;
17068 
17069 			case     "MATRIX": return true;
17070 			case       "CELL": return true;
17071 			case   "QUANTITY": return true;
17072 			case       "NODE": return true;
17073 			case   "INTEGRAL": return true;
17074 			case  "SUMMATION": return true;
17075 			case      "RANGE": return true;
17076 			case        "MIN": return true;
17077 			case        "MAX": return true;
17078 
17079 			case		 "LI": return true;
17080 			case		 "OL": return true;
17081 			case		 "UL": return true;
17082 			case		"SUB": return true;
17083 			case		"SUP": return true;
17084 			case		  "Q": return true;
17085 			case		 "TT": return true;
17086 
17087 			case	 "REPORT": return true;
17088 			case	  "GROUP": return true;
17089 			case     "COLUMN": return true;
17090 
17091 //			case	 "PAGEBREAK": return true;
17092 		}
17093 
17094 	return false;
17095 }
17096 //============================================================================================
17097 //			htmlElement$findParentNode
17098 //============================================================================================
17099 function htmlElement$findParentNode()
17100 {
17101 	var node;
17102 
17103 	if (this.parentElement == null) return null;
17104 
17105 	node = this.parentElement;
17106 	while (node != null)
17107 	{
17108 		if (node.isNode()) return node;
17109 		node = node.parentElement;
17110 	}
17111 	
17112 	return this.html.body;			// LOST TRACK ???
17113 
17114 }
17115 //============================================================================================
17116 //			htmlElement$appendChild
17117 //============================================================================================
17118 function htmlElement$appendChild(e)
17119 {
17120 	var c;
17121 
17122 	e.parentElement = this;
17123 	e.parentNode = e.findParentNode();
17124 	e.level			= this.level + 1;
17125 
17126 	c = this.firstChild;
17127 	if (c == null)
17128 	{
17129 		this.firstChild = e;
17130 	}
17131 	else
17132 	{
17133 		while (c.nextSibling != null) c = c.nextSibling;
17134 		c.nextSibling = e;
17135 	}
17136 }
17137 //============================================================================================
17138 //			htmlstyle
17139 //============================================================================================
17140 function htmlStyle$(html,text,doc)
17141 {
17142 	this.html		= html;
17143 	this.parse_		= htmlStyle$parse_;
17144 	this.dump		= htmlStyle$dump;
17145 	this.clear		= htmlStyle$clear;
17146 
17147 	this.data		= text;
17148 
17149 	this.clear(); 
17150 	this.parse_(text,'',doc);
17151 }
17152 //============================================================================================
17153 //			htmlstyle$clear
17154 //============================================================================================
17155 function htmlStyle$clear()
17156 {
17157 	this.clear			= '';
17158 	
17159 	this.top			= '';
17160 	this.left			= '';
17161 	this.height			= '';
17162 	this.width			= '';
17163 	this.color			= '';
17164 	this.backgroundColor		= '';
17165 	this.fit			= '';
17166 	this.opacity			= '';
17167 	this.backgroundImage		= '';
17168 	this.backgroundRepeat		= '';
17169 	this.backgroundPosition		= '';
17170 
17171 	this.borderLeft		= '';
17172 	this.borderRight		= '';
17173 	this.borderTop			= '';
17174 	this.borderBottom		= '';
17175 	this.position			= '';
17176 	this.zIndex			= '';
17177 	this.display			= '';
17178 	this.visibility		= '';
17179 
17180 	this.float			= '';
17181 
17182 	this.fontFamily		= '';
17183 	this.fontSize			= '';
17184 	this.fontSizeAdjust		= '';
17185 	this.fontStretch		= '';
17186 	this.fontStyle			= '';
17187 	this.fontVariant		= '';
17188 	this.fontWeight			= '';
17189 	this.letterSpacing		= '';
17190 	this.fontRender		= '';
17191 	this.fontSkew			= '';
17192 	this.fontScale			= '';
17193 
17194 	this.lineHeight		= '';
17195 	this.textAlign			= '';
17196 	this.textDecoration	= '';
17197 	this.textIndent		= '';
17198 	this.textShadow		= '';
17199 	this.textTransform		= '';
17200 
17201 	this.vertialAlign		= '';
17202 	this.textTransform		= '';
17203 	this.textAlign			= '';
17204 	this.textIndent			= '';
17205 	this.lineHeight			= '';
17206 
17207 	this.margin			= '';
17208 	this.marginTop			= '';
17209 	this.marginLeft			= '';
17210 	this.marginRight		= '';
17211 	this.marginBottom		= '';
17212 
17213 	this.padding			= '';
17214 	this.paddingTop			= '';
17215 	this.paddingLeft		= '';
17216 	this.paddingRight		= '';
17217 	this.paddingBottom		= '';
17218 
17219 	this.pageBreakBefore		= '';
17220 	this.pageBreakAfter		= '';
17221 	this.clip			= '';
17222 	this.filter			= '';
17223 	this.tableLayout		= '';
17224 	this.borderCollapse		= '';
17225 	this.direction			= '';
17226 	this.behavior			= '';
17227 	this.wordBreak			= '';
17228 	this.lineBreak			= '';
17229 	this.texJustify			= '';
17230 	this.textJustifyTrim		= '';
17231 	this.textAutospace		= '';
17232 	this.overflowX			= '';
17233 	this.overflowY			= '';
17234 	this.layoutFlow			= '';
17235 	this.zoom			= '';
17236 	this.wordWrap			= '';
17237 	this.writingMode		= '';
17238 	this.textAlignLast		= '';
17239 	this.textOverflow		= '';
17240 
17241 	this.minHeight			= '';
17242 	this.minWidth			= '';
17243 	this.maxHeight			= '';
17244 	this.maxWidth			= '';
17245 
17246 	this.listStyleType		= '';
17247 	this.listStyleImage		= '';
17248 	
17249 	this.borderLeft			= '';
17250 	this.borderRight		= '';
17251 	this.borderTop			= '';
17252 	this.borderBottom		= '';
17253 	
17254 	this.verticalAlign		= '';
17255 	
17256 	this.scaleX			= 1.0;
17257 	this.scaleY			= 1.0;
17258 }
17259 //============================================================================================
17260 //				htmlstyle$dumo
17261 //============================================================================================
17262 function htmlStyle$dump()
17263 {
17264 	var text;
17265 	
17266 	var text = ' -- ';
17267 
17268 	if (this.clear				!= '') text += ' clear:' + this.clear;
17269 
17270 	if (this.top				!= '') text += ' top:' + this.top;
17271 	if (this.left				!= '') text += ' left:' + this.left;
17272 	if (this.height				!= '') text += ' height:' + this.height;
17273 	if (this.width				!= '') text += ' width:' + this.width;
17274 	if (this.color				!= '') text += ' color:' + this.color;
17275 	if (this.opacity			!= '') text += ' opacity:' + this.opacity;
17276 	if (this.fit				!= '') text += ' fit:' + this.fit;
17277 	if (this.backgroundColor		!= '') text += ' backgroundColor:' + this.backgroundColor;
17278 	if (this.backgroundImage		!= '') text += ' backgroundImage:' + this.backgroundImage;
17279 	if (this.backgroundRepeat		!= '') text += ' backgroundRepeat:' + this.backgroundRepeat;
17280 	if (this.backgroundPosition		!= '') text += ' backgroundPosition:' + this.backgroundPosition;
17281 
17282 	if (this.borderLeft			!= '') text += ' borderLeft:' + this.borderLeft ;
17283 	if (this.borderRight			!= '') text += ' borderRight:' + this.borderRight ;
17284 	if (this.borderTop			!= '') text += ' borderTop:' + this.borderTop ;
17285 	if (this.borderBottom			!= '') text += ' borderBottom: ' + this.borderBottom ;
17286 	if (this.position			!= '') text += ' position:' + this.position ;
17287 	if (this.zIndex			!= '') text += ' zIndex:' + this.zIndex ;
17288 	if (this.display			!= '') text += ' display:' + this.display ;
17289 	if (this.visibility			!= '') text += ' visibility:' + this.visibility ;
17290 
17291 	if (this.float				!= '') text += ' float:' + this.float ;
17292 
17293 	if (this.fontFamily			!= '') text += ' fontFamily:' + this.fontFamily ;
17294 	if (this.fontSize			!= '') text += ' fontSize:' + this.fontSize ;
17295 	if (this.fontSizeAdjust		!= '') text += ' fontSizeAdjust:' + this.fontSizeAdjust ;
17296 	if (this.fontStretch			!= '') text += ' fontStretch:' + this.fontStretch ;
17297 	if (this.fontStyle			!= '') text += ' fontStyle:' + this.fontStyle ;
17298 	if (this.fontVariant			!= '') text += ' fontVariant:' + this.fontVariant;	 
17299 	if (this.fontWeight			!= '') text += ' fontWeight:' + this.fontWeight; 
17300 	if (this.letterSpacing			!= '') text += ' letterSpacing:' + this.letterSpacing ;
17301 	if (this.fontRender			!= '') text += ' fontRender: ' + this.fontRender ;
17302 	if (this.fontSkew			!= '') text += ' fontSkew:' + this.fontSkew;
17303 	if (this.fontScale			!= '') text += ' fontScale:' + this.fontScale;
17304 
17305 	if (this.textAlign			!= '') text += ' textAlign:' + this.textAlign; 
17306 	if (this.textDecoration		!= '') text += ' textDecoration:' + this.textDecoration ;
17307 	if (this.textIndent			!= '') text += ' textIndent:' + this.textIndent ;
17308 	if (this.textShadow			!= '') text += ' textShadow:' + this.textShadow ;
17309 	if (this.textTransform			!= '') text += ' textTransform:' + this.textTransform;
17310 						
17311 	if (this.vertialAlign			!= '') text += ' vertialAlign:' + this.vertialAlign;
17312 	if (this.textTransform			!= '') text += ' textTransform:' + this.textTransform;
17313 	if (this.textAlign			!= '') text += ' textAlign:' + this.textAlign;
17314 	if (this.textIndent			!= '') text += ' textIndent:' + this.textIndent;
17315 	if (this.lineHeight			!= '') text += ' lineHeight:' + this.lineHeight;
17316 
17317 	if (this.margin				!= '') text += ' margin:' + this.margin;
17318 	if (this.marginTop			!= '') text += ' marginTop:' + this.marginTop;
17319 	if (this.marginLeft			!= '') text += ' marginLeft:' + this.marginLeft;
17320 	if (this.marginRight			!= '') text += ' marginRight:' + this.marginRight;
17321 	if (this.marginBottom			!= '') text += ' marginBottom:' + this.marginBottom;
17322 
17323 	if (this.padding			!= '') text += ' padding:' + this.padding;
17324 	if (this.paddingTop			!= '') text += ' paddingTop:' + this.paddingTop;
17325 	if (this.paddingLeft			!= '') text += ' paddingLeft:' + this.paddingLeft;
17326 	if (this.paddingRight			!= '') text += ' paddingRight:' + this.paddingRight;
17327 	if (this.paddingBottom			!= '') text += ' paddingBottom:' + this.paddingBottom;
17328 	if (this.pageBreakBefore		!= '') text += ' pageBreakBefore:' + this.pageBreakBefore;
17329 	if (this.pageBreakAfter			!= '') text += ' pageBreakAfter:' + this.pageBreakAfter;
17330 	if (this.clip				!= '') text += ' clip:' + this.clip;
17331 	if (this.filter				!= '') text += ' filter:' + this.filter;
17332 	if (this.tableLayout			!= '') text += ' tableLayout:' + this.tableLayout;
17333 	if (this.borderCollapse			!= '') text += ' borderCollapse:' + this.borderCollapse;
17334 	if (this.direction			!= '') text += ' direction:' + this.direction;
17335 	if (this.behavior			!= '') text += ' behavior:' + this.behavior;
17336 	if (this.wordBreak			!= '') text += ' wordBreak:' + this.wordBreak;
17337 	if (this.lineBreak			!= '') text += ' lineBreak:' + this.lineBreak;
17338 	if (this.texJustify			!= '') text += ' texJustify:' + this.texJustify;
17339 	if (this.textJustifyTrim		!= '') text += ' textJustifyTrim:' + this.textJustifyTrim;
17340 	if (this.textAutospace			!= '') text += ' textAutospace:' + this.textAutospace;
17341 	if (this.overflowX			!= '') text += ' overflowY:' + this.overflowY;
17342 	if (this.overflowY			!= '') text += ' overflowY:' + this.overflowY;
17343 	if (this.layoutFlow			!= '') text += ' layoutFlow:' + this.layoutFlow;
17344 	if (this.zoom				!= '') text += ' zoom:' + this.zoom;
17345 	if (this.wordWrap			!= '') text += ' wordWrap:' + this.wordWrap;
17346 	if (this.writingMode			!= '') text += ' writingMode:' + this.writingMode;
17347 	if (this.textAlignLast			!= '') text += ' textAlignLast:' + this.textAlignLast;
17348 	if (this.textOverflow			!= '') text += ' textOverflow:' + this.textOverflow;
17349 
17350 	if (this.minHeight			!= '') text += ' minHeight:' + this.minHeight;
17351 	if (this.minWidth			!= '') text += ' minWidth:' + this.minWidth;
17352 	if (this.maxHeight			!= '') text += ' maxHeight:' + this.maxHeight;
17353 	if (this.maxWidth			!= '') text += ' maxWidth:' + this.maxWidth;
17354 
17355 	if (this.verticalAlign			!= '') text += ' verticalAlign:' + this.verticalAlign;
17356 
17357 	if (this.listStyleType			!= '') text += ' listStyleType:' + this.listStyleType;
17358 	if (this.listStyleImage			!= '') text += ' listStyleImage:' + this.listStyleImage;	
17359 	
17360 	return text;
17361 	
17362 }
17363 //============================================================================================
17364 //			html$size_4
17365 //============================================================================================
17366 function html$size_4(value)
17367 {
17368 	var a,b,size;
17369 
17370 	value = '' + value;
17371 		
17372 	size = new Object();
17373 	size.left = 0;
17374 	size.right = 0;
17375 	size.top = 0;
17376 	size.bottom = 0;
17377 
17378 	if (value == '') return size;
17379 	
17380 	b = value.split(' ');
17381 	if (b.length &lt;= 0) return size;
17382 	
17383 	if (b.length == 1)
17384 	{
17385 		size.top	= this.getSize(b[0],null);
17386 		size.right	= size.top;
17387 		size.bottom	= size.top;
17388 		size.left	= size.top;
17389 		return size;
17390 	}
17391 
17392 	if (b.length == 2)
17393 	{
17394 		size.top	= this.getSize(b[0],null);
17395 		size.right	= this.getSize(b[1],null);
17396 		size.bottom	= size.top;
17397 		size.left	= size.right;
17398 		return size;	
17399 	}
17400 
17401 	if (b.length == 3)
17402 	{
17403 		size.top	= this.getSize(b[0],null);
17404 		size.right	= this.getSize(b[1],null);
17405 		size.bottom	= this.getSize(b[2],null);
17406 		size.left	= size.right;
17407 		return size;	
17408 	}
17409 
17410 	size.top	= this.getSize(b[0],null);
17411 	size.right	= this.getSize(b[1],null);
17412 	size.bottom	= this.getSize(b[2],null);
17413 	size.left	= this.getSize(b[3],null);
17414 	return size;
17415 }
17416 //============================================================================================
17417 //			htmlstyle$parse_
17418 //============================================================================================
17419 function htmlStyle$parse_(text,selector,doc)
17420 {
17421 	var list,i,a,b,temp,s;
17422 	var j,image,size;
17423 	var left,right,top,bottom;
17424 	var s;
17425 	var name,value;
17426 	
17427 	this.height = 0;
17428 	this.width = 0;
17429 
17430 	temp = '' + text;
17431 	list = temp.split(';');
17432 
17433 	for (i=0; i &lt; list.length; ++i)
17434 	{
17435 		temp = this.html.trim(list[i]);
17436 		if (temp == '') continue;
17437 
17438 		j = temp.indexOf(':');
17439 		if (j &lt; 0) 
17440 		{
17441 			name = this.html.trim(temp);
17442 			name = name.toLowerCase();
17443 			if (name == 'border-collapse') this.borderCollapse = 'collapse';
17444 			continue;
17445 		}
17446 		name = temp.substr(0,j);
17447 		value = temp.substr(j+1);
17448 
17449 		name = this.html.trim(name);
17450 		name = name.toLowerCase();
17451 
17452 		value = this.html.trim(value);
17453 		switch (name)
17454 		{
17455 			case "clear":
17456 					this.clear = value.toLowerCase();
17457 					break;
17458 			case "height":
17459 					this.height = value.toLowerCase();					
17460 					break;
17461 			case "width":
17462 					this.width = value.toLowerCase();
17463 					break;
17464 			case "top":
17465 					this.top = value;
17466 					break;
17467 			case "color":
17468 					if (this.color.indexOf('!important') >= 0) break;
17469 					this.color = value;
17470 					break;
17471 			case "left":
17472 					this.left = value;
17473 					break;
17474 			case "display":
17475 					this.display = value.toLowerCase();
17476 					break;
17477 			case "visibility":
17478 					this.visibility = value.toLowerCase();
17479 					break;
17480 			case "position":
17481 					this.position = value.toLowerCase();
17482 					break;
17483 			case "z-index":
17484 					this.zIndex = value;
17485 					break;
17486 			case "opacity":
17487 					this.opacity = value; 
17488 					break;
17489 			case "fit":
17490 					this.fit = value.toLowerCase();
17491 					if (this.fit == '') this.fit = 'true'; 
17492 					break;
17493 			case "background-color":
17494 					this.backgroundColor = value.toLowerCase();
17495 					break;
17496 			case "background-position":
17497 					this.backgroundPosition = value.toLowerCase();
17498 					break;
17499 			case "background-image":
17500 					image = value;
17501 					if (image == '') break;
17502 					j = image.indexOf('(');
17503 					if (j &lt; 0) break;
17504 					image = image.substr(j+1);
17505 					j = image.indexOf(')');
17506 					if (j &lt; 0) break;
17507 					image = image.substr(0,j);
17508 					this.backgroundImage = this.html.trim(image);
17509 					if (doc != null) this.backgroundImage = doc.resolve(this.backgroundImage);
17510 					break;
17511 		
17512 			case "background":
17513 					image = value;
17514 					if (image == '') break;
17515 
17516 					j = image.indexOf('(');
17517 					if (j &lt; 0)
17518 					{
17519 						this.backgroundColor = value;
17520 						break;
17521 					}
17522 					
17523 					image = image.substr(j+1);
17524 					j = image.indexOf(')');
17525 					if (j &lt; 0) break;
17526 					image = image.substr(0,j);
17527 					this.backgroundImage = this.html.trim(image);
17528 					if (doc != null) this.backgroundImage = doc.resolve(this.backgroundImage);
17529 					break;
17530 			case "background-repeat":
17531 					this.backgroundRepeat = value.toLowerCase();
17532 					break;
17533 
17534 			case "float":
17535 					this.float = value.toLowerCase();
17536 					break;
17537 
17538 			case "margin":
17539 					size = this.html.size_4(value);
17540 					this.margin			= value;
17541 					this.marginLeft	= size.left;
17542 					this.marginRight	= size.right;
17543 					this.marginTop	= size.top;
17544 					this.marginBottom	= size.bottom;					
17545 					break;
17546 			case "margin-left":
17547 					this.marginLeft	= this.html.getSize(value,null);
17548 					break;
17549 			case "margin-right":
17550 					this.marginRight	= value;
17551 					break;
17552 			case "margin-top":
17553 					this.marginTop	= value;
17554 					break;
17555 			case "margin-bottom":
17556 					this.marginBottom	= value;
17557 					break;
17558 
17559 			case "padding":				
17560 					size = this.html.size_4(value);
17561 					this.padding		= value;
17562 					this.paddingLeft	= size.left;
17563 					this.paddingRight	= size.right;
17564 					this.paddingTop	= size.top;
17565 					this.paddingBottom  = size.bottom;					
17566 					break;
17567 			case "padding-left":
17568 					this.paddingLeft	= value;
17569 					break;
17570 			case "padding-right":
17571 					this.paddingRight	= value;
17572 					break;
17573 			case "padding-top":
17574 					this.paddingTop	= value;
17575 					break;
17576 			case "padding-bottom":
17577 					this.paddingBottom	= value;
17578 					break;
17579 
17580 			case "border":
17581 					this.borderLeft	= value;
17582 					this.borderRight	= value;
17583 					this.borderTop		= value;
17584 					this.borderBottom	= value;
17585 					break;
17586 			case "border-left":
17587 					this.borderLeft = value;
17588 					break;
17589 			case "border-right":
17590 					this.borderRight = value;
17591 					break;
17592 			case "border-top":
17593 					this.borderTop = value;
17594 					break;
17595 			case "border-bottom":
17596 					this.borderBottom = value;
17597 					break;
17598 			case "font-family": 
17599 					this.fontFamily = value;
17600 					break;
17601 			case "font-size":
17602 					this.fontSize = value;
17603 					break;
17604 			case "font-size-adjust":
17605 					this.fontSizeAdjust = value;
17606 					break;
17607 			case "font-stretch":
17608 					this.fontStretch = value;
17609 					break;
17610 			case "font-style":
17611 					this.fontStyle = value;
17612 					break;
17613 			case "font-variant": 
17614 					this.fontVariant = value;
17615 					break;
17616 			case "font-weight":
17617 					this.fontWeight = value;
17618 					break;
17619 			case "font-render":
17620 					this.fontRender = value.toLowerCase();
17621 					break;
17622 			case "font-skew":
17623 					this.fontSkew = parseFloat(value);
17624 					break;
17625 			case "font-scale":
17626 					this.fontScale = value;
17627 					break;
17628 			case "letter-spacing":
17629 					this.letterSpacing = value.toLowerCase();
17630 					break;
17631 			case "word-spacing":
17632 					this.wordSpacing = value.toLowerCase();
17633 					break;
17634 			case "line-height":
17635 					this.lineHeight = value.toLowerCase();
17636 					break;
17637 			case "list-style":
17638 					this.listStyleType = value.toLowerCase();
17639 					break;
17640 			case "list-style-type":
17641 					this.listStyleType = value.toLowerCase();
17642 					break;
17643 			case "list-style-image":
17644 					image = value;
17645 					if (image == '') break;
17646 					j = image.indexOf('(');
17647 					if (j &lt; 0) break;
17648 					image = image.substr(j+1);
17649 					j = image.indexOf(')');
17650 					if (j &lt; 0) break;
17651 					image = image.substr(0,j);
17652 					this.listStyleImage = this.html.trim(image);
17653 					if (doc != null) this.listStyleImage = doc.resolve(this.listStyleImage);
17654 
17655 					break;
17656 			case "text-align":
17657 					this.textAlign = value.toLowerCase();
17658 					break;
17659 			case "vertical-align":
17660 					this.verticalAlign = value.toLowerCase();
17661 					break;
17662 			case "text-decoration":
17663 					this.textDecoration = value.toLowerCase();
17664 					break;
17665 			case "text-indent":
17666 					this.textIndent = value;
17667 					break;
17668 			case "text-shadow":
17669 					this.textShadow = value;
17670 					break;
17671 			case "text-transform":
17672 					this.textTransform = value;
17673 					break;		
17674 			case "border-collapse":
17675 					value = value.toLowerCase();
17676 					if (value == 'collapse') this.borderCollapse = 'collapse';
17677 					if (value == 'true') this.borderCollapse = 'collapse';
17678 					if (value == 't') this.borderCollapse = 'collapse';
17679 					break;		
17680 			}
17681 		}
17682 }
17683 //==============================================================
17684 //                     html$formatDateTime
17685 //==============================================================
17686 function html$formatDateTime(value)
17687 {
17688 	return this.formatDate(value) + ' ' + this.formatTime(value);
17689 }
17690 //==============================================================
17691 //                  html$formatDate
17692 //==============================================================
17693 function html$formatDate(value)
17694 {
17695 	var m1,d1,y1;
17696 	var text;
17697 	var d;
17698 
17699 	d = new Date(value);
17700 	var Month = new Array('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec');
17701 		
17702 	m1 = d.getMonth();
17703 	d1 = d.getDate();
17704 	y1 = d.getFullYear();
17705 	
17706 	text = Month[m1] + " " + d1 + " " + y1;
17707 	return text;
17708 }
17709 //==============================================================
17710 //                     html$formatTime
17711 //==============================================================
17712 function html$formatTime(value)
17713 {
17714 	var h,m,s;
17715 	var ampm;
17716 	var d,text;
17717 	
17718 
17719 	d = new Date(value);
17720 
17721 	h = d.getHours();
17722 	s = d.getSeconds();
17723 	m = d.getMinutes();
17724 	
17725 	ampm = 'am';
17726 	if (h >= 12) ampm = 'pm';
17727 	if (h > 12) h = h - 12;
17728 	if (h == 0) h = 12;
17729 
17730 	if (h &lt; 10) h = "0" + h;
17731 	if (m &lt; 10) m = "0" + m;
17732 	
17733 	text = h + ':' + m + ' ' + ampm;
17734 	return text;
17735 }
17736 //============================================================================================
17737 //			html$resolve
17738 //============================================================================================
17739 function html$resolve(data)
17740 {
17741 	var text,i,j;
17742 	var first,pos;
17743 	
17744 	text = '';
17745 	pos = new Object();
17746 	pos.first = 0;
17747 
17748 	while (true)
17749 	{
17750 		j = data.indexOf('{',pos.first);
17751 		if (j &lt; 0) return text + data.substr(pos.first);
17752 		text += data.substr(pos.first,j-pos.first);
17753 		pos.first = j+1;
17754 		text += this.getResolve(data,pos);
17755 	}
17756 }
17757 //============================================================================================
17758 //			html$getResolve
17759 //============================================================================================
17760 function html$getResolve(data,pos)
17761 {
17762 	var i,j,text,depth,c;
17763 	
17764 	depth = 0;
17765 
17766 	for (i=pos.first; i &lt; data.length; ++i)
17767 	{
17768 		c = data.substr(i,1);
17769 		if (c == '}')
17770 		{
17771 			if (depth == 0)
17772 			{
17773 				text = '{' + data.substr(pos.first,i-pos.first) + '}';
17774 				pos.first = i+1;
17775 				return this.resolve_A(text);
17776 			}
17777 			else depth -= 1;
17778 		}
17779 
17780 		if (c == '{') depth += 1;
17781 	}
17782 		
17783 	text = '{' + data.substr(pos.first) + '}';
17784 	pos.first = data.length;
17785 	return this.resolve_A(text);
17786 
17787 }
17788 //============================================================================================
17789 //			html$resolve_A
17790 //============================================================================================
17791 function html$resolve_A(data)
17792 {
17793 	var i,j,first,mid,test,a;
17794 
17795 
17796 	i = data.indexOf('{');
17797 	if (i &lt; 0) return data;
17798 
17799 	first = data.substr(0,i);
17800 	data = data.substr(i+1);
17801 
17802 	i = data.indexOf('}');
17803 	if (i &lt; 0) return first + '{' + data;
17804 
17805 	while (true)
17806 	{
17807 		i = data.indexOf('}');
17808 		j = data.indexOf('{');
17809 		if (j &lt; 0) break;
17810 		if (j > i) break;
17811 		a = data.substr(0,j);
17812 		test = a + this.resolve_A(data.substr(j));
17813 		if (test == data) return data;		// recursive ???
17814 		data = test;
17815 	}
17816 
17817 	mid = data.substr(0,i);
17818 	data = data.substr(i+1);
17819 	data = first + this.resolveTag(mid) + this.resolve(data);
17820 
17821 	return data;
17822 
17823 }
17824 //============================================================================================
17825 //			html$resolveTag
17826 //============================================================================================
17827 function html$resolveTag(tag)
17828 {
17829 	var i,j,name,text,args,f;
17830 	var xdate,value,fname,a;
17831 	var monthName = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
17832 
17833 	i = tag.indexOf('(');
17834 	j = tag.indexOf('.'); // special case;
17835 	if (j >= 0 && j &lt; i) i = 0;
17836 	if (i > 0) 
17837 	{
17838 		name = tag.substr(0,i);
17839 		name = this.trim(name);
17840 		name = name.toLowerCase();
17841 		text = tag.substr(i+1,tag.length-1);
17842 		if (text.substr(text.length-1) == ')') text = text.substr(0,text.length-1);
17843 		args = text.split(',');
17844 		return this.resolveFunction(name,args,tag);
17845 	}
17846 
17847 	name = tag;
17848 
17849 	name = this.trim(name);
17850 	name = name.toLowerCase();
17851 
17852 
17853 	i = name.indexOf('defer:');
17854 	if (i >= 0) return '{' + tag.substr(i+6) + '}';
17855 
17856 	if (this.resolved != null)
17857 	{
17858 		a = typeof(this.resolved[name]);
17859 		if (a != 'undefined') return this.resolved[name];
17860 	}
17861 
17862 	i = name.indexOf('eval:');
17863 	if (i &lt; 0) i = name.indexOf('eval.1:');
17864 	if (i &lt; 0) i = name.indexOf('eval.2:');
17865 	if (i &lt; 0) i = name.indexOf('eval.3:');
17866 	if (i &lt; 0) i = name.indexOf('eval.4:');
17867 	if (i &lt; 0) i = name.indexOf('eval.5:');
17868 	if (i &lt; 0) i = name.indexOf('eval.6:');
17869 	
17870 	if (i >= 0)
17871 	{		
17872 		i = name.indexOf(':');
17873 		fname = tag.substr(0,i);
17874 		value = tag.substr(i+1);		
17875 
17876 		try
17877 		{
17878 			 value = eval(value);
17879 			 if (fname == 'eval.1') return Math.round(value * 10) / 10;
17880 			 if (fname == 'eval.2') return Math.round(value * 100) / 100;
17881 			 if (fname == 'eval.3') return Math.round(value * 1000) / 1000;
17882 			 if (fname == 'eval.4') return Math.round(value * 10000) / 10000;
17883 			 if (fname == 'eval.5') return Math.round(value * 100000) / 100000;
17884 			 if (fname == 'eval.6') return Math.round(value * 1000000) / 1000000;
17885 	
17886 			 return value;
17887 		}
17888 		catch (e)
17889 		{ 
17890 			return "eval:" + value + ' ' +  e.message; 
17891 		};
17892 	}
17893 	
17894 	xdate = new Date();
17895 	if (name == 'pi') return Math.PI;
17896 	if (name == 'date') return this.formatDate(xdate);
17897 	if (name == 'time') return this.formatTime(xdate);
17898 	if (name == 'datetime') return this.formatDateTime(xdate);
17899 	if (name == 'year') return xdate.getFullYear();
17900 	if (name == 'month') return monthName[xdate.getMonth()];
17901 	if (name == 'day') return xdate.getDay();
17902 
17903 	if (name == 'pdf')
17904 	{
17905 	    return 'out';
17906 //		return CollinsPDF('return as=object_pdf');
17907 	}
17908 
17909 	args = '';
17910 	i = name.indexOf('.');
17911 	if (i > 0) 
17912 	{
17913 		args = name.substr(i+1);
17914 		name = name.substr(0,i);
17915 
17916 		if (name == 'window') return this.resolveWindow(tag);
17917 	}
17918 
17919 
17920 	i = name.indexOf('[');
17921 	if (i > 0)
17922 	{
17923 		args = name.substr(i) + args;
17924 		name = name.substr(0,i);
17925 	}
17926 
17927 	for (i=0; i &lt; this.macros.length; ++i)
17928 	{
17929 		if (this.macros[i].id == name) 
17930 		{
17931 			if (args == '') return this.macros[i].execute();
17932 			return this.macros[i].resolve(args);
17933 		}
17934 	}
17935 
17936 	for (i=0; i &lt; this.storage.bins.length; ++i)
17937 	{
17938 		if (this.storage.bins[i].id == name) 
17939 		{
17940 		    var bin = this.storage.bins[i];
17941 		    if (bin.value != '') return bin.value;
17942 		    if (bin.pos &lt; bin.list.length)
17943 		    {
17944 		        value =  bin.list[bin.pos];
17945 		        bin.pos += 1;
17946 		        return value;
17947             }
17948 			return '';
17949 		}
17950 	}
17951 
17952 	if (this.parent != null)
17953 	{
17954 		for (i=0; i &lt; this.parent.macros.length; ++i)
17955 		{
17956 		if (this.parent.macros[i].id == name) 
17957 			{
17958 				if (args == '') return this.parent.macros[i].execute();
17959 				return this.parent.macros[i].resolve(args);
17960 			}
17961 		}
17962 	}
17963 
17964 	if (this.rs != null)
17965 	{
17966 		if (this.rs.mine)
17967 		{
17968 			for (i=0; i &lt; this.rs.fields.length; ++i)
17969 			{
17970 				if (this.rs.fields[i].toLowerCase() == name)
17971 				{
17972 					value = this.rs.records[this.rs.pos][i];
17973 					return value;
17974 				}
17975 			}
17976 		}
17977 		else
17978 		{		
17979 			for (i=0; i &lt; this.rs.Fields.Count; ++i)
17980 			{
17981 				f = this.rs.Fields(i);
17982 				if (f.name.toLowerCase() == name)
17983 				{
17984 					if (f.value == null) return '';
17985 					return f.value;
17986 				}
17987 			}
17988 		}	
17989 	}
17990 
17991 	if (this.keepUnresolved) return '{' + tag + '}';
17992 	return tag;
17993 }
17994 //============================================================================================
17995 //			html$resolveWindow
17996 //============================================================================================
17997 function html$resolveWindow(value)
17998 {
17999 	var text,img,context,canvas;
18000 	var dataUrl;
18001 
18002 try
18003 {
18004 
18005 	i = value.lastIndexOf('.');
18006 	if (i &lt; 0) return eval(value);
18007 	
18008 	name = value.substr(i+1);
18009 	value = value.substr(0,i);
18010 
18011 
18012 	if (name = 'toData()')
18013 	{
18014 		img = eval(value);
18015 		canvas  = document.createElement('canvas');
18016 	
18017 		canvas.width = img.width;
18018 		canvas.height = img.height;
18019 		context = canvas.getContext("2d");
18020 	    context.drawImage(img,0,0);
18021 		dataUrl = canvas.toDataURL('image/jpeg');
18022 		dataUrl = 'Base64,' + img.width + ',' + img.height + ':' + dataUrl.substr(dataUrl.indexOf(','));
18023 		
18024 		return dataUrl;
18025 	}
18026 	
18027 	if (i &lt; 0) return eval(value);
18028 
18029 }
18030 catch (e) { return '' }
18031 		
18032 }
18033 //============================================================================================
18034 //			html$radian
18035 //============================================================================================
18036 function html$radian(value)
18037 {
18038 	value = parseFloat(value);
18039 	if (isNaN(value)) return 0;
18040 	
18041 	value = value % 360;
18042 	value = value / 180 * Math.PI;
18043 	return value;
18044 }
18045 //============================================================================================
18046 //			html$r8
18047 //============================================================================================
18048 function html$r8(value)
18049 {
18050 	value = parseFloat(value);
18051 	if (isNaN(value)) return 0;
18052 	return value;
18053 }
18054 
18055 //============================================================================================
18056 //			html$colorByCount
18057 //============================================================================================
18058 function html$colorByCount(value)
18059 {
18060 	var n;
18061 
18062 	var lightColors = new Array('#FAEBD7','#7FFFD4','#F5F5DC','#FFE4C4','#FFEBCD',
18063 	'#7FFF00','#FFF8DC',
18064 	'#FFFAF0','#DCDCDC',
18065 	'#DAA520','#ADFF2F',
18066 	'#F0FFF0','#FF69B4','#FFFFF0','#F0E68C','#E6E6FA','#FFF0F5','#FFFACD','#ADD8E6','#E0FFFF','#FAFAD2',
18067 	'#90EE90','#FFB6C1','#FFA07A','#87CEFA',
18068 	'#FFFFE0','#FAF0E6',
18069 	'#F5FFFA','#FFE4E1','#FFE4B5','#FFDEAD',
18070 	'#FDF5E6',
18071 	'#EEE8AA','#98FB98','#AFEEEE','#FFEFD5','#FFDAB9',
18072 	'#FFC0CB',
18073 	'#F4A460','#FFF5EE','#87CEEB',
18074 	'#FFFAFA','#D2B48C','#D8BFD8','#EE82EE','#F5DEB3','#F5F5F5','#9ACD32');
18075 
18076 	n = parseInt(value);
18077 	if (isNaN(n)) n = 0;
18078 	n = Math.abs(n);
18079 	n = n % lightColors.length;
18080 
18081 	return lightColors[n];	
18082 }
18083 //============================================================================================
18084 //			html$comma
18085 //============================================================================================
18086 function html$comma(value)
18087 {
18088 	var text,a,b,c,re;
18089 	
18090 	if (value == '') return '';
18091 
18092 	text = '' + value;
18093 	a = text.split('.');
18094 	b = a[0];
18095 	c = '';
18096 	if (a.length > 1) c = '.' + a[1];
18097 	re = RegExp("/(\d+)(\d{3})/;");
18098 	
18099 	while (re.test(b)) b = b.replace(re, '$1' + ',' + '$2');
18100 	return b + c;
18101 }
18102 //============================================================================================
18103 //			html$resolveFunction
18104 //============================================================================================
18105 function html$resolveFunction(name,args,text)
18106 {
18107 	var value,min,max,mod;
18108 	var dx;
18109 	var i,n;
18110 	var a,b,c,d,re;
18111 
18112 	switch (name)
18113 	{
18114 	case      'log': return Math.log(this.r8(args[0]));
18115 	case  'ifblank': 
18116 					a = this.trim(args[0]);
18117 					if (a != '') return a;
18118 					return args[1];
18119 
18120 	case  'replace': 
18121 					a = args[0];
18122 					b = args[1];
18123 					c = args[2];
18124 					re = RegExp(b,'gi');
18125 					d = a.replace(re,c);
18126 					return d;
18127 	
18128 	case      'sin': return Math.sin(this.radian(args[0]));
18129 	case      'cos': return Math.cos(this.radian(args[0]));
18130 	case      'tan': return Math.tan(this.radian(args[0]));
18131 
18132 	case     'asin': return Math.asin(this.r8(args[0]));
18133 	case     'acos': return Math.acos(this.r8(args[0]));
18134 	case     'atan': return Math.atan(this.r8(args[0]));
18135 
18136 	case     'sqrt': return Math.sqrt(this.r8(args[0]));
18137 
18138 	case      'abs': return Math.abs(this.r8(args[0]));
18139 	case    'round': return Math.round(this.r8(args[0]));
18140 	case     'ceil': return Math.ceil(this.r8(args[0]));
18141 	case    'floor': return Math.floor(this.r8(args[0]));
18142 
18143 	case      'min': return Math.min(this.r8(args[0]),this.r8(args[1]));
18144 	case      'max': return Math.max(this.r8(args[0]),this.r8(args[1]));
18145 
18146 	case      'pow': return Math.pow(this.r8(args[0]),this.r8(args[1]));
18147 
18148 	case   'escape': return escape(args[0]);
18149 	case 'unescape': return unescape(args[0]);
18150 
18151 	case       'pi': return Math.PI;
18152 
18153 	case 'colorbycount': return this.colorByCount(args[0]);
18154 	case     'filesize': return this.sys.fileSize(this.imageFilename(args[0]));
18155 	case    'imagesize': return this.sys.fileSize(this.imageFilename(args[0]));
18156 
18157 	case    'comma': return this.comma(args[0]); 
18158 
18159 	case   'dollar': text = this.comma(args[0]); 
18160 					 if (text == '') return '';
18161 					 return '$' + text;
18162 
18163 	case   'first': n = parseInt(args[0]);
18164 					if (isNaN(n)) return args[0];
18165 					text = '' + n;
18166 					i = text.substr(text.length-1);
18167 					if (i == '1') return n + 'st';
18168 					if (i == '2') return n + 'nd';
18169 					if (i == '3') return n + 'th';
18170 					return n + 'th';
18171 	case      'mod': 
18172 				value = parseInt(args[0]);
18173 				if (isNaN(value)) return '0';
18174 				mod = parseInt(args[1]);
18175 				if (isNaN(mod)) return '0';
18176 				value = value % mod;
18177 				return '' + value;
18178 	case   'random': 
18179 				if (args.length == 0) return Math.random();
18180 				if (args[0] == '') return Math.random();
18181 				min = this.r8(args[0]);
18182 				if (isNaN(min)) return Math.random();
18183 				if (args.length == 2)
18184 				{
18185 					max = this.r8(args[1]);
18186 				}
18187 				else
18188 				{
18189 					max = min;
18190 					min = 1;
18191 				}
18192 				if (isNaN(max)) return Math.random();
18193 	
18194 				if (min >= max) return Math.random();
18195 				dx = (max - min) + 1;
18196 				value = (Math.round(Math.random() * dx) % dx) + min;
18197 				return value;
18198 		
18199 	case   'eval':
18200 		try
18201 		{
18202 			 value = eval(args[0]);
18203 			 return value;
18204 		}
18205 		catch (e) { return ''; };
18206 
18207 	default:
18208 		try
18209 		{
18210 		    if (this.script != '')
18211 		    {
18212 		        value = eval(this.script + text);
18213 		        return value;
18214 		    }
18215 			 value = eval(text);
18216 			 return value;
18217 		}
18218 		catch (e) { return e.description; };
18219 	
18220 	
18221 	}
18222 
18223 	return '';
18224 }
18225 //============================================================================================
18226 //			html$writePageBreak
18227 //============================================================================================
18228 function html$writePageBreak(y,pdf)
18229 {
18230 	this.pages[this.pages.length] = Math.floor(y);
18231 	pdf.pageBreak(0,true);
18232 
18233 }
18234 //============================================================================================
18235 //			html$pointToPixel
18236 //============================================================================================
18237 function html$pointToPixel(x)
18238 {
18239 	x = (x / 72) * this.bpi;
18240 	return x;
18241 }
18242 //============================================================================================
18243 //			html$pixelToInch_x
18244 //============================================================================================
18245 function html$pixelToInch_x(x)
18246 {
18247 	x = x / this.bpi;
18248 	return x;
18249 }
18250 //============================================================================================
18251 //			html$pixelToInch_y
18252 //============================================================================================
18253 function html$pixelToInch_y(y)
18254 {
18255 	var i,dy;
18256 	var t;
18257 	
18258 	t = this;
18259 
18260 	dy = 0;
18261 
18262 	for (i=0; i &lt; this.pages.length; ++i)
18263 	{
18264 		if ((y + 1) &lt; this.pages[i]) break;
18265 		dy = this.pages[i];
18266 	}
18267 
18268 	y = (y - dy);
18269 	y = y / this.bpi;
18270 //	y = y + this.offsetY;
18271 	return y;
18272 }
18273 //============================================================================================
18274 //			html$pixelToPoint
18275 //============================================================================================
18276 function html$pixelToPoint(x)
18277 {
18278 	x = (x / this.bpi) * 72;
18279 	return x;
18280 }
18281 //============================================================================================
18282 //			htmlFont$
18283 //============================================================================================
18284 function htmlFont$(html)
18285 {
18286 	var f,p,scale,x,y,list;
18287 
18288 //-------- methods -----------
18289 
18290 	this.setFontStyle		= htmlFont$setFontStyle;
18291 	this.scale			= htmlFont$scale;
18292 
18293 //-------- properties -----------
18294 
18295 	this.html			= html;
18296 
18297 	this.bold			= (html.level.B > 0);
18298 	this.underline			= (html.level.U > 0);
18299 	this.italic			= (html.level.I > 0);
18300 	this.letterSpacing		= 0;
18301 	this.wordSpacing		= 0;
18302 	this.scaleX			= 1;
18303 	this.scaleY			= 1;
18304 
18305 	this.size			= 0;
18306 	this.color			= '';
18307 
18308 	this.fontName			= '';
18309 	this.fontSize			= '';	
18310 	
18311 	
18312 }
18313 //============================================================================================
18314 //				htmlFont$scale
18315 //============================================================================================
18316 function htmlFont$scale(scale)
18317 {
18318 
18319 
18320 	this.letterSpacing *= scale;
18321 	this.wordSpacing *= scale;
18322 //	this.size *= scale;
18323 	this.scaleX *= scale;
18324 	this.scaleY *= scale;
18325 }
18326 //============================================================================================
18327 //				htmlFont$setFontStyle
18328 //============================================================================================
18329 function htmlFont$setFontStyle(ele)
18330 {
18331 	var scale,scale,x,y,list,p,f,name,i;
18332 
18333 	f = this;
18334 
18335 //	this.letterSpacing	= this.html.getSize(ele.style.letterSpacing,null);
18336 //	this.wordSpacing	= this.html.getSize(ele.style.wordSpacing,null);
18337 
18338 	this.letterSpacing	= ele.style.letterSpacing;
18339 	this.wordSpacing	= ele.style.wordSpacing;
18340 
18341 	if (ele.style.fontWeight == 'bold') this.bold = true;
18342 	if (ele.style.fontFamily != '') this.fontName = ele.style.fontFamily;
18343 
18344 	if (ele.style.fontSize != '') this.fontSize =  ele.style.fontSize;
18345 	if (ele.style.color != '')    this.color = ele.style.color;
18346 
18347 	scale = ele.style.fontScale;
18348 	if (scale != '')
18349 	{
18350 		list = scale.split(' ');
18351 		if (list.length == 1) list = scale.split(',');
18352 
18353 		if (list.length == 2)
18354 		{
18355 			x = parseFloat(list[0]);
18356 			if (! isNaN(x)) this.scaleX = x;
18357 			y = parseFloat(list[1]);
18358 			if (! isNaN(y)) this.scaleY = y;	
18359 		}
18360 	}
18361 
18362 	p = ele;
18363 	while (p != null)
18364 	{
18365 		if (p.tagName == 'FONT')
18366 		{
18367 
18368 			if ((p.size  != '') && (this.fontSize == '')) this.fontSize = p.fontSize;
18369 			if ((p.color != '') && (this.color    == '')) this.color    = p.color;
18370 			if ((p.face  != '') && (this.fontName == '')) this.fontName = p.face;
18371 		}
18372 		else
18373 		{
18374 			if ((p.font.color		!= '') && (this.color    == '')) this.color    = p.font.color;
18375 			if ((p.font.fontSize	!= '') && (this.fontSize == '')) this.fontSize = p.font.fontSize;
18376 			if ((p.font.fontName	!= '') && (this.fontName == '')) this.fontName = p.font.fontName;
18377 
18378 			if (p.style)
18379 			{
18380 				if (this.letterSpacing == '') this.letterSpacing = p.style.letterSpacing;
18381 				if (this.wordSpacing == '') this.letterSpacing = p.style.wordSpacing;
18382 			}
18383 		}
18384 
18385 		p = p.parentElement;
18386 	}
18387 
18388 	if (ele.style.fontStyle ==    'italic') this.italic = true;
18389 	if (ele.style.fontStyle ==      'bold') this.bold = true;
18390 	if (ele.style.fontStyle == 'underline') this.underline = true;
18391 
18392 
18393 	this.render		= ele.style.fontRender;
18394 	this.skew		= ele.style.fontSkew;
18395 
18396 
18397 	if (ele.tagName == 'A')
18398 	{
18399 		if (ele.style.color == '') this.color = 'blue';
18400 		this.underline = true;	
18401 	}
18402 
18403 	if (this.color    == '') this.color	= ele.inherit('color');
18404 	if (this.fontSize == '') this.fontSize  = ele.inherit('fontSize');
18405 	if (this.fontName == '') this.fontName	= ele.inherit('fontFamily');
18406 
18407 	if (ele.style.textDecoration == 'none')
18408 	{
18409 		this.bold = false;
18410 		this.underline = false;
18411 		this.italic = false;
18412 		this.scaleX = 1;
18413 		this.scaley = 1;
18414 		this.skew   = '';
18415 		this.render = '';
18416 		this.letterSpacing = 0;
18417 		this.wordSpacing = 0;
18418 	}
18419 
18420 	if (this.fontSize == '') this.fontSize = this.html.fontSize;
18421 	
18422 	if (this.fontSize == '') this.fontSize = this.default_fontSize + 'pt'; 
18423 	this.size = this.html.parseFontSize(this.fontSize);
18424 
18425 	if (this.size &lt;= 0) this.size = this.default_fontSize;
18426 	if (this.color == '') this.color = 'black';
18427 
18428 	name = this.fontName.toLowerCase();
18429 	this.fontName = name;
18430 
18431 	if (name.indexOf('arial') >= 0)	this.fontName = 'arial';
18432 	if (name.indexOf('time') >= 0)		this.fontName = 'times';
18433 	if (name.indexOf('helvetica') >= 0) this.fontName = 'helvetica';
18434 	if (name.indexOf('courier') >= 0)	this.fontName = 'courier';
18435 	
18436 	if (ele.tagName ==   'MIN') this.size = this.size - 3;
18437 	if (ele.tagName ==   'MAX') this.size = this.size - 3;
18438 	if (ele.tagName == 'RANGE') this.size = this.size - 3;
18439 
18440 	if (ele.tagName == 'SMALL') this.size = this.size - 2;
18441 	if (ele.tagName ==   'BIG') this.size = this.size + 2;
18442 
18443 	if (ele.tagName == 'TD' || ele.tagName == 'TH')
18444 	{
18445 		if (ele.style.backgroundColor == '')
18446 		{
18447 			p = ele.parentElement;
18448 			if (p) 
18449 			{
18450 				ele.style.backgroundColor = p.style.backgroundColor;
18451 			}
18452 		}
18453 	}
18454 
18455 	i = this.color.indexOf('!important');
18456 
18457 	if (i >= 0) 
18458 	{
18459 		this.color = this.color.substr(0,i);
18460 	}
18461 
18462 
18463 	if (ele.tagName == 'P')
18464 	{
18465 		p = ele.parentElement;
18466 		while (p != null)
18467 		{			
18468 			if (p.style)
18469 			{
18470 				if (ele.align == '') ele.align = p.style.textAlign;
18471 			}
18472 			if (p.tagName == 'TABLE') break;
18473 			if (p.tagName == 'DIV') break;
18474 			if (p.tagName == 'SPAN') break;
18475 
18476 			p = p.parentElement;	
18477 		}	
18478 	}
18479 }
18480 //============================================================================================
18481 //				dump
18482 //============================================================================================
18483 function dump(e)
18484 {
18485 	var text;
18486 	
18487 	if (! e.tagName) return '';
18488 	
18489 	text = 'tagName ' + e.tagName + ' class: ' + e.className;
18490 	if (e.style) text += ' color style: ' + e.style.color;
18491 	if (e.color) text += ' color: ' + e.color;
18492 	text += '\r\n';
18493 	
18494 	if (e.parentElement) text += dump(e.parentElement);
18495 	
18496 	return text;
18497 }
18498 //============================================================================================
18499 //				html$extractFileName
18500 //============================================================================================
18501 function html$extractFileName(filename)
18502 {
18503 	var i,name;
18504 
18505 	filename = this.trim(filename);
18506 	if (filename == '') return '';
18507 
18508 	filename = filename.replace(/\\/g,'/');
18509 	i = filename.lastIndexOf('/');
18510 	if (i &lt; 0) return filename;
18511 	
18512 	name = filename.substr(i+1);
18513 	return this.trim(name);
18514 }
18515 //============================================================================================
18516 //				html$setOutput_
18517 //============================================================================================
18518 function html$setOutput_(pdf,ele)
18519 {
18520 
18521 	if (ele == null) return;
18522 	if (pdf == null) return;
18523 	
18524 	if (ele.pageSize  != '') pdf.setPageSize(ele.pageSize);
18525 	if (ele.landscape != '') pdf.setLandscape(true);
18526 	if (ele.portrait  != '') pdf.setLandscape(false);
18527 
18528 	if (ele.xmarginLeft   != '') pdf.setMarginLeft(ele.xmarginLeft);
18529 	if (ele.xmarginRight  != '') pdf.setMarginRight(ele.xmarginRight);
18530 	if (ele.xmarginTop    != '') pdf.setMarginTop(ele.xmarginTop);
18531 	if (ele.xmarginBottom != '') pdf.setMarginBottom(ele.xmarginBottom);
18532 
18533 	if (ele.fontName  != '') pdf.setFontName(ele.fontName);
18534 	if (ele.fontColor != '') pdf.setFontColor(ele.fontColor);
18535 	if (ele.fontSize  != '') pdf.setFontSize(ele.fontSize);
18536 
18537 	if (ele.watermark != '') pdf.setWatermark(ele.watermark);
18538 
18539 	if (ele.backgroundColor != '' && typeof(pdf.setPageBackgroundColor) == 'function') pdf.setPageBackgroundColor(ele.backgroundColor);
18540 	if (ele.marginColor	!= '' && typeof(pdf.setPageMarginColor) == 'function') pdf.setPageMarginColor(ele.marginColor);
18541 	if (ele.rotate			!= '' && typeof(pdf.setPageRotate) == 'function') pdf.setPageRotate(ele.rotate);
18542 
18543 	pdf.drawMargin	= ele.drawMargin;
18544 	if (pdf.drawMargin) pdf.drawMargin_();
18545 
18546 	if (ele.title    != '') pdf.title	= ele.title;
18547 	if (ele.subject  != '') pdf.subject	= ele.subject;
18548 	if (ele.author   != '') pdf.author	= ele.author;	
18549 	if (ele.keywords != '') pdf.keywords	= ele.keywords;
18550 
18551 	if (ele.onDocumentOpen		!= '' && typeof(pdf.onDocumentOpen) == 'function') pdf.onDocumentOpen(ele.onDocumentOpen);
18552 	if (ele.onWillClose		!= '' && typeof(pdf.onWillClose) == 'function') pdf.onWillClose(ele.onWillClose);
18553 	if (ele.onWillSave		!= '' && typeof(pdf.onWillSave) == 'function' ) pdf.onWillSave(ele.onWillSave);
18554 	if (ele.onDidSave		!= '' && typeof(pdf.onDidSave) == 'function') pdf.onDidSave(ele.onDidSave);
18555 	if (ele.onWillPrint		!= '' && typeof(pdf.onWillPrint) == 'function') pdf.onWillPrint(ele.onWillPrint);
18556 	if (ele.onDidPrint		!= '' && typeof(pdf.onDidPrint) == 'function') pdf.onDidPrint(ele.onDidPrint);		
18557 	
18558 	this.body.active.maxWidth = (pdf.xmax - pdf.xmin) / 72 * 110;
18559 }
18560 //============================================================================================
18561 //			html$writeToPdfFit
18562 //============================================================================================
18563 function html$writeToPdfFit(pdf)
18564 {
18565 	var pageWidth, pageHeight, xoffset,yoffset,ele;
18566 	var height,width,text,t;
18567 	var left,right,top,bottom,dx;
18568 
18569 	pdf.href_style = false;
18570 	pdf.justify = false;
18571 
18572 	ele = this.firstPDF;
18573 //	pdf.urlColor = '';
18574 	this.setOutput_(pdf,this.firstPDF);
18575 
18576 	this.offsetY = 0;
18577 
18578 	dx = (pdf.marginLeft + pdf.marginRight) / 72;
18579 	pageWidth = (8.5 - dx) * 110;
18580 	pageHeight = 144 * 110;
18581 
18582 	this.marginTop		= 0;
18583 	this.marginLeft	= 0;
18584 	this.marginRight	= 0;
18585 	this.marginBottom	= 0;
18586 
18587 	pdf.default_fontSize = this.default_fontSize;
18588 	pdf.default_fontName = this.default_fontName;
18589 	
18590 	pdf.setFontName(this.fontName);
18591 	pdf.setFontSize(this.fontSize);
18592 
18593 	this.resize(pageWidth-3,pageHeight);
18594 
18595 	t = this.body;
18596 
18597 	height = this.body.offsetHeight + this.body.marginTop + this.body.marginBottom + 0;
18598 	width = this.body.offsetWidth + this.body.marginLeft + this.body.marginRight + 0;
18599 
18600 	pageWidth = pageWidth + this.body.marginLeft + this.body.marginRight + 4;
18601 	
18602 	if (height &lt; (11 * 110)) height = 11 * 110;
18603 	if (width &lt; ((8.5 - dx) * 110)) width = (8.5 - dx) * 110;
18604 
18605 	if (height &lt; pageHeight) pageHeight = height + this.marginTop + this.marginBottom + 0;
18606 	if (width > pageWidth) pageWidth = width;
18607 
18608 	this.body.active.maxHeight = pageHeight;
18609 
18610 	pageHeight = pageHeight / 110;
18611 	pageWidth = (pageWidth / 110) + dx;
18612 
18613 	text = pageWidth + ',' + pageHeight;
18614 
18615 	pdf.setPageSize(text);
18616 	pdf.setLandscape(false);
18617 
18618 	this.body.write(pdf,0,0);
18619 }
18620 //============================================================================================
18621 //			html$writeToPdf
18622 //============================================================================================
18623 function html$writeToPdf(pdf,x1,y1,x2,y2,fit)
18624 {
18625 	var pageWidth, pageLength, xoffset,yoffset,ele;
18626 	var t,text,height,width,scale,scalex,scaley,ds,scalex1;
18627 	var tx1,ty1,tx2,ty2,count,xwidth,w,lastWidth,clip;
18628 	var dy;
18629 
18630 	if (arguments.length &lt; 6) fit = '';
18631 	
18632 	clip = false;
18633 	pdf.justify = false;
18634 	pdf.href_style = false;
18635 
18636 	this.setOutput_(pdf,this.firstPdf);
18637 
18638 	this.offsetY = (pdf.ymax - pdf.ypos) / 72;
18639 
18640 	pageWidth = (pdf.xmax - pdf.xmin) / 72 * 110;
18641 	pageLength = ((pdf.ymax - pdf.ymin) / 72) * 110;
18642 
18643 	pdf.default_fontSize = this.default_fontSize;
18644 	pdf.default_fontName = this.default_fontName;
18645 	
18646 	pdf.setFontName(this.fontName);
18647 	pdf.setFontSize(this.fontSize);
18648 
18649 	xoffset = this.pointToPixel(pdf.xpos);
18650 	yoffset = this.pointToPixel(pdf.ypos);
18651 
18652 	xoffset = 0;
18653 	yoffset = 0;
18654 
18655 	if (arguments.length > 1)
18656 	{
18657 		tx1 = Math.min(x1,x2);
18658 		ty1 = Math.min(y1,y2);
18659 		tx2 = Math.max(x1,x2);
18660 		ty2 = Math.max(y1,y2);
18661 		
18662 		pageLength = ty2 - ty1;
18663 		pageWidth = tx2 - tx1;
18664 		xoffset = tx1;
18665 		yoffset = ty1;		
18666 	}
18667 
18668 	this.body.active.maxWidth = pageWidth;
18669 	this.body.active.maxHeight = pageLength;
18670 
18671 	this.resize(pageWidth,pageLength);
18672 
18673 	ele = this.body;
18674 
18675 	if (fit != '')
18676 	{	
18677 
18678 		height = this.body.offsetHeight;
18679 		width = this.body.offsetWidth;
18680 
18681 		if (height &lt;= 0) return;
18682 		if (width &lt;= 0) return;
18683 		if (pageWidth &lt;= 0) return;
18684 		if (pageLength&lt;= 0) return;
18685 
18686 		scalex = pageWidth / width;
18687 		scaley = pageLength / height;
18688 		scale = scalex;
18689 		if (scaley &lt; scale) scale = scaley;
18690 		if (fit == 'clip' || fit == 'false') scale = 1.0;
18691 		if (fit == 'shrink-only' && scale > 1) scale = 1.0;
18692 		if (fit == 'expand-only' && scale &lt; 1) scale = 1.0;
18693 		
18694 		if (scale != 1)
18695 		{
18696 
18697 			count = 0;
18698 			xwidth = pageWidth;
18699 
18700 			while (count &lt; 5)
18701 			{
18702 				count += 1;
18703 				scalex1 = scalex;
18704 				
18705 				lastWidth = xwidth;
18706 				
18707 				xwidth = xwidth * 1.5;
18708 				this.body.active.maxWidth = xwidth;
18709 				this.resize(xwidth,pageLength);
18710 	
18711 				height = this.body.offsetHeight;
18712 				width = this.body.offsetWidth;
18713 
18714 				scalex = xwidth / width;
18715 				scaley = pageLength / height;
18716 				if (scalex &lt; scaley) break;
18717 	
18718 				w = width * scale;			
18719 				if (w > pageWidth) break;
18720 	
18721 				scale = scalex;
18722 				if (scaley &lt; scale) scale = scaley;
18723 
18724 			}
18725 
18726 			this.resize(lastWidth,pageLength);
18727 			ele.scale(scale);
18728 		}
18729 
18730 		height = pageLength / 110 * 72;
18731 		width = pageWidth / 110 * 72;
18732 		dy = yoffset / 110 * 72;
18733 		pdf.setClip(xoffset + pdf.xmin,pdf.ymax - (dy + height),width,height);
18734 	}
18735 
18736 
18737 	t = this.body;
18738 	ele = this.body;
18739 
18740 	ele.write(pdf,xoffset,yoffset);
18741 
18742 	pdf.setClip();
18743 
18744 }
18745 //============================================================================================
18746 //			html$writeToPdfScale
18747 //============================================================================================
18748 function html$writeToPdfScale(pdf,x1,y1,x2,y2,scale)
18749 {
18750 	var pageWidth, pageLength, xoffset,yoffset,ele;
18751 	var t,text,height,width,scale,scalex,scaley,ds,scalex1;
18752 	var tx1,ty1,tx2,ty2,count,xwidth,w,lastWidth,clip;
18753 	var dy;
18754 
18755 	if (arguments.length &lt; 6) scale = 1;
18756 	
18757 	clip = false;
18758 	pdf.justify = false;
18759 	pdf.href_style = false;
18760 
18761 	this.setOutput_(pdf,this.firstPdf);
18762 
18763 	this.offsetY = (pdf.ymax - pdf.ypos) / 72;
18764 
18765 	pageWidth = (pdf.xmax - pdf.xmin) / 72 * 110;
18766 	pageLength = ((pdf.ymax - pdf.ymin) / 72) * 110;
18767 
18768 	pdf.default_fontSize = this.default_fontSize;
18769 	pdf.default_fontName = this.default_fontName;
18770 	
18771 	pdf.setFontName(this.fontName);
18772 	pdf.setFontSize(this.fontSize);
18773 
18774 	xoffset = this.pointToPixel(pdf.xpos);
18775 	yoffset = this.pointToPixel(pdf.ypos);
18776 
18777 	xoffset = 0;
18778 	yoffset = 0;
18779 
18780 	if (arguments.length > 1)
18781 	{
18782 		tx1 = Math.min(x1,x2);
18783 		ty1 = Math.min(y1,y2);
18784 		tx2 = Math.max(x1,x2);
18785 		ty2 = Math.max(y1,y2);
18786 		
18787 		pageLength = ty2 - ty1;
18788 		pageWidth = tx2 - tx1;
18789 		xoffset = tx1;
18790 		yoffset = ty1;		
18791 	}
18792 
18793 	this.body.active.maxWidth = pageWidth;
18794 	this.body.active.maxHeight = pageLength;
18795 
18796 //	this.resize(pageWidth,pageLength);
18797 
18798 	ele = this.body;
18799 
18800 	if (scale &lt; 1)
18801 	{	
18802 		lastWidth = pageWidth / scale;
18803 //		this.resize(lastWidth,pageLength);
18804 		ele.scale(scale);
18805 	}
18806 
18807 	t = this.body;
18808 	ele = this.body;
18809 
18810 	ele.write(pdf,xoffset,yoffset);
18811 
18812 }
18813 //============================================================================================
18814 //			htmlElement$scale
18815 //============================================================================================
18816 function htmlElement$scale(scale)
18817 {	
18818 	var j;
18819 
18820 	if (scale == 1) return;
18821 	if (scale &lt; 0.0001) return;
18822 	
18823 	this.offsetHeight = this.offsetHeight * scale;
18824 	this.offsetWidth = this.offsetWidth * scale;
18825 
18826 	this.clientHeight = this.clientHeight * scale;
18827 	this.clientWidth = this.clientWidth * scale;
18828 
18829 	this.height = this.height * scale;
18830 	this.width = this.width * scale;
18831 
18832 	this.font.scale(scale);
18833 
18834 	this.marginLeft   *= scale;
18835 	this.marginRight  *= scale;
18836 	this.marginTop    *= scale;
18837 	this.marginBottom *= scale;
18838 
18839 	this.paddingLeft   *= scale;
18840 	this.paddingRight  *= scale;
18841 	this.paddingTop    *= scale;
18842 	this.paddingBottom *= scale;
18843 
18844 	this.offsetLeft	  *= scale;
18845 	this.offsetTop	  *= scale;
18846 
18847 	if (this.parts)
18848 	{
18849 		for (j=0; j &lt; this.parts.length; ++j)
18850 		{
18851 			this.parts[j].offsetLeft *= scale;
18852 			this.parts[j].offsetTop *= scale;
18853 			this.parts[j].xjust *= scale;
18854 			this.parts[j].yjust *= scale;
18855 		}
18856 	}
18857 	
18858 
18859 	if (this.firstChild != null) 
18860 	{
18861 		if (this.style.display != 'none') this.firstChild.scale(scale);
18862 	}
18863 	
18864 	if ((typeof(single) != 'undefined') && single) return;
18865 	if (this.nextSibling != null) this.nextSibling.scale(scale);	
18866 }
18867 //============================================================================================
18868 //			htmlElement$write
18869 //============================================================================================
18870 function htmlElement$write(out,x,y,single)
18871 {	
18872 	var cx,cy;
18873 	var px,py;
18874 	var dx,dy;
18875 	var text,s;
18876 
18877 	if (this.html.remove_A && this.tagName == 'A')
18878 	{
18879 //		if (this.nextSibling != null) this.nextSibling.write(out,x,y);
18880 //		return;	
18881 	}
18882 		
18883 	if (this.style)
18884 	{
18885 		if ((this.style.display == 'none') || (this.style.visibility == 'hidden')) 
18886 		{
18887 			if ((typeof(single) != 'undefined') && single) return;
18888 			if (this.nextSibling != null) this.nextSibling.write(out,x,y);
18889 			return;
18890 		}
18891 	}
18892 	
18893 	if (this.tagName == 'PAGEBREAK')
18894 	{
18895 		x = 0;
18896 		y = 0;
18897 	}
18898 
18899 	dx = 0;
18900 	dy = 0;
18901 	if (this.style && (this.style.position == 'relative'))
18902 	{
18903 		if (this.style.left != '') dx = parseInt(this.style.left);
18904 		if (this.style.top  != '') dy = parseInt(this.style.top);
18905 	}
18906 
18907 	px = x + (this.offsetLeft + this.xjust + dx);
18908 	py = y + (this.offsetTop + this.yjust + dy);
18909 
18910 	this.write_A(out,px,py);
18911 	
18912 	if ((this.tagName == 'REPORT') || (this.tagName == 'XGROUP'))
18913 	{
18914 		x = 0;
18915 		y = this.clientHeight;
18916 		this.html.body.offsetHeight = this.clientHeight;
18917 		this.html.body.offsetWidth  = this.clientWidth;
18918 	}
18919 	
18920 //-----------------------------------------------------------------
18921 
18922 	
18923 	cx = x + (this.offsetLeft + this.xjust + dx);
18924 	cy = y + (this.offsetTop + this.yjust + dy);
18925 
18926 	if (this.tagName == 'PAGEBREAK')
18927 	{
18928 		cx = 0;
18929 		cy = 0;
18930 	}
18931 	
18932 	if ((this.firstChild != null) && (this.tagName != 'MATRIX')) 
18933 	{
18934 		if (this.style.display != 'none') this.firstChild.write(out,cx,cy);
18935 	}
18936 	
18937 	if ((typeof(single) != 'undefined') && single) return;
18938 	if (this.nextSibling != null) this.nextSibling.write(out,x,y);	
18939 }
18940 //============================================================================================
18941 //			htmlElement$write_A
18942 //============================================================================================
18943 function htmlElement$write_A(out,x,y)
18944 {
18945 	var NODE_TEXT = 3;
18946 	var NODE_TAG  = 1;
18947 	var text;
18948 	var xmin,ymin,xmax,ymax;
18949 	var obj;
18950 
18951 	xmin = x + this.marginLeft;
18952 	ymin = y + this.marginTop;
18953 	xmax = (x + this.offsetWidth) - this.marginRight;
18954 	ymax = (y + this.offsetHeight) - this.marginBottom;
18955 	
18956 	if (this.nodeType == NODE_TAG)
18957 	{
18958 		this.writeBackground(out,xmin,ymin,xmax,ymax);
18959 		this.writeBorder(out,xmin,ymin,xmax,ymax);
18960 	}
18961 	
18962 	if (this.outline != '') this.html.addOutline(this.outline,xmin,ymin);
18963 	this.writeElement(out,xmin,ymin,xmax,ymax);
18964 
18965 }
18966 //============================================================================================
18967 //			htmlElement$writeBorder
18968 //============================================================================================
18969 function htmlElement$writeBorder(out,xmin,ymin,xmax,ymax)
18970 {
18971 	var bx1,by1,bx2,by2;
18972 	var x1,y1,x2,y2,t;
18973 	var tag;
18974 	
18975 	tag = this.tagName;
18976 
18977 	if (! this.style) return;
18978 	if (this.tagName == 'BODY') return;
18979 
18980 	t = this;
18981 
18982 	if ((this.style.borderLeft   == '') &&
18983 		(this.style.borderRight  == '') &&
18984 		(this.style.borderTop    == '') &&
18985 		(this.style.borderBottom == '')) {
18986 		this.traceBorder(out,xmin,ymin,xmax,ymax);	
18987 		return;
18988 	}
18989 
18990 	if (xmax > 20000) return;
18991 	if (ymax > 20000) return;
18992 
18993 	bx1 = xmin - Math.floor(this.borderLeft / 2);
18994 	by1 = ymin - Math.floor(this.borderTop / 2);
18995 	bx2 = xmax + Math.floor(this.borderRight / 2);
18996 	by2 = ymax + Math.floor(this.borderBottom / 2);
18997 	
18998 	bx1 = this.html.pixelToInch_x(bx1);
18999 	by1 = this.html.pixelToInch_y(by1);
19000 	bx2 = this.html.pixelToInch_x(bx2);
19001 	by2 = this.html.pixelToInch_y(by2);
19002 
19003 
19004 	out.drawBorder(bx1,by1,bx2,by2,this.style.borderLeft,this.style.borderRight,this.style.borderTop,this.style.borderBottom,this);
19005 
19006 //	this.writeBorder_A(out,this.style.boderLeft,  xmin,ymin,xmax,ymax);
19007 //	this.writeBorder_A(out,this.style.boderRight, xmin,ymin,xmax,ymax);
19008 //	this.writeBorder_A(out,this.style.boderTop,   xmin,ymin,xmax,ymax);
19009 //	this.writeBorder_A(out,this.style.boderBottom,xmin,ymin,xmax,ymax);
19010 }
19011 //============================================================================================
19012 //			htmlElement$traceBorder
19013 //============================================================================================
19014 function htmlElement$traceBorder(out,xmin,ymin,xmax,ymax)
19015 {	
19016 	var bx1,by1,bx2,by2;
19017 	var x1,y1,x2,y2;
19018 	var tx,ty,h,t;
19019 	var height,width;
19020 
19021 	t = this;
19022 
19023 	if (! this.html.trace_border) return;
19024 
19025 	if (xmax > 20000) return;
19026 	if (ymax > 20000) return;
19027 
19028 	if (this.tagName == 'BODY')
19029 	{
19030 		xmax = xmin + this.active.maxWidth;
19031 		ymax = ymin + this.active.maxHeight;
19032 	}
19033 
19034 	bx1 = xmin - Math.floor(this.borderLeft / 2);
19035 	by1 = ymin - Math.floor(this.borderTop / 2);
19036 	bx2 = xmax + Math.floor(this.borderRight / 2);
19037 	by2 = ymax + Math.floor(this.borderBottom / 2);
19038 
19039 	x1 = this.html.pixelToInch_x(bx1);
19040 	y1 = this.html.pixelToInch_y(by1);
19041 	x2 = this.html.pixelToInch_x(bx2);
19042 	y2 = this.html.pixelToInch_y(by2);	
19043 
19044 	out.setGraphicFillColor('');
19045 	out.setGraphicColor('green');
19046 	out.drawRectangle(x1,y1,x2,y2,this);
19047 }
19048 //============================================================================================
19049 //			htmlElement$writeBackground
19050 //============================================================================================
19051 function htmlElement$writeBackground(out,xmin,ymin,xmax,ymax)
19052 {	
19053 	var bx1,by1,bx2,by2;
19054 	var x1,y1,x2,y2;
19055 	var tx,ty,h,t;
19056 	var height,width;
19057 	var filename;
19058 
19059 	if (! this.style) return;
19060 
19061 	t = this;
19062 
19063 	if (xmax > 20000) return;
19064 	if (ymax > 20000) return;
19065 
19066 	if (this.tagName == 'BODY')
19067 	{
19068 		xmax = xmin + this.active.maxWidth;
19069 		ymax = ymin + this.active.maxHeight;
19070 	}
19071 
19072 	bx1 = xmin - Math.floor(this.borderLeft / 2);
19073 	by1 = ymin - Math.floor(this.borderTop / 2);
19074 	bx2 = xmax + Math.floor(this.borderRight / 2);
19075 	by2 = ymax + Math.floor(this.borderBottom / 2);
19076 
19077 	x1 = this.html.pixelToInch_x(bx1);
19078 	y1 = this.html.pixelToInch_y(by1);
19079 	x2 = this.html.pixelToInch_x(bx2);
19080 	y2 = this.html.pixelToInch_y(by2);
19081 	
19082 	if (this.style.backgroundColor != '')
19083 	{
19084 		out.setGraphicFillColor(this.style.backgroundColor);
19085 		out.setGraphicLineWeight(0);
19086 		out.drawRectangle(x1,y1,x2,y2,this);
19087 	}
19088 
19089 	if (this.style.backgroundImage != '')
19090 	{
19091 		filename = this.html.imageFilename(this.style.backgroundImage);
19092 
19093 		out.tileImage(x1,y1,x2,y2,filename,this.style.backgroundRepeat,this.style.backgroundPosition);		
19094 	}
19095 }
19096 
19097 //============================================================================================
19098 //			htmlElement$writeElementMatrix
19099 //============================================================================================
19100 function htmlElement$writeElementMatrix(out,x,y)
19101 {	
19102 	var i,j,row,cell;
19103 	var xpos,ypos,f,href;
19104 	var tx,ty,ytemp;
19105 	var dx,dy,size,h;
19106 	var xoff,yoff,rx,ry,tx1,ty1;
19107 	var x1,y1,x2,y2;
19108 	var px1,py1,px2,py2;
19109 
19110 	ypos = this.paddingTop;
19111 
19112 	f = this.font;
19113 
19114 	out.setLetterSpacing(this.html.pixelToPoint(f.letterSpacing));
19115 	out.setWordSpacing(this.html.pixelToPoint(f.wordSpacing));
19116 	out.setFontRender(f.render);
19117 	out.setFontSkew(f.skew);
19118 	out.setFontScale(f.scaleX,f.scaleY);
19119 
19120 	size = this.html.pixelToPoint(f.size);			
19121 	size = f.size;
19122 
19123 	out.setFont(f.color,size,f.bold,f.italic,f.underline,f.fontName,f.subscript,f.superscript);
19124 	
19125 	for (i=0; i &lt; this.grid.rows.length; ++i)
19126 	{
19127 		row = this.grid.rows[i];
19128 		ytemp = ypos;
19129 		ypos += this.grid.cellHeight + this.cellspacing;
19130 		xpos = this.padLeft();
19131 
19132 		for (j=0; j &lt; row.cells.length; ++j)
19133 		{
19134 			tx = x + xpos;
19135 			ty = y + ytemp;
19136 			xpos += this.grid.cellWidth + this.cellspacing;
19137 
19138 			x1 = tx;
19139 			y1 = ty;
19140 			x2 = x1 + this.grid.cellWidth;
19141 			y2 = y1 + this.grid.cellHeight;
19142 			px1 = this.html.pixelToInch_x(x1);
19143 			py1 = this.html.pixelToInch_y(y1);
19144 			px2 = this.html.pixelToInch_x(x2);
19145 			py2 = this.html.pixelToInch_y(y2);
19146 		
19147 			cell = row.cells[j];
19148 
19149 			switch (cell.type)
19150 			{
19151 			case "element": 
19152 					xoff = (this.grid.cellWidth - cell.element.offsetWidth) / 2;
19153 					yoff = (this.grid.cellHeight - cell.element.offsetHeight) / 2;
19154 
19155 					cell.element.offsetTop = 0;
19156 					cell.element.offsetLeft = 0;
19157 
19158 					if (this.clip)
19159 					{
19160 						out.clip = true;
19161 						out.clipBegin(px1,py1,px2,py2);
19162 					}
19163 
19164 					cell.element.write(out,tx+xoff,ty+yoff,true);
19165 						
19166 					if (this.clip)
19167 					{
19168 						out.clipEnd();
19169 						out.clip = false;
19170 					}
19171 					
19172 					break;
19173 
19174 			case "value":
19175 					xoff = (this.grid.cellWidth - cell.width) / 2;
19176 					yoff = (this.grid.cellHeight - cell.height) / 2;
19177 
19178 					tx1 = tx + xoff;
19179 					ty1 = ty + yoff;
19180 					rx = this.html.pixelToInch_x(tx1);
19181 					ry = this.html.pixelToInch_y(ty1);
19182 
19183 					h = (out.charHeight() * 0.75) / 72;
19184 
19185 					if (this.clip)
19186 					{
19187 						out.clip = true;
19188 						out.clipBegin(px1,py1,px2,py2);
19189 					}
19190 
19191 					out.placeText(rx,ry+h,cell.value,'',this);		// inches
19192 
19193 					if (this.clip)
19194 					{
19195 						out.clipEnd();
19196 						out.clip = false;
19197 					}
19198 
19199 					break;
19200 			}
19201 
19202 		}
19203 	}
19204 }
19205 //============================================================================================
19206 //			htmlElement$writeElementText
19207 //============================================================================================
19208 function htmlElement$writeElementText(out,x,y)
19209 {	
19210 	var x1,y1,x2,x2;
19211 	var field,i,j,f;
19212 	var px,py,dx,dy,rx,ry;
19213 	var href,a,b,p;
19214 	var tx,ty,h,w;
19215 	var text,size,ymax;
19216 	var height,width;
19217 	var t,p,size,x,y,tx,ty,h,w;
19218 	var y2,lightColor,darkColor,tx1,ty1,tx2,ty2,ch,cw,angle,url;
19219 
19220 	f = this.parentElement.font;
19221 
19222 	out.setLetterSpacing(this.html.pixelToPoint(f.letterSpacing));
19223 	out.setWordSpacing(this.html.pixelToPoint(f.wordSpacing));
19224 	out.setFontRender(f.render);
19225 	out.setFontSkew(f.skew);
19226 	out.setFontScale(f.scaleX,f.scaleY);
19227 
19228 	size = f.size;
19229 
19230 	href = this.href;
19231 	href = this.html.decode_(href);
19232 
19233 	if ((href != '') && (this.html.document != null)) href = this.html.document.resolve(href);
19234 	out.setFont(f.color,size,f.bold,f.italic,f.underline,f.fontName,f.subscript,f.superscript);
19235 
19236 	if (! this.parts) return;
19237 
19238 	for (j=0; j &lt; this.parts.length; ++j)
19239 	{
19240 		text = this.html.trim(this.parts[j].text);
19241 	
19242 		if (text == '') continue;
19243 
19244 		tx = (x + this.parts[j].offsetLeft + this.parts[j].xjust);
19245 		ty = (y + this.parts[j].offsetTop + this.parts[j].yjust);
19246 
19247 		tx = this.html.pixelToInch_x(tx);
19248 		ty = this.html.pixelToInch_y(ty);
19249 
19250 		h = out.charHeight() / 72;
19251 //		ty += h * 0.85;	
19252 
19253 		out.placeText(tx,ty,this.parts[j].text,href,this);		// inches
19254 	}
19255 
19256 }
19257 //============================================================================================
19258 //			htmlElement$writeElement
19259 //============================================================================================
19260 function htmlElement$writeElement(out,x,y)
19261 {	
19262 	var x1,y1,x2,x2;
19263 	var field,i,j,f,ds;
19264 	var px,py,dx,dy,rx,ry;
19265 	var href,a,b,p;
19266 	var tx,ty,h,w,field;
19267 	var text,size,ymax;
19268 	var height,width,counter;
19269 	var t,p,size,tx,ty,h,w,lastds;
19270 	var px2,py2,command,data;
19271 	var y2,lightColor,darkColor,tx1,ty1,tx2,ty2,ch,cw,angle,url;
19272 	var scale,scalex,scaley,oHeight,oWidth,ds,lastds,counter;
19273 	var xHeight,xWidth;
19274 
19275 	t = this;
19276 	
19277 	px = x;
19278 	py = y;
19279 	px = this.html.pixelToInch_x(px);
19280 	py = this.html.pixelToInch_y(py);
19281 
19282 	oHeight = this.offsetHeight - (this.paddingTop + this.paddingBottom);
19283 	oWidth = this.offsetWidth - (this.paddingLeft + this.paddingRight);
19284 
19285 	if (this.style != null)
19286 	{
19287 		out.setOpacity(this.style.opacity);	
19288 
19289 		if (this.style.fit != '')
19290 		{
19291 			this.html.xhtml = new html$(this.sys);
19292 			data = this.html.resolve(this.htmlData);
19293 
19294 			this.html.xhtml.parse(data);
19295 
19296 						
19297 			x2 = x + oWidth;
19298 			y2 = y + oHeight;
19299 				
19300 			px2 = this.html.pixelToInch_x(x2);
19301 			py2 = this.html.pixelToInch_y(y2);
19302 
19303 			px += this.paddingLeft / 110;
19304 			py += this.paddingTop / 110;
19305 								
19306 			x2 = x + this.offsetWidth;
19307 			y2 = y + this.offsetHeight;
19308 			this.html.xhtml.writeToPdf(out,x,y,x2,y2,this.style.fit);
19309 			out.restoreView();
19310 			return;
19311 		}
19312 	}
19313 	
19314 	switch (this.tagName)
19315 	{		
19316 	case "PAGEBREAK":
19317 			out.pageBreak(1,true);
19318 			
19319 			break;
19320 
19321 	case "#TEXT": 
19322 		{
19323 			this.writeElementText(out,x,y);
19324 			break;
19325 		}
19326 
19327 	case "PDF": 
19328 		{
19329 			this.html.setOutput_(out,this);
19330 			break;
19331 		}
19332 
19333 	case "HR": 
19334 		{
19335 			x1 = x;
19336 			y1 = y;	
19337 			x2 = x1 + this.offsetWidth;
19338 			y2 = y1 + this.offsetHeight;
19339 
19340 			ymax = 0;
19341 			// this.writePageBreak(y1,pdf);
19342 							
19343 			lightColor = 0xECE9D8;
19344 			darkColor = 0xACA899;
19345 
19346 			tx1 = this.html.pixelToInch_x(x1);
19347 			ty1 = this.html.pixelToInch_y(y1);
19348 			tx2 = this.html.pixelToInch_x(x2);
19349 			ty2 = this.html.pixelToInch_y(y2);
19350 
19351 			out.drawTableBox(tx1,ty1,tx2,ty2,darkColor,lightColor,1,this.color);
19352 			if (ty1 > ymax) ymax = ty1;
19353 
19354 			break;
19355 		}
19356 
19357 
19358 	case "GROUP": 
19359 			{
19360 				this.html.groupToPdf(x,y,out,this);
19361 				break;
19362 			}
19363 
19364 	case "INPUT": 
19365 			{
19366 				f = this.parentElement.font;
19367 
19368 				out.setLetterSpacing(this.html.pixelToPoint(f.letterSpacing));
19369 				out.setWordSpacing(this.html.pixelToPoint(f.wordSpacing));
19370 				out.setFontRender(f.render);
19371 				out.setFontSkew(f.skew);
19372 				out.setFontScale(f.scaleX,f.scaleY);
19373 				size = f.size;
19374 				out.setFont(f.color,size,f.bold,f.italic,f.underline,f.fontName,f.subscript,f.superscript);
19375 
19376 				field = out.placeFormInput(px,py,this);
19377 				if (field == null) break;
19378 		
19379 				field.onChange		= this.PDF_onChange;
19380 				field.onClick		= this.PDF_onClick;
19381 				field.onMouseDown	= this.PDF_onMouseDown;
19382 				field.onMouseUp	= this.PDF_onMouseUp;
19383 				field.onKeyUp		= this.PDF_onKeyUp;
19384 				field.onKeyDown		= this.PDF_onKeyDown;
19385 				field.onEnter		= this.PDF_onEnter;
19386 				field.onLeave		= this.PDF_onLeave;
19387 				break;
19388 			}
19389 
19390 			case "SELECT": 
19391 			{
19392 				f = this.parentElement.font;
19393 
19394 				out.setLetterSpacing(this.html.pixelToPoint(f.letterSpacing));
19395 				out.setWordSpacing(this.html.pixelToPoint(f.wordSpacing));
19396 				out.setFontRender(f.render);
19397 				out.setFontSkew(f.skew);
19398 				out.setFontScale(f.scaleX,f.scaleY);
19399 				size = f.size;
19400 				out.setFont(f.color,size,f.bold,f.italic,f.underline,f.fontName,f.subscript,f.superscript);
19401 
19402 				height = this.offsetHeight;
19403 				width  = this.offsetWidth;
19404 				
19405 				field = out.placeFormSelect(px,py,this.name,this.options,this.values,this.selected,this.PDF_onchange,height,width,this);
19406 				if (field == null) break;
19407 				field.onClick		= this.PDF_onClick;
19408 				field.onMouseDown	= this.PDF_onMouseDown;
19409 				field.onMouseUp	= this.PDF_onMouseUp;
19410 				field.onKeyUp		= this.PDF_onKeyUp;
19411 				field.onKeyDown		= this.PDF_onKeyDown;
19412 				field.onEnter		= this.PDF_onEnter;
19413 				field.onLeave		= this.PDF_onLeave;
19414 				break;
19415 			}
19416 
19417 			case "TEXTAREA": 
19418 			{
19419 				height = (this.offsetHeight / 110 * 72);
19420 				width  = (this.offsetWidth / 110 * 72);
19421 				px += 4 / 72;
19422 
19423 				field = out.placeFormTextarea(px,py,this.name,this.value,this.PDF_onChange,height,width,this);
19424 				if (field == null) break;
19425 				field.onClick		= this.PDF_onClick;
19426 				field.onMouseDown	= this.PDF_onMouseDown;
19427 				field.onMouseUp	= this.PDF_onMouseUp;
19428 				field.onKeyUp		= this.PDF_onKeyUp;
19429 				field.onKeyDown		= this.PDF_onKeyDown;
19430 				field.onEnter		= this.PDF_onEnter;
19431 				field.onLeave		= this.PDF_onLeave;
19432 				break;
19433 			}
19434 
19435 			case "REPORT": 
19436 			{
19437 				this.html.reportToPdf(out,x,y,this);
19438 				break;
19439 			}
19440 
19441 			case "PRE": 
19442 			{
19443 				this.html.textToPdf(out,x,y,this.value);
19444 				break;
19445 			}
19446 
19447 			case "ECHO": 
19448 			{
19449 				this.html.textToPdf(out,x,y,this.html.image);
19450 				break;
19451 			}
19452 
19453 			case "MATRIX":
19454 					this.writeElementMatrix(out,x,y); 
19455 				//break ==- // FALL THROUGH TO QUANTITY (Side Bars of Matrix
19456 			case "QUANTITY": 
19457 			{				
19458 				f = this.font;
19459 				out.setLetterSpacing(this.html.pixelToPoint(f.letterSpacing));
19460 				out.setWordSpacing(this.html.pixelToPoint(f.wordSpacing));
19461 				out.setFontRender(f.render);
19462 				out.setFontSkew(f.skew);
19463 				out.setFontScale(f.scaleX,f.scaleY);
19464 				size = f.size;
19465 				out.setFont(f.color,size,f.bold,f.italic,f.underline,f.fontName,f.subscript,f.superscript);
19466 
19467 				px2 = this.html.pixelToInch_x(x + this.offsetRight);
19468 
19469 				height = this.offsetHeight / 110 * 72;
19470 				out.drawChar(px ,py,height,this.char.left);
19471 				out.drawChar(px2,py,height,this.char.right);
19472 
19473 				break;
19474 			}
19475 
19476 			case "ROOT": 
19477 			{				
19478 				out.setGraphicColor(this.lineColor);	
19479 				out.setGraphicLineWeight(this.lineWeight);	
19480 				out.setGraphicLineStyle(this.lineStyle);
19481 				out.drawLinestring2(px,py,this.line);
19482 				break;
19483 			}
19484 			case "FRAME":
19485 			case "IFRAME": 
19486 			    {
19487 		        if (this.src == '') break;
19488 
19489 		        this.html.xhtml = new html$(this.sys);
19490 
19491 			    if (this.html.document)
19492                        this.html.xhtml.loadFromUrl(this.src);
19493 			     else  this.html.xhtml.loadFromFile(this.src);
19494 
19495 				x2 = x + this.offsetWidth;
19496 				y2 = y + this.offsetHeight;
19497 				
19498 				px2 = this.html.pixelToInch_x(x2);
19499 				py2 = this.html.pixelToInch_y(y2);
19500 
19501 				out.clip = true;
19502 				out.clipBegin(px,py,px2,py2);
19503 				this.html.xhtml.writeToPdf(out,x,y,x2,y2);
19504 				out.clipEnd();
19505 				out.clip = false;
19506 				break;
19507 			}
19508 
19509 			case "INTEGRAL": 
19510 			{
19511 				out.setGraphicColor(this.lineColor);	
19512 				out.setGraphicLineWeight(this.lineWeight);	
19513 				out.setGraphicLineStyle(this.lineStyle);	
19514 
19515 				f = this.font;
19516 				out.setLetterSpacing(this.html.pixelToPoint(f.letterSpacing));
19517 				out.setWordSpacing(this.html.pixelToPoint(f.wordSpacing));
19518 				out.setFontRender(f.render);
19519 				out.setFontSkew(f.skew);
19520 				out.setFontScale(f.scaleX,f.scaleY);
19521 				size = f.size;
19522 				out.setFont(f.color,size,f.bold,f.italic,f.underline,f.fontName,f.subscript,f.superscript);
19523 
19524 				height = this.offsetHeight / 110 * 72;
19525 				dy = (height * 0.15) / 72;
19526 				out.drawChar(px,py+dy,height,this.char.left);
19527 
19528 				break;
19529 			}
19530 
19531 			case "SUMMATION": 
19532 			{
19533 				f = this.font;
19534 				out.setLetterSpacing(this.html.pixelToPoint(f.letterSpacing));
19535 				out.setWordSpacing(this.html.pixelToPoint(f.wordSpacing));
19536 				out.setFontRender(f.render);
19537 				out.setFontSkew(f.skew);
19538 				out.setFontScale(f.scaleX,f.scaleY);
19539 				size = this.font.size;
19540 				out.setFont(f.color,size,f.bold,f.italic,f.underline,f.fontName,f.subscript,f.superscript);
19541 				dy = (size * 0.75) / 72;
19542 				out.placeText(px,py+dy,this.text,'',this);
19543 				break;
19544 			}
19545 
19546 			case "BR": 
19547 			{
19548 				break;
19549 			}
19550 			case "DIVIDE": 
19551 			{
19552 
19553 				x1 = this.html.pixelToInch_x(x);
19554 				x2 = this.html.pixelToInch_x(x + this.offsetWidth);
19555 
19556 				py = this.html.pixelToInch_y(y + this.lineYpos);
19557 
19558 				out.setGraphicColor(this.lineColor);	
19559 				out.setGraphicLineWeight(this.lineWeight);	
19560 				out.setGraphicLineStyle(this.lineStyle);	
19561 				out.drawLine(x1,py,x2,py);
19562 				break;
19563 			}
19564 			
19565 			case "TRACE": 
19566 			{
19567 				if (this.errors)
19568 				{
19569 					py = py + 0.3;
19570 					out.setFont('black',8,false,false,false,'arial',false,false);
19571 					out.placeText(px,py,log(),'',this);
19572 				}
19573 				break;
19574 			}
19575 
19576 
19577 			case "CALENDAR": 
19578 			{
19579 				width = this.offsetWidth / 110 * 72;
19580 				height = this.offsetHeight / 110 * 72;
19581 
19582 				this.html.calendarToPdf(out,this,px,py,height,width);
19583 
19584 				break;
19585 			}
19586 	
19587 			case "TIMELINE": 
19588 			{
19589 				width = this.offsetWidth / 110 * 72;
19590 				height = this.offsetHeight / 110 * 72;
19591 				this.html.timelineToPdf(out,this,px,py,height,width);
19592 				if ((y + height) > ymax) ymax = y + height;
19593 				break;
19594 			}
19595 
19596 			case "SCHEDULE": 
19597 			{
19598 				width = this.offsetWidth / 72;
19599 				height = this.offsetHeight / 72;
19600 
19601 				this.html.scheduleToPdf(out,this,px,py,height,width);
19602 				break;
19603 			}
19604 			case "GRAPHIC": 
19605 			{
19606 				out.setLetterSpacing(0);
19607 				out.setWordSpacing(0);
19608 				out.setFontRender('');
19609 				out.setFontSkew(0);
19610 				out.setFontScale(1,1);
19611 
19612 				h = this.html.pixelToPoint(this.height);
19613 				w = this.html.pixelToPoint(this.width);
19614 
19615 				y = py + (h / 72);		
19616 //				h = this.height;
19617 //				w = this.width;
19618 
19619 				out.placeGraphic(px,y,this.graphic,this);
19620 				break;
19621 			}
19622 			case "LI": 
19623 			{
19624 				if (this.bullet == null) return;
19625 
19626 				if (this.bullet.text != '')
19627 				{
19628 				
19629 					out.setLetterSpacing(0);
19630 					out.setWordSpacing(0);
19631 					out.setFontRender('');
19632 					out.setFontSkew(0);
19633 					out.setFontScale(1,1);
19634 				
19635 					size = this.bullet.size;
19636 					out.setFontName(this.bullet.fontName);
19637 					out.setFont(this.font.color,size,this.font.bold,false,false);
19638 
19639 					x = x + this.bullet.offsetLeft;
19640 					y = (y + this.bullet.offsetTop);	
19641 					tx = this.html.pixelToInch_x(x);
19642 					ty = this.html.pixelToInch_y(y);
19643 	
19644 					out.placeText(tx,ty,this.bullet.text,'',this);		// inches
19645 					return;
19646 				}
19647 
19648 				if (this.bullet.imageSize != undefined)
19649 
19650 				if (this.bullet.imageSize != null)
19651 				{
19652 						
19653 					h = this.bullet.imageSize.height / this.bpi;
19654 					w = this.bullet.imageSize.width / this.bpi;
19655 
19656 					px = (px + this.bullet.offsetLeft);
19657 					py = (py - this.bullet.offsetTop);
19658 	
19659 					out.placeImage(px,py,this.bullet.src,h,w,this);			// inches
19660 					break;
19661 				}
19662 	
19663 				break;
19664 			}
19665 			
19666 			case "EVAL":
19667 
19668 				f = this.font;
19669 				out.setLetterSpacing(this.html.pixelToPoint(f.letterSpacing));
19670 				out.setWordSpacing(this.html.pixelToPoint(f.wordSpacing));
19671 				out.setFontRender(f.render);
19672 				out.setFontSkew(f.skew);
19673 				out.setFontScale(f.scaleX,f.scaleY);
19674 				size = f.size;
19675 				out.setFont(f.color,size,f.bold,f.italic,f.underline,f.fontName,f.subscript,f.superscript);
19676 				
19677 				px += this.paddingLeft / 110;
19678 				py += this.paddingTop / 110;
19679 				
19680 				height = this.offsetHeight - (this.paddingTop + this.paddingBottom);
19681 				width = this.offsetWidth - (this.paddingLeft + this.paddingRight);
19682 				height = height / 110 * 72;
19683 				width = width / 110 * 72;
19684 				
19685 				out.setView(px, py, width, height);
19686 
19687 				command = this.html.resolve(this.command);
19688 				command = 'try{' + command + '} catch (e) { alert(e.message + " " + command); }';
19689 				
19690 //				try 
19691 				{
19692 					 eval(command); 
19693 				}
19694 //				catch (e) { log( "EVAL error: " + e.message); }
19695 				out.restoreView();
19696 				break;	
19697 			
19698 			case "IMG": 
19699 			{
19700 				dx = (html$i4(this.vspace) / 2);
19701 				dy = (html$i4(this.hspace) / 2);
19702 
19703 				rx = x + dx;
19704 				ry = y + dy;
19705 				
19706 				if (this.borderLeft > 0) rx += this.borderLeft;
19707 				if (this.borderTop > 0) ry += this.borderTop;
19708 
19709 				rx = this.html.pixelToInch_x(rx);
19710 				ry = this.html.pixelToInch_y(ry);
19711 
19712 				ch = this.offsetHeight - (this.borderTop + this.borderBottom);
19713 				cw = this.offsetWidth - (this.borderLeft + this.borderRight);
19714 		
19715 				h = ch / this.html.bpi;
19716 				w = cw / this.html.bpi;
19717 				angle = 0;
19718 
19719 				url = this.html.imageFilename(this.src);
19720 
19721 				out.placeImage(rx,ry,url,h,w,angle,this.alt,this);			// inches
19722 				if (this.usemap != '')	this.writeMap(out,rx,ry);
19723 
19724 				if ((this.borderLeft == 0) && (this.borderRight == 0) && (this.borderTop == 0) && (this.borderBottom == 0)) break;
19725 
19726 				x1 = x + dx;
19727 				y1 = y + dy;
19728 				x2 = x1 + this.offsetWidth - 1;
19729 				y2 = y1 + this.offsetHeight - 1;
19730 
19731 				x1 = this.html.pixelToInch_x(x1);
19732 				y1 = this.html.pixelToInch_y(y1);
19733 				x2 = this.html.pixelToInch_x(x2);
19734 				y2 = this.html.pixelToInch_y(y2);
19735 				b = this.getBorder_();
19736 
19737 				out.lineCap = 2; // assume all 4 sides;
19738 				if (b.left   == '') out.lineCap = 0;
19739 				if (b.right  == '') out.lineCap = 0;
19740 				if (b.top    == '') out.lineCap = 0;
19741 				if (b.bottom == '') out.lineCap = 0;
19742 
19743 				out.drawBorder(x1,y1,x2,y2,b.left,b.right,b.top,b.bottom);
19744 				if (y1 > ymax) ymax = y1;
19745 				break;
19746 			}
19747 			default:
19748 				if (typeof(out.placeElement) != 'function') break;
19749 				//out.placeElement(px,py,this);
19750 		
19751 		}
19752 }
19753 //============================================================================================
19754 //			html$writeMap
19755 //============================================================================================
19756 function htmlElement$writeMap(out,x,y)
19757 {
19758 	var i,map,a,j,c,e;
19759 	var xmin,ymin,xmax,ymax;
19760 	var height,width,dx,dy;
19761 		
19762 	if (this.usemap == '') return;
19763 	e = this;
19764 
19765 	map = null;
19766 	
19767 	for (i=0; i &lt; this.html.maps.length; ++i)
19768 	{
19769 		map = this.html.maps[i];
19770 		if (('#' + map.name) == this.usemap) break;
19771 		map = null;
19772 	}
19773 	
19774 
19775 	if (map == null) return;
19776 	
19777 	for (i = 0; i &lt; map.areas.length; ++i)
19778 	{
19779 		a = map.areas[i];
19780 		if (a.coords.length &lt; 4) continue;
19781 		xmin = a.coords[0];
19782 		ymin = a.coords[1];
19783 		xmax = xmin;
19784 		ymax = ymin;
19785 		for (j=2; j &lt; a.coords.length; ++j)
19786 		{
19787 			c = a.coords[j];
19788 			if ((j % 2) == 0) 
19789 			{
19790 				if (c &lt; xmin) xmin = c;
19791 				if (c > xmax) xmax = c;
19792 			}
19793 			else
19794 			{
19795 				if (c &lt; ymin) ymin = c;
19796 				if (c > ymax) ymax = c;
19797 			}
19798 
19799 		}
19800 
19801 		xmin = xmin / this.html.bpi;
19802 		ymin = ymin / this.html.bpi;
19803 		xmax = xmax / this.html.bpi;
19804 		ymax = ymax / this.html.bpi;
19805 		
19806 		height = (ymax - ymin);
19807 		width  = (xmax - xmin);
19808 
19809 		dx = xmin;
19810 		dy = ymin;
19811 
19812 		x = x + dx;
19813 		y = y + dy;
19814 		
19815 		out.placeHotspot(x,y,height,width,a.href);	
19816 	}	
19817 }
19818 //============================================================================================
19819 //			html$imageFilename
19820 //============================================================================================
19821 function html$imageFilename(src)
19822 {
19823 	var filename,name;
19824 	var href,i,j,url,xsrc;
19825 
19826 	if (src.substr(0,8).toUpperCase() == 'ASCII85,') return src;
19827 
19828 	src = src.replace(/\'/g,'');
19829 	src = src.replace(/\"/g,'');
19830 	
19831 	if (src.toLowerCase() == 'about:blank') return src;
19832 
19833 	if (src.substr(0,6).toLowerCase() == 'macro:')
19834 	{
19835 		name = src.substr(6);
19836 		filename = this.resolveTag(name);
19837 		return filename;
19838 	}	
19839 
19840 	if (this.document) 
19841 	{	
19842 		href = this.document.resolve(src);	
19843 	}
19844 	else
19845 	{	
19846 		if (src.indexOf(':') &lt; 0 && src.indexOf('//') &lt; 0) 
19847 		{
19848 			src = CollinsPDF().mapPath(src);
19849 			return src;
19850 		}
19851 		href = src;
19852 	}
19853 
19854 	if (this.convertImageCommand == '') return href;
19855 
19856 	xsrc = src.toLowerCase();
19857 	i = xsrc.indexOf('.jpg');
19858 	j = xsrc.indexOf('.jpeg');
19859 
19860 	if ((j > 0) || (i > 0)) return href;
19861 	
19862 	url = this.convertImageCommand;
19863 	url = url.replace(/\{href\}/gi,href);
19864 
19865 	return url;
19866 }
19867 //============================================================================================
19868 //			html$getPdfHeight
19869 //============================================================================================
19870 function html$getPdfHeight(pdf)
19871 {
19872 	return this.body.height;
19873 }
19874 //============================================================================================
19875 //			hrmlElement$getBorder_
19876 //============================================================================================
19877 function htmlElement$getBorder_()
19878 {
19879 	var b;
19880 	var xleft,xright,xtop,xbottom;
19881 
19882 	b = new Object();
19883 	b.size = html$i4(this.border);
19884 	if (isNaN(b.size)) b.size = 0;
19885 	if (b.size > 3) b.size = Math.round(b.size / 2);
19886 	if (b.size &lt; 0) b.size = 0;	
19887 
19888 	b.dx = b.size;
19889 	b.sizeLeft		= b.dx;
19890 	b.sizeTop		= b.dx;
19891 	b.sizeRight		= b.dx;
19892 	b.sizeBottom		= b.dx;
19893 
19894 	b.left			= b.size + ' solid black';
19895 	b.right			= b.size + ' solid black';
19896 	b.top			= b.size + ' solid black';
19897 	b.bottom		= b.size + ' solid black';
19898 	
19899 	if  ( (this.style.borderLeft   == '') && 
19900 		  (this.style.borderRight  == '') && 
19901 		  (this.style.borderTop    == '') && 
19902 		  (this.style.borderBottom == '')) return b;
19903 
19904 	b.left			= this.style.borderLeft;
19905 	b.right			= this.style.borderRight;
19906 	b.top			= this.style.borderTop;
19907 	b.bottom		= this.style.borderBottom;
19908 
19909 	xleft			= this.getBorder_A(this.style.borderLeft);
19910 	xright			= this.getBorder_A(this.style.borderRight);
19911 	xtop			= this.getBorder_A(this.style.borderTop);
19912 	xbottom			= this.getBorder_A(this.style.borderBottom);
19913 		
19914 
19915 	b.dx = xleft + xright;
19916 	b.sizeLeft		= xleft;
19917 	b.sizeTop		= xtop;
19918 	b.sizeRight		= xright;
19919 	b.sizeBottom		= xbottom;
19920 	b.size			= 1;	// anything
19921 	
19922 	return b;
19923 
19924 }
19925 //============================================================================================
19926 //			hrmlElement$getBorder_A
19927 //============================================================================================
19928 function htmlElement$getBorder_A(border)
19929 {
19930 	var obj,list,size;
19931 
19932 	if (this.tagName == 'TH') border = this.border;
19933 	if (this.tagName == 'TD') border = this.border;
19934 	if (this.tagName == 'TABLE') border = this.border;
19935 
19936 	border = this.html.trim(border);
19937 	if (border == '') return 0;
19938 
19939 	list = border.split(' ');
19940 	size = html$i4(list[0]);
19941 
19942 	if (size &lt;= 0) return 0;
19943 	if (size &lt; 3) return size;
19944 	return Math.round(size * (72 / 110));
19945 }
19946 //============================================================================================
19947 //			html$getElementsByTagName
19948 //============================================================================================
19949 function html$getElementsByTagName(tagName)
19950 {
19951 	var e,list;
19952 
19953 	tagName = tagName.toUpperCase();
19954 	list = new Array();
19955 	e = this.body;
19956 	this.getElementsByTagName_A(tagName,e,list);
19957 
19958 	return list;
19959 }
19960 //============================================================================================
19961 //			html$getElementsByTagName_A
19962 //============================================================================================
19963 function html$getElementsByTagName_A(tagName,e,list)
19964 {
19965 	if (e == null) return;
19966 	if (e.tagName == tagName) list[list.length] = e;
19967 
19968 	if (e.firstChild != null) this.getElementsByTagName_A(tagName,e.firstChild,list);
19969 	if (e.nextSibling != null) this.getElementsByTagName_A(tagName,e.nextSibling,list);
19970 }
19971 //============================================================================================
19972 //			html$toString
19973 //============================================================================================
19974 function html$toString(h)
19975 {
19976 	var text,cr;
19977 	
19978 	cr = '\r\n';
19979 	if (h != undefined) cr = '\r\n&lt;br>';
19980 
19981 	text = '';
19982 
19983 	text += this.toString_A(this.body,0,cr);
19984 	return text;		
19985 
19986 }
19987 //============================================================================================
19988 //			html$dump
19989 //============================================================================================
19990 function html$dump(format)
19991 {
19992 	var text,cr;
19993 	
19994 	switch (format)
19995 	{
19996 		case 'text': cr = '\r\n'; break;
19997 		case 'html': cr = '\r\n&lt;br>'; break;
19998 		default: '\r\n&lt;br>';
19999 	}
20000 
20001 	text = '';
20002 //	text += this.css.dump(cr);
20003 	text += this.toString_A(this.body,0,cr);
20004 	return text;		
20005 
20006 }
20007 //============================================================================================
20008 //			html$toString_A
20009 //============================================================================================
20010 function html$toString_A(e,level,cr)
20011 {
20012 	var text,e;
20013 	
20014 	if (e == null) return '';
20015 	text = cr + this.space_(level * 4) + e.toString();
20016 	if (e.style) text += e.style.dump();
20017 	text += e.dump();
20018 
20019 	if (e.firstChild != null) text += this.toString_A(e.firstChild, level + 1, cr);
20020 	if (e.nextSibling != null) text += this.toString_A(e.nextSibling,level, cr);
20021  
20022 	return text;	
20023 }
20024 //============================================================================================
20025 //			html$space_
20026 //============================================================================================
20027 function html$space_(n)
20028 {
20029 	var i,text;
20030 
20031 	text = '';
20032 	for (i=0; i &lt; n; ++i) text += ' ';
20033 
20034 	return text;
20035 }
20036 //============================================================================================
20037 //			html$createElement_
20038 //============================================================================================
20039 function html$createElement_(tag,level)
20040 {
20041 	var e,tagName,term;
20042 
20043 	if (arguments.length &lt; 2) 
20044 	{
20045 		level = 0;
20046 		if (this.activeElement) level = this.activeElement.level;
20047 	}
20048 
20049 	if (typeof(tag) == 'object')
20050 	{
20051 		tagName = tag.name.toUpperCase();
20052 
20053 		e = new htmlElement$(this,tagName,level);
20054 		if (this.holdTag) e.tag = tag;
20055 
20056 		e.className		= tag.value("class");
20057 		e.name			= tag.value("name");
20058 		e.id			= tag.value("id");
20059 		e.outline		= tag.value("bookmark");
20060 
20061 		e.style			= new htmlStyle$(this,tag.value('style'),this.document);
20062 
20063 		e.PDF_onClick		= tag.value(this.PDF_eventPrefix + 'onclick');
20064 		e.PDF_onChange		= tag.value(this.PDF_eventPrefix + 'onchange');
20065 		e.PDF_onMouseDown	= tag.value(this.PDF_eventPrefix + 'onmousedown');
20066 		e.PDF_onMouseUp	= tag.value(this.PDF_eventPrefix + 'onmouseup');
20067 		e.PDF_onKeyDown	= tag.value(this.PDF_eventPrefix + 'onkeydown');
20068 		e.PDF_onKeyUp		= tag.value(this.PDF_eventPrefix + 'onkeyup');
20069 		e.PDF_onEnter		= tag.value(this.PDF_eventPrefix + 'onenter');
20070 		e.PDF_onLeave		= tag.value(this.PDF_eventPrefix + 'onleave');
20071 	}
20072 	else
20073 	{
20074 		e = new htmlElement$(this,tag,level);	
20075 		e.style	= new htmlStyle$(this,'',this.document);
20076 	}
20077 
20078 	if (tag.end) return e;
20079 	if (! e.style) return e;
20080 	if (e.style.fit == '') return e;
20081 	
20082 	term = '&lt;/' + e.tagName.toLowerCase() + '>';
20083 	this.parseData = this.loadHtml_(tag,this.parseData,term,true) + term;
20084 	e.htmlData = this.data;
20085 	return e;
20086 	
20087 }
20088 //============================================================================================
20089 //			html$charHeight
20090 //============================================================================================
20091 function htmlElement$charHeight()
20092 {
20093 	var h,f,text,value;
20094 	
20095 	f = 110/72;
20096 	h = this.font.size * f;
20097 
20098 	text = this.style.lineHeight;
20099 	value = h;
20100 	if (text != '')
20101 	{
20102 		value = parseFloat(text);
20103 		if (text.substr(text.length-1) == '%')
20104 		{
20105 			if (isNaN(value)) value = 100;
20106 			value = h * (value / 100);		
20107 		}
20108 		else
20109 		{
20110 			if (isNaN(value)) value = h;
20111 			
20112 		}	
20113 		
20114 	}
20115 	
20116 	if (this.style.scaleY &lt;= 0) return value;
20117 	h = value * this.style.scaleY;
20118 	return h;
20119 }
20120 //============================================================================================
20121 //			htmlElement$charWidth
20122 //============================================================================================
20123 function htmlElement$charWidth(code,last)
20124 {
20125 	var w,f,c;
20126 
20127 	f = 0.975;
20128 	f = 110/72;
20129 
20130 	if (this.font.bold) f = f * 1.1;
20131 
20132 	c = code;
20133 	if (this.html.pdf != null && typeof(this.html.pdf.cid_) == 'function') c = this.html.pdf.cid_(code);
20134 
20135 	w = 0;	
20136 	if (this.html.onCharWidth) 
20137 	{	
20138 		w = this.html.onCharWidth(c,this.font.fontName, this.font.size, this.font.bold, this.font.italic);
20139 	}
20140 	else
20141 	{
20142 		if (c &lt; this.html.font_widths.length) w = (this.html.font_widths[c] / 1000) * this.font.size * f;
20143 	}
20144 
20145 	if ((c == 32) && (this.font.wordSpacing > 0))
20146 	{
20147 		w = w + (this.font.wordSpacing * 1.095);
20148 		w = w * this.font.scaleX;
20149 		return w;
20150 	}
20151 
20152 	w = w * this.font.scaleX;
20153 
20154 	if (last) return w;
20155 	if (this.font.letterSpacing == 0) return w;
20156 
20157 	w = w + (this.font.letterSpacing * 1.095);
20158 	return w;
20159 }
20160 //============================================================================================
20161 //			htmlElement$wordWidth
20162 //============================================================================================
20163 function htmlElement$wordWidth(text)
20164 {
20165 	var width,i,last,w;
20166 	
20167 	width = 0;
20168 	
20169 	if (this.html.onWordWidth != null) 
20170 	{
20171 		return this.html.onWordWidth(text,this.font.fontName,this.font.size,this.font.bold, this.font.italic);
20172 	}
20173 
20174 	this.html.setFontName(this.font.fontName);
20175 
20176 	text = text.replace(/\|\|/g,'');
20177 	text = text.replace(/\|[^\|]+\|/g,'Z');		// Replace Encoded to a Z
20178 
20179 	for (i=0; i &lt; text.length; ++i)
20180 	{
20181 		last = false;
20182 		if (i == text.length-1) last = true;
20183 		width += this.charWidth(text.charCodeAt(i),last);
20184 	}
20185 
20186 	return Math.round(width);
20187 }
20188 //============================================================================================
20189 //			html$decode_
20190 //============================================================================================
20191 function html$decode_(text)
20192 {	
20193 var htmlcode_names = ['Aacute','aacute','Acirc','acirc','acute','AElig',
20194 	'aelig','Agrave','agrave','alefsym','Alpha','alpha','amp',
20195 	'and','ang','apos','aring','Aring','asymp','atilde',
20196 	'Atilde','auml','Auml','bdquo','Beta','beta','brvbar',
20197 	'bull','cap','ccedil','Ccedil','cedil','cent','Chi',
20198 	'chi','circ','clubs','cong','copy','crarr','cup',
20199 	'curren','Dagger','dagger','darr','dArr','deg','Delta',
20200 	'delta','diams','divide','eacute','Eacute','ecirc','Ecirc',
20201 	'egrave','Egrave','empty','emsp','ensp','Epsilon','epsilon',
20202 	'equiv','Eta','eta','eth','ETH','euml','Euml',
20203 	'euro','exist','fnof','forall','frac12','frac14','frac34',
20204 	'frasl','Gamma','gamma','ge','gt','harr','hArr',
20205 	'hearts','hellip','iacute','Iacute','icirc','Icirc','iexcl',
20206 	'igrave','Igrave','image','infin','int','Iota','iota',
20207 	'iquest','isin','iuml','Iuml','Kappa','kappa','Lambda',
20208 	'lambda','lang','laquo','larr','lArr','lceil','ldquo',
20209 	'le','lfloor','lowast','loz','lrm','lsaquo','lsquo',
20210 	'lt','macr','mdash','micro','middot','minus','Mu',
20211 	'mu','nabla','nbsp','ndash','ne','ni','not',
20212 	'notin','nsub','ntilde','Ntilde','Nu','nu','oacute',
20213 	'Oacute','ocirc','Ocirc','OElig','oelig','ograve','Ograve',
20214 	'oline','omega','Omega','Omicron','omicron','oplus','or',
20215 	'ordf','ordm','oslash','Oslash','otilde','Otilde','otimes',
20216 	'ouml','Ouml','para','part','permil','perp','Phi',
20217 	'phi','Pi','pi','piv','plusmn','pound','Prime',
20218 	'prime','prod','prop','Psi','psi','quot','radic',
20219 	'rang','raquo','rarr','rArr','rceil','rdquo','real',
20220 	'reg','rfloor','Rho','rho','rlm','rsaquo','rsquo',
20221 	'sbquo','scaron','Scaron','sdot','sect','shy','Sigma',
20222 	'sigma','sigmaf','sim','spades','sub','sube','sum',
20223 	'sup','sup1','sup2','sup3','supe','szlig','Tau',
20224 	'tau','there4','Theta','theta','thetasym','thinsp','thorn',
20225 	'THORN','tilde','times','trade','uacute','Uacute','uarr',
20226 	'uArr','ucirc','Ucirc','ugrave','Ugrave','uml','upsih',
20227 	'Upsilon','upsilon','uuml','Uuml','weierp','Xi','xi',
20228 	'yacute','Yacute','yen','yuml','Yuml','Zeta','zeta',
20229 	'zwj','zwnj'];
20230 
20231 var htmlcode_values = [193,225,194,226,180,198,230,192,224,
20232 	8501,913,945,38,8743,8736,39,229,197,8776,
20233 	227,195,228,196,8222,914,946,166,8226,8745,
20234 	231,199,184,162,935,967,710,9827,8773,169,
20235 	8629,8746,164,8225,8224,8595,8659,176,916,948,
20236 	9830,247,233,201,234,202,232,200,8709,8195,
20237 	8194,917,949,8801,919,951,240,208,235,203,
20238 	8364,8707,402,8704,189,188,190,8260,915,947,
20239 	8805,62,8596,8660,9829,8230,237,205,238,206,
20240 	161,236,204,8465,8734,8747,921,953,191,8712,
20241 	239,207,922,954,923,955,9001,171,8592,8656,
20242 	8968,8220,8804,8970,8727,9674,8206,8249,8216,60,
20243 	175,8212,181,183,8722,924,956,8711,160,8211,
20244 	8800,8715,172,8713,8836,241,209,925,957,243,
20245 	211,244,212,338,339,242,210,8254,969,937,
20246 	927,959,8853,8744,170,186,248,216,245,213,
20247 	8855,246,214,182,8706,8240,8869,934,966,928,
20248 	960,982,177,163,8243,8242,8719,8733,936,968,
20249 	34,8730,9002,187,8594,8658,8969,8221,8476,174,
20250 	8971,929,961,8207,8250,8217,8218,353,352,8901,
20251 	167,173,931,963,962,8764,9824,8834,8838,8721,
20252 	8835,185,178,179,8839,223,932,964,8756,920,
20253 	952,977,8201,254,222,732,215,8482,250,218,
20254 	8593,8657,251,219,249,217,168,978,933,965,
20255 	252,220,8472,926,958,253,221,165,255,376,
20256 	918,950,8205,8204];
20257 	
20258 	var value,i,j,k,list,c,n,temp,found;
20259 	
20260 	if (text.indexOf('&') &lt; 0) return text;
20261 
20262 	value = '';
20263 	while (true)
20264 	{
20265 		i = text.indexOf('&');
20266 		if (i &lt; 0)
20267 		{
20268 			value += text;
20269 			return value;
20270 		}
20271 		
20272 		value += text.substr(0,i);
20273 		text = text.substr(i+1);
20274 		j = text.indexOf(';');
20275 		if (j > 10)
20276 		{
20277 			value += '&';
20278 			continue;
20279 		}
20280 		
20281 		temp = text.substr(0,j);
20282 		text = text.substr(j+1);
20283 					
20284 
20285 		if (temp.substr(0,1) == '#')
20286 		{
20287 				temp = temp.substr(1);
20288 				n = html$i4(temp,16);
20289 				value += String.fromCharCode(n);
20290 				continue;
20291 		}
20292 
20293 		found = false;
20294 		for (k=0; k &lt; htmlcode_names.length; ++k)
20295 		{
20296 			if (temp == htmlcode_names[k])
20297 			{
20298 				found = true;
20299 				value += String.fromCharCode(htmlcode_values[k]);
20300 				break;
20301 			}
20302 		}
20303 
20304 		if (found) continue;
20305 	
20306 		c = '';		
20307 		if (temp ==    'nbsp') c = ' ';
20308 		if (temp ==      'sp') c = ' ';
20309 		if (temp ==   'blank') c = ' ';
20310 	
20311 		if (temp ==     'num') c = '#';
20312 		if (temp ==    'excl') c = '!';
20313 		if (temp ==  'dollar') c = '$';
20314 		if (temp ==  'percnt') c = '%';
20315 		if (temp ==    'lpar') c = '(';
20316 		if (temp ==    'rpar') c = ')';
20317 		if (temp ==  'period') c = '.';
20318 		if (temp ==   'comma') c = ',';
20319 		if (temp ==   'colon') c = ':';
20320 		if (temp ==    'semi') c = ';';
20321 
20322 		if (temp ==      'lt') c = '&lt;';
20323 		if (temp ==      'gt') c = '>';
20324 		if (temp ==     'amp') c = '&';
20325 		if (temp ==    'quot') c = '"';
20326 		if (temp ==    'apos') c = "'";
20327 		if (temp ==   'quest') c = "?";
20328 				
20329 		if (temp ==  'verbar') c = "|";
20330 		if (temp ==    'lcub') c = "{";
20331 		if (temp ==    'rcub') c = "}";
20332 
20333 		if (temp ==    'lsqb') c = "[";
20334 		if (temp ==    'rsqb') c = "]";
20335 		if (temp ==    'bsol') c = "\\";
20336 		if (temp ==     'sol') c = "/";
20337 		if (temp ==  'lowbar') c = "_";
20338 
20339 		if (c == '') value += '&' + temp + ';';
20340 		if (c != '') value += c;
20341 
20342 	}
20343 
20344 	return value;
20345 }
20346 //============================================================================================
20347 //			html$compress
20348 //============================================================================================
20349 function html$compress(text)
20350 {	
20351 	var value,i,c,last;
20352 	
20353 	text = '' + text;
20354 	last = 66;
20355 	value = '';
20356 	
20357 	for (i=0; i &lt; text.length; ++i)
20358 	{
20359 		c = text.charCodeAt(i);
20360 		if (c &lt;= 32)
20361 		{
20362 			if (last &lt;= 32) continue;
20363 		}
20364 		
20365 		value += String.fromCharCode(c);
20366 		last = c;		
20367 	}
20368 	
20369 	return value;
20370 }
20371 //============================================================================================
20372 //			html$addText_
20373 //============================================================================================
20374 function html$addText_(text)
20375 {	
20376 	var NODE_TEXT = 3;
20377 	var NODE_TAG  = 1;
20378 
20379 	var e,a,c,href,skip;
20380 
20381 	if (this.activeElement == null) return;
20382 
20383 	if (this.activeElement.active.xpos == 0)
20384 	{
20385 //		 text = html$trimLeft(text);
20386 	}
20387 	
20388 	if (text == '') return;
20389 	if (this.trim(text) == '')
20390 	{
20391 		c = this.activeElement.lastChild();
20392 		if (c == null) return;
20393 		if (c.tagName == 'DIV') return;
20394 		if (c.tagName == 'IMG') return;
20395 		if (c.tagName == 'SPAN') return;		
20396 		if (c.tagName == 'OL') return;
20397 		if (c.tagName == 'BR') return;
20398 		if (c.tagName == 'DOC') return;
20399 		if (c.tagName == 'HR') return;
20400 		if (c.tagName == 'GRAPHIC') return;		
20401 		if (c.tagName == 'GROUP') return;		
20402 		if (c.tagName == 'LOOP') return;		
20403 		if (c.tagName == 'PDF') return;		
20404 		if (c.tagName == 'PAGEHEADER') return;		
20405 		if (c.tagName == 'PAGEFOOTER') return;		
20406 		if (c.tagName == 'DIVIDE') return;		
20407 		if (c.tagName == 'RAISE') return;		
20408 		if (c.tagName == 'CALENDAR') return;		
20409 		if (c.tagName == 'TIMELINE') return;		
20410 		if (c.tagName == 'SCHEDULE') return;		
20411 		if (c.tagName == 'UL') return;		
20412 		if (c.tagName == 'LI') return;		
20413 		if (c.tagName == 'TR') return;		
20414 		if (c.tagName == 'TD') return;
20415 		if (c.tagName == 'TH') return;
20416 		if (c.tagName == 'P') return;
20417 		if (c.tagName == 'TABLE') return;
20418 		if (c.tagName == 'BLOCKQUOTE') return;		
20419 		if (c.tagName == 'TABLE') return;		
20420 	}
20421 
20422 	skip = false;
20423 
20424 	c = this.activeElement.lastChild();
20425 	if (c != null)
20426 	{
20427 		if (c.tabName == 'B') skip = true;	
20428 		if (c.tabName == 'U') skip = true;	
20429 		if (c.tabName == 'I') skip = true;	
20430 	}
20431 	
20432 
20433 	if (! skip) text = this.compress(text);
20434 	if (text == '') text = ' ';
20435 	text = unescape(text);	
20436 	if (text.indexOf('&') >= 0) text = this.decode_(text);
20437 
20438 	href = this.href;
20439 	if (this.document) href = this.document.resolve(href);
20440 
20441 	e = this.createElement_('#text');
20442 	e.nodeType		= NODE_TEXT;				// text;
20443 	e.text			= text;
20444 	e.href			= href;
20445 	e.href_title	= this.href_title;
20446 	e.href_target	= this.href_target;
20447 	
20448 	this.activeElement.appendChild(e);
20449 }
20450 //============================================================================================
20451 //			html$tableAdjustCells_
20452 //============================================================================================
20453 function html$tableAdjustCells_(tbl,r,c,row,cell)
20454 {
20455 	var i,xcell;
20456 	var xr,xrow,xc;
20457 	
20458 	if (cell.colspan &lt; 1) cell.colspan = 1;
20459 	if (cell.rowspan &lt; 1) cell.rowspan = 1;
20460 
20461 	if ((cell.colspan &lt;= 1) && (cell.rowspan &lt;= 1)) return;
20462 
20463 //--------- adjust current row -----------
20464 	
20465 	if (cell.colspan > 1)
20466 	{
20467 		for (i=c+1; i &lt; row.cells.length; ++i)
20468 		{
20469 			xcell = row.cells[i];
20470 			xcell.colIndex += cell.colspan - 1;
20471 			if (xcell.colIndex > tbl.maxColumnIndex) tbl.maxColumnIndex = xcell.colIndex;
20472 		}
20473 	}
20474 	
20475 //--------- adjust next rows -----------
20476 
20477 	if (cell.rowspan &lt;= 1) return;
20478 	
20479 	for (i=1; i &lt; cell.rowspan; ++i)
20480 	{
20481 		xr = i + r;
20482 
20483 		if (xr >= tbl.rows.length) break;
20484 		xrow = tbl.rows[xr];
20485 		for (xc=0; xc &lt; xrow.cells.length; ++xc)
20486 		{
20487 			xcell = xrow.cells[xc];
20488 			if (xcell.colIndex >= cell.colIndex)
20489 			{
20490 				xcell.colIndex += cell.colspan;
20491 				if (xcell.colIndex > tbl.maxColumnIndex) tbl.maxColumnIndex = xcell.colIndex;
20492 			}
20493 		}
20494 	}
20495 }
20496 
20497 //============================================================================================
20498 //			html$defineTable_
20499 //============================================================================================
20500 function html$defineTable_(tbl)
20501 {
20502 	var row,text,cell,c;
20503 	var i,j,col,wid,obj,r,temp;
20504 	
20505 	this.defineTable_A(tbl);
20506 
20507 //-------------------- debug ----------------------
20508 
20509 	text = 'maxColumnIndex = ' + tbl.maxColumnIndex + '\r\n';
20510 
20511 	for (r=0; r &lt; tbl.rows.length; ++r)
20512 	{
20513 		row = tbl.rows[r];
20514 		temp = '\r\n row: ' + r + ' -- ' ;
20515 		for (c=0; c &lt; row.cells.length; ++c)
20516 		{
20517 			cell = row.cells[c];
20518 			temp += ' ' + cell.colIndex;
20519 		}
20520 
20521 		text += '\r\n' + temp;
20522 	}
20523 }
20524 //============================================================================================
20525 //			html$defineTable_A
20526 //============================================================================================
20527 function html$defineTable_A(tbl)
20528 {
20529 	var r,c,row,cell,ncol;
20530 	var width,span,cur,cwidth,i,obj;
20531 
20532 	tbl.actualColumns  = 0;
20533 	tbl.maxColumnIndex = 0;
20534 	tbl.span = false;
20535 
20536 //--------------------- initialize -------------------------
20537 
20538 	for (r=0; r &lt; tbl.rows.length; ++r)
20539 	{
20540 		row = tbl.rows[r];
20541 		row.rowIndex = r;
20542 
20543 		for (c=0; c &lt; row.cells.length; ++c)
20544 		{
20545 			cell = row.cells[c];
20546 			cell.colIndex = c;
20547 			cell.rowIndex = r;
20548 
20549 			if (cell.colspan > 1) tbl.span = true;
20550 			if (cell.rowspan > 1) tbl.span = true;
20551 		}
20552 
20553 		if (row.cells.length > tbl.actualColumns ) tbl.actualColumns = row.cells.length;			
20554 	}
20555 
20556 
20557 	tbl.maxColumnIndex = tbl.actualColumns - 1;
20558 
20559 //------------- determine max number of columns ----------
20560 
20561 	for (c=0; c &lt; tbl.actualColumns; ++c)
20562 	{
20563 		for (r=0; r &lt; tbl.rows.length; ++r)
20564 		{
20565 			row = tbl.rows[r];
20566 			if (c >= row.cells.length) continue;
20567 			cell = row.cells[c];
20568 			this.tableAdjustCells_(tbl,r,c,row,cell);	
20569 		}
20570 	}
20571 
20572 	tbl.cols  = tbl.maxColumnIndex + 1;
20573 
20574 }
20575 //============================================================================================
20576 //			html$parse
20577 //============================================================================================
20578 function html$parse(data,onComplete)
20579 {
20580 	var i,c,status,self,async;
20581 
20582 	this.elements = new Array();
20583 	this.onComplete = null;
20584 	this.async = false;
20585 	if (arguments.length > 1 && typeof(onComplete) == 'function') 
20586 	{
20587 		this.async = true;
20588 		this.onComplete = onComplete;
20589 	}
20590 
20591 	data = this.trim(data);
20592 
20593 	c = String.fromCharCode(3);
20594 
20595 	data = data.replace(/\r\n/g,c);
20596 	data = data.replace(/\r/g,c);
20597 	data = data.replace(/\n/g,c);
20598 
20599 	this.image = data;
20600 
20601 	data = data.replace(/\t/g,c);
20602 	data = data.replace(/\s\s/g,' ');
20603 
20604 	this.parseData = data.replace(/\|\^2\|/g,"&lt;sup>2&lt;/sup>");
20605 
20606 	self = this;
20607 
20608 	this.totalLength = this.parseData.size;
20609 	this.parse_A();
20610 
20611 	for (i=0; i &lt; this.tables.length; ++i)
20612 	{
20613 		this.defineTable_(this.tables[i]);
20614 	}
20615 
20616 	this.setStyle(this.body);
20617 }
20618 //============================================================================================
20619 //			html$setStyle
20620 //============================================================================================
20621 function html$setStyle(ele)
20622 {
20623 	var tagName;
20624 
20625 	tagName = ele.tagName;
20626 
20627 	if (ele.style)
20628 	{	
20629 		this.css.style(ele,ele.style);
20630 		ele.collapse = false;
20631 		if (ele.style.borderCollapse == 'collapse')
20632 		{
20633 			 ele.collapse = true;
20634 			 ele.cellspacing = 0;
20635 		}
20636 		ele.font.setFontStyle(ele);
20637 		
20638 		ele.init();
20639 	}
20640 
20641 	if (ele.firstChild != null) this.setStyle(ele.firstChild);
20642 	if (ele.nextSibling != null) this.setStyle(ele.nextSibling);
20643 }
20644 //============================================================================================
20645 //			html$parse_A
20646 //============================================================================================
20647 function html$parse_A()
20648 {
20649 	var i,text,tag,tagData,count,self;
20650 	
20651 	self = this;
20652 	count = 0;
20653 
20654 	while (true)
20655 	{
20656 		if (this.parseData == '') 
20657 		{
20658 			if (this.onComplete != null) this.onComplete();
20659 			this.onComplete = null;
20660 			return;
20661 		}
20662 
20663 //-------------------- async progress -------------------------
20664 		
20665 		if (this.async && typeof(window) == 'object')
20666 		{		
20667 			if (window.abort) 
20668 			{
20669 				this.parseData = '';
20670 				if (this.onComplete != null) this.onComplete();
20671 				this.onComplete = null;
20672 				return;
20673 			}
20674 			
20675 			count += 1;
20676 			if (count == 200)
20677 			{
20678 try
20679 {
20680 	//CollinsPDF('wait progress title="parsing HTML" total=' +  this.totalLength + ' prosition=' + this.parseData.length);
20681 }
20682 catch (e) { }
20683 
20684 				setTimeout(self.parse_A(),10);
20685 				return;
20686 			}
20687 		}
20688 		
20689 //--------------------------------------------------------------
20690 			
20691 		i = this.parseData.indexOf('&lt;');
20692 		if (i &lt; 0)
20693 		{		
20694 			this.parseData = this.parseData.replace(/\003/g,' ');
20695 			this.parseData = this.resolve(this.trim(this.parseData));
20696 			if (this.parseData == ' ') this.parseData = '';
20697 			if (this.parseData != '') this.addText_(this.parseData);
20698 			this.parseData = '';
20699 			if (this.onComplete != null) this.onComplete();
20700 			this.onComplete = null;
20701 			return;
20702 		}
20703 	
20704 		if (i > 0)
20705 		{
20706 			text = this.parseData.substr(0,i);	
20707 			this.parseData= this.parseData.substr(i);
20708 			text = text.replace(/\003/g,' ');
20709 			text = this.resolve(text);
20710 			if (text != ' ') this.addText_(text);
20711 		}
20712 
20713 //---------------- handle comment -----------------
20714 		
20715 		if (this.parseData.substr(0,4) == '&lt;' + '!--') 
20716 		{
20717 			i = this.parseData.indexOf('-->');
20718 			if (i &lt; 0) 
20719 			{
20720 				this.parseData = '';
20721 				if (this.onComplete != null) this.onComplete();
20722 				this.onComplete = null;
20723 				return;
20724 			}
20725 			this.parseData= this.parseData.substr(i+3);
20726 			continue;
20727 		}
20728 		
20729 //--------------- get tag -----------------------
20730 
20731 		i = this.parseData.indexOf('>');
20732 		if (i &lt; 0)
20733 		{
20734 			this.parseData= this.parseData.replace(/\003/g,' ');
20735 			this.parseData= this.resolve(this.parseData);
20736 			this.addText_(this.parseData);
20737 			this.parseData = '';
20738 			if (this.onComplete != null) this.onComplete();
20739 			this.onComplete = null;
20740 			return;	
20741 		}
20742 	
20743 		tagData = this.parseData.substr(1,i-1);
20744 		tagData = tagData.replace(/\003/g,' ');
20745 
20746 		this.parseData= this.parseData.substr(i+1);
20747 
20748 //-------------- process tag --------------
20749 	
20750 //		if (tagData.substr(0,3) == 'img') debugger;
20751 		tag = this.parseTag_(tagData);
20752 		
20753 		if ((tag.name == 'SCRIPT') && ! tag.end) this.parseData = this.skipScript_(tag,this.parseData);
20754 		if ((tag.name == 'STYLE') && ! tag.end) this.parseData = this.loadStyle_(tag,this.parseData);
20755 		if ((tag.name == 'IF') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'&lt;/if>');
20756 		if ((tag.name == 'RESOLVE') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'&lt;/resolve>');
20757 		if ((tag.name == 'P') && ! tag.end) this.parseData= this.check_P(this.parseData,tag);
20758 		if ((tag.name == 'COLUMN') && (! tag.end)  && (this.activeElement.tagName == 'DETAIL'))
20759 		{
20760 			this.parseData= this.loadHtml_(tag,this.parseData,'&lt;/column>');
20761 		}
20762 
20763 		if ( ((tag.name == 'ASSIGN') || (tag.name == 'STORE')) && ! tag.end)
20764 		{
20765 			if (tag.value("value") == '*')
20766 			{
20767 				this.parseData = this.loadHtml_(tag,this.parseData,'&lt;/' + tag.name.toLowerCase() + '>');
20768 				tag.changeValue("value",trim(this.data));
20769 			}
20770 		}
20771 
20772 		if ((tag.name ==        'LOOP') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'&lt;/loop>');
20773 		if ((tag.name ==       'GROUP') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'&lt;/group>');
20774 		if ((tag.name ==      'HEADER') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'&lt;/header>');
20775 		if ((tag.name ==      'FOOTER') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'&lt;/footer>');
20776 		if ((tag.name ==     'RECORDS') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'&lt;/records>');
20777 		if ((tag.name ==       'EVENT') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'&lt;/event>');
20778 		if ((tag.name ==  'PAGEFOOTER') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'&lt;/pagefooter>');
20779 		if ((tag.name ==  'PAGEHEADER') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'&lt;/pageheader>');
20780 		if ((tag.name ==         'PRE') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'&lt;/pre>');
20781 		if ((tag.name ==        'EVAL') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'&lt;/eval>');
20782 		if ((tag.name ==        'MATH') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'&lt;/math>');
20783 
20784 		if ((tag.name ==    'TEXTAREA') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'&lt;/textarea>');
20785 		if ((tag.name ==      'OPTION') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'&lt;/option>');
20786 
20787 		if ((tag.name ==       'TITLE') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'&lt;/title>');
20788 		if ((tag.name == 'REPORTTABLE') && ! tag.end) this.parseData = this.loadHtml_(tag,this.parseData,'&lt;/reporttable>');
20789 
20790 		if ((tag.name ==     'GRAPHIC') && ! tag.end) this.parseData = this.loadGraphic_(tag,this.parseData,'&lt;/graphic>');
20791 		if ((tag.name ==   'A:GRAPHIC') && ! tag.end) this.parseData = this.loadGraphic_(tag,this.parseData,'&lt;/a:graphic>');
20792 
20793 		if (tag.start) this.processStart_(tag);
20794 		if (tag.end) this.processEnd_(tag);
20795 	}
20796 }
20797 //============================================================================================
20798 //			html$check_fit
20799 //============================================================================================
20800 function html$check_fit(tag)
20801 {
20802 	var text;
20803 	if (! tag.exists(style)) return false;
20804 	text = tag.value(style);
20805 	text = text.toLowerCase();
20806 	if (text.indexOf('fit:') &lt; 0) return false;
20807 	return true;
20808 }
20809 //============================================================================================
20810 //			html$check_P
20811 //============================================================================================
20812 function html$check_P(data,tag)
20813 {
20814 	var i,j,temp,c;
20815 	
20816 	i = data.indexOf('&lt;p');
20817 	j = data.indexOf('&lt;P');
20818 	if (i &lt; 0) i = j;
20819 	if (i &lt; 0) return data;
20820 
20821 	temp = data.substr(0,i);
20822 	for (j=0; j &lt; temp.length; ++j)
20823 	{
20824 		c = temp.charCodeAt(j);
20825 		if (c > 32) return data;
20826 	}
20827 
20828 	data = data.substr(i+1);
20829 	i = data.indexOf('>');
20830 	if (i &lt; 0)
20831 		 data = '';
20832 	else data = data.substr(i+1);
20833 
20834 	tag.start = false;
20835 	tag.end = false;
20836 	return data;	
20837 }
20838 //============================================================================================
20839 //			html$processStart
20840 //============================================================================================
20841 function html$processStart_(tag)
20842 {
20843 
20844 	if (tag.name == 'MATH') return;
20845 
20846 
20847 	switch (tag.name)
20848 	{
20849 	case		  "B": this.level.B += 1; break;
20850 	case	 "STRONG": this.level.B += 1; break;
20851 	case	  "I": this.level.I += 1; break;
20852 	case         "EM": this.level.I += 1; break;
20853 	case		  "U": this.level.U += 1; break;
20854 
20855 	case	  "MC": this.start_MC(tag); return;		// questionType
20856 	case	  "TF": this.start_TF(tag); return;
20857 	case	 "FIB": this.start_FIB(tag); return;
20858 	case	   "E": this.start_E(tag); return;
20859 
20860 	case     "PDF": this.start_PDF(tag); return;	// OutputType
20861 	case    "HTML": this.start_HTML(tag); return;
20862 
20863 	}
20864 		
20865 	switch (tag.name)
20866 	{
20867 	case  "PAGEBREAK": this.start_PAGEBREAK(tag); break;
20868 	case        "DOC": this.start_DOC(tag); break;
20869 	case	     "BR": this.start_BR(tag); break;
20870 
20871 	case		  "B": this.start_B(tag); break;
20872 	case	 "STRONG": this.start_STRONG(tag); break;
20873 	case	  "SMALL": this.start_SMALL(tag); break;
20874 	case	    "BIG": this.start_BIG(tag); break;
20875 	case	  "I": this.start_I(tag); break;
20876 	case         "EM": this.start_EM(tag); break;
20877 	case		  "U": this.start_U(tag); break;
20878 
20879 	case	   "LINK": this.start_LINK(tag); break;
20880 
20881 	case   "FRAMESET": this.start_FRAMESET(tag); break;
20882 	case	  "FRAME": this.start_FRAME(tag); break;
20883 	case	 "IFRAME": this.start_IFRAME(tag); break;
20884 
20885 	case		 "H1": this.start_H(tag,1); break;
20886 	case		 "H2": this.start_H(tag,2); break;
20887 	case		 "H3": this.start_H(tag,3); break;
20888 	case		 "H4": this.start_H(tag,4); break;
20889 	case		 "H5": this.start_H(tag,5); break;
20890 	case		 "H6": this.start_H(tag,6); break;
20891 
20892 	case		 "HR": this.start_HR(tag); break;
20893 
20894 	case     "RANDOM": this.start_MACRO(tag); break;
20895 	case     "ASSIGN": this.start_MACRO(tag); break;
20896 	case      "STORE": this.start_MACRO(tag); break;
20897 
20898 	case     "GRAPHIC": this.start_GRAPHIC(tag); break;
20899 	case        "LOOP": this.start_LOOP(tag); break;
20900 	case       "GROUP": this.start_GROUP(tag); break;
20901 	case      "CONFIG": this.start_CONFIG(tag); break;
20902 
20903 	case    "QUANTITY": this.start_QUANTITY(tag); break;
20904 	case        "ROOT": this.start_ROOT(tag); break;
20905 	case    "EXPONENT": this.start_EXPONENT(tag); break;
20906 
20907 	case      "MATRIX": this.start_MATRIX(tag); break;
20908 	case        "CELL": this.start_CELL(tag); break;
20909 
20910 	case    "INTEGRAL": this.start_INTEGRAL(tag); break;
20911 	case   "SUMMATION": this.start_SUMMATION(tag); break;
20912 	case       "RANGE": this.start_RANGE(tag); break;
20913 	case         "MIN": this.start_MIN(tag); break;
20914 	case         "MAX": this.start_MAX(tag); break;
20915 
20916 	case         "SET": this.start_SET(tag); break;
20917 	case      "DIVIDE": this.start_DIVIDE(tag); break;
20918 	case       "RAISE": this.start_RAISE(tag); break;
20919 	case          "BY": this.start_BY(tag); break;
20920 	case       "POWER": this.start_POWER(tag); break;
20921 
20922 	case    "CALENDAR": this.start_CALENDAR(tag); break;
20923 	case    "TIMELINE": this.start_TIMELINE(tag); break;
20924 	case    "SCHEDULE": this.start_SCHEDULE(tag); break;
20925 	case       "EVENT": this.start_EVENT(tag); break;
20926 
20927 	case         "SUP": this.start_SUP(tag); break;
20928 	case         "SUB": this.start_SUB(tag); break;
20929 	case         "ROW": this.start_ROW(tag); break;
20930 	case         "PRE": this.start_PRE(tag); break;
20931 	case        "ECHO": this.start_ECHO(tag); break;
20932 
20933 	case	     "MAP": this.start_MAP(tag); break;
20934 	case	    "AREA": this.start_AREA(tag); break;
20935 
20936 	case   "TEXTAREA": this.start_TEXTAREA(tag); break;
20937 	case	  "INPUT": this.start_INPUT(tag); break;
20938 	case	   "FORM": this.start_FORM(tag); break;
20939 	case	 "SELECT": this.start_SELECT(tag); break;
20940 	case	 "OPTION": this.start_OPTION(tag); break;
20941 	case "BLOCKQUOTE": this.start_BLOCKQUOTE(tag); break;
20942 
20943 	case      "TITLE": this.start_TITLE(tag); break;
20944 	case       "META": this.start_META(tag); break;
20945 	case       "BODY": this.start_BODY(tag); break;
20946 
20947 	case		  "A": this.start_A(tag); break;
20948 	case		  "P": this.start_P(tag); break;
20949 	case		  "DL": this.start_DL(tag); break;
20950 	case		  "DD": this.start_DD(tag); break;
20951 	case		  "DT": this.start_DT(tag); break;
20952 	case	     "LI": this.start_LI(tag); break;
20953 	case	     "UL": this.start_UL(tag); break;
20954 	case	     "OL": this.start_OL(tag); break;
20955 	case	    "DIV": this.start_DIV(tag); break;
20956 	case	  "LABEL": this.start_LABEL(tag); break;
20957 	case	    "DIV": this.start_DIV(tag); break;
20958 	case	  "TRACE": this.start_TRACE(tag); break;
20959 	case	   "FONT": this.start_FONT(tag); break;
20960 	case	   "EVAL": this.start_EVAL(tag); break;
20961 	case	   "SPAN": this.start_SPAN(tag); break;
20962 	case	  "TABLE": this.start_TABLE(tag); break;
20963 	case	  "THEAD": this.start_THEAD(tag); break;
20964 	case	  "TFOOT": this.start_TFOOT(tag); break;
20965 	case	  "TBODY": this.start_TBODY(tag); break;
20966 	case	     "TH": this.start_TH(tag); break;
20967 	case	     "TR": this.start_TR(tag); break;
20968 	case	     "TD": this.start_TD(tag); break;
20969 	case	    "IMG": this.start_IMG(tag); break;
20970 	case	  "IMAGE": this.start_IMG(tag); break;
20971 
20972 	case       "REPORT": this.start_REPORT(tag); break;
20973 	case  "REPORTGROUP": this.start_REPORTGROUP(tag); break;
20974 	case  "REPORTTABLE": this.start_REPORTTABLE(tag); break;
20975 
20976 	case "DETAIL": this.start_DETAIL(tag); break;
20977 	case	   "HEADER": this.start_HEADER(tag); break;
20978 	case	   "FOOTER": this.start_FOOTER(tag); break;
20979 	case	   "COLUMN": this.start_COLUMN(tag); break;
20980 	case	  "RECORDS": this.start_RECORDS(tag); break;
20981 
20982 
20983 	default: this.start_OTHER(tag);
20984 	
20985 	}
20986 }
20987 //============================================================================================
20988 //			html$processEnd
20989 //============================================================================================
20990 function html$processEnd_(tag)
20991 {
20992 	var name,ele,ch;
20993 
20994 	switch (tag.name)
20995 	{
20996 	case		  "B": if (this.level.B > 0) this.level.B -= 1; break;
20997 	case	 "STRONG": if (this.level.B > 0) this.level.B -= 1; break;
20998 	case		  "I": if (this.level.I > 0) this.level.I -= 1; break;
20999 	case	     "EM": if (this.level.I > 0) this.level.I -= 1; break;
21000 	case		  "U": if (this.level.U > 0) this.level.U -= 1; break;
21001 	}
21002 	
21003 	switch (tag.name)
21004 	{
21005 
21006 	case		"A": this.href= '';
21007 					 this.href_title = '';
21008 					 this.href_target = '';
21009 					 this.end_(tag.name,true);
21010 					 break;
21011 
21012 	case	    "SUP": 
21013 					ele = this.findParent_(tag.name);
21014 					this.end_('SUP',true);
21015 				   if (ele == null) break;	
21016 					   ch = ele.charHeight() + 2;
21017 					   ele.offsetTop = ele.offsetTop - (ch);
21018 					   ele.offsetHeight = ele.offsetHeight + ch; 
21019 					   break;
21020 
21021 	case	    "SUB": 
21022 						ele = this.findParent_(tag.name);
21023 						this.end_('SUB',true);
21024 	
21025 					   if (ele == null) break;	
21026 					   ch = ele.charHeight() + 2;
21027 					   ele.offsetTop = ele.offsetTop + ch;
21028 					   ele.offsetHeight = ele.offsetHeight + ch;
21029 					   break;
21030 			
21031 	case	"REPORTGROUP": this.end_('REPORTGROUP'); break;
21032 	case	"REPORTTABLE": break;
21033 
21034 	case    "TIMELINE": this.end_TIMELINE('TIMELINE',true); break;
21035 
21036 	case	  "LABEL": this.end_('LABEL'); break;
21037 	case	    "DIV": this.end_('DIV'); break;
21038 	case	   "SPAN": this.end_('SPAN'); break;
21039 	case	  "TABLE": this.end_('TABLE'); break;
21040 	case	  "THEAD": this.end_('THEAD'); break;
21041 	case	  "TFOOT": this.end_('TFOOT'); break;
21042 	case	  "TBODY": this.end_('TBOFY'); break;
21043 	
21044 	case	     "TR": this.end_TR(); break;
21045 	case	     "TD": this.end_TD(); break;
21046 	case	     "TH": this.end_TH(); break;
21047 
21048 	default:
21049 		{
21050 			 this.end_(tag.name,true);
21051 		}
21052 		
21053 	}
21054 }
21055 //============================================================================================
21056 //			html$findMacro
21057 //============================================================================================
21058 function html$findMacro(id)
21059 {
21060 	var i;
21061 
21062 	id = id.toLowerCase();
21063 	for (i=0; i &lt; this.macros.length; ++i)
21064 	{
21065 		if (this.macros[i].id == id) return this.macros[i];
21066 	}
21067 	return null;
21068 }
21069 //============================================================================================
21070 //			html$start_MACRO
21071 //============================================================================================
21072 function html$start_MACRO(tag)
21073 {
21074 	var m,i,xhtml,value,r8;
21075 	var command,name,n,id;
21076 
21077 	command = tag.name.toLowerCase();
21078 
21079 //------------------ Store -------------------------------
21080 
21081 	if (command == 'store')
21082 	{
21083 		id = tag.value('id').toLowerCase();
21084 		xhtml = this;
21085 		if (this.parent != null) xhtml = this.parent;
21086 		m = new htmlmacro$(xhtml,tag);
21087 		xhtml.macros[xhtml.macros.length] = m;
21088 
21089 		if (this.activeElement != null)
21090 		{
21091 			if (this.activeElement.tagName == 'DETAIL')
21092 			{
21093 				this.activeElement.macros[this.activeElement.macros.length] = m;
21094 				return;
21095 			}
21096 		}
21097 
21098 //----------------------- store value ------------------------
21099 
21100 		value = tag.value("value");
21101 		name = tag.value("name");
21102 
21103 		if (m.task != '')
21104 		{
21105 			r8 = parseFloat(value);
21106 			if (isNaN(r8)) r8 = 0;
21107 			
21108 			n = m.bin.find(name);
21109 			if (n &lt; 0)
21110 			{
21111 				n = m.bin.list.length;
21112 				m.bin.list[n]  = 0;
21113 				m.bin.names[n] = name;
21114 			}
21115 			if (typeof(m.bin.list[n]) != 'number') m.bin.list[n] = parseFloat(m.bin.list[n]);
21116 			if  (isNaN(m.bin.list[n])) m.bin.list[n] = 0;
21117 			if (m.task ==     'count') m.bin.list[n] += 1;
21118 			if (m.task == 'increment') m.bin.list[n] += 1;
21119 			if (m.task == 'decrement') m.bin.list[n] -= 1;
21120 			if (m.task ==       'add') m.bin.list[n] += r8;
21121 			return;
21122 		}
21123 		else
21124 		{
21125 			m.bin.list[m.bin.list.length] = value;
21126 			m.bin.names[m.bin.names.length] = name;
21127 			return;	
21128 		}
21129 	}
21130 
21131 //------------------ Assign / Random ---------------
21132 
21133 	m = new htmlmacro$(this,tag);
21134 	if (this.activeElement.tagName == 'DETAIL') this.activeElement.macros[this.activeElement.macros.length] = m;
21135 	this.macros[this.macros.length] = m;
21136 	
21137 }
21138 //============================================================================================
21139 //			html$start_TRACE
21140 //============================================================================================
21141 function html$start_TRACE(tag)
21142 {
21143 	var e;
21144 	
21145 	this.trace_border = tag.bool('border');
21146 	this.trace_mathml = tag.bool('mathml');	
21147 
21148 	e = this.createElement_(tag);
21149 	e.errors = tag.bool('ERROR') || tag.bool('ERRORS') || tag.bool('ERROR_MESSAGES') || tag.bool('ERROR_MESSAGE');
21150 	
21151 	this.activeElement.appendChild(e);
21152 	
21153 }
21154 //============================================================================================
21155 //			html$start_REPORT
21156 //============================================================================================
21157 function html$start_REPORT(tag)
21158 {
21159 	var e,rowOrder,spacing;
21160 
21161 	e = this.createElement_(tag);
21162 
21163 	e.sql			= tag.rawValue("sql");
21164 	e.detail		= tag.rawValue("detail");
21165 
21166 	e.height		= tag.value('height');
21167 	e.width			= tag.value('width');
21168 	e.fit			= tag.bool('fit');
21169 	e.table			= tag.value('table');
21170 	
21171 	if (e.height == '') e.clipReport = true;
21172 
21173 	e.border		= tag.i4('border');
21174 
21175 //----------------- grid ----------------------
21176 
21177 	e.columnOrder	= tag.bool('columnOrder');	
21178 	e.columns		= tag.i4('columns');	
21179 
21180 	if (e.columns &lt; 1) e.columns = 1;
21181 	if (e.columns == 1) e.columnOrder = false;
21182 
21183 	e.columnWidth	= tag.value('columnwidth');
21184 	e.columnHeight	= tag.value('columnheight');
21185 	e.rowsPerColumn = tag.value('rowspercolumn');
21186 
21187 	spacing		= tag.value('cellspacing');
21188 
21189 	e.cellspacing = 2;
21190 	if (spacing != '') e.cellspacing = parseInt(spacing);
21191 	if (isNaN(e.cellspacing)) e.cellspacing = 2;
21192 	if (e.cellspacing &lt;    0) e.cellspacing = 2;
21193 
21194 	e.clipCell		= tag.bool('clipcell');
21195 	if (e.columnHeight == '') e.clipCell = false;
21196 
21197 	e.groups = new Array();
21198 
21199 	e.header = null;
21200 	e.footer = null;
21201 	e.records = '';
21202 
21203 	e.activeDetail = null;
21204 	e.activeGroup = null;
21205 
21206 	e.groups		= new Array();
21207 	e.details		= new Array();
21208 	e.maxColumn	= 1;		// assume 1
21209 
21210 	this.header = '';
21211 	this.footer = '';
21212 	this.column = '';
21213 	this.records = '';
21214 
21215 	e.borderColorDark	= tag.value("bordercolordark");
21216 	e.borderColorLight	= tag.value("bordercolorlight");
21217 	e.borderColor		= tag.value('bordercolor');
21218 
21219 	if (e.borderColor != '') e.borderColorDark = e.borderColor;
21220 	if (e.borderColor != '') e.borderColorLight = e.borderColor;
21221 
21222 	if (e.borderColorDark == '') e.borderColorDark = '#ACA899';
21223 	if (e.borderColorLight == '') e.borderColorLight = '#ECE9D8';
21224 
21225 	if (e.border > 0)
21226 	{	
21227 		e.style.borderLeft		= e.border + ' SOLID ' + e.borderColorDark;
21228 		e.style.borderRight	= e.border + ' SOLID ' + e.borderColorLight;
21229 		e.style.borderTop		= e.border + ' SOLID ' + e.borderColorDark;
21230 		e.style.borderBottom	= e.border + ' SOLID ' + e.borderColorLight;
21231 	}
21232 
21233 	this.activeElement.appendChild(e);
21234 	this.activeElement = e;
21235 
21236 }
21237 //============================================================================================
21238 //			html$start_REPORTGROUP
21239 //============================================================================================
21240 function html$start_REPORTGROUP(tag)
21241 {
21242 	var e,p;
21243 
21244 	p = this.activeElement;
21245 
21246 	if (p == null) return;
21247 	while (p != null)
21248 	{
21249 		if (p.tagName == 'REPORT') break;
21250 		p = p.parentElement;
21251 	}
21252 
21253 	if (p == null) return;	// orphan
21254 
21255 	e = this.createElement_(tag);
21256 
21257 	this.header			= '';
21258 	this.footer			= '';
21259 
21260 	e.header			= null;
21261 	e.footer			= null;
21262 
21263 	e.keeptogether		= tag.bool("keeptogether");
21264 	e.skipIfBlank		= tag.bool("skipifblank");
21265 	e.pageBreakBefore	= tag.bool("pagebreakbefore");
21266 	e.pageBreakAfter	= tag.bool("pagebreakafter");
21267 
21268 	e.key				= tag.rawValue("key");
21269 
21270 	p.activeGroup = e;
21271 	p.groups[p.groups.length] = e;
21272 
21273 	this.activeElement.appendChild(e);
21274 	this.activeElement = e;
21275 
21276 }
21277 //============================================================================================
21278 //									htmlRs$Close()
21279 //============================================================================================
21280 function htmlRs$Close()
21281 {
21282 	this.pos = 0;
21283 }
21284 //============================================================================================
21285 //									htmlRs$MoveNext()
21286 //============================================================================================
21287 function htmlRs$MoveNext()
21288 {
21289 	this.pos += 1;
21290 }
21291 //============================================================================================
21292 //			html$start_REPORTTABLE
21293 //============================================================================================
21294 function html$start_REPORTTABLE(tag)
21295 {
21296 	var rs,list,i,j,k,start,c;
21297 	var index,data,firstNames,fields;
21298 
21299 	rs = new Object();
21300 	
21301 	rs.id			= tag.value('id');
21302 	rs.Close		= htmlRs$Close;
21303 	rs.MoveNext		= htmlRs$MoveNext;
21304 
21305 	rs.records		= new Array();
21306 	rs.fields		= new Array();
21307 	rs.pos			= 0;
21308 	rs.mine			= true;
21309 	
21310 	firstNames		= tag.bool('FirstRowNames');
21311 	fields			= tag.value('fields');
21312 	
21313 	rs.src			= tag.value('src');
21314 
21315 	this.recordsets[this.recordsets.length] = rs;
21316 
21317 	c = String.fromCharCode(3);
21318 	list = this.xdata.split(c);	
21319 	start = 0;
21320 
21321 	if (firstNames && (list.length > 0))
21322 	{
21323 		for (i=0; i &lt; list.length; ++i)
21324 		{
21325 			start = i + 1;
21326 			data = this.trim(list[i]);
21327 			if (data == '') continue;
21328 			rs.fields = this.fromCsv(data,',');
21329 			break;
21330 		}
21331 	}
21332 	
21333 	for (i=start; i &lt; list.length; ++i)
21334 	{
21335 		index = rs.records.length;
21336 		data = this.trim(list[i]);
21337 		if (data == '') continue;
21338 		rs.records[index] = this.fromCsv(data,',');
21339 		if (rs.records[index].length > rs.fields.length)
21340 		{
21341 			for (j=rs.fields.length; j &lt; rs.records[index].length; ++j)
21342 			{
21343 			    k = j + 1;
21344 				rs.fields[rs.fields.length] = 'field' + k;
21345 			}
21346 		}
21347 	}
21348 }
21349 //============================================================================================
21350 //			html$start_HEADER
21351 //============================================================================================
21352 function html$start_HEADER(tag)
21353 {
21354 	var p,e;
21355 
21356 	p = this.activeElement;
21357 	if (p == null) return;
21358 
21359 	e = this.createElement_(tag);
21360 
21361 	e.data = this.header;
21362 	e.pageBreakBefore = tag.bool('pagebreakbefore');
21363 	e.pageBreakAfter = tag.bool('pagebreakafter');
21364 
21365 	e.align		= tag.keyword('align');
21366 	e.valign	= tag.keyword('valign');
21367 	e.color		= tag.value('color');
21368 	e.colspan	= tag.i4('colspan');
21369 
21370 	if (e.colspan &lt;= 0) e.colspan = 1;
21371 
21372 	this.header = '';
21373 	
21374 	while (p != null)
21375 	{
21376 		if ((p.tagName == 'REPORTGROUP') || (p.tagName == 'REPORT'))
21377 		{	
21378 			p.header = e;
21379 			break;
21380 		}
21381 		if (p.tagName == 'DETAIL')
21382 		{
21383 			p.headers[p.headers.length] = e;
21384 			break;
21385 		}
21386 	
21387 		p = p.parentElement;
21388 	}
21389 
21390 }
21391 //============================================================================================
21392 //			html$start_FOOTER
21393 //============================================================================================
21394 function html$start_FOOTER(tag)
21395 {
21396 	var p,footer,e;
21397 	
21398 	p = this.activeElement;
21399 	if (p == null) return;
21400 
21401 	e = this.createElement_(tag);
21402 	e.data = this.footer;
21403 	e.pageBreakBefore = tag.bool('pagebreakbefore');
21404 	e.pageBreakAfter = tag.bool('pagebreakafter');
21405 
21406 	this.footer = '';
21407 
21408 	while (p != null)
21409 	{
21410 		if ((p.tagName == 'REPORTGROUP') || (p.tagName == 'REPORT'))
21411 		{	
21412 			p.footer = e;
21413 			break;
21414 		}
21415 		if (p.tagName == 'DETAIL')
21416 		{	
21417 			p.footers[p.footers.length] = e;
21418 			e.align		= tag.keyword('align');
21419 			e.valign	= tag.keyword('valign');
21420 			e.colspan	= tag.i4('colspan');
21421 			break;
21422 		}
21423 		p = p.parentElement;
21424 	}
21425 	
21426 }
21427 
21428 //============================================================================================
21429 //			html$start_OTHER
21430 //============================================================================================
21431 function html$start_OTHER(tag)
21432 {
21433 	var e;
21434 
21435 	if (tag.name == 'HTML') return;
21436 	if (tag.name == 'HEAD') return;
21437 	if (tag.name == 'META') return;
21438 	if (tag.name == 'STYLE') return;
21439 	if (tag.name == 'SCRIPT') return;
21440 	if (tag.name == '!DOCTYPE') return;
21441 
21442 	e = this.createElement_(tag);
21443 
21444 	this.activeElement.appendChild(e);
21445 	this.activeElement = e;
21446 
21447 }
21448 //============================================================================================
21449 //			html$start_B
21450 //============================================================================================
21451 function html$start_B(tag)
21452 {
21453 	var e;
21454 
21455 	e = this.createElement_(tag);
21456 
21457 	this.activeElement.appendChild(e);
21458 	this.activeElement = e;
21459 
21460 }
21461 //============================================================================================
21462 //			html$start_I
21463 //============================================================================================
21464 function html$start_I(tag)
21465 {
21466 	var e;
21467 
21468 	e = this.createElement_(tag);
21469 
21470 	this.activeElement.appendChild(e);
21471 	this.activeElement = e;
21472 }
21473 //============================================================================================
21474 //			html$start_U
21475 //============================================================================================
21476 function html$start_U(tag)
21477 {
21478 	var e;
21479 
21480 	e = this.createElement_(tag);
21481 
21482 	this.activeElement.appendChild(e);
21483 	this.activeElement = e;
21484 
21485 }
21486 //============================================================================================
21487 //			html$start_EM
21488 //============================================================================================
21489 function html$start_EM(tag)
21490 {
21491 	var e;
21492 
21493 	e = this.createElement_(tag);
21494 
21495 	this.activeElement.appendChild(e);
21496 	this.activeElement = e;
21497 }
21498 //============================================================================================
21499 //			html$start_STRONG
21500 //============================================================================================
21501 function html$start_STRONG(tag)
21502 {
21503 	var e;
21504 
21505 	e = this.createElement_(tag);
21506 
21507 	this.activeElement.appendChild(e);
21508 	this.activeElement = e;
21509 
21510 }
21511 //============================================================================================
21512 //			html$start_SMALL
21513 //============================================================================================
21514 function html$start_SMALL(tag)
21515 {
21516 	var e;
21517 
21518 	e = this.createElement_(tag);
21519 
21520 	this.activeElement.appendChild(e);
21521 	this.activeElement = e;
21522 }
21523 //============================================================================================
21524 //			html$start_BIG
21525 //============================================================================================
21526 function html$start_BIG(tag)
21527 {
21528 	var e;
21529 
21530 	e = this.createElement_(tag);
21531 
21532 	this.activeElement.appendChild(e);
21533 	this.activeElement = e;
21534 }
21535 //============================================================================================
21536 //			html$start_DETAIL
21537 //============================================================================================
21538 function html$start_DETAIL(tag)
21539 {
21540 	var p,e,spa,pad;
21541 	var text,list;
21542 
21543 	p = this.activeElement;
21544 
21545 	while (p != null)
21546 	{
21547 		if (p.tagName == 'REPORT') break;
21548 		p = p.parentElement;
21549 	}
21550 
21551 	e = this.createElement_(tag);
21552 
21553 	spa = tag.value('cellspacing');
21554 	pad = tag.value('cellpadding');
21555 
21556 	e.cellspacing = tag.i4('cellspacing');
21557 	e.cellpadding = tag.i4('cellpadding');
21558 	e.border	  = tag.i4('border');
21559 	e.nowrap	  = tag.bool('nowrap');
21560 
21561 	e.height	  = tag.i4('height');
21562 	
21563 	e.conditional	= tag.value('if');
21564 	
21565 	text = tag.value('header');
21566 	e.headColor		= 'black';
21567 	e.headBackground	= '';
21568 	list = text.split(',');
21569 	if (list.length > 0) e.headColor = list[0];
21570 	if (list.length > 1) e.headBackground = list[1];
21571 
21572 	if (spa == '') e.cellspacing = 1;
21573 	if (pad == '') e.cellpadding = 2;
21574 
21575 	e.columns	= new Array();
21576 	e.macros	= new Array();
21577 	e.headers	= new Array();
21578 	e.footers	= new Array();
21579 	
21580 	e.borderColorDark	= tag.value("bordercolordark");
21581 	e.borderColorLight	= tag.value("bordercolorlight");
21582 	e.borderColor		= tag.value('bordercolor');
21583 
21584 	if (e.borderColor != '') e.borderColorDark = e.borderColor;
21585 	if (e.borderColor != '') e.borderColorLight = e.borderColor;
21586 
21587 	if (e.borderColorDark == '') e.borderColorDark = '#ACA899';
21588 	if (e.borderColorLight == '') e.borderColorLight = '#ECE9D8';
21589 
21590 	if (e.border > 0)
21591 	{	
21592 		e.style.borderLeft		= e.border + ' SOLID ' + e.borderColorDark;
21593 		e.style.borderRight	= e.border + ' SOLID ' + e.borderColorLight;
21594 		e.style.borderTop		= e.border + ' SOLID ' + e.borderColorDark;
21595 		e.style.borderBottom	= e.border + ' SOLID ' + e.borderColorLight;
21596 	}
21597 
21598 	this.column = '';
21599 
21600 	if (p != null) p.details[p.details.length] = e;
21601 
21602 	this.activeElement.appendChild(e);
21603 	this.activeElement = e;
21604 }
21605 //============================================================================================
21606 //			html$start_COLUMN
21607 //============================================================================================
21608 function html$start_COLUMN(tag)
21609 {
21610 	var e,p,bgcolor,r;
21611 
21612 	p = this.activeElement;
21613 
21614 	while (p != null)
21615 	{
21616 		if (p.tagName == 'BODY') break;
21617 		if (p.tagName == 'DETAIL') break;
21618 		p = p.parentElement;
21619 	}
21620 
21621 	if (p == null) return;
21622 	if (typeof(p.columns) == 'undefined') p.columns = new Array();
21623 	
21624 	e = this.createElement_(tag);
21625 
21626 	e.width	= tag.value('width');
21627 	e.height	= tag.value('height');
21628 	e.wrap		= tag.bool('wrap');
21629 	e.align		= tag.keyword('align');
21630 	e.valign	= tag.keyword('valign');
21631 	e.data		= this.column;
21632 
21633 	e.bgcolor	= tag.rawValue('bgcolor');
21634 
21635 	this.column = '';
21636 
21637 	e.nowrap    = p.nowrap;
21638 	if (tag.exists('nowrap')) e.nowrap = tag.bool('nowrap');
21639 	
21640 	p.columns[p.columns.length] = e;
21641 
21642 	if (p.tagName == 'DETAIL')
21643 	{
21644 		r = p.parentElement;
21645 		while (r != null)
21646 		{
21647 			if (r.tagName == 'REPORT') break;
21648 			r = r.parentElement;
21649 		}
21650 	
21651 		if (r == null) return;
21652 		if (p.columns.length > r.maxColumn) r.maxColumn = p.columns.length;
21653 	}
21654 	else
21655 	{
21656 		e.init();
21657 		this.activeElement.appendChild(e);
21658 		this.activeElement = e;
21659 	}
21660 
21661 }
21662 //============================================================================================
21663 //			html$start_PRE
21664 //============================================================================================
21665 function html$start_PRE(tag)
21666 {
21667 	var e;
21668 	
21669 	e = this.createElement_(tag);
21670 
21671 	e.data = this.html;
21672 	this.html = '';
21673 	
21674 	this.activeElement.appendChild(e);
21675 }
21676 //============================================================================================
21677 //			html$start_ECHO
21678 //============================================================================================
21679 function html$start_ECHO(tag)
21680 {
21681 	var e;
21682 	
21683 	e = this.createElement_(tag);
21684 	this.activeElement.appendChild(e);
21685 
21686 }
21687 //============================================================================================
21688 //			html$start_RECORDS
21689 //============================================================================================
21690 function html$start_RECORDS(tag)
21691 {
21692 	var r,p;
21693 
21694 	p = this.activeElement;
21695 	if (p == null) return;
21696 	if (p.tagName != 'REPORT') return;		// Orphan (ignore)
21697 		
21698 	r = new Object();
21699 
21700 	r.id			= tag.value('id');
21701 	r.firstRowNames = tab.bool('firstrownames');
21702 	r.delimiter		= tag.value('delimiter').toLowerCase();
21703 	r.data			= this.records;
21704 
21705 	this.records = '';
21706 	p.records = r;
21707 }
21708 //============================================================================================
21709 //			html$start_BR
21710 //============================================================================================
21711 function html$start_BR(tag)
21712 {
21713 	var e;
21714 
21715 	e = this.createElement_(tag);
21716 
21717 	e.offsetHeight = e.charHeight() * 1.2;
21718 	this.activeElement.appendChild(e);
21719 }
21720 //============================================================================================
21721 //			html$start_FRAMESET
21722 //============================================================================================
21723 function html$start_FRAMESET(tag)
21724 {
21725 	var e,p;
21726 
21727 	e = this.createElement_(tag);
21728 	e.rowText = tag.value("ROWS");
21729 	e.colText = tag.value("COLS");
21730 	e.frames = new Array();
21731 
21732 	p = this.activeElement;
21733 	if (p.tagName == 'FRAMESET')
21734 	{
21735 		p.frames[p.frames.length] = e;
21736 	}
21737 	else
21738 	{
21739 		this.framesets[this.framesets.length] = e;
21740 	}
21741 	
21742 	this.activeElement.appendChild(e);
21743 	this.activeElement = e;
21744 }
21745 //============================================================================================
21746 //			html$start_FRAME
21747 //============================================================================================
21748 function html$start_FRAME(tag)
21749 {
21750 	var e,p;
21751 
21752 	e = this.createElement_(tag);
21753 	e.src = tag.value("src");
21754 
21755 	e.frameBorder	= tag.i4("frameborder");
21756 	e.marginHeight	= tag.value("marginheight");
21757 	e.marginWidth	= tag.value("marginwidth");
21758 	e.noresize		= tag.bool("noresize");
21759 	e.scrolling	= tag.value("scrolling");
21760 
21761 	p = this.activeElement;
21762 	if (p.tagName == 'FRAMESET')
21763 	{
21764 		p.frames[p.frames.length] = e;
21765 	}
21766 
21767 	this.activeElement.appendChild(e);
21768 	
21769 }
21770 //============================================================================================
21771 //			html$start_IFRAME
21772 //============================================================================================
21773 function html$start_IFRAME(tag)
21774 {
21775 	var e,p;
21776 
21777 	e = this.createElement_(tag);
21778 
21779 	e.src			= tag.value("src");
21780 	e.align			= tag.value("align");
21781 	e.frameBorder	= tag.i4("frameborder");
21782 	e.marginHeight	= tag.value("marginheight");
21783 	e.marginWidth	= tag.value("marginwidth");
21784 	e.height		= tag.value("height");
21785 	e.width		= tag.value("width");
21786 	e.scrolling	= tag.value("scrolling");
21787 
21788 	e.border = e.frameBorder;
21789 
21790 	if ((e.height == '') && (e.style.height == '')) e.height = 120;
21791 	if ((e.width == '') && (e.style.width == '')) e.width = 260;
21792 	
21793 	e.offsetWidth = parseInt(e.width);
21794 	e.offsetHeight = parseInt(e.height);
21795 
21796 	if (e.frameBorder > 0)
21797 	{
21798 		e.borderLeft = 1;
21799 		e.borderRight = 1;
21800 		e.bordeTop = 1;
21801 		e.borderBottom = 1;
21802 		
21803 		e.style.borderLeft		= 'Black 1 SOLID';
21804 		e.style.borderRight	= 'Black 1 SOLID';
21805 		e.style.borderTop		= 'Black 1 SOLID';
21806 		e.style.borderBottom	= 'Black 1 SOLID';
21807 	}
21808 			
21809 	this.activeElement.appendChild(e);
21810 }
21811 //============================================================================================
21812 //			html$start_LINK
21813 //============================================================================================
21814 function html$start_LINK(tag)
21815 {
21816 	var href,type,rel,charset,target,data,media;
21817 	var xdoc,rev;
21818 
21819 	if (this.document == null) return;
21820 
21821 	href = tag.value("href");
21822 	type = tag.value("type");
21823 	rel  = tag.value("rel");
21824 	rev  = tag.value("rev");
21825 
21826 	charset = tag.value('charset');
21827 	target = tag.value('target');
21828 	media  = tag.value('media');
21829 
21830 	if (rel != 'stylesheet') return;
21831 	if (href == '') return;
21832 	if (! this.css.selectMedia(media)) return;
21833 	
21834 	data = this.document.read(href);
21835 	if (data == '') return;
21836 
21837 	xdoc = new htmlDocument$(this,this.document.href);
21838 	this.css.load(data,xdoc);
21839 
21840 }
21841 //============================================================================================
21842 //			html$start_GRAPHIC
21843 //============================================================================================
21844 function html$start_GRAPHIC(tag)
21845 {
21846 	var e,clip,obj,every,value,f;
21847 
21848 	e = this.createElement_(tag);
21849 
21850 	e.width = html$i4(tag.value('width'));
21851 	e.height = html$i4(tag.value('height'));
21852 
21853 //	e.width = e.width * this.graphicScale;	
21854 //	e.height = e.height * this.graphicScale;	
21855 
21856 	if (isNaN(e.width)) e.width = 300;
21857 	if (isNaN(e.height)) e.height = 200;
21858 	
21859 	if (e.width  &lt; 10) e.width = 300;
21860 	if (e.height &lt; 10) e.height = 200;
21861 
21862 	e.lineColor		= tag.value('color');
21863 	e.lineWidth		= tag.value('border');
21864 	e.lineStyle		= tag.value('linestyle');
21865 	e.fillColor		= tag.value('fillcolor');
21866 
21867 	e.bgcolor		= tag.value('bgcolor');
21868 		
21869 	e.lookat		= tag.value('lookat');
21870 	e.lookfrom		= tag.value('lookfrom');
21871 	e.tilt			= tag.value('tilt');
21872 	e.angle			= html$i4(tag.value('angle'));
21873 	e.is3D			= tag.bool('3D');
21874 	e.dynamic		= tag.bool('dynamic');
21875 	
21876 	e.animateFunction	= tag.value('animate-function');
21877 	e.animateEvery		= 1000;
21878 	value = tag.value('animate-every');
21879 	if (value != '') 
21880 	{
21881 		value = value.toLowerCase();
21882 		f = 1;
21883 		if (value.substr(value.length-1) == 's') f = 1000;
21884 
21885 		e.animateEvery = parseInt(value) * f;
21886 		if (isNaN(e.animateEvery)) e.animateEvery = 500;
21887 	}
21888 	
21889 	e.align		= tag.value("align");
21890 	e.hspace		= tag.value("hspace");
21891 	e.vspace		= tag.value("vspace");
21892 	e.usemap		= tag.value("usemap");
21893 
21894 	if (tag.bool('script')) 
21895 	{
21896 		e.script = this.script;
21897 	}
21898 
21899 	e.commands = this.graphic;
21900 	e.graphic  = this.graphic;
21901 	e.clip	   = '';
21902 	e.range    = '';
21903 	clip = tag.value('clip');
21904 	if (clip.toLowerCase() == 'true') e.clip = 'true';
21905 
21906 	e.range = tag.value('range');
21907 	e.origin = tag.value('origin');
21908 	
21909 	e.offsetWidth = e.width;
21910 	e.offsetHeight = e.height;
21911 
21912 	this.graphic = '';
21913 
21914 	if (e.lineWidth > 0) {
21915 	    e.borderLeft = 1;
21916 	    e.borderRight = 1;
21917 	    e.bordeTop = 1;
21918 	    e.borderBottom = 1;
21919 
21920 	    e.style.borderLeft = 'Black ' + e.lineWidth + ' SOLID';
21921 	    e.style.borderRight = 'Black ' + e.lineWidth + ' SOLID';
21922 	    e.style.borderTop = 'Black ' + e.lineWidth + ' SOLID';
21923 	    e.style.borderBottom = 'Black ' + e.lineWidth + ' SOLID';
21924 	}
21925 
21926 	obj = new Object();
21927 	obj.height = e.height;
21928 	obj.width = e.width;
21929 	obj.angle = 0;
21930 	e.imageSize = obj;
21931 	
21932 	this.activeElement.appendChild(e);
21933 }
21934 //============================================================================================
21935 //			html$start_GROUP
21936 //============================================================================================
21937 function html$start_GROUP(tag)
21938 {
21939 	var e,spacing;
21940 
21941 	e = this.createElement_(tag);
21942 
21943 	e.width = tag.value('width');
21944 	e.height = tag.value('height');
21945 
21946 	e.keeptogether  = false;
21947 	if (tag.value("keeptogether").toLowerCase() == 'true') e.keeptogether  = true;
21948 
21949 	e.sql			= tag.value("sql");
21950 	e.list			= tag.value("list");
21951 
21952 	e.columns		= html$i4(tag.value("columns"));
21953 	e.gutter		= html$i4(tag.value("gutter"));
21954 	e.margin		= html$i4(tag.value("margin"));
21955 
21956 	e.count			= html$i4(tag.value("count"));
21957 
21958 	e.min			= html$i4(tag.value("Min"));
21959 	e.max			= html$i4(tag.value("Max"));
21960 
21961 	e.group			= this.group;
21962 	this.group			= '';
21963 
21964 	if ((e.min == 0) && (e.max == 0))
21965 	{
21966 		e.min = 1;
21967 		e.max = e.count;
21968 	}
21969 
21970 	if (e.columns &lt;= 0) e.columns = 1;
21971 	if (e.columns > 30) e.columns = 1;
21972 
21973 	e.columnWidth	= tag.value('columnwidth');
21974 	e.columnHeight	= tag.value('columnheight');
21975 	e.rowsPerColumn = tag.value('rowspercolumn');
21976 
21977 	spacing		= tag.value('cellspacing');
21978 
21979 	e.cellspacing = 2;
21980 	if (spacing != '') e.cellspacing = parseInt(spacing);
21981 	if (isNaN(e.cellspacing)) e.cellspacing = 2;
21982 	if (e.cellspacing &lt;    0) e.cellspacing = 2;
21983 
21984 	e.clipCell		= tag.bool('clipcell');
21985 	if (e.columnHeight == '') e.clipCell = false;
21986 
21987 	e.border		= tag.i4('border');
21988 
21989 	e.columnOrder	= tag.bool('columnOrder');
21990 	if (e.columns &lt; 1) e.columns = 1;
21991 	if (e.columns == 1) e.columnOrder = false;
21992 
21993 	e.lineColor		= tag.value("lineColor");
21994 	e.lineWeight	= html$i4(tag.value("lineWeight"));
21995 	e.lineStyle		= tag.value("lineStyle");	
21996 	
21997 	e.offsetWidth = e.width;
21998 	e.offsetHeight = e.height;
21999 
22000 	e.borderColorDark	= tag.value("bordercolordark");
22001 	e.borderColorLight	= tag.value("bordercolorlight");
22002 	e.borderColor		= tag.value('bordercolor');
22003 
22004 	if (e.borderColor != '') e.borderColorDark = e.borderColor;
22005 	if (e.borderColor != '') e.borderColorLight = e.borderColor;
22006 
22007 	if (e.borderColorDark == '') e.borderColorDark = '#ACA899';
22008 	if (e.borderColorLight == '') e.borderColorLight = '#ECE9D8';
22009 
22010 	if (e.border > 0)
22011 	{	
22012 		e.style.borderLeft		= e.border + ' SOLID ' + e.borderColorDark;
22013 		e.style.borderRight	= e.border + ' SOLID ' + e.borderColorLight;
22014 		e.style.borderTop		= e.border + ' SOLID ' + e.borderColorDark;
22015 		e.style.borderBottom	= e.border + ' SOLID ' + e.borderColorLight;
22016 	}
22017 	
22018 	e.init();
22019 
22020 	this.activeElement.appendChild(e);
22021 	this.activeElement = e;
22022 }
22023 //============================================================================================
22024 //			html$start_LOOP
22025 //============================================================================================
22026 function html$start_LOOP(tag)
22027 {
22028 	var e;
22029 
22030 	e = new Object();
22031 
22032 	e.id			= tag.value("id");
22033 
22034 	e.sql			= tag.value("sql");
22035 	e.list			= tag.value("list");
22036 	e.count			= html$i4(tag.value("count"));
22037 	e.min			= html$i4(tag.value("Min"));
22038 	e.max			= html$i4(tag.value("Max"));
22039 
22040 	e.increment	= html$i4(tag.value("increment"));
22041 	if (e.increment == 0) e.increment = 1;
22042 
22043 	e.loop			= this.loop;
22044 	this.loop		= '';
22045 
22046 	if ((e.min == 0) && (e.max == 0))
22047 	{
22048 		e.min = 1;
22049 		e.max = e.count;
22050 	}
22051 
22052 	this.executeLoop(e);	
22053 }
22054 //============================================================================================
22055 //			html$start_CONFIG
22056 //============================================================================================
22057 function html$start_CONFIG(tag)
22058 {
22059 	var e,m,test,text,list,pageLength,pageWidth;
22060 
22061 	if (tag.exists('Database')) this.database = tag.value('database');
22062 
22063 }
22064 //============================================================================================
22065 //			html$start_DOC
22066 //============================================================================================
22067 function html$start_DOC(tag)
22068 {
22069 	var e,m,test,text,list,pageLength,pageWidth,value;
22070 
22071 	e = this.createElement_(tag);
22072 	if (this.firstPdf == null) this.firstPdf = e;
22073 
22074 	e.xmarginLeft	= '';
22075 	e.xmarginRight	= '';
22076 	e.xmarginTop	= '';
22077 	e.xmarginBottom	= '';
22078 	e.title			= '';
22079 	e.subject		= '';
22080 	e.author		= '';
22081 	e.keywords		= '';
22082 	e.pageSize		= '';
22083 	e.drawMargin	= '';
22084 	e.encoded		= '';
22085 	e.landscape		= '';
22086 	e.portrait		= '';
22087 	e.watermark		= '';
22088 	e.database		= '';
22089 	e.fontSize		= '';
22090 	e.fontColor		= '';
22091 	e.fontName		= '';
22092 	e.backgroundColor = '';
22093 	e.marginColor	= '';
22094 	e.rotate		= '';
22095 	e.opacity		= '';
22096 
22097 	e.onDocumentOpen = '';
22098 	e.onWillClose	= '';
22099 	e.onWillSave	= '';
22100 	e.onDidSave	= '';
22101 	e.onWillPrint	= '';
22102 	e.onDidPrint	= '';
22103 
22104 	text = tag.value('rotate');
22105 	if (text ==   '0') e.rotate = '0';
22106 	if (text ==  '90') e.rotate = '90';
22107 	if (text == '180') e.rotate = '180';
22108 	if (text == '270') e.rotate = '270';
22109 
22110 	if (tag.exists('pageLayout'))
22111 	{
22112 
22113 		text = tag.value('pageLayout');
22114 		text = text.toLowerCase();
22115 		text = text.replace(/\-/g,'');
22116 		this.pdf.catalog.pageLayout = 'singlePage'; 
22117 		
22118 		if (text ==        'onepage') this.pdf.catalog.pageLayout = 'SinglePage'; 
22119 		if (text ==              '1') this.pdf.catalog.pageLayout = 'SinglePage'; 
22120 		if (text ==          '1page') this.pdf.catalog.pageLayout = 'SinglePage'; 
22121 		if (text ==            'one') this.pdf.catalog.pageLayout = 'SinglePage'; 
22122 		if (text ==     'singlepage') this.pdf.catalog.pageLayout = 'SinglePage'; 
22123 		if (text ==      'onecolumn') this.pdf.catalog.pageLayout = 'OneColumn'; 
22124 		if (text ==  'twocolumnleft') this.pdf.catalog.pageLayout = 'TwoColumnLeft'; 
22125 		if (text == 'twocolumnright') this.pdf.catalog.pageLayout = 'TwoColumnRight'; 
22126 		if (text ==        'twopage') this.pdf.catalog.pageLayout = 'TwoPageLeft'; 
22127 		if (text ==              '2') this.pdf.catalog.pageLayout = 'TwoPageLeft'; 
22128 		if (text ==          '2page') this.pdf.catalog.pageLayout = 'TwoPageLeft'; 
22129 		if (text ==            'two') this.pdf.catalog.pageLayout = 'TwoPageLeft'; 
22130 		if (text ==            'odd') this.pdf.catalog.pageLayout = 'TwoPageLeft'; 
22131 		if (text ==        'twopage') this.pdf.catalog.pageLayout = 'TwoPageLeft'; 
22132 		if (text ==    'twopageleft') this.pdf.catalog.pageLayout = 'TwoPageLeft'; 
22133 		if (text ==           'even') this.pdf.catalog.pageLayout = 'TwoPageRight';		
22134 		if (text ==   'twopageright') this.pdf.catalog.pageLayout = 'TwoPageRight';		
22135 
22136 	}
22137 
22138 	text = tag.keyword('questiontype');
22139 	if (text == 'm') this.questionType = 'm';
22140 	if (text == 't') this.questionType = 't';
22141 	if (text == 'b') this.questionType = 'b';
22142 	if (text == 'e') this.questionType = 'e';
22143 
22144 	text = tag.keyword('outputtype');
22145 	if (text ==  'pdf') this.outputType  = 'pdf';
22146 	if (text == 'html') this.outputType = 'html';
22147 
22148 	text = tag.value('margin');
22149 	if (text == '') text = tag.value('margins');
22150 
22151 	if (text != '')
22152 	{
22153 		list = text.split(',');
22154 		if (list.length == 1)
22155 		{
22156 			m = this.r8(list[0]);
22157 			if (m &lt; 0) m = 0;
22158 			if (m > 6) m = 0;
22159 			e.xmarginLeft	= m;
22160 			e.xmarginRight	= m;
22161 			e.xmarginTop	= m;
22162 			e.xmarginBottom	= m;
22163 		}
22164 		else
22165 		{
22166 			if (list.length > 0) e.xmarginLeft   = this.r8(list[0]);
22167 			if (list.length > 1) e.xmarginRight  = this.r8(list[1]);
22168 			if (list.length > 2) e.xmarginTop    = this.r8(list[2]);
22169 			if (list.length > 3) e.xmarginBottom = this.r8(list[3]);
22170 		}			
22171 	}
22172 
22173 	if (tag.bool('watermark')) e.watermark = true;
22174 
22175 	if (tag.exists('margins')) 
22176 	{
22177 	    value = this.r8(tag.value("margins"));
22178 	    e.xmarginTop = value
22179 	    e.xmarginBottom = value;
22180 	    e.xmarginLeft = value;
22181 	    e.xmarginRight = value;
22182 	}
22183 
22184 	if (tag.exists('margin-Top'))    e.xmarginTop = this.r8(tag.value("margin-Top"));
22185 	if (tag.exists('margin-Bottom')) e.xmarginBottom = this.r8(tag.value("margin-Bottom"));
22186 	if (tag.exists('margin-Left'))   e.xmarginLeft = this.r8(tag.value("margin-Left"));
22187 	if (tag.exists('margin-Right'))  e.xmarginRight = this.r8(tag.value("margin-Right"));
22188 
22189 	if (tag.exists('marginTop'))    e.xmarginTop = this.r8(tag.value("marginTop"));
22190 	if (tag.exists('marginBottom')) e.xmarginBottom = this.r8(tag.value("marginBottom"));
22191 	if (tag.exists('marginLeft'))   e.xmarginLeft = this.r8(tag.value("marginLeft"));
22192 	if (tag.exists('marginRight'))  e.xmarginRight = this.r8(tag.value("marginRight"));
22193 
22194 	if (tag.exists('database')) e.database = tag.value('database');
22195 
22196 	if (tag.exists('title'))	e.title	= tag.value('title');
22197 	if (tag.exists('subject'))	e.subject	= tag.value('subject');
22198 	if (tag.exists('author'))	e.author	= tag.value('author');
22199 	if (tag.exists('keywords')) e.keywords	= tag.value('keywords');
22200 
22201 	pageLength = 0;
22202 	pageWidth = 0;
22203 	if (tag.exists('pageLength')) pageLength = this.r8(tag.value('pageLength'));
22204 	if (tag.exists('pageWidth')) pageWidth	 = this.r8(tag.value('pageWidth'));
22205 	if ((pageLength > 0) && (pageWidth > 0)) e.pageSize  = pageWidth + ',' + pageLength;
22206 
22207 	if (tag.exists('pageSize')) e.pageSize			= tag.value('pageSize');
22208 
22209 	if (tag.exists('backgroundColor'))	e.backgroundColor	= tag.value('backgroundColor');
22210 	if (tag.exists('marginColor'))		e.marginColor		= tag.value('marginColor');
22211 	if (tag.exists('opacity'))			e.opacity			= tag.value('opacity');
22212 
22213 	if (tag.exists('onDocumentOpen')) e.onDocumentOpen	= tag.value('onDocumentOpen');
22214 	if (tag.exists('onWillClose'))	  e.onWillClose	= tag.value('onWillClose');
22215 	if (tag.exists('onWillPrint'))	  e.onWillPrint	= tag.value('onWillPrint');
22216 	if (tag.exists('onDidPrint'))	  e.onDidPrint		= tag.value('onDidPrint');
22217 	if (tag.exists('onWillSave'))	  e.onWillSave		= tag.value('onWillSave');
22218 	if (tag.exists('onDidSave'))	  e.onDidSave		= tag.value('onDidSave');
22219 
22220 	if (tag.value('drawMargin').toLowerCase() ==  'true') e.drawMargin = true;
22221 	if (tag.value('encoded').toLowerCase()    == 'false') e.encoded = false;
22222 	if (tag.value('encoded').toLowerCase()    == 'true')  e.encoded = true;
22223 	if (tag.value('landscape').toLowerCase()  == 'true') e.landscape = 'true';
22224 	if (tag.value('landscape').toLowerCase()  == 'false') e.portrait = 'true';
22225 
22226 	if (tag.exists('fontColor')) e.fontColor = tag.value('fontColor');
22227 	if (tag.exists('fontName'))  e.fontName  = tag.value('fontName');
22228 	if (tag.exists('fontSize'))  e.fontSize  = this.parseFontSize(tag.value('fontSize'));
22229 	
22230 	if (e.fontName != '') 
22231 	{
22232 		this.default_fontName = e.fontName;
22233 		this.body.style.fontFamily = e.fontName;
22234 		this.setFontName(e.fontName);
22235 	}
22236 
22237 	if (e.fontSize != '')
22238 	{
22239 		this.default_fontSize = e.fontSize;
22240 		this.body.style.fontSize = e.fontSize;
22241 	}
22242 	
22243 	this.activeElement.appendChild(e);
22244 
22245 	this.setOutput_(this.pdf,e);
22246 }
22247 //============================================================================================
22248 //			html$start_QUANTITY
22249 //============================================================================================
22250 function html$start_QUANTITY(tag)
22251 {
22252 	var e,p;
22253 
22254 	e = this.createElement_(tag);
22255 
22256 	e.size		= tag.i4("size");
22257 	e.valign	= tag.value('valign').toLowerCase();
22258 
22259 	e.type		= tag.keyword('type');
22260 	e.color	= tag.value("color");
22261 
22262 	this.activeElement.appendChild(e);
22263 	this.activeElement = e;
22264 
22265 //------------------------- node -----------------
22266 
22267 	p = this.activeElement;
22268 
22269 	tag.name = 'NODE';
22270 	e = this.createElement_(tag);
22271 	
22272 	this.activeElement.appendChild(e);
22273 	this.activeElement = e;
22274 
22275 }
22276 //============================================================================================
22277 //			html$start_MATRIX
22278 //============================================================================================
22279 function html$start_MATRIX(tag)
22280 {
22281 	var e,p,value;
22282 
22283 	e = this.createElement_(tag);
22284 
22285 	e.valign		= tag.value('valign').toLowerCase();
22286 
22287 	e.rows			= tag.i4('rows');
22288 	e.cols			= tag.i4('cols');
22289 	e.identity		= tag.bool('identity');
22290 	e.cellHeight	= tag.i4('cellHeight');
22291 	e.cellWidth		= tag.i4('cellWidth');
22292 
22293 	e.clip		= tag.bool('clip');
22294 	if ((e.cellHeight == 0) || (e.cellWidth == 9)) e.clip = false;
22295 
22296 	e.cellspacing	= 2;
22297 	value			= tag.value('cellspacing');
22298 	if (value != '') e.cellspacing = html$i4(value);
22299 	
22300 	e.cells = new Array();
22301 
22302 	e.emptyCell		= null;
22303 	e.emptyValue	= tag.value('empty');
22304 
22305 	e.size		= tag.i4("size");
22306 	e.valign	= tag.value('valign').toLowerCase();
22307 
22308 	e.type		= tag.keyword('type');
22309 	e.color	= tag.value("color");
22310 
22311 	e.colCount	= e.cols;
22312 	e.rowCount		= e.rows;
22313 	e.currentColumn = 0;
22314 
22315 	if (e.type == '') e.type = 'absolute';
22316 
22317 	this.activeElement.appendChild(e);
22318 	this.activeElement = e;
22319 }
22320 //============================================================================================
22321 //			html$start_CELL
22322 //============================================================================================
22323 function html$start_CELL(tag)
22324 {
22325 	var e,p,type,i,list;
22326 	var colValue, rowValue;
22327 	var row,col;
22328 
22329 	e = this.createElement_(tag);
22330 
22331 	e.valign	= tag.value('valign').toLowerCase();
22332 
22333 	e.row		= tag.value('row');
22334 	e.col		= tag.value('col');
22335 	e.value		= tag.value('value');
22336 	e.empty		= tag.value('empty');
22337 	
22338 	e.changeValue = tag.bool('replace');
22339 	e.diagonal	= tag.bool('diagonal');
22340 
22341 	p = this.activeElement;
22342 	while (p.parentNode != null)
22343 	{
22344 		if (p.tagName == 'MATRIX') break;
22345 		p = p.parentNode;
22346 	}
22347 	
22348 
22349 	if (p.tagName == 'MATRIX')
22350 	{
22351 		if (e.empty) 
22352 			 p.emptyCell = e;
22353 		else p.cells[p.cells.length] = e;
22354 	}
22355 
22356 	this.activeElement.appendChild(e);
22357 	this.activeElement = e;
22358 
22359 //---------------------------- define cell --------------------------------
22360 
22361 	if (p == null) return;
22362 
22363 	e.values		= null;
22364 	e.rows			= null;
22365 	e.cols			= null;
22366 
22367 	if (e.value != '') e.values = e.value.split(',');
22368 
22369 //-------------------------- rows ----------------------
22370 
22371 	rowValue = e.row;
22372 	colValue = e.col;
22373 	if (e.row == '') rowValue = '*';
22374 	if (e.col == '') colValue = '*';
22375 
22376 	row = e.row;
22377 	col = e.col;
22378 	
22379 	if (row == '') row = p.rowCount + 1;
22380 	if (col == '') 
22381 	{
22382 		if (p.coulmnCount == 0) p.colCount = 1;
22383 		p.currentColumn = p.currentColumns + 1;
22384 		if (p.currentColumn > p.colCount) p.currentColumn = 1;
22385 		col = p.currentColumn;		
22386 	}
22387 	
22388 	e.rows = new Array();
22389 	list = rowValue.split(',');
22390 	if (list.length == 1)
22391 	{
22392 		if (list[0] == '*')
22393 		{
22394 			for (i=0; i &lt; p.rows; ++i)
22395 			{
22396 				e.rows[i] = i + 1;
22397 				if (e.rows[i] > p.rowCount) p.rowCount = e.rows[i];
22398 			}
22399 		}
22400 		else
22401 		{
22402 			e.rows[0] = html$i4(list[0]);
22403 			if (e.rows[0] &lt;= 0) e.rows[0] = p.currentRow;
22404 			if (e.rows[0] > p.rowCount) p.rowCount = e.rows[0];
22405 		}
22406 	}
22407 	else
22408 	{
22409 		for (i=0; i &lt; list.length; ++i)
22410 		{
22411 			if (list[i] == '*') 
22412 				 e.rows[i] = p.rows;
22413 			else e.rows[i] = html$i4(list[i]);
22414 
22415 			if (e.rows[i] &lt;= 0) e.rows[i] = p.rows;
22416 
22417 			if (e.rows[i] > p.rowCount) p.rowCount = e.rows[i];
22418 		}
22419 	}
22420 	
22421 //-------------------------- columns ----------------------
22422 		
22423 	e.cols = new Array();
22424 	list = colValue.split(',');
22425 	if (list.length == 1)
22426 	{
22427 		if (list[0] == '*')
22428 		{
22429 			for (i=0; i &lt; p.rows; ++i)
22430 			{
22431 				e.cols[i] = i+1;
22432 				if (e.cols[i] > p.colCount) p.colCount = e.cols[i];
22433 				p.currentColumn = e.cols[i];
22434 			}
22435 		}
22436 		else
22437 		{
22438 			e.cols[0] = html$i4(list[0]);
22439 			if (e.rows[0] &lt;= 0) e.rows[0] = p.cols;
22440 	
22441 			if (e.cols[0] > p.colCount) p.colCount = e.cols[0];
22442 			p.currentColumn = e.cols[0];
22443 		}
22444 	}
22445 	else
22446 	{
22447 		for (i=0; i &lt; list.length; ++i)
22448 		{
22449 			if (list[i] == '*') 
22450 				 e.cols[i] = p.cols;
22451 			else e.cols[i] = html$i4(list[i]);
22452 
22453 			if (e.cols[i] > p.colCount) p.colCount = e.cols[i];
22454 			p.currentColumn = e.cols[i];
22455 		}
22456 	}
22457 }
22458 //============================================================================================
22459 //			html$start_ROOT
22460 //============================================================================================
22461 function html$start_ROOT(tag)
22462 {
22463 	var e,p;
22464 
22465 	e = this.createElement_(tag);
22466 	p = this.activeElement;
22467 
22468 	e.size		= tag.i4("size");
22469 	e.valign	= tag.value('valign').toLowerCase();
22470 	e.line		= new Object();
22471 
22472 	e.lineWeight = tag.i4("lineWeight");
22473 	if (! tag.exists('LineWeight')) e.lineWeight = 1;
22474 
22475 	e.lineColor = tag.value("lineColor");
22476 	if (! tag.exists('LineColor')) 
22477 	{
22478 		e.lineColor = 'Black';
22479 		if (this.font != null) e.lineColor = this.font.color;
22480 	}
22481 
22482 	e.lineStyle = tag.value('linestyle');
22483 
22484 	e.exp = null;
22485 	e.radical = null;
22486 
22487 	this.activeElement.appendChild(e);
22488 	this.activeElement = e;
22489 
22490 //--------------------- Radical ----------------------------------------
22491 
22492 	tag.name = 'RADICAL';
22493 	e = this.createElement_(tag);
22494 
22495 	p = this.activeElement;
22496 	p.radical = e;
22497 
22498 	this.activeElement.appendChild(e);
22499 	this.activeElement = e;
22500 }
22501 //============================================================================================
22502 //			html$start_EXPONENT (of Root)
22503 //============================================================================================
22504 function html$start_EXPONENT(tag)
22505 {
22506 	var e,p;
22507 
22508 	e = this.createElement_(tag);
22509 
22510 	p = this.activeElement;
22511 	while (p != null) 
22512 	{
22513 		if (p.tagName == 'ROOT') break;
22514 		p = p.parentNode;
22515 	}
22516 
22517 	if (p != null) p.exp = e;
22518 
22519 	this.activeElement.appendChild(e);
22520 	this.activeElement = e;
22521 }
22522 
22523 //============================================================================================
22524 //			html$start_INTEGRAL
22525 //============================================================================================
22526 function html$start_INTEGRAL(tag)
22527 {
22528 	var e;
22529 
22530 	e = this.createElement_(tag);
22531 
22532 	e.size	= tag.i4("size");
22533 	e.color = tag.value("color");
22534 	if (! tag.exists('color')) 
22535 	{
22536 		e.color = 'Black';
22537 		if (this.font != null) e.color = this.font.color;
22538 	}
22539 
22540 	e.min = null;
22541 	e.max = null;
22542 
22543 	e.lineColor = tag.value("color");
22544 	e.lineStyle  = tag.value("style");
22545 	e.lineWeight = tag.i4("weight");
22546 
22547 	this.activeElement.appendChild(e);
22548 	this.activeElement = e;
22549 
22550 //--------------------- Node ----------------------------------------
22551 
22552 	tag.name = 'NODE';
22553 	e = this.createElement_(tag);
22554 
22555 	this.activeElement.appendChild(e);
22556 	this.activeElement = e;
22557 }
22558 //============================================================================================
22559 //			html$start_SUMMATION
22560 //============================================================================================
22561 function html$start_SUMMATION(tag)
22562 {
22563 	var e;
22564 	
22565 	e = this.createElement_(tag);
22566 
22567 	e.size	= tag.i4("size");
22568 	e.color = tag.value("color");
22569 	if (! tag.exists('color')) 
22570 	{
22571 		e.color = 'Black';
22572 		if (this.font != null) e.color = this.font.color;
22573 	}
22574 
22575 	e.range=null;
22576 
22577 	this.activeElement.appendChild(e);
22578 	this.activeElement = e;
22579 
22580 	e.lineColor = tag.value("color");
22581 	e.lineStyle  = tag.value("style");
22582 	e.lineWeight = tag.ki4("weight");
22583 
22584 //--------------------- Node ----------------------------------------
22585 
22586 	tag.name = 'NODE';
22587 	e = this.createElement_(tag);
22588 
22589 	this.activeElement.appendChild(e);
22590 	this.activeElement = e;
22591 }
22592 //============================================================================================
22593 //			html$start_RANGE
22594 //============================================================================================
22595 function html$start_RANGE(tag)
22596 {
22597 	var e,p;
22598 
22599 	e = this.createElement_(tag);
22600 
22601 	p = this.activeElement;
22602 	while (p != null)
22603 	{
22604 		if (p.tagName == 'SUMMATION') break;
22605 		p = p.parentElement;
22606 	}
22607 
22608 	if (p != null)
22609 	{
22610 		this.activeElement = p;
22611 		 p.range = e;
22612 	}
22613 
22614 	this.activeElement.appendChild(e);
22615 	this.activeElement = e;
22616 }
22617 
22618 //============================================================================================
22619 //			html$start_MIN (of SUM or Integral)
22620 //============================================================================================
22621 function html$start_MIN(tag)
22622 {
22623 	var e,p;
22624 
22625 	e = this.createElement_(tag);
22626 
22627 	p = this.activeElement;
22628 	while (p != null)
22629 	{
22630 		if (p.tagName == 'INTEGRAL') break;
22631 		p = p.parentElement;
22632 	}
22633 
22634 	if (p != null)
22635 	{
22636 		this.activeElement = p;
22637 		 p.min = e;
22638 	}
22639 
22640 	this.activeElement.appendChild(e);
22641 	this.activeElement = e;
22642 }
22643 //============================================================================================
22644 //			html$start_MAX (of SUM or Integral)
22645 //============================================================================================
22646 function html$start_MAX(tag)
22647 {
22648 	var e,p;
22649 
22650 	e = this.createElement_(tag);
22651 
22652 	p = this.activeElement;
22653 	while (p != null)
22654 	{
22655 		if (p.tagName == 'INTEGRAL') break;
22656 		p = p.parentElement;
22657 	}
22658 
22659 	if (p != null)
22660 	{
22661 		this.activeElement = p;
22662 		p.max = e;
22663 	}
22664 
22665 	this.activeElement.appendChild(e);
22666 	this.activeElement = e;
22667 }
22668 //============================================================================================
22669 //			html$start_DIVIDE
22670 //============================================================================================
22671 function html$start_DIVIDE(tag)
22672 {
22673 	var e,e2;
22674 
22675 	e = this.createElement_(tag);
22676 
22677 	e.lineWeight = tag.i4("lineWeight");
22678 	if (! tag.exists('LineWeight')) e.lineWeight = 1;
22679 
22680 	e.lineColor = tag.value("lineColor");
22681 	if (! tag.exists('LineColor')) 
22682 	{
22683 		e.lineColor = 'Black';
22684 		if (this.font != null) e.lineColor = this.font.color;
22685 	}
22686 
22687 	e.lineStyle = tag.value('linestyle');
22688 
22689 	e.valign	= tag.value("valign").toLowerCase();
22690 
22691 	e.numerator = null;
22692 	e.by = null;
22693 	this.activeElement.appendChild(e);
22694 	this.activeElement = e;
22695 
22696 //----------------------------- numerator -----------------------------------
22697 
22698 	tag.name = 'NUMERATOR';
22699 	e2 = this.createElement_(tag);
22700 
22701 	e.numerator = e2;
22702 
22703 	this.activeElement.appendChild(e2);
22704 	this.activeElement = e2;
22705 }
22706 //============================================================================================
22707 //			html$start_RAISE
22708 //============================================================================================
22709 function html$start_RAISE(tag)
22710 {
22711 	var e,e2;
22712 
22713 	e = this.createElement_(tag);
22714 
22715 	e.power = null;
22716 	this.activeElement.appendChild(e);
22717 	this.activeElement = e;
22718 
22719 //----------------------------- NODE -----------------------------------
22720 
22721 	tag.name = 'NODE';
22722 	e2 = this.createElement_(tag);
22723 
22724 	e.numerator = e2;
22725 
22726 	this.activeElement.appendChild(e2);
22727 	this.activeElement = e2;
22728 }
22729 //============================================================================================
22730 //			html$start_BY
22731 //============================================================================================
22732 function html$start_BY(tag)
22733 {
22734 	var e,p;
22735 
22736 	e = this.createElement_(tag);
22737 
22738 	p = this.activeElement;
22739 	while (p.parentNode != null)
22740 	{
22741 		if (p.tagName == 'DIVIDE') break;
22742 		p = p.parentNode;
22743 		
22744 	}
22745 
22746 	if (p.tagName == 'DIVIDE')
22747 	{
22748 		 p.by = e;
22749 		 this.activeElement = p;
22750 	}
22751 
22752 	this.activeElement.appendChild(e);
22753 	this.activeElement = e;
22754 }
22755 //============================================================================================
22756 //			html$start_POWER
22757 //============================================================================================
22758 function html$start_POWER(tag)
22759 {
22760 	var e,p;
22761 
22762 	e = this.createElement_(tag);
22763 	e.align = tag.value('align');
22764 
22765 	p = this.activeElement;
22766 	while (p.parentNode != null)
22767 	{
22768 		if (p.tagName == 'RAISE') break;
22769 		p = p.parentNode;
22770 		
22771 	}
22772 
22773 	if (p.tagName == 'RAISE')
22774 	{
22775 		 p.power = e;
22776 		 this.activeElement = p;
22777 	}
22778 
22779 	this.activeElement.appendChild(e);
22780 	this.activeElement = e;
22781 }
22782 //============================================================================================
22783 //			html$start_PDF (PDF)
22784 //============================================================================================
22785 function html$start_PDF(tag)
22786 {
22787 	var not;
22788 	if (this.outputType == '') return;
22789 
22790 	not = tag.bool('not');	
22791 
22792 	if (this.outputType == 'pdf' && (!not)) return;
22793 	if (this.outputType != 'pdf' && not) return;
22794 
22795 	this.parseData = this.skipTag(tag,this.parseData);
22796 }
22797 //============================================================================================
22798 //			html$start_HTML 
22799 //============================================================================================
22800 function html$start_HTML(tag)
22801 {
22802 	var not;
22803 	if (this.outputType == '') return;
22804 
22805 	not = tag.bool('not');	
22806 
22807 	if (this.outputType == 'html' && (!not)) return;
22808 	if (this.outputType != 'html' && not) return;
22809 
22810 	this.parseData = this.skipTag(tag,this.parseData);
22811 }
22812 //============================================================================================
22813 //			html$start_MC (multiple choice)
22814 //============================================================================================
22815 function html$start_MC(tag)
22816 {
22817 	var not;
22818 	not = tag.bool('not');	
22819 
22820 	if (this.questionType == 'm' && (!not)) return;
22821 	if (this.questionType != 'm' && not) return;
22822 
22823 	this.parseData = this.skipTag(tag,this.parseData);
22824 }
22825 //============================================================================================
22826 //			html$start_TF (true / false)
22827 //============================================================================================
22828 function html$start_TF(tag)
22829 {
22830 	var not;
22831 	not = tag.bool('not');	
22832 
22833 	if (this.questionType == 't' && (!not)) return;
22834 	if (this.questionType != 't' && not) return;
22835 
22836 	this.parseData = this.skipTag(tag,this.parseData);
22837 }
22838 //============================================================================================
22839 //			html$start_FIB (Fill in the blank)
22840 //============================================================================================
22841 function html$start_FIB(tag)
22842 {
22843 	var not;
22844 	not = tag.bool('not');	
22845 
22846 	if (this.questionType == 'b' && (!not)) return;
22847 	if (this.questionType != 'b' && not) return;
22848 
22849 	this.parseData = this.skipTag(tag,this.parseData);
22850 }
22851 //============================================================================================
22852 //			html$start_E (essay)
22853 //============================================================================================
22854 function html$start_E(tag)
22855 {
22856 	var not;
22857 	not = tag.bool('not');	
22858 
22859 	if (this.questionType == 'e' && (!not)) return;
22860 	if (this.questionType != 'e' && not) return;
22861 
22862 	this.parseData = this.skipTag(tag,this.parseData);
22863 }
22864 //============================================================================================
22865 //			html$start_CALENDAR
22866 //============================================================================================
22867 function html$start_CALENDAR(tag)
22868 {
22869 	var e,xdate,m,obj,i,value;
22870 
22871 	e = this.createElement_(tag);
22872 	e.events = new Array();
22873 	for (i=0; i &lt;= 31; ++i)
22874 	{
22875 		obj = new Object();
22876 		obj.style = null;
22877 		obj.htmlData = '';
22878 		obj.border = 0;
22879 		obj.borderColor = '';
22880 		obj.borderStyle = '';
22881 		e.events[i] = obj;
22882 	}	
22883 
22884 	xdate = new Date();
22885 
22886 	e.noref = false;
22887 	value = tag.value('noref').toLowerCase();
22888 	if (value == 'true') e.noref = true;
22889 	if (value == 'yes') e.noref = true;
22890 	if (value == 't') e.noref = true;
22891 	if (tag.exists('noref') && (value == '')) e.noref = true;
22892 	
22893 	e.year = tag.i4("year");
22894 	if (! tag.exists('year')) e.year = xdate.getYear();
22895 
22896 	e.month = tag.i4("month");
22897 	m = tag.value('month');
22898 	m = m.toUpperCase();
22899 	if (m == 'JAN') e.month = 0;
22900 	if (m == 'FEB') e.month = 1;
22901 	if (m == 'MAR') e.month = 2;
22902 	if (m == 'APR') e.month = 3;
22903 	if (m == 'MAY') e.month = 4;
22904 	if (m == 'JUN') e.month = 5;
22905 	if (m == 'JUL') e.month = 6;
22906 	if (m == 'AUG') e.month = 7;
22907 	if (m == 'SEP') e.month = 8;
22908 	if (m == 'OCT') e.month = 9;
22909 	if (m == 'NOV') e.month = 10;
22910 	if (m == 'DEC') e.month = 11;
22911 
22912 	if (m ==   'JANUARY') e.month = 0;
22913 	if (m ==  'FEBURARY') e.month = 1;
22914 	if (m ==     'MARCH') e.month = 2;
22915 	if (m ==     'APRIL') e.month = 3;
22916 	if (m ==       'MAY') e.month = 4;
22917 	if (m ==      'JUNE') e.month = 5;
22918 	if (m ==      'JULY') e.month = 6;
22919 	if (m ==    'AUGUST') e.month = 7;
22920 	if (m == 'SEPTEMBER') e.month = 8;
22921 	if (m ==   'OCTOBER') e.month = 9;
22922 	if (m ==  'NOVEMBER') e.month = 10;
22923 	if (m ==  'DECEMBER') e.month = 11;
22924 
22925 	if (m == 'SEPT') e.month = 8;
22926 
22927 	if (! tag.exists('month')) e.year = xdate.getMonth();
22928 
22929 	e.valign	= tag.value("valign").toLowerCase();
22930 
22931 	e.width	= html$i4(tag.value("width"));
22932 	e.height	= html$i4(tag.value("height"));
22933 	e.border    = html$i4(tag.value('border'));
22934 
22935 	e.header = null;
22936 	e.footer = null;
22937 
22938 	this.activeElement.appendChild(e);
22939 	this.activeElement = e;
22940 }
22941 //============================================================================================
22942 //			html$start_TIMELINE
22943 //============================================================================================
22944 function html$start_TIMELINE(tag)
22945 {
22946 	var e,xdate,m,obj,i;
22947 
22948 	e = this.createElement_(tag);
22949 	e.xhtml = new html$(this.sys);
22950 
22951 	e.events = new Array();
22952 
22953 	e.startDate  = tag.date('startDate');
22954 	e.endDate    = tag.date('endDate');
22955 	e.duration   = tag.keyword('duration');
22956 	e.resolution = tag.keyword('resolution');
22957 
22958 	e.eventMaxLevels	= tag.i4('eventMaxLevels');
22959 	e.eventPlacement	= tag.value('eventPlacement');
22960 	e.eventHeight		= tag.i4('eventHeight');
22961 	e.eventWidth		= tag.i4('eventWidth');
22962 	e.eventBorder		= tag.i4('eventBorder');
22963 	e.eventAlign		= tag.value('eventAlign');
22964 	e.eventShape		= tag.value('eventLabelShape');
22965 	e.eventColor		= tag.value('eventColor');
22966 
22967 	e.eventFontColor	= tag.value('eventFontColor');
22968 	e.eventFontSize		= tag.r8('eventFontSize');
22969 	e.eventFontName		= tag.r8('eventFontName');
22970 	
22971 	e.eventMarkerShape	= tag.value('eventMarkerShape');
22972 	e.eventMarkerColor	= tag.value('eventMarkerColor');
22973 	e.eventMarkerSize	= tag.r8('eventMarkerSize');
22974 	if (e.eventMarkerSize == 0) e.eventMarkerSize = 4;
22975 
22976 	e.leaderSlant		= tag.i4('leaderSlant');
22977 	e.leaderWidth		= tag.i4('leaderWidth');
22978 	e.leaderColor		= tag.value('leaderColor');
22979 	e.leaderStyle		= tag.value('leaderStyle');
22980 	e.leaderType		= tag.value('leaderType');		// box, line, or point
22981 	
22982 	e.baselineWidth		= tag.i4('baselineWidth');
22983 	e.baselineTics		= tag.i4('baselineTics');
22984 	e.baselineLabels	= tag.keyword('baselineLabels');
22985 		
22986 	e.baselineFontColor	= tag.value('baselineFontColor');
22987 	e.baselineFontSize	= tag.value('baselineFontSize');
22988 	
22989 	e.valign	= tag.value("valign").toLowerCase();
22990 
22991 	e.width	= html$i4(tag.value("width"));
22992 	e.height	= html$i4(tag.value("height"));
22993 	e.border    = html$i4(tag.value('border'));
22994 
22995 	e.header = null;
22996 	e.footer = null;
22997 
22998 	this.activeElement.appendChild(e);
22999 	this.activeElement = e;
23000 }
23001 //============================================================================================
23002 //			html$start_SCHEDULE
23003 //============================================================================================
23004 function html$start_SCHEDULE(tag)
23005 {
23006 	var e,xdate,m,obj,i;
23007 
23008 	e = this.createElement_(tag);
23009 	e.events = new Array();
23010 	xdate = new Date();
23011 	
23012 	e.year = tag.i4("year");
23013 	if (! tag.exists('year')) e.year = xdate.getYear();
23014 
23015 	e.month = tag.i4("month");
23016 	m = tag.value('month');
23017 	m = m.toUpperCase();
23018 	if (m == 'JAN') e.month = 0;
23019 	if (m == 'FEB') e.month = 1;
23020 	if (m == 'MAR') e.month = 2;
23021 	if (m == 'APR') e.month = 3;
23022 	if (m == 'MAY') e.month = 4;
23023 	if (m == 'JUN') e.month = 5;
23024 	if (m == 'JUL') e.month = 6;
23025 	if (m == 'AUG') e.month = 7;
23026 	if (m == 'SEP') e.month = 8;
23027 	if (m == 'OCT') e.month = 9;
23028 	if (m == 'NOV') e.month = 10;
23029 	if (m == 'DEC') e.month = 11;
23030 
23031 	if (m ==   'JANUARY') e.month = 0;
23032 	if (m ==  'FEBURARY') e.month = 1;
23033 	if (m ==     'MARCH') e.month = 2;
23034 	if (m ==     'APRIL') e.month = 3;
23035 	if (m ==       'MAY') e.month = 4;
23036 	if (m ==      'JUNE') e.month = 5;
23037 	if (m ==      'JULY') e.month = 6;
23038 	if (m ==    'AUGUST') e.month = 7;
23039 	if (m == 'SEPTEMBER') e.month = 8;
23040 	if (m ==   'OCTOBER') e.month = 9;
23041 	if (m ==  'NOVEMBER') e.month = 10;
23042 	if (m ==  'DECEMBER') e.month = 11;
23043 
23044 	if (m == 'SEPT') e.month = 8;
23045 
23046 	if (! tag.exists('month')) e.year = xdate.getMonth();
23047 
23048 	e.valign	= tag.value("valign").toLowerCase();
23049 
23050 	e.width	= html$i4(tag.value("width"));
23051 	e.height	= html$i4(tag.value("height"));
23052 	e.border    = html$i4(tag.value('border'));
23053 
23054 	e.header = null;
23055 	e.footer = null;
23056 
23057 	this.activeElement.appendChild(e);
23058 	this.activeElement = e;
23059 }
23060 //============================================================================================
23061 //			html$start_EVENT
23062 //============================================================================================
23063 function html$start_EVENT(tag)
23064 {
23065 	var e,p,day;
23066 
23067 	p = this.activeElement;
23068 
23069 	if (p.tagName == 'CALENDAR') 
23070 	{
23071 		this.activeElement = p;
23072 	
23073 		day = tag.i4('day');
23074 		if ((day &lt;= 0) || (day > 31)) return;
23075 
23076 		e = p.events[day];
23077 		e.border		= tag.i4('border');
23078 		e.borderColor	= tag.value('bordercolor');
23079 		e.borderStyle	= tag.value('borderstyle');
23080 	
23081 		e.style		= new htmlStyle$(this,tag.value('style'),this.document);
23082 		e.htmlData	= this.event;
23083 		this.event  = '';
23084 		return;
23085 	}
23086 
23087 	if (p.tagName == 'TIMELINE') 
23088 	{
23089 		this.activeElement = p;
23090 	
23091 		e = new Object();
23092 		e.color			= p.eventColor;
23093 		if (tag.exists('color')) e.color = tag.value('color');
23094 
23095 		e.markerSize    = p.eventMarkerSize;
23096 		e.markerColor   = p.eventMarkerColor;
23097 		e.markerShape   = p.eventMarkerShape;
23098 		
23099 		if (tag.exists('markercolor')) e.markerColor = tag.value('markercolor');
23100 		if (tag.exists('markershape')) e.markerShape = tag.value('markershape');
23101 		if (tag.exists('markersize'))  e.markerSize = tag.r8('markersize');
23102 	    if (e.markerSize == 0) e.markerSize = 4;
23103 
23104 		e.htmlData		= this.event;
23105 		e.startDate		= tag.date('date');
23106 		e.duration		= tag.r8('duration');
23107 
23108 		p.events[p.events.length] = e;		
23109 		this.event  = '';
23110 	
23111 		return;
23112 	}
23113 
23114 	if (p.tagName == 'SCHEDULE') 
23115 	{
23116 		this.activeElement = p;
23117 	
23118 		e = new Object();
23119 		e.htmlData		= this.event;
23120 		e.startDate		= tag.date('date');
23121 		e.duration		= tag.r8('duration');
23122 
23123 		p.events[p.events.length] = e;		
23124 		this.event  = '';	
23125 		return;
23126 	}
23127 
23128 	this.event  = '';
23129 
23130 }
23131 //============================================================================================
23132 //			html$start_ROW
23133 //============================================================================================
23134 function html$start_ROW(tag)
23135 {
23136 	var e;
23137 
23138 	e = this.createElement_(tag);
23139 
23140 	this.activeElement.appendChild(e);
23141 	this.activeElement = e;
23142 
23143 }
23144 //============================================================================================
23145 //			html$start_SET
23146 //============================================================================================
23147 function html$start_SET(tag)
23148 {
23149 	var e;
23150 
23151 	e = this.createElement_(tag);
23152 	this.activeElement.appendChild(e);
23153 	this.activeElement = e;
23154 }
23155 //============================================================================================
23156 //			html$start_SUB
23157 //============================================================================================
23158 function html$start_SUB(tag)
23159 {
23160 	var e,ch;
23161 
23162 	e = this.createElement_(tag);
23163 	e.paddingBottom = 2;
23164 	this.activeElement.appendChild(e);
23165 	this.activeElement = e;
23166 }
23167 //============================================================================================
23168 //			html$start_SUP
23169 //============================================================================================
23170 function html$start_SUP(tag)
23171 {
23172 	var e;
23173 
23174 	e = this.createElement_(tag);
23175 	e.paddingTop = 2;
23176 	this.activeElement.appendChild(e);
23177 	this.activeElement = e;
23178 }
23179 //============================================================================================
23180 //			html$start_HR
23181 //============================================================================================
23182 function html$start_HR(tag)
23183 {
23184 	var e,t;
23185 
23186 	t = this;
23187 	e = this.createElement_(tag);
23188 
23189 	e.color	= tag.value("color");
23190 	e.align	= tag.value("align");
23191 	e.width	= html$i4(tag.value("width"));
23192 	e.noShade	= tag.value("noshade");
23193 	e.size		= html$i4(tag.value("size"));
23194 
23195 	this.activeElement.appendChild(e);
23196 
23197 }
23198 //============================================================================================
23199 //			html$start_H (1-6)
23200 //============================================================================================
23201 function html$start_H(tag,n)
23202 {
23203 	var e;
23204 
23205 	e = this.createElement_(tag);
23206 	e.align		= tag.value("align");
23207 
23208 	this.activeElement.appendChild(e);
23209 	this.activeElement = e;
23210 }
23211 //============================================================================================
23212 //			html$start_A
23213 //============================================================================================
23214 function html$start_A(tag)
23215 {
23216 	var e,i,text;
23217 
23218 	e = this.createElement_(tag);
23219 
23220 	e.href			= tag.value("href"); 
23221 	e.href_target	= tag.value("target"); 
23222 	e.href_title	= tag.value("title");
23223 
23224 	this.activeElement.appendChild(e);
23225 	this.activeElement = e;
23226 
23227 	this.href			= tag.value("href");		// 
23228 	this.href_target	= tag.value("target"); 
23229 	this.href_title	= tag.value("title");
23230 
23231 	text = trim(e.href).toLowerCase();
23232 	if (text == '') return;
23233 			
23234 	this.links[this.links.length] = e;
23235 }
23236 //============================================================================================
23237 //			html$start_P
23238 //============================================================================================
23239 function html$start_P(tag)
23240 {
23241 	var e;
23242 
23243 	e = this.createElement_(tag);
23244 
23245 	e.align	= tag.keyword("align");
23246 	if (e.style.textAlign == '') e.style.textAlign = e.align;
23247 
23248 	this.activeElement.appendChild(e);
23249 	this.activeElement = e;
23250 
23251 }
23252 //============================================================================================
23253 //			html$start_DL
23254 //============================================================================================
23255 function html$start_DL(tag)
23256 {
23257 	var e;
23258 
23259 	e = this.createElement_(tag);
23260 
23261 	this.activeElement.appendChild(e);
23262 	this.activeElement = e;
23263 
23264 }
23265 //============================================================================================
23266 //			html$start_DD
23267 //============================================================================================
23268 function html$start_DD(tag)
23269 {
23270 	var e;
23271 
23272 	e = this.createElement_(tag);
23273 
23274 	this.activeElement.appendChild(e);
23275 	this.activeElement = e;
23276 
23277 }
23278 //============================================================================================
23279 //			html$start_DT
23280 //============================================================================================
23281 function html$start_DT(tag)
23282 {
23283 	var e;
23284 
23285 	e = this.createElement_(tag);
23286 
23287 	this.activeElement.appendChild(e);
23288 	this.activeElement = e;
23289 }
23290 //============================================================================================
23291 //			html$start_MAP
23292 //============================================================================================
23293 function html$start_MAP(tag)
23294 {
23295 	var e;
23296 
23297 	e = this.createElement_('MAP');
23298 	e.name			= tag.value("name");
23299 	e.areas			= new Array();
23300 
23301 	this.maps[this.maps.length] = e;
23302 
23303 	this.activeElement.appendChild(e);
23304 	this.activeElement = e;
23305 }
23306 //============================================================================================
23307 //			html$start_AREA
23308 //============================================================================================
23309 function html$start_AREA(tag)
23310 {
23311 	var e,temp,i,value,p;
23312 
23313 	e = new Object();
23314 	e.name			= tag.value("name");
23315 	e.id			= tag.value("id");
23316 
23317 	e.target		= tag.keyword('target');
23318 	e.href			= tag.value('href');
23319 	e.shape			= tag.keyword('shape');
23320 	e.alt			= tag.value('alt');
23321 
23322 	temp		= tag.value('coords');
23323 	e.coords	= temp.split(',');
23324 
23325 	for (i=0; i &lt; e.coords.length; ++i)
23326 	{
23327 		value = parseFloat(e.coords[i]);
23328 		if (isNaN(value)) value = 0;
23329 		e.coords[i] = value;
23330 	}
23331 
23332 	p = this.activeElement;
23333 	if (p.tagName != 'MAP') return;
23334 	p.areas[p.areas.length] = e;
23335 
23336 }
23337 //============================================================================================
23338 //			html$start_TITLE
23339 //============================================================================================
23340 function html$start_TITLE(tag)
23341 {
23342 
23343 	this.title = this.xdata;
23344 	this.data = '';
23345 
23346 }
23347 //============================================================================================
23348 //			html$start_META
23349 //============================================================================================
23350 function html$start_META(tag)
23351 {
23352 
23353 	this.meta = this.data;
23354 	this.data = '';
23355 }
23356 //============================================================================================
23357 //			html$start_BODY
23358 //============================================================================================
23359 function html$start_BODY(tag)
23360 {
23361 	var e,bgcolor,bgimage;
23362 	
23363 	e = this.body;
23364 	this.activeElement = e;
23365 	e.style	= new htmlStyle$(this,tag.value('style'),this.document);
23366 
23367 	
23368 	bgcolor			= tag.value('bgcolor');
23369 	bgimage			= tag.value('background');
23370 	
23371 	if (bgcolor != '') e.style.backgroundColor = bgcolor;
23372 	if (bgimage != '') e.style.backgroundImage = bgimage;
23373 	
23374 }
23375 //============================================================================================
23376 //			html$start_INPUT
23377 //============================================================================================
23378 function html$start_INPUT(tag)
23379 {
23380 	var e,h,w,width,height,p;
23381 
23382 	e = this.createElement_(tag);
23383 
23384 	e.align		= tag.value('align');
23385 	e.size			= tag.value('size');
23386 	e.type			= tag.keyword('type');
23387 	if (e.type == 'hidden') e.style.display = 'none';
23388 
23389 	e.height		= tag.value('height');
23390 	e.width		= tag.value('width');
23391 
23392 	if (e.type == 'button' && e.height == '') e.height = 24;
23393 	if (e.type == 'submit' && e.height == '') e.height = 24;
23394 	
23395 	e.value			= tag.value('value');
23396 
23397 	e.readonly		= tag.bool('readonly');
23398 	e.disabled		= tag.bool('disabled');
23399 
23400 	e.checked		= tag.bool('checked');
23401 	e.maxlength		= tag.i4('maxlength');
23402 	e.src			= tag.value('src');
23403 	e.accept		= tag.value('accept');
23404 
23405 	e.onClick		= tag.value('onclick');
23406 	e.onChange		= tag.value('onchange');
23407 
23408 	e.action		= '';
23409 	e.target		= '';
23410 	e.method		= 'get';
23411 	
23412 	e.parentForm	= null;
23413 
23414 	e.imageFile = '';
23415 	if (e.type == 'image') e.imageFile = this.imageFilename(e.src);		
23416 
23417 	p = this.activeElement;
23418 	while (p != null)
23419 	{
23420 		if (p.tagName == 'FORM')
23421 		{
23422 			e.parentForm = p;
23423 			if (e.type != 'submit') break;
23424 			e.action = p.action;
23425 			e.target = p.target;
23426 			e.method = p.method;
23427 			if (e.value == '') e.value = 'Submit Query';
23428 			break;
23429 		}
23430 		p = p.parentElement;
23431 	}
23432 
23433 	this.activeElement.appendChild(e);
23434 
23435 }
23436 //============================================================================================
23437 //			html$start_FORM
23438 //============================================================================================
23439 function html$start_FORM(tag)
23440 {
23441 	var e;
23442 
23443 	e = this.createElement_(tag);
23444 
23445 	e.target		= tag.keyword('target');
23446 	e.method		= tag.keyword('method');
23447 	e.action		= tag.value('action');
23448 
23449 	e.fields		= new Array();
23450 
23451 	this.activeElement.appendChild(e);
23452 	this.activeElement = e;
23453 }
23454 //============================================================================================
23455 //			html$start_SELECT
23456 //============================================================================================
23457 function html$start_SELECT(tag)
23458 {
23459 	var e,w;
23460 
23461 	e = this.createElement_(tag);
23462 
23463 	e.size			= html$i4(tag.value('size'));
23464 	e.fixedWidth	= false;
23465 	e.width			= 32;
23466 	e.maxWidth		= 0;
23467 
23468 	w = html$i4(e.style.width);
23469 	if (w > 0) 
23470 	{
23471 		e.fixedWidth = true;
23472 		e.width = w;
23473 	}
23474 
23475 	e.height		= 16;
23476 	if (e.size > 1) e.height = (16 * e.size);
23477 
23478 	if (e.style.height > 0) e.height = e.style.height;
23479 	
23480 	e.multiple		= tag.bool('multiple');
23481 	e.disabled		= tag.bool('disabled');
23482 	
23483 	e.options		= new Array();
23484 	e.values		= new Array();
23485 	e.selected		= -1;
23486 
23487 	e.onChange		= tag.value('onchange');
23488 	e.onKeyDown		= tag.value('onkeydown');
23489 	e.onKeyUp		= tag.value('onkeyup');
23490 	e.onMouseDown	= tag.value('onmousedown');
23491 	e.onMouseUp		= tag.value('onmouseup');
23492 	e.onEnter		= tag.value('onenter');
23493 	e.onExit		= tag.value('onexit');
23494 
23495 	this.activeElement.appendChild(e);
23496 	this.activeElement = e;
23497 }
23498 
23499 //============================================================================================
23500 //			html$start_OPTION
23501 //============================================================================================
23502 function html$start_OPTION(tag)
23503 {
23504 	var e,p,selected,value,label,text,index,w ;
23505 
23506 	p = this.findParent_('SELECT');
23507 	if (p.tagName != 'SELECT') return;
23508 
23509 	selected	= tag.bool('selected');
23510 	value		= tag.value('value');
23511 	label		= tag.value('label');
23512 	text		= this.data;
23513 
23514 	w = p.wordWidth(text,10);
23515 	if (w > p.maxWidth) p.maxWidth = w;
23516 	if (! p.fixedWidth) p.width = p.maxWidth + 40;
23517 
23518 	index = p.options.length;
23519 
23520 	if (selected) p.selected = index;
23521 	p.options[index] = text;
23522 	p.values[index] = value;
23523 		
23524 	this.data = '';
23525 		
23526 }
23527 //============================================================================================
23528 //			html$start_TEXTAREA
23529 //============================================================================================
23530 function html$start_TEXTAREA(tag)
23531 {
23532 	var e;
23533 
23534 	e = this.createElement_(tag);
23535 	e.rows			= html$i4(tag.value('rows'));
23536 	e.cols			= html$i4(tag.value('cols'));
23537 	e.wrap			= tag.bool('wrap');
23538 	
23539 	e.width		= 200;
23540 	e.height		= 100;
23541 
23542 	e.readonly		= tag.bool('readonly');
23543 	e.disabled		= tag.bool('disabled');
23544 	e.value		= this.data;
23545 	
23546 	this.data		= '';
23547 
23548 	if (e.rows > 0) e.height = e.rows * 16;
23549 	if (e.cols > 0) e.width  = e.cols * 8;
23550 
23551 	e.onChange		= tag.value('onchange');
23552 	e.onKeyDown		= tag.value('onkeydown');
23553 	e.onKeyUp		= tag.value('onkeyup');
23554 	e.onMouseDown	= tag.value('onmousedown');
23555 	e.onMouseUp		= tag.value('onmouseup');
23556 	e.onEnter		= tag.value('onenter');
23557 	e.onExit		= tag.value('onexit');
23558 
23559 	this.activeElement.appendChild(e);
23560 }
23561 //============================================================================================
23562 //			html$start_LI
23563 //============================================================================================
23564 function html$start_LI(tag)
23565 {
23566 	var e,p,obj;
23567 	
23568 	e = this.createElement_(tag);
23569 	e.type			= tag.value('type');
23570 	e.depth		= 1;
23571 
23572 	p = this.activeElement;
23573 
23574 	while (true)
23575 	{
23576 		if (p.isNode() && (p.tagName != 'LI')) break;			
23577 		p = p.parentElement;
23578 	}
23579 
23580 	if (p.tagName == 'UL') e.depth = p.depth;
23581 	if (p.tagName == 'OL') e.depth = p.depth;
23582 	this.activeElement = p;
23583 
23584 	this.activeElement.appendChild(e);
23585 	this.activeElement = e;
23586 }
23587 //============================================================================================
23588 //			html$start_BLOCKQUOTE
23589 //============================================================================================
23590 function html$start_BLOCKQUOTE(tag)
23591 {
23592 	var e,p;
23593 
23594 	e = this.createElement_(tag);
23595 
23596 	this.activeElement.appendChild(e);
23597 	this.activeElement = e;
23598 
23599 	e.height		= 0;
23600 	e.width		= 12;
23601 }
23602 //============================================================================================
23603 //			html$start_OL
23604 //============================================================================================
23605 function html$start_OL(tag)
23606 {
23607 	var e,p;
23608 
23609 	e = this.createElement_(tag);
23610 	e.depth		= 1;
23611 
23612 	
23613 	p = this.activeElement;
23614 
23615 	if ((p.tagName == 'LI')) e.depth = p.depth + 1;
23616 
23617 	if ((e.depth == 1) && (e.style.paddingLeft == '')) e.style.paddingLeft = 25;
23618 
23619 	this.activeElement.appendChild(e);
23620 	this.activeElement = e;
23621 }
23622 //============================================================================================
23623 //			html$start_UL
23624 //============================================================================================
23625 function html$start_UL(tag)
23626 {
23627 	var e,p;
23628 
23629 	e = this.createElement_(tag);
23630 	e.type		= tag.value("type");
23631 	e.depth		= 1;
23632 
23633 
23634 	p = this.activeElement;
23635 
23636 	if ((p.tagName == 'LI')) e.depth = p.depth + 1;
23637 	if ((p.tagName == 'UL')) e.depth = p.depth + 1;
23638 	if ((p.tagName == 'OL')) e.depth = p.depth + 1;
23639 
23640 	if ((e.depth == 1) && (e.style.paddingLeft == '')) e.style.paddingLeft = 25;
23641 	
23642 	this.activeElement.appendChild(e);
23643 	this.activeElement = e;
23644 }
23645 //============================================================================================
23646 //			html$start_DIV
23647 //============================================================================================
23648 function html$start_DIV(tag)
23649 {
23650 	var e;
23651 
23652 	e = this.createElement_(tag);
23653 	e.dataFormatAs	= tag.value("dataformatas");
23654 	e.align		= tag.value("align");
23655 	e.nowrap		= tag.value("nowrap");
23656 	
23657 	if (e.style.textAlign == '') e.style.textAlign = e.align;
23658 	this.activeElement.appendChild(e);
23659 	this.activeElement = e;
23660 }
23661 //============================================================================================
23662 //			html$start_LABEL
23663 //============================================================================================
23664 function html$start_LABEL(tag)
23665 {
23666 	var e;
23667 
23668 	e = this.createElement_(tag);
23669 	e.fieldName = tag.value('for');
23670 	
23671 	this.activeElement.appendChild(e);
23672 	this.activeElement = e;
23673 }
23674 //============================================================================================
23675 //			html$start_EVAL
23676 //============================================================================================
23677 function html$start_EVAL(tag)
23678 {
23679 	var e,pad;
23680 
23681 	e = this.createElement_(tag);
23682 	e.command		= this.data;
23683 	e.height		= tag.value("height");
23684 	e.width			= tag.value("width");
23685 	
23686 	if (e.width == '') e.width = '100%';
23687 	
23688 	pad = tag.value('cellpadding');
23689 
23690 	e.cellpadding = tag.i4('cellpadding');
23691 	e.border	  = tag.i4('border');
23692 
23693 	if (pad == '') e.cellpadding = 2;
23694 
23695 	if ((e.style.paddingLeft   == '') &&
23696 		(e.style.paddingRight  == '') &&
23697 		(e.style.paddingTop    == '') &&
23698 		(e.style.paddingBottom == ''))
23699 	{
23700 		e.style.paddingLeft		= e.cellpadding;	
23701 		e.style.paddingRight	= e.cellpadding;	
23702 		e.style.paddingTop		= e.cellpadding;	
23703 		e.style.paddingBottom	= e.cellpadding;	
23704 		e.paddingLeft	= e.cellpadding;
23705 		e.paddingRight	= e.cellpadding;
23706 		e.paddingTop	= e.cellpadding;
23707 		e.paddingBottom = e.cellpadding;
23708 	}
23709 
23710 	e.borderColorDark	= tag.value("bordercolordark");
23711 	e.borderColorLight	= tag.value("bordercolorlight");
23712 	e.borderColor		= tag.value('bordercolor');
23713 
23714 	if (e.borderColor != '') e.borderColorDark = e.borderColor;
23715 	if (e.borderColor != '') e.borderColorLight = e.borderColor;
23716 
23717 	if (e.borderColorDark == '') e.borderColorDark = '#ACA899';
23718 	if (e.borderColorLight == '') e.borderColorLight = '#ECE9D8';
23719 
23720 	if (e.border > 0)
23721 	{	
23722 		e.style.borderLeft		= e.border + ' SOLID ' + e.borderColorDark;
23723 		e.style.borderRight	= e.border + ' SOLID ' + e.borderColorLight;
23724 		e.style.borderTop		= e.border + ' SOLID ' + e.borderColorDark;
23725 		e.style.borderBottom	= e.border + ' SOLID ' + e.borderColorLight;
23726 	}
23727 
23728 	this.activeElement.appendChild(e);
23729 }
23730 //============================================================================================
23731 //			html$start_FONT
23732 //============================================================================================
23733 function html$start_FONT(tag)
23734 {
23735 	var e,size;
23736 
23737 	e = this.createElement_(tag);
23738 	
23739 	e.align		= tag.keyword("align");
23740 	e.size		= tag.value("size");
23741 	e.color	= tag.value("color");
23742 	e.face	= tag.value("face");
23743 
23744 	e.fontSize	= e.size;
23745 
23746 	if (e.size == 1) e.fontSize = '6pt';
23747 	if (e.size == 2) e.fontSize = '8pt';
23748 	if (e.size == 3) e.fontSize = '10pt';
23749 	if (e.size == 4) e.fontSize = '12pt';
23750 	if (e.size == 5) e.fontSize = '16pt';
23751 	if (e.size == 6) e.fontSize = '24pt';
23752 	if (e.size == 7) e.fontSize = '32pt';
23753 
23754 	this.activeElement.appendChild(e);
23755 	this.activeElement = e;
23756 }
23757 //============================================================================================
23758 //			html$start_SPAN
23759 //============================================================================================
23760 function html$start_SPAN(tag)
23761 {
23762 	var e;
23763 
23764 	e = this.createElement_(tag);
23765 	e.dataFormatAs	= tag.value("dataformatas");
23766 
23767 	this.activeElement.appendChild(e);
23768 	this.activeElement = e;
23769 }
23770 //============================================================================================
23771 //			html$start_PAGEBREAK
23772 //============================================================================================
23773 function html$start_PAGEBREAK(tag)
23774 {
23775 	var e;
23776 	
23777 	this.activeElement = this.body;
23778 	e = this.createElement_(tag);
23779 
23780 	this.activeElement = this.body;
23781 	this.activeElement.appendChild(e);
23782 }
23783 //============================================================================================
23784 //			html$start_IMG
23785 //============================================================================================
23786 function html$start_IMG(tag)
23787 {
23788 	var e,size,src;
23789 
23790 	e = this.createElement_(tag);
23791 	e.tagName		= 'IMG';
23792 	
23793 	e.height		= tag.value("height");
23794 	e.width		= tag.value("width");
23795 
23796 	e.align		= tag.value("align");
23797 	e.hspace		= tag.value("hspace");
23798 	e.vspace		= tag.value("vspace");
23799 	e.usemap		= tag.value("usemap");
23800 	e.border		= tag.value("border");
23801 	e.dynsrc		= tag.value("dynsrc");
23802 	e.src			= this.resolve(tag.value("src"));
23803 	e.alt			= tag.value("alt");
23804 
23805 	e.u3dName		= tag.value("Name");
23806 
23807 	e.u3dToolbar		= tag.keyword("3D-toolbar");
23808 	e.u3dLightingScheme	= tag.keyword("3D-lighting-scheme");
23809 	e.u3dRenderMode		= tag.keyword("3D-Render-Mode");
23810 	e.u3dView		= tag.value("3D-View");
23811 	e.u3dCamera		= tag.value("3D-Camera");
23812 	e.u3dCameraTilt		= tag.value("3D-Camera-Tilt");
23813 
23814 	e.srcText		= e.src;
23815 
23816 	e.src = this.imageFilename(e.src);		
23817 	e.imageSize = this.getImageSize(e.src);
23818 	this.activeElement.appendChild(e);
23819 }
23820 //============================================================================================
23821 //			html$start_TABLE
23822 //============================================================================================
23823 function html$start_TABLE(tag)
23824 {
23825 	var e;
23826 	var bgcolor,bgimage,backgroundColor;
23827 
23828 	e = this.createElement_(tag);
23829 
23830 	e.width = tag.value("width");
23831 	e.height = tag.value("height");
23832 	e.align = tag.value("align");
23833 
23834 	if (e.style.textAlign != '') 
23835 	{
23836 		e.align = e.style.textAlign;
23837 	}
23838 	else
23839 	{
23840 		e.style.textAlign = e.align;
23841 	}
23842 
23843 	
23844 	bgcolor = tag.value("bgcolor");
23845 	bgimage = tag.value("background");
23846 
23847 	if (bgcolor != '') e.style.backgroundColor = bgcolor;
23848 	if (bgimage != '') e.style.backgroundImage = bgimage;
23849 	
23850 	if ((e.style.backgroundColor == '') && (e.style.backgroundImage == ''))
23851 	{
23852 		 e.style.backgroundColor = 'white';
23853 	}
23854 
23855 	e.border = html$i4(tag.value("border"));
23856 	
23857 	e.cellpadding = html$i4(tag.value("cellpadding",1));
23858 	e.cellspacing = html$i4(tag.value("cellspacing",2));
23859 
23860 	e.collapse = false;
23861 	if (e.style.borderCollapse == 'collapse')
23862 	{
23863 		 e.collapse = true;
23864 		 if (e.border > 1) e.border = 1;
23865 	}
23866 
23867 	if (e.style.align != '') e.align = e.style.align;
23868 	if (e.style.align == '') e.style.align = e.align;
23869 	
23870 	if (e.collapse && (e.border > 0)) e.cellspacing = 0;
23871 
23872 	e.frame = tag.value("frame");
23873 
23874 	e.borderColorDark	= tag.value("bordercolordark");
23875 	e.borderColorLight	= tag.value("bordercolorlight");
23876 	e.borderColor		= tag.value('bordercolor');
23877 
23878 	if (e.borderColor != '') e.borderColorDark = e.borderColor;
23879 	if (e.borderColor != '') e.borderColorLight = e.borderColor;
23880 
23881 	if (e.borderColorDark == '') e.borderColorDark = '#ACA899';
23882 	if (e.borderColorLight == '') e.borderColorLight = '#ECE9D8';
23883 
23884 	e.rows = new Array();
23885 	e.colWidths = new Array();
23886 
23887 	e.spanned_col = false;
23888 	e.spanned_row = false;
23889 
23890 	if (e.style.borderLeft == '')
23891 	{
23892 		e.style.borderLeft		= e.border + ' SOLID ' + e.borderColorLight;
23893 		e.style.borderRight	= e.border + ' SOLID ' + e.borderColorDark;
23894 		e.style.borderTop		= e.border + ' SOLID ' + e.borderColorLight;
23895 		e.style.borderBottom	= e.border + ' SOLID ' + e.borderColorDark;
23896 	}
23897 	
23898 	this.activeElement.appendChild(e);
23899 	this.activeElement = e;
23900 	
23901 	e.tableIndex = this.tables.length;
23902 	this.tables[this.tables.length] = e;
23903 }
23904 //============================================================================================
23905 //			html$findParent_
23906 //============================================================================================
23907 function html$findParent_(tagName)
23908 {
23909 	var p,prev;
23910 
23911 	prev = null;	
23912 	p = this.activeElement;
23913 	
23914 	while (true)
23915 	{
23916 		if (p.tagName == tagName) return p;
23917 		if (p.parentElement == null) return p;
23918 			
23919 		if (tagName == 'TR')
23920 		{
23921 			if (p.tagName == 'TABLE') return p;
23922 		}
23923 		
23924 		prev = p;
23925 		p = p.parentElement;
23926 	}
23927 }
23928 //============================================================================================
23929 //			html$start_THEAD
23930 //============================================================================================
23931 function html$start_THEAD(tag)
23932 {
23933 	var e;
23934 
23935 	e = this.createElement_(tag);
23936 
23937 	e.char = tag.value("char");
23938 	e.charoff = tag.value("charoff");
23939 	e.align = tag.value("align");
23940 	e.valign = tag.value("valign");
23941 
23942 	this.activeElement.appendChild(e);
23943 	this.activeElement = e;
23944 }
23945 //============================================================================================
23946 //			html$start_TFOOT
23947 //============================================================================================
23948 function html$start_TFOOT(tag)
23949 {
23950 	var e;
23951 
23952 	e = this.createElement_(tag);
23953 
23954 	e.char = tag.value("char");
23955 	e.charoff = tag.value("charoff");
23956 	e.align = tag.value("align");
23957 	e.valign = tag.value("valign");
23958 
23959 	if (e.style.textAlign != '') 
23960 	{
23961 		e.align = e.style.textAlign;
23962 	}
23963 	else
23964 	{
23965 		e.style.textAlign = e.align;
23966 	}
23967 
23968 
23969 	this.activeElement.appendChild(e);
23970 	this.activeElement = e;
23971 }
23972 //============================================================================================
23973 //			html$start_TBODY
23974 //============================================================================================
23975 function html$start_TBODY(tag)
23976 {
23977 	var e;
23978 
23979 	e = this.createElement_(tag);
23980 
23981 	e.char = tag.value("char");
23982 	e.charoff = tag.value("charoff");
23983 	e.align = tag.value("align");
23984 	e.valign = tag.value("valign");
23985 
23986 	if (e.style.textAlign != '') 
23987 	{
23988 		e.align = e.style.textAlign;
23989 	}
23990 	else
23991 	{
23992 		e.style.textAlign = e.align;
23993 	}
23994 
23995 
23996 	this.activeElement.appendChild(e);
23997 	this.activeElement = e;
23998 }
23999 //============================================================================================
24000 //			html$start_TR
24001 //============================================================================================
24002 function html$start_TR(tag)
24003 {
24004 	var e,p,text;
24005 
24006 	e = this.createElement_(tag);
24007 
24008 	e.width = tag.value("width");
24009 	e.height = tag.value("height");
24010 	e.align = tag.value("align");
24011 	e.valign = tag.value("valign");
24012 	e.backgroundColor = tag.value("bgcolor");
24013 	e.background = tag.value("background");
24014 	e.cells = new Array();
24015 
24016 	if (e.style.textAlign != '') 
24017 	{
24018 		e.align = e.style.textAlign;
24019 	}
24020 	else
24021 	{
24022 		e.style.textAlign = e.align;
24023 	}
24024 
24025 
24026 	p = this.findParent_('TABLE');
24027 	if (p.tagName == 'TABLE') p.rows[p.rows.length] = e;
24028 
24029 	this.activeElement.appendChild(e);
24030 	this.activeElement = e;
24031 }
24032 //============================================================================================
24033 //			html$start_TH
24034 //============================================================================================
24035 function html$start_TH(tag)
24036 {
24037 	tag.name = 'TD';
24038 	this.start_TD(tag);
24039 }
24040 //============================================================================================
24041 //			html$start_TD
24042 //============================================================================================
24043 function html$start_TD(tag)
24044 {
24045 	var e,p,r,tbl;
24046 
24047 	e = this.createElement_(tag);
24048 
24049 	e.colspan		= html$i4(tag.value("colspan"));
24050 	e.rowspan		= html$i4(tag.value("rowspan"));
24051 
24052 	e.char			= tag.value("char");
24053 	e.charoff		= tag.value("charoff");
24054 
24055 	e.width			= tag.value("width");
24056 	e.height		= tag.value("height");
24057 
24058 	e.align			= tag.value("align");
24059 	e.valign		= tag.value("valign");
24060 	e.scope			= tag.value("scope");
24061 	e.headers		= tag.value("headers");
24062 	e.backgroundColor	= tag.value("bgcolor");
24063 	e.background		= tag.value("background");
24064 
24065 	if (e.style.textAlign != '') 
24066 	{
24067 		e.align = e.style.textAlign;
24068 	}
24069 	else
24070 	{
24071 		e.style.textAlign = e.align;
24072 	}
24073 
24074 	e.borderColorDark = tag.value("bordercolordark");
24075 	e.borderColorLight = tag.value("bordercolorlight");
24076 	e.borderColor = tag.value("bordercolor");
24077 
24078 	if (e.borderColor != '')
24079 	{
24080 		e.borderColorDark = e.borderColor;
24081 		e.borderColorLight = e.borderColor;
24082 	}	
24083 	
24084 	e.borderLeft	= 0;
24085 	e.borderRight	= 0;
24086 	e.borderTop	= 0;
24087 	e.borderBottom	= 0;
24088 	e.border        = 0;
24089 
24090 	tbl = this.findParent_('TABLE');
24091 			
24092 	if (tbl)
24093 	{
24094 		e.border = 0;
24095 		if (tbl.border > 0) e.border = 1;
24096 	
24097 		if (e.borderColorDark == '') e.borderColorDark = tbl.borderColorDark;
24098 		if (e.borderColorLight == '') e.borderColorLight = tbl.borderColorLight;
24099 	}
24100 			
24101 	if (e.style.borderLeft == '' && e.border > 0)
24102 	{
24103 		e.style.borderLeft		= e.border + ' SOLID ' + e.borderColorDark;
24104 		e.style.borderRight	= e.border + ' SOLID ' + e.borderColorLight;
24105 		e.style.borderTop		= e.border + ' SOLID ' + e.borderColorDark;
24106 		e.style.borderBottom	= e.border + ' SOLID ' + e.borderColorLight;
24107 	}
24108 
24109 	p = this.findParent_('TR');
24110 	if (p != null)
24111 	{
24112 		if (p.tagName == 'TABLE') 
24113 		{
24114 			r = this.createElement_('TR');
24115 			r.cells = new Array();
24116 			r.className = tag.value("class");
24117 			p.appendChild(r);
24118 	
24119 			p = r;	
24120 		}
24121 	
24122 		if (p.tagName == 'TR') 
24123 		{
24124 			this.activeElement = p;
24125 			e.index = p.cells.length;		// actual Index
24126 			e.colIndex = p.cells.length;	// dynamic index
24127 			p.cells[p.cells.length] = e;
24128 		}
24129 	}
24130 
24131 	if (tbl != null)
24132 	{
24133 
24134 		if (e.rowspan > 1) tbl.spanned_row = true;
24135 		if (e.colspan > 1) tbl.spanned_col = true;
24136 	}
24137 	
24138 	this.activeElement.appendChild(e);
24139 	this.activeElement = e;
24140 }
24141 //============================================================================================
24142 //			html$end_
24143 //============================================================================================
24144 function html$end_(tagName,blocked)
24145 {
24146 	var e;
24147 
24148 	if (tagName == 'IMG') return;
24149 	if (tagName == 'INPUT') return;
24150 	if (tagName == 'BR') return;
24151 
24152 	e = this.activeElement;
24153 	while (e.parentElement != null)
24154 	{
24155 		if (e.tagName == tagName)
24156 		{
24157 			 e = e.parentElement;
24158 			 this.activeElement = e;
24159 			 break;
24160 		}
24161 		if (blocked)
24162 		{
24163 			if (e.tagName == 'DIV') break;		// blocked
24164 			if (e.tagName == 'SPAN') break;		// blocked
24165 			if (e.tagName == 'TABLE') break;	// blocked
24166 			if (e.tagName == 'P') break;	// blocked
24167 		}
24168 	
24169 		e = e.parentElement;
24170 	}
24171 
24172 }
24173 //============================================================================================
24174 //			html$end_TIMELINE
24175 //============================================================================================
24176 function html$end_TIMELINE()
24177 {
24178 
24179 	var e;
24180 	e = this.activeElement;
24181 
24182 	this.end_('TIMELINE',false);
24183 
24184 }
24185 //============================================================================================
24186 //			html$end_TR
24187 //============================================================================================
24188 function html$end_TR()
24189 {
24190 
24191 	var e;
24192 
24193 	e = this.activeElement;
24194 	while (e.parentNode != null)
24195 	{
24196 		if (e.tagName == "TABLE") break;
24197 		e = e.parentNode;
24198 	}
24199 
24200 	this.activeElement = e;
24201 }
24202 //============================================================================================
24203 //			html$end_TD
24204 //============================================================================================
24205 function html$end_TD()
24206 {
24207 
24208 	var e;
24209 
24210 	e = this.activeElement;
24211 	while (e.parentNode != null)
24212 	{
24213 		if (e.tagName == "TABLE") break;
24214 		if (e.tagName == "TR") break;
24215 
24216 		e = e.parentNode;
24217 	}
24218 
24219 	this.activeElement = e;		
24220 }
24221 //============================================================================================
24222 //			html$end_TH
24223 //============================================================================================
24224 function html$end_TH()
24225 {
24226 
24227 	var e;
24228 
24229 	e = this.activeElement;
24230 	while (e.parentNode != null)
24231 	{
24232 		if (e.tagName == "TABLE") break;
24233 		if (e.tagName == "TR") break;
24234 
24235 		e = e.parentNode;
24236 	}
24237 
24238 	this.activeElement = e;		
24239 }
24240 //============================================================================================
24241 //			html$removeScriptComments_ (Required)
24242 //============================================================================================
24243 function html$removeScriptComments_(data)
24244 {
24245 	var i,list,text,line;
24246 	
24247 	text = '';
24248 	list = data.split('\r\n');
24249 	for (i=0; i &lt; list.length; ++i)
24250 	{
24251 		line = this.trim(list[i]);
24252 		if (line == '') return;
24253 		if (line.substr(0,2) == '//') continue;
24254 		if (text != '') text += '\r\n';
24255 		text += line;
24256 	}
24257 	
24258 	return text;
24259 }
24260 //============================================================================================
24261 //			html$skipScript_
24262 //============================================================================================
24263 function html$skipScript_(tag,data)
24264 {
24265 	var script, head, node;
24266 	
24267 	data = this.skipScript_A(tag,data);
24268 	
24269 
24270 	if (! tag.exists('LOAD')) return data;
24271 	this.script = this.removeScriptComments_(tag.script);
24272 	return data;
24273 }
24274 //============================================================================================
24275 //			html$find
24276 //============================================================================================
24277 function html$find(xdata,a)
24278 {
24279 	var re,i;
24280 	
24281 	re = RegExp(a,"i");	
24282 	i = xdata.search(re);
24283 	return i;
24284 }
24285 //============================================================================================
24286 //			html$skipScript_A
24287 //============================================================================================
24288 function html$skipScript_A(tag,data)
24289 {
24290 	var i,temp,script;
24291 	
24292 	tag.script = '';
24293 
24294 	if (data == '') return '';
24295 	i = this.find(data,"&lt;/scr" + "ipt>");
24296 	if (i &lt; 0) i = data.length;
24297 
24298 	temp = data.substr(0,i);
24299 	temp = temp.replace(/\003/g,' ');
24300 	tag.script += temp;
24301 
24302 	script = new Object();
24303 	script.data = temp;
24304 	script.src = tag.value('src');
24305 	this.scripts[this.scripts.length] = script;
24306 
24307 	data = data.substr(i+2);
24308 	
24309 	i = data.indexOf('>');
24310 	if (i &lt; 0) i = data.length;
24311 	data = data.substr(i+1);
24312 	return data;
24313 
24314 }
24315 //============================================================================================
24316 //			html$skipTag
24317 //============================================================================================
24318 function html$skipTag(tag,data)
24319 {
24320 	var i,name;
24321 	
24322 	if (data == '') return '';
24323 	name = '&lt;/' + tag.name + '>';
24324 
24325 	i = this.find(data,name);
24326 	if (i &lt; 0) return '';
24327 
24328 	data = data.substr(i+name.length);
24329 	return data;
24330 
24331 }
24332 
24333 //============================================================================================
24334 //			html$loadStyle_
24335 //============================================================================================
24336 function html$loadStyle_(tag,data)
24337 {
24338 	var i,temp,style;
24339 	
24340 	style = '';
24341 	tag.end = true;
24342 
24343 
24344 	while (true)
24345 	{
24346 		if (data == '') break;
24347 		i = data.indexOf('&lt;/');
24348 		if (i &lt; 0) 
24349 		{
24350 			data = '';
24351 			break;
24352 		}
24353 
24354 		temp = data.substr(i,8);
24355 		temp = temp.toLowerCase();
24356 		if (temp != '&lt;/sty' + 'le>')
24357 		{
24358 			style += data.substr(0,i+1);
24359 			data = data.substr(i+2);
24360 			continue;
24361 		}
24362 		
24363 		if (i == 0) 
24364 		{
24365 			data = data.substr(8);
24366 			break;
24367 		}
24368 			
24369 		temp = data.substr(0,i);
24370 		style += temp;
24371 		data = data.substr(i+8);	
24372 		break;
24373 	}	
24374 
24375 	this.css.load(style,this.document);
24376 
24377 	return data;
24378 }
24379 //============================================================================================
24380 //			html$loadGraphic_
24381 //============================================================================================
24382 function html$loadGraphic_(tag,data,term)
24383 {
24384 	var i,temp,graphic,xdata,nt;
24385 
24386 	graphic = '';
24387 	nt = term.length;
24388 	tag.name = 'GRAPHIC';
24389 	term = term.toLowerCase();
24390 	tag.end=true;
24391 
24392 	while (true)
24393 	{
24394 		if (data == '') break;
24395 		xdata = data.toLowerCase();
24396 		i = xdata.indexOf(term);
24397 		if (i &lt; 0) 
24398 		{
24399 			data = '';
24400 			break;
24401 		}
24402 
24403 		temp = data.substr(i,nt);
24404 		temp = temp.toLowerCase();
24405 		if (temp != term) 
24406 		{
24407 			graphic += data.substr(0,i+1);
24408 			data = data.substr(i+2);
24409 			continue;
24410 		}
24411 		
24412 		if (i == 0) 
24413 		{
24414 			data = data.substr(nt);
24415 			break;
24416 		}
24417 			
24418 		temp = data.substr(0,i);
24419 		graphic += temp;
24420 		data = data.substr(i+nt);	
24421 		break;
24422 	}	
24423 
24424 	graphic = graphic.replace(/\003/g,' ');	
24425 	this.graphic = this.resolve(graphic);
24426 	return data;
24427 }
24428 //============================================================================================
24429 //			html$loadHtml_
24430 //============================================================================================
24431 function html$loadHtml_(tag,data,term,any)
24432 {
24433 	var i,temp,text,xdata;
24434 	var xml,a,b;
24435 	var match,imatch,status;
24436 	var nt,value,ivalue;
24437 
24438 	text = '';
24439 	nt = term.length;
24440 	term = term.toLowerCase();
24441 	tag.end		= true;
24442 
24443 	while (true)
24444 	{
24445 		if (data == '') break;
24446 		xdata = data.toLowerCase();
24447 		i = xdata.indexOf(term);
24448 		if (i &lt; 0) 
24449 		{
24450 			data = '';
24451 			break;
24452 		}
24453 
24454 		temp = data.substr(i,nt);
24455 		temp = temp.toLowerCase();
24456 		if (temp != term) 
24457 		{
24458 			text += data.substr(0,i+1);
24459 			data = data.substr(i+2);
24460 			continue;
24461 		}
24462 		
24463 		if (i == 0) 
24464 		{
24465 			data = data.substr(nt);
24466 			break;
24467 		}
24468 			
24469 		temp = data.substr(0,i);
24470 		text += temp;
24471 		data = data.substr(i+nt);	
24472 		break;
24473 	}	
24474 
24475 	if (term == '&lt;/reporttable>') this.xdata		= text;
24476 	text = text.replace(/\003/g,' ');
24477 
24478 	if (arguments.length > 3)
24479 	{
24480 		this.data = text;
24481 		return data;
24482 	}
24483 
24484 	if (term ==  '&lt;/pageheader>') this.pdf.html_pageHeader	= text;
24485 	if (term ==  '&lt;/pagefooter>') this.pdf.html_pageFooter	= text;
24486 	if (term ==      '&lt;/footer>') this.footer		= text;
24487 	if (term ==      '&lt;/header>') this.header		= text;
24488 	if (term ==        '&lt;/loop>') this.loop			= text;
24489 	if (term == '&lt;/reportgroup>') this.reportgroup		= text;
24490 	if (term ==      '&lt;/column>') this.column		= text;
24491 	if (term ==       '&lt;/group>') this.group		= text;
24492 	if (term ==       '&lt;/eval>')  this.data			= text;
24493 	if (term ==       '&lt;/event>') this.event		= text;
24494 	if (term ==    '&lt;/textarea>') this.data			= text;
24495 	if (term ==      '&lt;/option>') this.data			= text;
24496 	if (term ==      '&lt;/assign>') this.data			= text;
24497 	if (term ==       '&lt;/store>') this.data			= text;
24498 	if (term ==       '&lt;/title>') this.xdata		= text;
24499 	if (term ==        '&lt;/math>')
24500 	{
24501 			xml = this.parseXml_(text);		// parse MathML
24502 			text = this.mathML(xml);		// convert to HTML
24503 			temp = text.replace(/&lt;/g,'&lt;');
24504 			temp = temp.replace(/>/g,'&gt;');
24505 
24506 			if (! this.trace_mathml) return text + data;
24507 
24508 			temp = temp.replace(/\|/g,'|bar|');
24509 			return text + '&lt;br>' + '&lt;br>&lt;font size=2 color=blue> ' + temp + '&lt;/font>&lt;br>' + data ;
24510 	}
24511 
24512 	if (term == '&lt;/resolve>') return data + this.resolve(text);
24513 	if (term !=          '&lt;/if>') return data;
24514 //-------------------------------- Conditional --------------------------------
24515 
24516 	status = false;
24517 
24518 	value = tag.keyword("value");
24519 	ivalue = parseFloat(value);
24520 
24521 	if (tag.exists('true') ) status = true;
24522 	if (tag.exists('false') ) status = false;
24523 	
24524 	if (tag.exists('equal') || tag.exists('eq')  || tag.exists('equals') )
24525 	{
24526 		match = tag.keyword("equal") + tag.keyword("equals") + tag.keyword("eq");
24527 
24528 		imatch = parseFloat(match);
24529 
24530 		if (isNaN(imatch) || isNaN(ivalue))
24531 			 status = (value == match);
24532 		else status = (ivalue == imatch);
24533 	}
24534 
24535 
24536 	if (tag.exists('lessthan')) 
24537 	{
24538 		match = tag.keyword("lessthan");
24539 		imatch = parseFloat(match);
24540 		if (isNaN(imatch) || isNaN(ivalue))
24541 			 status = (value &lt; match);
24542 		else status = (ivalue &lt; imatch);
24543 	}
24544 
24545 	if (tag.exists('lt')) 
24546 	{
24547 		match = tag.keyword("lt");
24548 		imatch = parseFloat(match);
24549 		if (isNaN(imatch) || isNaN(ivalue))
24550 			 status = (value &lt; match);
24551 		else status = (ivalue &lt; imatch);
24552 	}
24553 
24554 	if (tag.exists('gt')) 
24555 	{
24556 		match = tag.keyword("lt");
24557 		imatch = parseFloat(match);
24558 		if (isNaN(imatch) || isNaN(ivalue))
24559 			 status = (value > match);
24560 		else status = (ivalue > imatch);
24561 	}
24562 
24563 	if (tag.exists('le')) 
24564 	{
24565 		match = tag.keyword("le");
24566 		imatch = parseFloat(match);
24567 		if (isNaN(imatch) || isNaN(ivalue))
24568 			 status = (value &lt;= match);
24569 		else status = (ivalue &lt;= imatch);
24570 	}
24571 
24572 	if (tag.exists('ge')) 
24573 	{
24574 		match = tag.keyword("ge");
24575 		imatch = parseFloat(match);
24576 		if (isNaN(imatch) || isNaN(ivalue))
24577 			 status = (value >= match);
24578 		else status = (ivalue >= imatch);
24579 	}
24580 		
24581 	if (tag.exists('greaterthan')) 
24582 	{
24583 		match = tag.keyword("greaterthan");
24584 		imatch = parseFloat(match);
24585 		if (isNaN(imatch) || isNaN(ivalue))
24586 			 status = (value > match);
24587 		else status = (ivalue > imatch);
24588 	}
24589 
24590 	if (tag.exists('contains'))
24591 	{
24592 		status = false;
24593 		match = tag.keyword("contains");
24594 		if (value.indexOf(match) >= 0) status = true;
24595 	}
24596 		
24597 	if (tag.exists('blank'))
24598 	{
24599 		status = (this.trim(value) == '');
24600 	}
24601 
24602 	if (tag.exists('zero'))
24603 	{
24604 		status = (this.trim(value) == '') || (this.r8(value) == 0);
24605 	}
24606 
24607 	if (tag.exists('not')) status = ! status;
24608 
24609 	i = text.indexOf('&lt;else>');
24610 	a = text;
24611 	b = '';
24612 	if (i > 0) 
24613 	{
24614 		a = text.substr(0,i);
24615 		b = text.substr(i+6);
24616 	}
24617 	
24618 	if (  status && a != '') data = a + data;
24619 	if (! status && b != '') data = b + data;
24620 	return data;
24621 }
24622 //============================================================================================
24623 //			html$parseTag_
24624 //============================================================================================
24625 function html$parseTag_(data)
24626 {
24627 	var i,name,tag, term;
24628 
24629 	data = this.trim(data);
24630 	data = data.replace(/\= /g,'=');
24631 
24632 	term = false;
24633 	if (data.substr(data.length-1,1) == '/')
24634 	{
24635 		term = true;
24636 		data = data.substr(0,data.length-1);
24637 	}
24638 	
24639 	i = data.indexOf(' ');
24640 	if (i &lt; 0) i = data.length;
24641 
24642 	
24643 	name = data.substr(0,i);
24644 	name = this.trim(name.toUpperCase());
24645 
24646 	data = this.trim(data.substr(i+1));
24647 	tag = new htmltag$(this,name,data);
24648 
24649 	if (term) tag.end=true;
24650 	return tag;	
24651 }
24652 //============================================================================================
24653 //				htmltag$
24654 //============================================================================================
24655 function htmltag$(html,name,parameters)
24656 {
24657 	var n;
24658 	
24659 	this.html		= html;
24660 
24661 	this.name		= name;
24662 	this.onStart		= null;
24663 	this.onEnd		= null;
24664 	this.parameters	= new html_dictionary$();
24665 	this.evaluate		= htmltag$evaluate;
24666 	this.toString		= htmltag$toString;
24667 	this.start		= true;
24668 	this.end		= false;
24669 
24670 	this.value		= htmltag$value;
24671 	this.rawValue		= htmltag$rawValue;
24672 	this.exists		= htmltag$exists;
24673 	this.bool		= htmltag$bool;
24674 	this.date		= htmltag$date;
24675 	this.changeValue	= htmltag$changeValue;
24676 
24677 	this.i4		= htmltag$i4;
24678 	this.r8		= htmltag$r8;
24679 	this.keyword		= htmltag$keyword;
24680 	
24681 	if (parameters != '')
24682 	{
24683 		n = parameters.length;
24684 		if (parameters.substr(n,1) == '/')
24685 		{
24686 			this.name = name.substr(1);
24687 			this.onEnd = eval('onEnd_' + this.name);
24688 			this.end  = true;
24689 			parameters = parameters.substr(0,n-1);	
24690 		}
24691 
24692 		this.parameters.parse(parameters);
24693 	}
24694 
24695 	if (name.substr(0,1) == '/')
24696 	{
24697 		this.name  = name.substr(1);
24698 		this.start = false;
24699 		this.end   = true;
24700 		this.onEnd = this.evaluate('onEnd_' + this.name);
24701 		return;
24702 	}
24703 
24704 	this.onStart = this.evaluate('onStart_' + name);
24705 
24706 }
24707 //============================================================================================
24708 //			htmltag$keyword
24709 //===========================================================================================
24710 function htmltag$keyword(name)
24711 {
24712 	var value;
24713 
24714 	value = this.value(name);
24715 	value = value.toLowerCase();
24716 	return value;
24717 	
24718 }
24719 //============================================================================================
24720 //			htmltag$i4
24721 //===========================================================================================
24722 function htmltag$i4(name)
24723 {
24724 	var value;
24725 
24726 	value = this.value(name);
24727 	value = parseInt(value);
24728 
24729 	if (isNaN(value)) return 0;
24730 	return value;
24731 }
24732 //============================================================================================
24733 //			htmltag$r8
24734 //===========================================================================================
24735 function htmltag$r8(name)
24736 {
24737 	var value;
24738 
24739 	value = this.value(name);
24740 	value = parseFloat(value);
24741 
24742 	if (isNaN(value)) return 0;
24743 	return value;
24744 }
24745 //============================================================================================
24746 //			htmltag$bool
24747 //===========================================================================================
24748 function htmltag$bool(name)
24749 {
24750 	var value,i;
24751 
24752 	i = this.parameters.findName(name);
24753 	if (i &lt; 0) return false;
24754 	
24755 	value = this.value(name);
24756 	value = value.toLowerCase();
24757 	if (value ==     '') return true;
24758 	if (value == 'true') return true;
24759 	if (value ==  'yes') return true;
24760 	if (value ==   'on') return true;
24761 
24762 	return false;
24763 
24764 }
24765 //============================================================================================
24766 //			htmltag$value
24767 //===========================================================================================
24768 function htmltag$value(name,def)
24769 {
24770 	var i,value,save;
24771 
24772 
24773 	i = this.parameters.findName(name);
24774 
24775 
24776 	if (i >= 0)
24777 	{
24778 		value = this.parameters.values[i];
24779 		save = this.html.keepUnresolved;
24780 		this.html.keepUnresolved = false;
24781 		value = this.html.resolve(value);
24782 		this.html.keepUnresolved = save;
24783 		return value;
24784 	}
24785 
24786 	if (typeof(def) == 'undefined') return '';
24787 	return def; 
24788 }
24789 //============================================================================================
24790 //			htmltag$date
24791 //===========================================================================================
24792 function htmltag$date(name,def)
24793 {
24794 	var i,value;
24795 
24796 	value = this.value(name);
24797 	value = new Date(value);
24798 
24799 	if (isNaN(value)) return null;
24800 	return value;
24801 }
24802 //============================================================================================
24803 //			htmltag$rawValue
24804 //===========================================================================================
24805 function htmltag$rawValue(name,def)
24806 {
24807 	var i,value;
24808 
24809 	i = this.parameters.findName(name);
24810 
24811 	if (i >= 0)
24812 	{
24813 		value = this.parameters.values[i];
24814 		return value;
24815 	}
24816 
24817 	if (typeof(def) == 'undefined') return '';
24818 	return def; 
24819 }
24820 //============================================================================================
24821 //			htmltag$changeValue
24822 //===========================================================================================
24823 function htmltag$changeValue(name,value)
24824 {
24825 	var i;
24826 
24827 	i = this.parameters.findName(name);
24828 	if (i &lt; 0) return;
24829 
24830 	this.parameters.values[i] = value;
24831 }
24832 //============================================================================================
24833 //			htmltag$exists
24834 //===========================================================================================
24835 function htmltag$exists(name)
24836 {
24837 	var i;
24838 
24839 	i = this.parameters.findName(name);
24840 	if (i >= 0) return true;
24841 	return false;
24842 }
24843 //============================================================================================
24844 //			htmltag$toString
24845 //===========================================================================================
24846 function htmltag$toString()
24847 {
24848 	var text,i;
24849 	
24850 	text = 'Tag: ' + this.name;
24851 	if (this.start) text += ' start ';
24852 	if (this.end) text += ' end ';
24853 
24854 	for (i=0; i &lt; this.parameters.names.length; ++i)
24855 	{
24856 		text += '\r\n' + i + ') ' + this.parameters.names[i] + ' = ' + this.parameters.values[i];
24857 	}
24858 	
24859 	return text;
24860 }
24861 //============================================================================================
24862 //			htmltag$evaluate
24863 //============================================================================================
24864 function htmltag$evaluate(name)
24865 {
24866 	var a;
24867 
24868 try
24869 {
24870 	a = eval(name);
24871 	return a;
24872 }
24873 catch (e) { return null; }	
24874 
24875 }
24876 //============================================================================================
24877 //				dictionary
24878 //============================================================================================
24879 function html_dictionary$()
24880 {
24881 	this.parse		= html_dictionary$parse;
24882 	this.findName		= html_dictionary$findName;
24883 	this.findValue		= html_dictionary$findValue;
24884 	this.add		= html_dictionary$add;
24885 	this.trim		= html_dictionary$trim;
24886 
24887 	this.names = new Array();
24888 	this.values = new Array();
24889 }
24890 //============================================================================================
24891 //				trim
24892 //============================================================================================
24893 function html_dictionary$trim(text)
24894 {
24895      text = '' + text;
24896      text = text.replace(/\003/g,' ');
24897      return text.replace(/^\s+|\s+$/g,'');
24898 } 
24899 //============================================================================================
24900 //				html_dictionary$parse
24901 //============================================================================================
24902 function html_dictionary$parse(data)
24903 {
24904 	var i,inside,q,c,v,j,k;
24905 	var name,value,hasValue;
24906 
24907 	data = this.trim(data);
24908 	if (data == '') return;
24909 	inside = false;
24910 	name = '';
24911 	value = '';
24912 
24913 	j = -1;
24914 	k = -1;
24915 	hasValue = false;
24916 
24917 	data = data.replace('= ','=');
24918 
24919 
24920 //---------------- get Name ------------------
24921 
24922 	for (i=0; i &lt; data.length; ++i)
24923 	{
24924 		c = data.charAt(i);
24925 		if (c == '=')
24926 		{
24927 			j = i+1;
24928 			hasValue = true;
24929 			break;						
24930 			
24931 		} 
24932 
24933 		v = data.charCodeAt(i);
24934 		if (v &lt;= 32) 
24935 		{
24936 			j = i+1;
24937 			k = i + 1;
24938 			break;						
24939 		} 
24940 		
24941 		name += c;
24942 	}
24943 
24944 //---------------- get Value ------------------
24945 
24946 
24947 	if (hasValue)
24948 	{
24949 		q = data.charAt(j);
24950 		inside = false;
24951 		if ((q == '"') || (q == "'"))
24952 		{
24953 			inside = true;
24954 			j = j + 1;
24955 		}
24956 
24957 		value = '';
24958 		for (i=j; i &lt; data.length; ++i)
24959 		{
24960 			c = data.charAt(i);
24961 			if (inside)
24962 			{
24963 				if (c == q)
24964 				{
24965 					k = i+1;
24966 					break;
24967 				}
24968 			
24969 				value += c;
24970 				continue;
24971 			}
24972 
24973 			v = data.charCodeAt(i);
24974 			if (v &lt;= 32) 
24975 			{
24976 				k = i+1;
24977 				break;						
24978 			} 
24979 			
24980 			value += c;
24981 		}
24982 	}
24983 
24984 		this.add(name,value);
24985 		if (k &lt; 0) return;
24986 		
24987 		this.parse(data.substr(k));
24988 }
24989 //============================================================================================
24990 //				html_dictionary$add
24991 //============================================================================================
24992 function html_dictionary$add(name,value)
24993 {
24994 	var i;
24995 
24996 	name = this.trim(name.toLowerCase());
24997 	i = this.findName(name);
24998 	if (i >= 0)
24999 	{
25000 		this.values[i] = value;
25001 		return i;
25002 	}
25003 
25004 	if (value == '') value = 'true';
25005 
25006 	i = this.names.length;	
25007 	this.names[i] = name;
25008 	this.values[i] = value;
25009 
25010 	return i;
25011 }
25012 //============================================================================================
25013 //				html_dictionary$findName
25014 //============================================================================================
25015 function html_dictionary$findName(name)
25016 {
25017 	var i;
25018 	
25019 	name = this.trim(name.toLowerCase());
25020 	for (i=0; i &lt; this.names.length; ++i)
25021 	{
25022 		if (this.names[i] == name) return i;		
25023 	}
25024 	return -1;
25025 }
25026 //============================================================================================
25027 //				html_dictionary$findValue
25028 //============================================================================================
25029 function html_dictionary$findValue(value)
25030 {
25031 	var i,temp;
25032 	
25033 	value = this.trim(value.toLowerCase());
25034 	for (i=0; i &lt; this.names.length; ++i)
25035 	{
25036 		temp = this.trim(this.values[i]);
25037 		temp = temp.toLowerCase();
25038 		if (temp == value) return i;		
25039 	}
25040 	return -1;
25041 }
25042 //============================================================================================
25043 //			html$resize
25044 //============================================================================================
25045 function html$resize(pageWidth, pageLength)
25046 {
25047 	var width,height;
25048 
25049 	this.pageWidth		= pageWidth;
25050 	this.pageLength		= pageLength;
25051 			
25052 	this.body.offsetHeight	= 0;
25053 	this.body.offsetWidth	= 0;
25054 	
25055 	this.body.offsetLeft	= this.marginLeft;
25056 	this.body.offsetTop	= this.marginTop;
25057 
25058 	this.body.offsetWidth	= 0; 
25059 	this.body.offsetHeight	= 0;
25060 
25061 	this.body.clientWidth	= 0;
25062 	this.body.clientHeight	= 0;
25063 
25064 	this.body.setActive();
25065 
25066 	width = Math.round(this.pageWidth);
25067 	width = width - (this.marginLeft + this.marginRight);
25068 
25069 	height = Math.round(this.pageLength);
25070 	height = height - (this.marginTop + this.marginBottom);
25071 
25072 	this.body.active.maxHeight = 0;
25073 	this.body.active.maxWidth = width;
25074 	this.body.active.width = width;
25075 	this.body.active.remain = width;
25076 
25077 	this.body.place();
25078 }
25079 //============================================================================================
25080 //				htmlElement$placeChildren
25081 //============================================================================================
25082 function htmlElement$placeChildren()
25083 {
25084 	var t,next,child,remain;
25085 	
25086 	t = this;
25087 
25088 //	this.offsetWidth = 0;
25089 //	this.offsetHeight = 0;
25090 	this.clientHeight = 0;
25091 	this.clientWidth = 0;
25092 
25093 //	this.html.style.fontSize	= this.style.fontSize;
25094 //	this.html.style.textAlign	= this.style.textAlign;
25095 //	this.html.style.color	= this.style.color;
25096 //	this.html.style.letterSpacing	= this.style.letterSpacing;
25097 //	this.html.style.wordSpacing	= this.style.wordSpacing;
25098 
25099 	next = this.firstChild;
25100 
25101 	while (next != null)
25102 	{
25103 		child = next;
25104 		next = child.nextSibling;
25105 		child.place();
25106 	}
25107 
25108 	remain = this.html.body.active.maxWidth - this.xpos();
25109 	
25110 //	if (remain &lt; this.offsetWidth) this.offsetWidth = remain;
25111 //	this.justify_();
25112 }
25113 //============================================================================================
25114 //			htmlElement$updateSize_
25115 //============================================================================================
25116 function htmlElement$updateSize_(h,w)
25117 {
25118 	var t;
25119 	
25120 	t = this;
25121 	
25122 	if (this.tagName == 'DIVIDE') return;
25123 
25124 //	if (h &lt; this.style.height) h = this.style.height;
25125 //	if (w &lt; this.style.width) w = this.style.width;
25126 
25127 	if ((h > this.offsetHeight) && (! this.fixedHeight)) this.offsetHeight = h;
25128 	if ((w > this.offsetWidth)  && (! this.fixedWidth)) this.offsetWidth = w;
25129 
25130 	if (this.tagName == 'TABLE') return;
25131 	if (this.tagName == 'TD') return;
25132 	if (this.tagName == 'TH') return;
25133 	if (this.tagName == 'TR') return;
25134 	if (this.tagName == 'NUMERATOR') return;
25135 	if (this.tagName == 'BY') return;
25136 	if (this.tagName == 'RADICAL') return;
25137 	if (this.tagName == 'EXPONENT') return;
25138 
25139 	h = this.offsetTop + this.offsetHeight;
25140 	w = this.offsetLeft + this.offsetWidth;
25141 
25142 	if (this.parentNode == null) return;
25143 	if (this.tagName == 'BODY') return;
25144 
25145 	this.parentNode.updateSize_(h,w);
25146 }
25147 //============================================================================================
25148 //			htmlElement$justify_
25149 //============================================================================================
25150 function htmlElement$justify_()
25151 {
25152 	var align,valign;
25153 	
25154 	align = '';
25155 	valign = '';
25156 	this.jx = 0;
25157 	this.jy = 0;
25158 
25159 	switch (this.tagName)
25160 	{
25161 		case "DIV":
25162 			align = this.style.textAlign;
25163 			break;
25164 		case "P":
25165 			align = this.style.textAlign;
25166 			break;
25167 
25168 		case "H1": align = this.style.textAlign; break;
25169 		case "H2": align = this.style.textAlign; break;
25170 		case "H3": align = this.style.textAlign; break;
25171 		case "H4": align = this.style.textAlign; break;
25172 		case "H5": align = this.style.textAlign; break;
25173 		case "H6": align = this.style.textAlign; break;
25174 
25175 		case "SPAN":
25176 			align = this.style.textAlign;
25177 			break;
25178 		case "LI":
25179 			align = this.style.textAlign;
25180 			break;
25181 		default: return;
25182 	}
25183 
25184 	if (align != '') 
25185 	{
25186 		if (this.align == undefined) return;
25187 		align = this.align;
25188 	}
25189 	
25190 	if (align != '') 
25191 	{
25192 //		this.xjust = this.align_dx(align,this.active.maxWidth,this.offsetWidth);
25193 	}
25194 }
25195 //============================================================================================
25196 //			htmlElement$dy
25197 //============================================================================================
25198 function htmlElement$dy()
25199 {
25200 	switch (this.tagName)
25201 	{
25202 	case "P":	return 10;
25203 	case "OL":	return 10;
25204 	case "UL":  return 10;
25205 	case "BR":  return 8;
25206 	}
25207 
25208 	return 2;
25209 }
25210 //============================================================================================
25211 //			htmlElement$setActive
25212 //============================================================================================
25213 function htmlElement$setActive()
25214 {
25215 
25216 
25217 	this.offsetHeight		= 0;
25218 	this.offsetWidth		= 0;
25219 
25220 	this.active.xpos		= 0;
25221 	this.active.ypos		= 0;
25222 	this.active.xmax		= 0;
25223 	this.active.marginLeft		= 0;
25224 	this.active.marginRight		= 0;
25225 	this.active.leftBottom		= 0;
25226 	this.active.rightBottom		= 0;
25227 	this.active.rowHeight		= 0;
25228 	this.active.remain		= 0;
25229 	this.active.width		= 0;
25230 
25231 	this.active.colCount		= 0;
25232 	this.active.rowCount		= 0;
25233 	this.active.rows		= new Array();
25234 	
25235 	this.active.Lcount		= 0;
25236 	this.active.Rcount		= 0;
25237 }
25238 //============================================================================================
25239 //			htmlElement$setSize
25240 //============================================================================================
25241 function htmlElement$setSize()
25242 {
25243 	var p,t;
25244 
25245 	var NODE_TEXT = 3;
25246 	var NODE_TAG  = 1;
25247 	var height,width,t,scl,ch;
25248 	var e,px,py,fixedHeight,fixedWidth,xwidth,tagName;
25249 
25250 	height = 0;
25251 	width = 0;
25252 	
25253 	this.offsetTop = 0;
25254 	this.offsetLeft = 0;
25255 
25256 	this.setActive();
25257 
25258 	t = this;
25259 	tagName = this.tagName;
25260 
25261 	fixedHeight = false;
25262 	fixedWidth = false;
25263 
25264 	if (this.fixed_width) width = this.iwidth;
25265 	if (this.fixed_height) height = this.iheight;
25266 	if (this.percent_width) width = Math.round(this.parentNode.active.maxWidth * (this.iwidth / 100));
25267 	if (this.percent_height) height = Math.round(this.parentNode.offsetHeight * (this.iheight / 100));
25268 
25269 	if (this.fixed_width) fixedWidth = true;
25270 	if (this.fixed_height) fixedHeight = true;
25271 	if (this.percent_width) fixedWidth = true;
25272 	if (this.percent_height) fixedHeight = true;
25273 
25274 	if (width &lt; 0) width = 0;
25275 	if (height &lt; 0) height = 0;
25276 
25277 	this.fixedHeight = fixedHeight;
25278 	this.fixedWidth = fixedWidth;
25279 
25280 	xwidth = this.html.body.active.maxWidth;
25281 	if (this.parentNode != null)
25282 	{
25283 		xwidth = this.parentNode.active.maxWidth;
25284 		this.active.maxWidth = xwidth - (this.paddingLeft + this.paddingRight);
25285 	}
25286 	else
25287 	{
25288 		this.active.maxWidth = xwidth - (this.paddingLeft + this.paddingRight);
25289 	
25290 	}
25291 
25292 	switch (this.tagName)
25293 	{			
25294 	case "IFRAME":
25295 				    if ((height > 0) || (width > 0)) 
25296 				    { 
25297 						this.offsetHeight = height;
25298 						this.offsetWidth  = width;
25299 					}
25300 
25301 				this.setMargin();
25302 				return;					
25303 
25304 	case "BODY":
25305 				this.setMargin();
25306 				return;					
25307 
25308 	case "FRAMESET":
25309 				if (this.parentElement != 'FRAMESET') 
25310 				{
25311 					if (fixedWidth) 
25312 					{
25313 						 this.offsetWidth = width;
25314 					}
25315 					else this.offsetWidth = xwidth;
25316 					
25317 					if (fixedHeight) 
25318 					{
25319 						this.offsetHeight = height;
25320 					}
25321 					else this.offsetHeight = this.html.body.offsetHeight;
25322 				}
25323 				this.setMargin();
25324 				return;					
25325 
25326 	case "INPUT":
25327 				this.offsetHeight = height + this.paddingTop + this.paddingBottom;
25328 				this.offsetWidth  = width + this.paddingLeft + this.paddingRight;
25329 				this.setMargin();
25330 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25331 				return;					
25332 
25333 	case "TEXTAREA":
25334 				this.offsetHeight = height;
25335 				this.offsetWidth  = width;
25336 				this.setMargin();
25337 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25338 				return;					
25339 
25340 	case "SELECT":
25341 				this.offsetHeight = height + 4;
25342 				this.offsetWidth  = width;
25343 				this.setMargin();
25344 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25345 				return;					
25346 
25347 	case "IMG":
25348 				if (this.imageSize == null)
25349 				{
25350 					if (width &lt;= 0) width = 28;
25351 					if (height &lt;= 0) height = 30;
25352 					this.font.size = 6;
25353 					this.html.setFontName('arial');
25354 					width += this.wordWidth(this.alt) + 4;
25355 				}
25356 
25357 				if (this.imageSize != null)
25358 				{
25359 					if ((height > 0) || (width > 0))
25360 					{ 
25361 	
25362 						if ((width > 0) && (height &lt;= 0))
25363 						{
25364 							scl = this.imageSize.width / this.imageSize.height;
25365 							height = Math.round(width / scl);		
25366 						}
25367 						else
25368 						if ((width &lt;= 0) && (height > 0))
25369 						{
25370 								scl = this.imageSize.width / this.imageSize.height;
25371 								width = Math.round(height * scl);
25372 						}
25373 					}
25374 					else
25375 					{
25376 						height = this.imageSize.height;
25377 						width = this.imageSize.width;				
25378 					}
25379 				}	
25380 	
25381 				this.offsetHeight = height;
25382 				this.offsetWidth  = width;
25383 				this.active.maxWidth = width;
25384 				this.setMargin();
25385 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25386 				return;					
25387 
25388 	case "GRAPHIC": 
25389 				if ((this.style.position == 'relative' || this.style.position == 'absolute'))
25390 				{
25391 					this.offsetHeight = 0;
25392 					this.offsetWidth  = 0;
25393 				}
25394 				else				
25395 				if ((height > 0) || (width > 0))
25396 					{
25397 						this.offsetHeight = height;
25398 						this.offsetWidth  = width;
25399 					}
25400 				this.setMargin();
25401 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25402 				return;					
25403 
25404 	case "DIV":	
25405 				this.fixedHeight = fixedHeight;
25406 				this.fixedWidth = fixedWidth;
25407 		
25408 				this.offsetHeight = height;			
25409 			
25410 				if (width == 0) width = this.parentNode.active.maxWidth;
25411 				this.offsetWidth = width;
25412 				if (this.style.float == 'left') this.offsetWidth = 0;
25413 				if (this.style.float == 'right') this.offsetWidth = 0;
25414 
25415 				this.active.width = width;
25416 				this.active.remain = width;
25417 				this.active.maxWidth = width;
25418 
25419 				this.setMargin();
25420 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25421 
25422 				return;					
25423 	case "LABEL":	
25424 				this.offsetHeight = height;
25425 				this.offsetWidth  = width;
25426 				this.active.width = width;
25427 
25428 				this.setMargin();
25429 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25430 				return;					
25431 
25432 	case "P":	
25433 				this.offsetHeight = height;
25434 				this.offsetWidth  = width;
25435 				this.active.width = width;
25436 
25437 				this.setMargin();
25438 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25439 				return;					
25440 
25441 	case "A":	
25442 				this.offsetHeight = height;
25443 				this.offsetWidth  = width;
25444 				this.active.width = width;
25445 				this.setMargin();
25446 //				this.updateSize_(this.offsetHeight,this.offsetWidth);
25447 				return;					
25448 
25449 
25450 	case "DIVIDE":
25451 				this.offsetHeight = height;
25452 				this.offsetWidth  = width;
25453 				this.active.width = width;
25454 
25455 				this.setMargin();
25456 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25457 				return;					
25458 
25459 	case "CALENDAR":
25460 
25461 //				if (width == 0) width = this.parentNode.offsetWidth;
25462 //				if (height == 0) Math.round(this.parentNode.offsetHeight);
25463 				
25464 				this.offsetHeight = height;
25465 				this.offsetWidth  = width;
25466 				this.active.width = width;
25467 
25468 				this.setMargin();
25469 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25470 				return;					
25471 	case "TIMELINE":
25472 				if (width == 0) width = this.parentNode.active.maxWidth;
25473 				if (height == 0) height = Math.round(this.parentNode.offsetHeight);
25474 				
25475 				this.offsetHeight = height;
25476 				this.offsetWidth  = width;
25477 				this.active.width = width;
25478 				this.setMargin();
25479 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25480 				return;					
25481 	case "SCHEDULE":
25482 				if (width == 0) width = this.parentNode.offsetWidth;
25483 				if (height == 0) height = Math.round(this.parentNode.offsetHeight);
25484 				
25485 				this.offsetHeight = height;
25486 				this.offsetWidth  = width;
25487 				this.active.width = width;
25488 				this.setMargin();
25489 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25490 				return;					
25491 	case "NUMERATOR":
25492 				this.offsetHeight = height;
25493 				this.offsetWidth  = width;
25494 				this.active.width = width;
25495 				this.active.remain = width;
25496 				this.setMargin();
25497 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25498 				return;					
25499 	case "BY":
25500 				this.offsetHeight = height;
25501 				this.offsetWidth  = width;
25502 				this.active.width = width;
25503 				this.active.remain = width;
25504 				this.setMargin();
25505 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25506 				return;					
25507 
25508 	case "SPAN":
25509 				this.fixedHeight = fixedHeight;
25510 				this.fixedWidth = fixedWidth;
25511 			
25512 				this.offsetHeight = height;
25513 				this.offsetWidth  = width;
25514 				this.active.width = width;
25515 				this.active.remain = width;
25516 
25517 				this.setMargin();
25518 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25519 				return;
25520 
25521 	case "EVAL":
25522 				this.fixedHeight = fixedHeight;
25523 				this.fixedWidth = fixedWidth;
25524 			
25525 				this.offsetHeight = height;
25526 				this.offsetWidth  = width;
25527 				this.active.width = width;
25528 				this.active.remain = width;
25529 
25530 				this.setMargin();
25531 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25532 				return;
25533 
25534 	case "SUB":
25535 				this.offsetHeight = height;
25536 				this.offsetWidth  = width;
25537 				this.active.width = width;
25538 				this.active.remain = width;
25539 				this.setMargin();
25540 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25541 				return;
25542 	case "SUP":
25543 				this.offsetHeight = height;
25544 				this.offsetWidth  = width;
25545 				this.active.width = width;
25546 				this.active.remain = width;
25547 				this.setMargin();
25548 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25549 				return;
25550 
25551 	case "ROOT":
25552 				this.offsetHeight = height;
25553 				this.offsetWidth  = width;
25554 				this.active.width = width;
25555 				this.active.remain = width;
25556 				this.setMargin();
25557 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25558 				return;
25559 
25560 	case "INTEGRAL":
25561 				this.offsetHeight = height;
25562 				this.offsetWidth  = width;
25563 				this.active.width = width;
25564 				this.active.remain = width;
25565 				this.setMargin();
25566 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25567 				return;
25568 
25569 	case "QUANTITY":
25570 				this.offsetHeight = height;
25571 				this.offsetWidth  = width;
25572 				this.active.width = width;
25573 				this.active.remain = width;
25574 				this.setMargin();
25575 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25576 				return;
25577 
25578 	case "COLUMN":
25579 				this.offsetHeight = height;
25580 				this.offsetWidth  = width;
25581 				this.active.width = width;
25582 				this.active.remain = width;
25583 				this.active.maxWidth = width;
25584 				this.setMargin();
25585 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25586 				return;
25587 
25588 	case "MATRIX":
25589 				this.offsetHeight = height;
25590 				this.offsetWidth  = width;
25591 				this.active.width = width;
25592 				this.setMargin();
25593 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25594 				return;
25595 
25596 	case "EXPONENT":
25597 				width = 9999999;
25598 				this.offsetHeight = height;
25599 				this.offsetWidth  = 0;
25600 				this.active.width = width;
25601 				this.setMargin();
25602 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25603 				return;
25604 
25605 	case "RADICAL":
25606 				this.offsetHeight = height;
25607 				this.offsetWidth  = 0;
25608 				this.active.width = 0;
25609 				this.setMargin();
25610 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25611 				return;
25612 
25613 	
25614 	case "TABLE":
25615 //				this.fixedWidth = false;
25616 				this.fixedHeight = false;
25617 
25618 				this.offsetHeight = 0;
25619 				this.offsetWidth  = width;
25620 				this.active.width = width;
25621 				this.active.maxWidth = width;
25622 				this.active.remain = width;
25623 
25624 				this.setMargin();
25625 //				this.updateSize_(this.offsetHeight,this.offsetWidth);
25626 				return;
25627 			
25628 	  case "TR": 
25629 				this.offsetHeight = height;
25630 				this.fixedWidth = false;
25631 				break;
25632 	  case "TD","TH": 
25633 				this.offsetHeight = height;
25634 				this.active.remain = width;
25635 				break;					
25636 
25637 //				this.fixedWidth = false;
25638 //			this.fixedHeight = false;
25639 				break;
25640 			
25641 	case "FONT":
25642 				this.offsetHeight = 0;
25643 				this.offsetWidth  = 0;
25644 				this.active.maxWidth = width;
25645 				this.active.width = width;
25646 				this.setMargin();
25647 				return;					
25648 	case "CENTER":
25649 				this.active.maxWidth = this.parentNode.active.maxWidth;
25650 				this.offsetHeight = 0;
25651 				this.offsetWidth  = this.active.maxWidth;
25652 				this.active.width = width;
25653 				this.setMargin();
25654 				return;					
25655 
25656 
25657 	case "HR":   
25658 				if (width == 0) width = this.parentNode.active.maxWidth;
25659 				this.offsetHeight = 0;   // 4
25660 				this.offsetWidth  = width;
25661 				this.active.width = width;
25662 				this.active.maxWidth = width;
25663 				this.setMargin();
25664 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25665 				return;					
25666 
25667 	case "BLOCKQUOTE":
25668 				width = this.parentNode.active.maxWidth - 20;
25669 				this.offsetHeight = 0;
25670 				this.offsetWidth  = width;
25671 				this.active.width = width;
25672 				this.active.maxWidth = width;
25673 				this.setMargin();
25674 				return;					
25675 
25676 	case "H1":
25677 				this.offsetHeight = height;
25678 				this.offsetWidth  = width;
25679 				this.active.width = width;
25680 				this.setMargin();
25681 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25682 				return;					
25683 
25684 	case "H2":
25685 				this.offsetHeight = height;
25686 				this.offsetWidth  = width;
25687 				this.active.width = width;
25688 				this.setMargin();
25689 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25690 				return;					
25691 
25692 	case "H3":
25693 				this.offsetHeight = height;
25694 				this.offsetWidth  = width;
25695 				this.active.width = width;
25696 				this.setMargin();
25697 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25698 				return;					
25699 
25700 	case "H4":
25701 				this.offsetHeight = height;
25702 				this.offsetWidth  = width;
25703 				this.active.width = width;
25704 				this.setMargin();
25705 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25706 				return;					
25707 
25708 	case "H5":
25709 				this.offsetHeight = height;
25710 				this.offsetWidth  = width;
25711 				this.active.width = width;
25712 				this.setMargin();
25713 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25714 				return;					
25715 
25716 	case "H6":
25717 				this.offsetHeight = height;
25718 				this.offsetWidth  = width;
25719 				this.active.width = width;
25720 				this.setMargin();
25721 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25722 				return;	
25723 
25724 	case "UL":
25725 				this.offsetHeight = 0;
25726 				this.offsetWidth  = 0;
25727 				this.active.width = width;
25728 				this.active.maxWidth = xwidth - 20;
25729 				this.setMargin();
25730 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25731 				return;					
25732 	case "OL":
25733 				this.offsetHeight = 0;
25734 				this.offsetWidth  = 0;
25735 				this.active.width = width;
25736 				this.active.maxWidth = xwidth - 20;
25737 				this.setMargin();
25738 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25739 				return;					
25740 	case "LI":
25741 				this.offsetHeight = 0;
25742 				this.offsetWidth  = width;
25743 				this.active.width = width;
25744 				this.active.maxWidth -= 20;
25745 				this.setMargin();
25746 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25747 				return;					
25748 
25749 	case "BR":
25750 				this.offsetHeight = this.parentNode.font.size * 1.2;
25751 				this.offsetWidth  = 0;
25752 				this.updateSize_(this.offsetHeight,this.offsetWidth);
25753 				return;					
25754 	}
25755 
25756 	this.offsetWidth  = 0;
25757 	this.active.width = width;
25758 	this.active.remain = width;
25759 	this.setMargin();
25760 //				this.updateSize_(this.offsetHeight,this.offsetWidth);
25761 
25762 	return;
25763 }
25764 //============================================================================================
25765 //			htmlElement$setMargin
25766 //============================================================================================
25767 function htmlElement$setMargin()
25768 {	
25769 	var e,b;
25770 	
25771 	e = this;
25772 	if (! this.style) return;
25773 
25774 	b = this.getBorder_();
25775 
25776 	this.marginLeft   = this.html.getSize(this.style.marginLeft,this);
25777 	this.marginRight  = this.html.getSize(this.style.marginRight,this);
25778 	this.marginTop    = this.html.getSize(this.style.marginTop,this);
25779 	this.marginBottom = this.html.getSize(this.style.marginBottom,this);
25780 
25781 //	this.marginLeft	= (this.marginLeft / this.html.bpi) * 72;
25782 //	this.marginRight	= (this.marginRight / this.html.bpi) * 72;
25783 //	this.marginTop		= (this.marginTop / this.html.bpi) * 72;
25784 //	this.marginBottom	= (this.marginBottom / this.html.bpi) * 72;
25785 	
25786 	this.paddingLeft   = this.html.getSize(this.style.paddingLeft,this);
25787 	this.paddingRight  = this.html.getSize(this.style.paddingRight,this);
25788 	this.paddingTop    = this.html.getSize(this.style.paddingTop,this);
25789 	this.paddingBottom = this.html.getSize(this.style.paddingBottom,this);
25790 
25791 //	this.paddingLeft	= (this.paddingLeft / this.html.bpi) * 72;
25792 //	this.paddingRight	= (this.paddingRight / this.html.bpi) * 72;
25793 //	this.paddingTop	= (this.paddingTop / this.html.bpi) * 72;
25794 //	this.paddingBottom	= (this.paddingBottom / this.html.bpi) * 72;
25795 	
25796 	this.borderLeft	= b.sizeLeft;
25797 	this.borderRight	= b.sizeRight;
25798 	this.borderTop		= b.sizeTop;
25799 	this.borderBottom	= b.sizeBottom;
25800 
25801 //	this.borderLeft	= (this.borderLeft / this.html.bpi) * 72;
25802 //	this.borderRight	= (this.borderRight / this.html.bpi) * 72;
25803 //	this.borderTop		= (this.borderTop / this.html.bpi) * 72;
25804 //	this.borderBottom	= (this.borderBottom / this.html.bpi) * 72;
25805 	
25806 	this.active.maxWidth -= this.marginRight + this.marginLeft + this.paddingLeft + this.paddingRight + this.borderLeft + this.borderRight;
25807 
25808 	this.offsetWidth  += this.borderLeft + this.borderRight;
25809 	this.offsetHeight += this.borderTop + this.borderBottom;	
25810 
25811 	if (this.active.width > this.active.maxWidth) this.active.width = this.active.maxWidth;
25812 	this.active.remain  = this.active.maxWidth;
25813 
25814 	this.active.ypos = 0;
25815 	this.active.xpos = 0;
25816 }
25817 //============================================================================================
25818 //			htmlElement$place
25819 //============================================================================================
25820 function htmlElement$place()
25821 {
25822 	var e,c,p;
25823 	var tagName,text;
25824 	
25825 	e = this;
25826 
25827 	if (e.style)
25828 	if (e.style.display == 'none')
25829 	{
25830 		e.offsetHeight = 0;
25831 		e.offsetWidth = 0;
25832 		return;
25833 	}
25834 
25835 	tagName = e.tagName;
25836 
25837 	this.setSize();
25838 
25839 	switch (this.tagName)
25840 	{	
25841 		case "PAGEBREAK": 
25842 					  this.html.body.placeDone_();
25843 					  this.html.body.setActive();
25844 					  return;
25845 
25846 		case "#TEXT":
25847 					text = this.text;
25848 					  this.place_text();
25849 					  return;
25850 					  
25851 		case "IMG":   this.place_IMG(); 
25852 					  return;
25853 
25854 		case "P":	  
25855 					  this.place_P();
25856 					  this.placeChildren();
25857 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25858 					
25859 					  this.placeDone_();	
25860 					  return;
25861 
25862 		case "EVAL":	
25863 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25864 					  this.placeDone_();	
25865 					  return;
25866 
25867 		case "DIV":
25868 					  this.placeChildren();
25869 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25870 					  this.placeDone_();	
25871 					  return;
25872 
25873 		case "LABEL":
25874 					  this.placeChildren();
25875 					  
25876 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25877 					  this.placeDone_();	
25878 					  return;
25879 					  
25880 	case "GRAPHIC":   this.place_GRAPHIC(); 
25881 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25882 					  this.placeDone_();
25883 					  return;
25884 
25885 	  case "GROUP":   this.place_GROUP(); 
25886 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25887 					  this.placeDone_();
25888 					  return;
25889 
25890 		case "BR":	  this.place_BR(); 
25891 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25892 					  this.placeDone_();
25893 					  return;
25894 
25895 	case "REPORT":
25896 					  this.parentNode.newRow_();
25897 					  break; 
25898 
25899 		case "HR":    this.place_HR();
25900 					  return;
25901 
25902 	  case "INPUT":   this.place_INPUT(); 
25903 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25904 					  this.placeDone_();
25905 					  return;
25906 
25907      case "SELECT":   this.place_SELECT(); 
25908 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25909 					  this.placeDone_();
25910 					  return;
25911 
25912    case "TEXTAREA":   this.place_TEXTAREA(); 
25913 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25914 					  this.placeDone_();
25915 					  return;
25916 
25917 		case "TR":	  return;
25918 
25919 		case "TD":	  return;
25920 		case "TH":    return;
25921 
25922 	case "FRAME":	  this.place_FRAME();
25923 					  return;
25924 
25925 	case "IFRAME":	  this.place_IFRAME();	
25926 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25927 					  return;
25928 
25929 	case "TABLE":
25930 					  this.initTable();
25931 					  this.place_TABLE();	
25932 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25933 					  return;
25934 
25935 	case "DIVIDE":  this.placeChildren();
25936 					  this.place_DIVIDE();
25937 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25938 					  this.placeDone_();
25939 					  return;
25940 
25941 	case "COLUMN":  this.placeChildren();
25942 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25943 					  this.placeDone_();
25944 					  return;
25945 
25946 	case "RAISE":	  this.placeChildren();
25947 					  this.place_RAISE();
25948 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25949 					  this.placeDone_();
25950 					  return;
25951 
25952 	case "FRAMESET":  this.place_FRAMESET();
25953 					  return;
25954 
25955 	case "CALENDAR":
25956 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25957 					  return;
25958 
25959 	case "TIMELINE":  this.placeChildren();
25960 					  this.place_TIMELINE();
25961 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25962 					  this.placeDone_();
25963 					  return;
25964 
25965 	case "SCHEDULE":  this.placeChildren();
25966 					  this.place_SCHEDULE();
25967 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25968 					  this.placeDone_();
25969 					  return;
25970 
25971 	case "ROOT":  this.placeChildren();
25972 					  this.place_ROOT();
25973 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25974 					  this.placeDone_();
25975 					  return;
25976 
25977 	case "QUANTITY":  this.placeChildren();
25978 					  this.place_QUANTITY();
25979 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25980 					  this.placeDone_();
25981 					  return;
25982 
25983 	case "MATRIX": this.placeChildren();
25984 					  this.place_MATRIX();
25985 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25986 					  this.placeDone_();
25987 					  return;
25988 
25989 	case "INTEGRAL":  this.placeChildren();
25990 					  this.place_INTEGRAL();
25991 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25992 					  this.placeDone_();
25993 					  return;
25994 
25995 	case "SUMMATION":  this.placeChildren();
25996 					  this.place_SUMMATION();
25997 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
25998 					  this.placeDone_();
25999 					  return;
26000 
26001 		case "LI":   this.placeChildren();
26002 					  this.place_LI();
26003 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
26004 					  this.placeDone_();
26005 					  return;
26006 
26007 		case "SUB":   this.placeChildren();
26008 					  this.place_SUB();
26009 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
26010 					  this.placeDone_();
26011 					  return;
26012 
26013 		case "SUP":   this.placeChildren();
26014 					  this.place_SUP();
26015 					  if (this.parentNode != null) this.parentNode.positionChild_(this);
26016 					  this.placeDone_();
26017 					  return;
26018 
26019 	case "BLOCKQUOTE":    this.place_BLOCKQUOTE(); 
26020 					  break;
26021 		case "OL":    this.place_UL(); 
26022 					  break;
26023 		case "UL":    this.place_UL(); 
26024 					  break;
26025 
26026 		case "H1":    this.font.size = 16; 
26027 					  break;
26028 		case "H2":    this.font.size = 14; 
26029 					  break;
26030 		case "H3":    this.font.size = 12; 
26031 					  break;
26032 		case "H4":    this.font.size = 12; 
26033 					  break;
26034 		case "H5":    this.font.size = 11; 
26035 					  break;
26036 		case "H6":    this.font.size = 24; 
26037 					  break;
26038 	}
26039 
26040 	this.placeChildren();
26041 	if (! this.isNode()) return;
26042 	if (this.parentNode != null) this.parentNode.positionChild_(this);
26043 	this.placeDone_();	
26044 }
26045 //============================================================================================
26046 //			htmlElement$place_SUB
26047 //============================================================================================
26048 function htmlElement$place_SUB()
26049 {
26050 	var e,n,d,p,ch,dy;
26051 
26052 	p = this.parentNode;
26053 	e = this;
26054 	
26055 	ch = this.charHeight();
26056 	dy = ch - Math.round(ch * 0.25);
26057 
26058 	e.baseY = (ch - dy);
26059 	e.offsetHeight = this.active.rowHeight + dy;
26060 	e.offsetWidth  = this.active.xmax;
26061 }
26062 //============================================================================================
26063 //			htmlElement$place_SUP
26064 //============================================================================================
26065 function htmlElement$place_SUP()
26066 {
26067 	var e,n,d,p,ch,dy;
26068 
26069 	p = this.parentNode;
26070 	e = this;
26071 
26072 	ch = this.charHeight();
26073 	dy = ch - Math.round(ch * 0.3);
26074 
26075 	e.baseY			= (ch - dy);
26076 	e.offsetHeight  = this.active.rowHeight + (ch - dy);
26077 	e.offsetWidth   = this.active.xmax;
26078 }
26079 //============================================================================================
26080 //		htmlElement$place_CALENDAR
26081 //============================================================================================
26082 function htmlElement$place_CALENDAR()
26083 {
26084 }
26085 //============================================================================================
26086 //		htmlElement$place_TIMELINE
26087 //============================================================================================
26088 function htmlElement$place_TIMELINE()
26089 {
26090 }
26091 //============================================================================================
26092 //		htmlElement$place_P
26093 //============================================================================================
26094 function htmlElement$place_P()
26095 {
26096 	var p;
26097 
26098 	p = this.parentNode;
26099 	if (p.active.colCount > 0)
26100 	{
26101 		p.newRow_();
26102 	}
26103 
26104 	if (p.active.rows.length > 0) this.marginTop = this.font.size;
26105 		
26106 //	if ((this.style.margin == '') && (this.style.marginBottom == '')) this.marginBottom = this.font.size;
26107 //	if ((this.style.margin == '') && (this.style.marginTop == '')) this.marginTop = this.font.size;
26108 }
26109 //============================================================================================
26110 //		htmlElement$place_SCHEDULE
26111 //============================================================================================
26112 function htmlElement$place_SCHEDULE()
26113 {
26114 	var e,n,d,p;
26115 
26116 	p = this.parentNode;
26117 	e = this;
26118 }
26119 //============================================================================================
26120 //		htmlElement$place_FRAME
26121 //============================================================================================
26122 function htmlElement$place_FRAME()
26123 {
26124 	var e;
26125 	
26126 	e = this;
26127 
26128 	if (e.frameBorder > 0) 
26129 	{
26130 		e.style.borderLeft		= '1 solid black';
26131 		e.style.borderRight	= '1 solid black';
26132 		e.style.borderTop		= '1 solid black';
26133 		e.style.borderBottom	= '1 solid black';
26134 	}
26135 
26136 	this.setMargin();
26137 }
26138 //============================================================================================
26139 //		htmlElement$place_IFRAME
26140 //============================================================================================
26141 function htmlElement$place_IFRAME()
26142 {
26143 }
26144 //============================================================================================
26145 //			html$place_FRAMESET
26146 //============================================================================================
26147 function htmlElement$place_FRAMESET()
26148 {
26149 	var list;
26150 	var i,j,obj,width,used,usedCount;
26151 	var size,list,n,scale;
26152 	var height, xpos,ypos,def;
26153 	var e,frame;
26154 	var text,value,remain;
26155 
26156 	e = this;
26157 
26158 	width = this.parentNode.offsetWidth;
26159 	height = this.parentNode.offsetHeight;
26160 	if (height == 0) height = this.html.body.active.maxHeight;
26161 	if (height &lt; 100) height = 10.5 * 72;
26162 
26163 	if (this.offsetWidth == 0) this.offsetWidth = width;
26164 	if (this.offsetHeight == 0) this.offsetHeight = height;
26165 
26166 	this.offsetWidth = Math.round(this.offsetWidth);
26167 	this.offsetHeight = Math.round(this.offsetHeight);
26168 	
26169 	this.values = new Array();		
26170 
26171 	used = 0;
26172 	if (this.rowText != '')		// by row
26173 	{
26174 		this.byColumn = false;
26175 		list = this.rowText.split(',');
26176 		size = this.offsetHeight;
26177 	}
26178 	else						// by column
26179 	{
26180 		this.byColumn = true;
26181 		list = this.colText.split(',');
26182 		size = this.offsetWidth;
26183 	}	
26184 
26185 //----------------------------------------
26186 
26187 	used = 0;
26188 	usedCount = 0;
26189 	for (i=0; i &lt; this.frames.length; ++i)
26190 	{
26191 		obj = new Object();
26192 		obj.value = 0;
26193 		obj.fixed = false;
26194 		this.values[i] = obj;
26195 
26196 		if (i >= list.length) continue;
26197 		text = list[i];
26198 		if (text == '') continue;
26199 		if (text == '*') continue;
26200 		value = parseInt(text);
26201 		if (isNaN(value)) continue;
26202 
26203 		obj.fixed = true;
26204 		if (text.indexOf('%') >= 0) 
26205 			obj.value = Math.floor(height * (value / 100));
26206 		else	obj.value = value;
26207 		used += obj.height;
26208 	}
26209 		
26210 	remain = size - used;
26211 	if (remain &lt; 0)
26212 	{
26213 		scale = size / (-used);
26214 		for (i=0; i &lt; this.values.length; ++i)
26215 		{
26216 			obj = this.values[i];
26217 			obj.value = Math.floor(obj.value * scale);
26218 		}
26219 		used = size;
26220 	}
26221 
26222 	n = this.values.length - usedCount;
26223 	if (n > 0)
26224 	{
26225 		def = Math.floor(remain / n);
26226 		for (i=0; i &lt; this.values.length; ++i)
26227 		{
26228 			obj = this.values[i];
26229 			if (obj.fixed) continue;
26230 			obj.value = def;
26231 		}
26232 	}		
26233 
26234 //------------------------ set columns ---------------------------
26235 
26236 	if (this.byColumn)
26237 	{
26238 		xpos = 0;
26239 		for (i=0; i &lt; this.frames.length; ++i)
26240 		{
26241 			frame = this.frames[i];
26242 			obj = this.values[i];
26243 			frame.offsetHeight = this.offsetHeight;
26244 			frame.offsetWidth = obj.value;
26245 			frame.offsetTop = 0;
26246 			frame.offsetLeft = xpos;
26247 			xpos = frame.offsetLeft + frame.offsetWidth;
26248 			if (frame.tagName == 'FRAME') frame.place_FRAME();
26249 			if (frame.tagName == 'FRAMESET') frame.place_FRAMESET();
26250 		}
26251 	}
26252 	else
26253 	{
26254 		ypos = 0;
26255 		for (i=0; i &lt; this.frames.length; ++i)
26256 		{
26257 			frame = this.frames[i];
26258 			obj = this.values[i];
26259 			frame.offsetHeight = obj.value;
26260 			frame.offsetWidth = this.offsetWidth;
26261 			frame.offsetTop = ypos;
26262 			frame.offsetLeft = 0;
26263 			ypos = frame.offsetTop + frame.offsetHeight;
26264 			if (frame.tagName == 'FRAME') frame.place_FRAME();
26265 			if (frame.tagName == 'FRAMESET') frame.place_FRAMESET();
26266 		}	
26267 	}
26268 }
26269 //============================================================================================
26270 //		htmlElement$place_DIVIDE
26271 //============================================================================================
26272 function htmlElement$place_DIVIDE()
26273 {
26274 	var e,n,d,p,ch;
26275 	var maxHeight,maxWidth;
26276 	var nw,nh;
26277 	var dw,dh;
26278 	var height,dy,dx;
26279 
26280 	p = this.parentNode;
26281 	e = this;
26282 	n = e.numerator;
26283 	d = e.by;
26284 
26285 	if (e.numerator == null && e.by == null) return;
26286 	
26287 	nw = 0;
26288 	nh = 0;
26289 	dw = 0;
26290 	dh = 0;
26291 
26292 	if (e.numerator   != null) nw = n.offsetWidth;
26293 	if (e.numerator   != null) nh = n.offsetHeight;
26294 
26295 	if (e.by != null) dw = e.by.offsetWidth;
26296 	if (e.by != null) dh = e.by.offsetHeight;
26297 
26298 	maxWidth = Math.max(nw,dw);
26299 	maxHeight = Math.max(nh,dh);
26300 
26301 	height = nh + dh + 4 + e.lineWeight;
26302 	dy = nh + 2;
26303 	ch = this.charHeight();
26304 
26305 	e.offsetHeight = height;
26306 	e.offsetWidth = maxWidth;
26307 
26308 	e.topYpos = Math.round(ch * 0.75);
26309 	e.botYpos = height - ch;
26310 	e.baseYpos = nh + (ch * 0.5);
26311 	e.lineYpos = nh + 2 + e.lineWeight;
26312 	
26313 	if (e.numerator != null)
26314 	{
26315 		dx = Math.round(maxWidth - nw) / 2;
26316 		e.numerator.offsetLeft = dx;
26317 		e.numerator.offsetTop = 0;
26318 		e.numerator.offsetHeight = nh;
26319 	}
26320 
26321 	if (e.by != null)
26322 	{
26323 		dx = Math.round(maxWidth - dw) / 2;
26324 		e.by.offsetLeft = dx;
26325 		e.by.offsetTop = dy + 2 + e.lineWeight;
26326 		e.by.offsetHeight = dh;
26327 	}
26328 }
26329 //============================================================================================
26330 //		htmlElement$place_RAISE
26331 //============================================================================================
26332 function htmlElement$place_RAISE()
26333 {
26334 	var e,n,d,p;
26335 	var child,ch;
26336 	var dy,offset,basey;
26337 
26338 	p = this.parentNode;
26339 	e = this;
26340 	n = this.numerator;
26341 
26342 	this.offsetWidth = n.offsetWidth + this.paddingLeft;
26343 	this.offsetHeight = n.offsetHeight;
26344 
26345 
26346 	child = this.firstChild;
26347 	offset = 0;
26348 
26349 //--------------------- raise --------------------
26350 	
26351 	while (child != null)
26352 	{
26353 		if (child.tagName == 'POWER')
26354 		{
26355 			dy = child.offsetHeight;
26356 			offset += dy;
26357 		
26358 			child.offsetLeft = this.offsetWidth;
26359 			child.offsetTop = 0;
26360 			this.offsetWidth = child.offsetLeft + child.offsetWidth;
26361 		}
26362 	
26363 		child = child.nextSibling;
26364 	}	
26365 
26366 //--------------------- adjust all --------------------
26367 
26368 	child = this.firstChild;
26369 	this.offsetHeight += offset;
26370 	this.numerator.offsetTop = offset;
26371 	
26372 	this.basey = this.offsetHeight;
26373 	
26374 }
26375 //============================================================================================
26376 //			htmlElement$place_ROOT
26377 //============================================================================================
26378 function htmlElement$place_ROOT()
26379 {
26380 	var e,n,d,p,pnt,size;
26381 	var maxHeight,maxWidth;
26382 	var nw,nh;
26383 	var dw,dh,ch,ew,eh;
26384 	var width,height,dy,dx;
26385 	var xoff_exp,yoff_exp;
26386 	var xoff_num,yoff_num;
26387 	var exph,expw,dye;
26388 	var numh,numw,h;
26389 	var exp_height,rad_height;
26390 	var exp,num;
26391 	var dx1,dx2,dx3,dx4,dx5;
26392 	var dy1,dy2,dy3,dy4,i;
26393 	
26394 	p = this.parentNode;
26395 	e = this;
26396 
26397 	exp = e.exp;
26398 	num = e.radical;
26399 	
26400 	expw = 0;
26401 	exph = 0;
26402 
26403 	if (e.exp   != null) 
26404 	{	
26405 		expw = e.exp.active.xmax + e.exp.paddingLeft + e.exp.paddingRight;
26406 		exph = e.exp.active.rowHeight + e.exp.paddingTop + e.exp.paddingBottom;
26407 	}
26408 
26409 	numw = e.radical.offsetWidth + 10;
26410 	numh = e.radical.offsetHeight;
26411 
26412 	ch = this.charHeight();
26413 	if (e.size > 0) ch = size;
26414 
26415 	dy = ch * 0.5;
26416 	exp_height = dy + exph;
26417 	xoff_exp = 0;
26418 
26419 	xoff_num = ch;
26420 	if (expw > ch * 0.75) xoff_num = expw + ch * 0.50;
26421 
26422 	dy = e.lineWeight;
26423 	
26424 	yoff_num = dy;
26425 	height = numh + dy;
26426 	rad_height = height;
26427 
26428 	yoff_exp = rad_height - exp_height;
26429 	if (yoff_exp &lt; 0) yoff_num = exp_height - rad_height;
26430 	if (yoff_exp &lt; 0) height = exp_height;
26431 
26432 	yoff_exp = height - exp_height;
26433 	yoff_num = height - numh;
26434 
26435 	width = numw + xoff_num;
26436 
26437 	e.offsetHeight = height;
26438 	e.offsetWidth  = width;
26439 
26440 //------------------------- Position --------------------------
26441 
26442 	e.topYpos = Math.round(ch * 0.75);
26443 	e.botYpos = height - ch;
26444 	e.baseYpos = nh + 2 + (ch / 2);
26445 
26446 	e.radical.offsetLeft = xoff_num;
26447 	e.radical.offsetTop = yoff_num;
26448 	e.radical.offsetHeight = numh;
26449 
26450 	if (e.exp != null)
26451 	{
26452 		e.exp.offsetLeft = xoff_exp;
26453 		e.exp.offsetTop = yoff_exp;
26454 		e.exp.offsetHeight = exph;
26455 	}
26456 	
26457 //----------------- Radical -----------------------------------------------
26458 
26459 	e.radicalXOffset = width - (numw + ch);
26460 	e.radicalYOffset = yoff_num + numh;
26461 	e.radicalHeight  = rad_height; 
26462 	e.radicalWidth   = numw;
26463 	e.radicalSize	 = ch;
26464 	
26465 //	dx = e.radicalXOffset;
26466 //	dy = e.radicalYOffset;
26467 
26468 	dx = 2;
26469 	dy = e.lineWeight;
26470 
26471 	dy1 = Math.round(ch * 0.2) + 2;
26472 	dy2 = Math.round(ch * 0.5) + 2;
26473 	dy3 = 2;
26474 	dy4 = numh + 2;
26475 
26476 	dx1 = 2;
26477 	dx2 = 2 + (ch * 0.1);
26478 	dx3 = 2 + (ch * 0.3);
26479 	dx4 = 2 + (ch * 0.6);
26480 	dx5 = xoff_num + numw + 2;
26481 
26482 	e.line			= new Array();
26483 	pnt = new Object();
26484 	pnt.x			= dx1;
26485 	pnt.y			= numh - dy1;
26486 	e.line[0] = pnt;
26487 
26488 	pnt = new Object();
26489 	pnt.x			= dx2;
26490 	pnt.y			= numh - dy2;
26491 	e.line[1] = pnt;
26492 	
26493 	pnt = new Object();
26494 	pnt.x			= dx3;
26495 	pnt.y			= numh - dy3;
26496 	e.line[2] = pnt;
26497 	
26498 	pnt = new Object();
26499 	pnt.x			= dx4;
26500 	pnt.y			= numh - dy4;
26501 	e.line[3] = pnt;
26502 	
26503 	pnt = new Object();
26504 	pnt.x			= dx5;
26505 	pnt.y			= numh - dy4;
26506 	e.line[4] = pnt;
26507 	
26508 	for (i=0; i &lt; e.line.length; ++i)
26509 	{
26510 		pnt = e.line[i];
26511 		pnt.x = pnt.x / 110 * 72;
26512 		pnt.y = pnt.y / 110 * 72;
26513 	}
26514 	
26515 }
26516 //============================================================================================
26517 //			htmlElement$place_QUANTITY
26518 //============================================================================================
26519 function htmlElement$place_QUANTITY()
26520 {
26521 	var e,n,d,p,pnt;
26522 	var child,ch,height;
26523 	var padLeft,padRight;
26524 
26525 	e = this;
26526 
26527 	e.char = new Object;
26528 	e.char.left = new Object();
26529 	e.char.right = new Object();
26530 
26531 	switch (e.type)
26532 	{
26533 	case "bracket":
26534 			e.char.left.top	= parseInt('351',8);
26535 			e.char.left.center	= parseInt('352',8);
26536 			e.char.left.bottom	= parseInt('353',8);
26537 			e.char.left.filler	= parseInt('352',8);
26538 
26539 			e.char.right.top	= parseInt('371',8);
26540 			e.char.right.center	= parseInt('372',8);
26541 			e.char.right.bottom	= parseInt('373',8);
26542 			e.char.right.filler	= parseInt('372',8);
26543 			
26544 			e.char.left.text	= String.fromCharCode(parseInt('133',8));
26545 			e.char.right.text	= String.fromCharCode(parseInt('135',8));
26546 			break;
26547 
26548 	case "absolute":
26549 			e.char.left.top	= parseInt('275',8);
26550 			e.char.left.center	= parseInt('275',8);
26551 			e.char.left.bottom	= parseInt('275',8);
26552 			e.char.left.filler	= parseInt('275',8);
26553 
26554 			e.char.right.top	= parseInt('275',8);
26555 			e.char.right.center	= parseInt('275',8);
26556 			e.char.right.bottom	= parseInt('275',8);
26557 			e.char.right.filler	= parseInt('275',8);
26558 			
26559 			e.char.left.text	= String.fromCharCode(parseInt('364',8));
26560 			e.char.right.text	= String.fromCharCode(parseInt('364',8));
26561 			break;
26562 
26563 	case "set":
26564 			e.char.left.top	= parseInt('354',8);
26565 			e.char.left.center	= parseInt('355',8);
26566 			e.char.left.bottom	= parseInt('356',8);
26567 			e.char.left.filler	= parseInt('357',8);
26568 
26569 			e.char.right.top	= parseInt('374',8);
26570 			e.char.right.center	= parseInt('375',8);
26571 			e.char.right.bottom	= parseInt('376',8);
26572 			e.char.right.filler	= parseInt('357',8);
26573 
26574 			e.char.left.text	= String.fromCharCode(parseInt('173',8));
26575 			e.char.right.text	= String.fromCharCode(parseInt('175',8));
26576 
26577 			break;
26578 
26579 	case "quantity":
26580 	default:
26581 			e.char.left.top	= parseInt('354',8);
26582 			e.char.left.center	= parseInt('357',8);
26583 			e.char.left.bottom	= parseInt('356',8);
26584 			e.char.left.filler	= parseInt('357',8);
26585 
26586 			e.char.right.top	= parseInt('374',8);
26587 			e.char.right.center	= parseInt('357',8);
26588 			e.char.right.bottom	= parseInt('376',8);
26589 			e.char.right.filler	= parseInt('357',8);
26590 
26591 			e.char.left.text	= String.fromCharCode(parseInt('50',8));
26592 			e.char.right.text	= String.fromCharCode(parseInt('51',8));
26593 
26594 			break;
26595 	}			
26596 
26597 	this.font.fontName = 'symbol';
26598 	
26599 	if (e.firstChild == null) return;
26600 
26601 	child = e.firstChild;
26602 	ch = this.font.size;
26603 	height = child.offsetHeight;
26604 
26605 	if (height &lt; ch) height = ch;
26606 
26607 	padLeft = height * 0.3;
26608 	padRight = height * 0.3;
26609 	if (e.char.right == null) padRight = 0;
26610 
26611 	this.offsetRight = padLeft + child.offsetWidth;
26612 
26613 	this.offsetWidth = padLeft + child.offsetWidth + padRight;
26614 	this.offsetHeight = height;
26615 
26616 	child.offsetLeft = padLeft;
26617 }
26618 //============================================================================================
26619 //			htmlElement$loadCell
26620 //============================================================================================
26621 function htmlElement$loadCell(ele)
26622 {
26623 	var i,j,r,c,cell;
26624 	var heigth,width,value;
26625 
26626 	for (i=0; i &lt; ele.rows.length; ++i)
26627 	{
26628 		r = ele.rows[i] - 1;
26629 		for (j=0; j &lt; ele.cols.length; ++j)
26630 		{
26631 			c = ele.cols[j] - 1;
26632 			if ((ele.diagonal) && (r != c)) continue;
26633 			
26634 			cell = this.grid.rows[r].cells[c];
26635 			if ((cell.type != 'empty') && (! this.changeValue)) continue;
26636 			
26637 			if (ele.values != null)
26638 			{
26639 				if (j &lt; ele.values.length)
26640 					 value = this.html.trim(ele.values[j]);
26641 				else value = '';
26642 			
26643 				if (value == '') continue;
26644 	
26645 				cell.type  = 'value';
26646 				cell.value = value;
26647 
26648 				cell.height = this.charHeight();
26649 				cell.width = this.wordWidth(cell.value);
26650 
26651 				if (! this.clip)
26652 				{			
26653 					if (cell.width > this.grid.cellWidth) this.grid.cellWidth = cell.width;
26654 					if (cell.height > this.grid.cellHeight) this.grid.cellHeight = cell.height;
26655 				}
26656 			}
26657 			else
26658 			{
26659 				cell.type = 'element';
26660 				cell.element = ele;
26661 				if (! this.clip)
26662 				{
26663 					if (ele.offsetWidth > this.grid.cellWidth) this.grid.cellWidth = ele.offsetWidth;
26664 					if (ele.offsetHeight > this.grid.cellHeight) this.grid.cellHeight = ele.offsetHeight;
26665 				}
26666 			}
26667 		}
26668 	}
26669 }
26670 //============================================================================================
26671 //			htmlElement$place_MATRIX
26672 //============================================================================================
26673 function htmlElement$place_MATRIX()
26674 {
26675 	var e,p;
26676 	var r,c,ch;
26677 	var i,j,etype,row,cell;
26678 	var height,width,value;
26679 	var padLeft,padRight;
26680 	
26681 	e = this;
26682 	
26683 	this.grid = new Object();
26684 	this.grid.rows = new Array();
26685 	this.grid.cellHeight = this.cellHeight;
26686 	this.grid.cellWidth = this.cellWidth;
26687 
26688 	if (this.style.paddingLeft	== '') this.paddingLeft  = 2;
26689 	if (this.style.paddingRight	== '') this.paddingRight = 2;
26690 	if (this.style.paddingTop	== '') this.paddingTop  = 2;
26691 	if (this.style.paddingBottom	== '') this.paddingBottom = 2;
26692 	
26693 //-------------------- initialize Grid --------------
26694 
26695 	for (r=0; r &lt; this.rowCount; ++r)
26696 	{
26697 		row = new Object();
26698 		this.grid.rows[r] = row;
26699 
26700 		row.cells = new Array();
26701 		
26702 		for (c=0; c &lt; this.colCount; ++c)
26703 		{
26704 			cell = new Object();
26705 			row.cells[c] = cell;
26706 			cell.type = 'empty';
26707 		}
26708 	}
26709 
26710 //--------------------------------------------------
26711 
26712 	if (this.identity)
26713 	{
26714 		height = this.charHeight();
26715 		width = this.wordWidth('1');
26716 		if (! this.clip)
26717 		{
26718 			if (height > this.grid.cellHeight) this.grid.cellHeight = height;
26719 			if (width > this.grid.gridWidth) this.grid.cellWidth = width;
26720 		}
26721 
26722 		for (i=0; i &lt; this.grid.rows.length; ++i)
26723 		{
26724 			row = this.grid.rows[i];
26725 			for (j=0; j &lt; row.cells.length; ++j)
26726 			{
26727 				if (j != i) continue;
26728 				cell = row.cells[i];
26729 				cell.type = 'value';
26730 				cell.value = '1';
26731 				cell.width = width;
26732 				cell.height = height;
26733 			}
26734 		}
26735 	}
26736 
26737 //---------------------- load cells -------------
26738 
26739 	for (i=0; i &lt; this.cells.length; ++i)
26740 	{
26741 		cell = this.cells[i];
26742 		this.loadCell(cell);
26743 	}
26744 
26745 //---------------------- fill empty cells ------------------
26746 
26747 	if ((this.emptyCell != null) || (this.emptyValue != ''))
26748 	{
26749 		if (this.emptyCell == null)
26750 		{
26751 			etype  = 'value';
26752 			value = this.emptyValue;
26753 			height = this.charHeight();
26754 			width  = this.wordWidth(value);
26755 		}
26756 		else
26757 		{
26758 			etype  = 'element';
26759 			value  = this.emptyCell;
26760 			height = value.offsetHeight;
26761 			width  = value.offsetWidth;
26762 		}
26763 
26764 		if (! this.clip)
26765 		{
26766 			if (height > this.grid.cellHeight) this.grid.cellHeight = height;
26767 			if (width > this.grid.cellWidth) this.grid.cellWidth = width;
26768 		}
26769 
26770 		for (i=0; i &lt; this.grid.rows.length; ++i)
26771 		{
26772 			row = this.grid.rows[i];
26773 			for (j=0; j &lt; row.cells.length; ++j)
26774 			{
26775 				cell = row.cells[j];
26776 				if (cell.type == 'empty') 
26777 				{
26778 					cell.type  = etype;
26779 					cell.value = value;
26780 					cell.height = height;
26781 					cell.width = width;
26782 				}
26783 			}
26784 		}
26785 	}
26786 
26787 //-------------------- size grid ------------------
26788 
26789 	this.place_QUANTITY();		// set matrix symbols ("Absolute" as default)
26790 
26791 	ch = this.charHeight();
26792 	padLeft = ch * 0.6;
26793 	padRight = ch * 0.6;
26794 	if (e.char.right == null) padRight = 0;
26795 
26796 	this.offsetHeight = (this.grid.cellHeight * this.rowCount) + (this.cellspacing * (this.rowCount-1)) + this.paddingTop + this.paddingBottom;
26797 	this.offsetWidth  = (this.grid.cellWidth * this.colCount) + (this.cellspacing * (this.colCount-1)) + padLeft + padRight;
26798 
26799 	this.valign = 'center';
26800 	this.baseY = this.offsetHeight / 2;
26801 
26802 	this.offsetRight = this.offsetWidth - padRight;
26803 	this.paddingLeft = padLeft;
26804 	this.paddingRight = padRight;
26805 
26806 }
26807 //============================================================================================
26808 //			htmlElement$place_INTEGRAL
26809 //============================================================================================
26810 function htmlElement$place_INTEGRAL()
26811 {
26812 	var e,n,d,p,pnt;
26813 	var maxHeight,maxWidth;
26814 	var nw,nh,w;
26815 	var dw,dh,ch,ew,eh;
26816 	var width,height,dy,dx;
26817 	var xoff_exp,yoff_exp;
26818 	var xoff_num,yoff_num;
26819 	var exph,expw,dye;
26820 	var numh,numw,child;
26821 	var exp_height,rad_height;
26822 	var minw,minh,maxw,maxh,padSymbol,padLeft,padRight;
26823 	
26824 	p = this.parentNode;
26825 	e = this;
26826 
26827 
26828 	minw = 0;
26829 	minh = 0;
26830 	maxw = 0;
26831 	maxh = 0;
26832 
26833 	if (e.min   != null) 
26834 	{	
26835 		minw = e.min.active.xmax + e.min.paddingLeft + e.min.paddingRight;
26836 		minh = e.min.active.rowHeight + e.min.paddingTop + e.min.paddingBottom;
26837 	}
26838 
26839 	if (e.max != null)
26840 	{
26841 		maxw = e.max.active.xmax + e.max.paddingLeft + e.max.paddingRight;
26842 		maxh = e.max.active.rowHeight + e.max.paddingTop + e.max.paddingBottom;
26843 	}
26844 
26845 	ch = this.charHeight();
26846 	
26847 	e.char = new Object;
26848 	e.char.left = new Object();
26849 
26850 	e.char.left.top	= parseInt('363',8);
26851 	e.char.left.center	= parseInt('364',8);
26852 	e.char.left.bottom	= parseInt('365',8);
26853 	e.char.left.filler	= parseInt('364',8);
26854 
26855 	e.char.left.text	= String.fromCharCode(parseInt('362',8));
26856 		
26857 	e.char.right = null;
26858 
26859 	this.font.fontName = 'symbol';
26860 	
26861 	if (e.firstChild == null) return;
26862 
26863 //----------------- node (content) ----------------
26864 
26865 	child = e.firstChild;
26866 	ch = this.font.size;
26867 	height = child.offsetHeight + minh + maxh;
26868 
26869 	if (height &lt; (ch * 2)) height = ch * 2;
26870 
26871 	dy = Math.round((height - child.offsetHeight) / 2);
26872 
26873 	padSymbol = height * 0.3;
26874 	padLeft = (padSymbol + Math.max(minw,maxw)) * 1.5 ;
26875 	padRight = 0;
26876 
26877 	this.offsetRight = padLeft + child.offsetWidth;
26878 
26879 	this.offsetWidth = padLeft + child.offsetWidth + padRight;
26880 	this.offsetHeight = height;
26881 
26882 	child.offsetLeft = padLeft;
26883 	child.offsetTop  = dy;
26884 
26885 //-------------------- min ---------------------------
26886 
26887 	if (e.min != null)
26888 	{
26889 		e.min.offsetLeft = padSymbol;
26890 		e.min.offsetTop = height - minh;
26891 	}		
26892 
26893 	if (e.max != null)
26894 	{
26895 		e.max.offsetLeft = padSymbol;
26896 		e.max.offsetTop = 0;
26897 	}		
26898 }
26899 //============================================================================================
26900 //			htmlElement$place_SUMMATION
26901 //============================================================================================
26902 function htmlElement$place_SUMMATION()
26903 {
26904 	var e,n,d,p,pnt;
26905 	var maxHeight,maxWidth;
26906 	var nw,nh;
26907 	var dw,dh,ch,ew,eh;
26908 	var width,height,dy,dx;
26909 	var xoff_exp,yoff_exp;
26910 	var xoff_num,yoff_num;
26911 	var exph,expw,dye;
26912 	var numh,numw;
26913 	var exp_height,rad_height;
26914 	var rangew,rangwh;
26915 	var rangeh,child,padSymbol,padLeft,padRight;
26916 	
26917 	p = this.parentNode;
26918 	e = this;
26919 
26920 	rangew = 0;
26921 	rangeh = 0;
26922 
26923 	if (e.range   != null) 
26924 	{	
26925 		rangew = e.range.active.xmax + e.range.paddingLeft + e.range.paddingRight;
26926 		rangwh = e.range.active.rowHeight + e.range.paddingTop + e.range.paddingBottom;
26927 	}
26928 
26929 	ch = this.charHeight();
26930 
26931 	e.text = String.fromCharCode(parseInt('345',8));
26932 	this.font.fontName = 'symbol';
26933 	
26934 	if (e.firstChild == null) return;
26935 
26936 //----------------- node (content) ----------------
26937 
26938 	child = e.firstChild;
26939 	ch = this.font.size;
26940 	height = child.offsetHeight;
26941 
26942 	if (height &lt; ch) height = ch;
26943 
26944 	dy = Math.round((height - child.offsetHeight) / 2);
26945 
26946 	padSymbol = height * 1.1;
26947 	padLeft = Math.max(padSymbol,rangew)+4;
26948 	padRight = 0;
26949 
26950 	this.offsetRight = padLeft + child.offsetWidth;
26951 
26952 	this.offsetWidth = padLeft + child.offsetWidth + padRight;
26953 	this.offsetHeight = height + rangeh;
26954 	this.font.size    = height;
26955 
26956 	child.offsetLeft = padLeft;
26957 	child.offsetTop  = 0;
26958 
26959 //-------------------- RANGE ---------------------------
26960 
26961 	if (e.range != null)
26962 	{
26963 		e.range.offsetLeft = 0;
26964 		e.range.offsetTop = height + rangeh;
26965 	}		
26966 	
26967 }
26968 //============================================================================================
26969 //	htmlElement$findColumn
26970 //============================================================================================
26971 function htmlElement$findColumn(colIndex)
26972 {
26973 	var i,cell;
26974 	
26975 	for (i=0; i &lt; this.cells.length; ++i)
26976 	{
26977 		cell = this.cells[i];
26978 		if (cell.colIndex == colIndex) return cell;
26979 		if (cell.colIndex > colIndex) return null;
26980 	}
26981 	
26982 	return null;
26983 }
26984 //============================================================================================
26985 //			htmlElement$avail
26986 //============================================================================================
26987 function htmlElement$widthAvail(fixedWidth)
26988 {
26989 	var i,size,count,dx,remain,skipA,skipB,col;
26990 	var used,n,gutter,two;
26991 		
26992 	two = 2;
26993 	if (this.collapse) two = -1;
26994 	
26995 	used = (this.border * two) + (this.cellspacing * 2);
26996 	
26997 	gutter = this.cellspacing + (this.cellpadding * 2);
26998 	if (this.border > 0) gutter += 1;
26999 
27000 	used += this.colWidths.length * gutter;
27001 	count = 0;
27002 
27003 	if (this.colWidths.length == 1) return fixedWidth - ((this.border * two) + (this.cellspacing * 2));
27004 
27005 	for (i=0; i &lt; this.colWidths.length; ++i)
27006 	{
27007 		col = this.colWidths[i];
27008 		if (col.fixed || col.percent)
27009 		{
27010 			used += col.width;
27011 		}
27012 		else
27013 		{	
27014 			count += 1;	
27015 		}
27016 	}
27017 
27018 	if (count == 0) return 0;
27019 	remain = fixedWidth - used;
27020 	if (remain &lt;= 0) return 0;
27021 
27022 	dx = Math.floor(remain / count);
27023 	if (dx &lt; 0) dx = 0;
27024 	
27025 	return dx;
27026 }
27027 //============================================================================================
27028 //			htmlElement$place_TABLE
27029 //============================================================================================
27030 function htmlElement$place_TABLE()
27031 {
27032 	var i,text;
27033 	var row,cell,j,col;
27034 	
27035 	this.place_TABLE_A();
27036 
27037 	text = 'Table ID = ' + this.id + '  width: '  + this.offsetWidth + ' height: ' + this.offsetHeight;
27038 	for (i=0; i &lt; this.colWidths.length; ++i)
27039 	{
27040 		col = this.colWidths[i];
27041 		text += '\r\n';
27042 		text += i + ') width: ' + col.width + ' fixed: ' + col.fixed + ' scanned: ' + col.scanned;
27043 	}
27044 	
27045 	for (i=0; i &lt; this.rows.length; ++i)
27046 	{
27047 		row = this.rows[i];
27048 		for (j=0; j &lt; row.cells.length; ++j)
27049 		{
27050 			cell = row.cells[j];
27051 			text += '\r\n';
27052 			text += i + '.' + j + ') height: ' + cell.offsetHeight + ' Width: ' + cell.offsetWidth;
27053 			
27054 		}
27055 	}	
27056 	
27057 }
27058 //============================================================================================
27059 //			htmlElement$place_TABLE
27060 //============================================================================================
27061 function htmlElement$place_TABLE_A()
27062 {
27063 	var e,row,cell,i,width,j,max,wid;
27064 	var w,pad,loopCount,n;
27065 	var ypos,height,gutter,w,k,n,xrow,xcell;
27066 	var re_adjust,obj,defaultWidth,fixedWidth;
27067 	var adjust_columns,need,dw,count;
27068 	var h,w,added,border,size,dx,avail,xcol,xpos;
27069 	var ID,remain,used,col,scale,xmax,adjustSize;
27070 	var fixedTableSize,maxWidth,two;
27071 	var rcount,xmax,xwidth,xxmax;
27072 	var avail,lastavail;
27073 	
27074 	e = this;
27075 	
27076 	ID = this.id;
27077 
27078 //-------------------------- Define default Column Widths --------------------
27079 
27080 	this.setActive();
27081 	width = this.parentNode.active.maxWidth;
27082 
27083 	fixedWidth = width;
27084 	defaultWidth = 0;
27085 	fixedTableSize = false;
27086 
27087 	xwidth = this.width;
27088 	if (this.style.width != '') xwidth = this.style.width;
27089 
27090 	if (xwidth != '') 
27091 	{
27092 		width = this.html.getSize(xwidth,this);
27093 		this.offsetWidth = width;
27094 		defaultWidth = width;
27095 		fixedTableSize = true;
27096 		fixedWidth = width;
27097 	}
27098 	
27099 	if (width &lt; 0) width = 5;
27100 	this.active.maxWidth = width;
27101 	remain = this.offsetWidth;
27102 
27103 	if (! e.collapse) remain = remain - (this.borderLeft + this.borderRight + (this.cellspacing * (e.colWidths.length+1)));
27104 
27105 	if (remain &lt; 0)
27106 	{
27107 		this.offsetWidth += -remain;
27108 		remain = 0;
27109 	}
27110 
27111 	used = 0;
27112 
27113 //----------- determine columns width sizes ---------
27114 
27115 	count = 0;
27116 	rcount = 0;
27117 
27118 	n = e.colWidths.length;
27119 	if (n &lt; 1) n = 1;
27120 	xmax = Math.floor(this.active.maxWidth / n) + 0 ;
27121 
27122 
27123 	for (i=0; i &lt; e.colWidths.length; ++i)
27124 	{
27125 		col = e.colWidths[i];
27126 		col.scanned = false;
27127 		xxmax = xmax;
27128 		
27129 		if (col.fixed || col.percent) 
27130 		{
27131 			width = col.width;
27132 			count += 1;
27133 	
27134 			if (col.percent && (width > 0))
27135 			{
27136 				width = Math.floor(fixedWidth * (width / 100));
27137 				if (width > remain && remain > 0) width = remain;
27138 				xxmax = width;
27139 			}
27140 
27141 			width -= (this.cellspacing + this.borderLeft + this.borderRight)
27142 
27143 			if ( (i == (e.colWidths.length-1)) && (count == e.colWidths.length) && (remain > width)) width = remain;
27144 	
27145 			col.width = width;
27146 			col.fixed = true;
27147 			col.xmax = this.active.maxWidth;
27148 			col.xmax = xxmax;
27149 
27150 			col.scanned = true;
27151 			this.placeColumn_nocolspan(i,col,col.xmax);
27152 			col.scanned = true;
27153 
27154 			width = col.width;
27155 			used   += width;
27156 			remain -= width;
27157 
27158 			continue;
27159 		}
27160 		else
27161 		{
27162 			j = i;
27163 			rcount += 1;
27164 		}
27165 	}
27166 //----------- calculate a seed width ---------
27167 
27168 	if (remain &lt;= 0) remain = 0;
27169 	if (rcount == 1 && fixedTableSize)
27170 	{
27171 		count += 1;
27172 		col = e.colWidths[j];
27173 		col.width = remain;
27174 		col.fixed = true;
27175 		col.used = true;
27176 		col.xmax = remain;
27177 		used += remain;
27178 		remain = 0;
27179 	}
27180 //------------------ place cell children --------------------
27181 
27182 	border = 0;
27183 	if (this.border > 0) border = 1;
27184 
27185 	maxWidth = 0;
27186 
27187 //z
27188 
27189 	two = 2;
27190 	if (this.collapse) two = 1;
27191 	pad = (this.cellspacing * 2) + (border * two);
27192 
27193 	xmax = this.active.maxWidth - (pad * this.colWidths.length);
27194 
27195 	if (this.colWidths.length == 1)
27196 	{
27197 		col = this.colWidths[0];
27198 		if ((this.fixed_width) || (this.percent_width))
27199 			 col.width = this.offsetWidth - ((border*two) + (this.cellpadding * 2));
27200 
27201 		if (col.width &lt; 0) col.width = 0;
27202 		col.scanned = true;
27203 
27204 		this.placeColumn_nocolspan(0,col,xmax);
27205 		col.fixed = true;
27206 		used = col.width;
27207 
27208 	}
27209 
27210 //--------------------------- scan non-spanned fixed width columns  ---------------------------
27211 
27212 	for (i=0; i &lt; this.colWidths.length; ++i)
27213 	{
27214 		if (! this.colWidths[i].fixed) this.colWidths[i].xmax = xmax;		
27215 		this.colWidths[i].adjusted = false;
27216 	}
27217 
27218 	loopCount = 0;
27219 	lastavail = -99;
27220 
27221 	while (true)
27222 	{
27223 		if (avail == lastavail) break;
27224 		lastavail = avail;
27225 	
27226 		loopCount += 1;
27227 		if (loopCount > 120) break;		// infinite loop;
27228 
27229 		avail = 0;
27230 		used = 0;
27231 		j = -1;
27232 		count = 0;
27233 		adjustSize = 0;
27234 
27235 		for (i=0; i &lt; this.colWidths.length; ++i)
27236 		{
27237 			col = this.colWidths[i];
27238 			if (! col.fixed) 
27239 			{
27240 				avail += 1;
27241 				if (j &lt; 0) j = i;
27242 				continue;
27243 			}
27244 
27245 			if (! col.scanned)
27246 			{
27247 				col.scanned = true;
27248 				this.placeColumn_nocolspan(i,col,col.xmax);
27249 				col.scanned = true;
27250 				count = count + 1;
27251 			}
27252 	
27253 			used += col.width;
27254 			if (col.adjusted) adjustSize += col.width;
27255 		}
27256 
27257 //------------------------- can a variable column -----------------------------
27258 
27259 		remain = xmax - used;
27260 
27261 		if (remain &lt; 0)
27262 		{
27263 			if (adjustSize == 0) 
27264 			{
27265 //				this.active.maxWidth += (-remain); // need to enlarge table size;
27266 //				this.offsetWidth = this.active.maxWidth + this.borderLeft + this.borderRight + (this.cellspacing * 2);
27267 //				used = this.active.maxWidth;
27268 //				xmax = this.active.maxWidth - ((this.cellspacing * 2) + this.borderLeft + this.borderRight + (pad * this.colWidths.length));
27269 
27270 			}
27271 			scale = this.active.maxWidth / used ;
27272 
27273 			for (i=0; i &lt; this.colWidths.length; ++i)
27274 			{
27275 				col = this.colWidths[i];
27276 				if (! col.scanned) continue;
27277 				if (col.adjusted)
27278 				{
27279 					col.xmax = Math.floor(col.width * scale);
27280 					col.width = col.xmax;
27281 				}
27282 
27283 				col.scanned = false;
27284 			}			
27285 		}
27286 	
27287 		if (avail == 0) break; 
27288 
27289 
27290 		col = this.colWidths[j];
27291 		col.width = 0;
27292 		col.fixed = true;
27293 		col.adjusted = true;
27294 
27295 		if (avail == 1) 
27296 		{
27297 
27298 		if (fixedTableSize)
27299 		{
27300 			col.width = remain;
27301 			col.fixed = true;
27302 			col.xmax = col.width;
27303 		}
27304 
27305 		}
27306 
27307 	}
27308 			
27309 //------------------------ adjust width pass ------------------------
27310 	
27311 	for (i=0; i &lt; this.rows.length; ++i)
27312 	{
27313 		row = this.rows[i];
27314 		
27315 		for (j = 0; j &lt; row.cells.length; ++j)
27316 		{
27317 			cell = row.cells[j];
27318 			if (cell.colspan > 1) continue;
27319 
27320 			col = this.colWidths[cell.colIndex];
27321 			
27322 //			if (cell.active.maxWidth == col.width) continue;
27323 			
27324 			cell.setActive();
27325 			cell.active.maxWidth = col.width - (border*two);
27326 			if (col.width &lt;= 0) cell.active.maxWidth = fixedWidth - used;
27327 			cell.active.width = 0;
27328 
27329 			cell.placeChildren();
27330 			cell.placeDone_();
27331 
27332 			cell.clientWidth  = cell.offsetWidth;
27333 			cell.clientHeight = cell.offsetHeight;
27334 	
27335 			cell.offsetWidth = col.width;
27336 			cell.active.maxWidth = cell.offsetWidth;
27337 		}
27338 	}		
27339 
27340 //------------------ spanned cells --------------------
27341 
27342 	this.adjustSpannedColumns();
27343 
27344 //---------------- calculate table width ----------
27345 	
27346 	width = 0;
27347 	count = 0;
27348 
27349 	for (i=0; i &lt; e.colWidths.length; ++i)
27350 	{
27351 		col = e.colWidths[i];
27352 		col.xpos = width;
27353 		width += col.width;
27354 
27355 		if (col.width > 0) 
27356 		{
27357 			count += 1;
27358 //			width += this.border * two;
27359 			if ((i &lt; e.colWidths.length-1)) width += this.cellspacing;
27360 		}
27361 	}
27362 
27363 	if (! this.collapse) width += this.borderLeft + this.borderRight + (this.cellspacing * 2);	
27364 
27365 	if (count == 0)
27366 	{
27367 		if (fixedTableSize) width = defaultWidth;
27368 		fixedTableSize = false;
27369 	}
27370 
27371 	if (fixedTableSize)
27372 	{
27373 		adjust_columns = new Array();
27374 
27375 		if (width &lt; defaultWidth)
27376 		{
27377 			need = defaultWidth - width;
27378 			width = defaultWidth;
27379 			dw = Math.floor(need / count);
27380 			for (i=0; i &lt; this.colWidths.length; ++i)
27381 			{
27382 				col = this.colWidths[i];
27383 				if (col.width > 0) 
27384 				{
27385 					col.width += dw;
27386 					adjust_columns[adjust_columns.length] = i;
27387 				}
27388 			}
27389 
27390 			this.adjustColumn(adjust_columns);
27391 			this.adjustSpannedColumns();
27392 
27393 			width = 0;
27394 			count = 0;
27395 		
27396 			for (i=0; i &lt; e.colWidths.length; ++i)
27397 			{
27398 				col = e.colWidths[i];
27399 				col.xpos = width;
27400 		
27401 				width += col.width;
27402 				if (col.width > 0) 
27403 				{
27404 					count += 1;
27405 //					width += this.border * two;
27406 					if ((i &lt; e.colWidths.length-1)) width += this.cellspacing;
27407 				}
27408 			}
27409 
27410 			if (! this.collapse) width += this.borderLeft + this.borderRight + (this.cellspacing * 2);
27411 		}
27412 	}
27413 
27414 	e.offsetWidth		= width;
27415 	e.active.width		= width;
27416 	e.active.remain		= width;
27417 
27418 //------------------ adjust cell heights ------------------
27419 
27420 	this.adjustTableHeight();
27421 
27422 	h = this.offsetTop + this.offsetHeight;
27423 	w = this.offsetLeft + this.offsetWidth;
27424 
27425 	this.parentNode.updateSize_(h,w);
27426 
27427 }
27428 //=================================================================
27429 //				htmlElement$placeColumn_nocolspan
27430 //=================================================================
27431 function htmlElement$placeColumn_nocolspan(colIndex,col,xmax)
27432 {
27433 	var i,j,row,cell,border;
27434 	var size,filler,width,w,n;
27435 	var two,used,first;
27436 	
27437 	border = 0;
27438 	if (this.border > 0) border = 1;
27439 
27440 	col.fixed = true;
27441 	col.scanned = true;
27442 	
27443 	two = 2;
27444 	if (this.collapse) two = -1;
27445 
27446 	for (i=0; i &lt; this.rows.length; ++i)
27447 	{
27448 		row = this.rows[i];
27449 		width = this.borderLeft + this.cellspacing;
27450 		used = 0;
27451 		filler = (this.border * two) + (this.cellspacing * 2);
27452 		first = true;
27453 		
27454 		for (j = 0; j &lt; row.cells.length; ++j)
27455 		{
27456 			cell = row.cells[j];
27457 			if (this.rows.length == 1) cell.colspan = 1;
27458 	
27459 			if (cell.colIndex != colIndex) continue;
27460 			if (cell.colIndex + cell.colspan > this.colWidths.length)
27461 			{
27462 				n = this.colWidths.length - cell.colIndex;
27463 				cell.colspan = n;
27464 			}
27465 
27466 			if (cell.colspan > 1) break;
27467 			
27468 			col.used = true;
27469 			size = col.width;
27470 			if (size == 0) size = xmax;
27471 			size = xmax;
27472 
27473 			if (cell.iheight > row.iheight)
27474 			{
27475 				 row.iheight = cell.iheight;
27476 				 row.fixed_height = true;
27477 			}
27478 			
27479 			cell.iheight = 0;
27480 			cell.height = 0;
27481 
27482 			cell.setActive();
27483 			cell.active.maxWidth = size - ((this.cellpadding * 2) + (border*two));
27484 			cell.active.maxWidth = size;
27485 
27486 			cell.active.width = 0;
27487 			if (cell.active.maxWidth &lt; 0) cell.active.maxWidth = 0;
27488 
27489 			cell.paddingLeft   = this.cellpadding;
27490 			cell.paddingRight  = this.cellpadding;
27491 			cell.paddingTop    = this.cellpadding;
27492 			cell.paddingBottom = this.cellpadding;
27493 
27494 			cell.placeChildren();
27495 			cell.placeDone_();
27496 
27497 //			cell.offsetWidth += (border + this.cellpadding);
27498 			cell.offsetWidth += (border * 2);
27499 
27500 			cell.clientWidth  = cell.offsetWidth;
27501 			cell.clientHeight = cell.offsetHeight;
27502 
27503 //			if (! this.collapse) cell.offsetWidth = cell.offsetWidth + (border + this.cellpadding);
27504 
27505 			w = cell.offsetWidth;
27506 			if (w > col.width) col.width = w;
27507 			cell.active.maxWidth = col.width ;
27508 //			if (xmax &lt; col.width) xmax = col.width;
27509 		}
27510 		
27511 	}
27512 
27513 }
27514 //=================================================================
27515 //				htmlElement$adjustSpannedColumns
27516 //=================================================================
27517 function htmlElement$adjustSpannedColumns()
27518 {
27519 	var a,i,j,k,c,adjust_columns;
27520 	var need,row,cell,found,col;
27521 	var width,remain,last,border;
27522 	var xrow,n,height,obj,two,dx;
27523 
27524 	if (! this.spanned_col) return;
27525 	
27526 //------------- calculate / adjust spanned column widths ----------
27527 
27528 	adjust_columns = new Array();
27529 
27530 	two = 1;
27531 	if (this.collapse) two = 0;
27532 	border = this.borderLeft + this.borderRight;
27533 	if (this.collapse) border = 1;
27534 //xx
27535 	for (i=0; i &lt; this.rows.length; ++i)
27536 	{
27537 		row = this.rows[i];
27538 	
27539 		for (j = 0; j &lt; row.cells.length; ++j)
27540 		{
27541 			cell = row.cells[j];
27542 			if (this.rows.length == 1) cell.colspan = 1;
27543 
27544 			col = this.colWidths[cell.colIndex];
27545 
27546 			if (cell.colspan > 1)
27547 			{
27548 				width = 0;
27549 				if (this.collapse) width = 0;
27550 				last = cell.colIndex + cell.colspan - 1;
27551 				for (k=cell.colIndex; k &lt;= last ; ++k)
27552 				{
27553 					if (k >= this.colWidths.length) 
27554 					{
27555 						obj = new Object();
27556 						obj.fixed = false;
27557 						obj.percent = false;
27558 						obj.width = 0;
27559 						this.colWidths[k] = obj;
27560 					}
27561 					if (k &lt; last) width += (this.cellspacing * 2) + (this.border * two);
27562 					width += this.colWidths[k].width;
27563 				}
27564 
27565 				remain = width - (cell.offsetWidth - 2);
27566 
27567 				if (remain >= 0)
27568 				{
27569 					cell.setActive();
27570 					cell.active.maxWidth = width - this.cellpadding;
27571 					cell.offsetHeight = 0;
27572 					cell.offsetWidth = width - this.cellpadding;
27573 					cell.active.remain = cell.active.maxWidth;
27574 					cell.active.width = cell.active.maxWidth;
27575 					cell.active.xmax = 0;
27576 					cell.active.ypos = 0;
27577 
27578 					cell.placeChildren();
27579 					cell.placeDone_();
27580 
27581 				
27582 					height = cell.active.rowHeight + cell.active.ypos;
27583 
27584 					cell.offsetHeight = height + cell.paddingTop + cell.paddingBottom + 3;
27585 
27586 					cell.clientWidth  = cell.offsetWidth;
27587 					cell.clientHeight = cell.offsetHeight;
27588 
27589 					cell.offsetWidth = width;
27590 
27591 				}
27592 				else
27593 				{
27594 
27595 					need = -remain;
27596 					last = cell.colIndex + cell.colspan - 1;
27597 					dx = Math.floor(need / cell.colspan);
27598 					for (k=cell.colIndex; k &lt;= last ; ++k)
27599 					{
27600 						if (k == last) dx += need - dx + 2 ;
27601 					    this.colWidths[k].width += dx;
27602 						need -= dx;
27603 
27604 						found = false;
27605 						for (a=0; a &lt; adjust_columns.length; ++a)
27606 						{
27607 	
27608 							if (adjust_columns[a] == k) 
27609 							{
27610 								found = true;
27611 								break;
27612 							}
27613 						}
27614 					
27615 						if (! found) adjust_columns[adjust_columns.length] = k;
27616 					}					
27617 				}
27618 			}					
27619 		}
27620 	}
27621 
27622 //--------------------------- adjust required columns ----------------
27623 
27624 	this.adjustColumn(adjust_columns);
27625 
27626 }
27627 //=================================================================
27628 //		htmlElement$adjustColumn
27629 //=================================================================
27630 function htmlElement$adjustColumn(adjust_columns)
27631 {
27632 	
27633 	var i,row,found,col,cell,j,k;
27634 	
27635 	if (adjust_columns.length == 0) return;
27636 
27637 	for (i=0; i &lt; this.rows.length; ++i)
27638 	{
27639 		row = this.rows[i];
27640 	
27641 		for (j = 0; j &lt; row.cells.length; ++j)
27642 		{
27643 			cell = row.cells[j];
27644 			found = false;
27645 	
27646 			for (k=0; k &lt; adjust_columns.length; ++k)
27647 			{
27648 				if (cell.colIndex == adjust_columns[k])
27649 				{
27650 					found = true;
27651 					break;
27652 				}
27653 			}
27654 				
27655 			if (! found) continue;
27656 			
27657 			col = this.colWidths[cell.colIndex];
27658 			if (cell.offsetWidth == col.width) continue;
27659 
27660 			cell.setActive();
27661 			cell.active.maxWidth = col.width - this.cellpadding;
27662 			cell.offsetHeight = 0;
27663 			cell.offsetWidth = 0;
27664 
27665 			cell.placeChildren();
27666 			cell.placeDone_();
27667 		
27668 			cell.clientWidth  = cell.offsetWidth;
27669 			cell.clientHeight = cell.offsetHeight;
27670 		}
27671 	}	
27672 }
27673 //=================================================================
27674 //		htmlElement$adjustTableHeight
27675 //=================================================================
27676 function htmlElement$adjustTableHeight()
27677 {
27678 	var i,row,two;
27679 	var ymax,gutter;
27680 	var remain,cell;
27681 	var text;
27682 	
27683 
27684 	for (i = 0; i &lt; this.rows.length; ++i)
27685 	{
27686 		row = this.rows[i];
27687 		this.adjustRowHeight(row);
27688 	}
27689 
27690 	if (this.spanned_row)
27691 	{
27692 		for (i = 0; i &lt; this.rows.length; ++i)
27693 		{
27694 			row = this.rows[i];
27695 			this.adjustSpannedRowHeight(row);
27696 		}
27697 	}
27698 
27699 //-----------------	
27700 
27701 	two = 2;
27702 	if (this.collapse) two = -1;
27703 
27704 	ymax = this.borderTop + this.cellspacing; 
27705 	gutter = this.border + this.cellspacing; 
27706 	if (this.collapse) 
27707 	{
27708 		ymax = 0;
27709 		gutter = 0;
27710 	}
27711 
27712 	for (i = 0; i &lt; this.rows.length; ++i)
27713 	{
27714 		row = this.rows[i];
27715 		row.offsetTop = ymax;
27716 		row.offsetLeft = 0;
27717 		if (! this.collapse) row.offsetLeft = this.borderLeft + this.cellspacing;
27718 //		row.offsetWidth = this.offsetWidth - ((this.border * two) + (this.cellspacing * 2));
27719 		ymax += row.offsetHeight;
27720 		if (this.collapse) continue;
27721 			
27722 		if (i == (this.rows.length-1))
27723 		{
27724 		     ymax += this.border + this.cellspacing;
27725 		}
27726 		else
27727 		{
27728 			ymax += gutter; 
27729 		}
27730 	}
27731 	
27732 	this.offsetHeight = ymax;
27733 }
27734 //=================================================================
27735 //		htmlElement$adjustRowHeight
27736 //=================================================================
27737 function htmlElement$adjustRowHeight(row)
27738 {
27739 	var i,height,remain,cell,xrow;
27740 	var j,n,c,col;
27741 
27742 	height = 0;
27743 	remain = this.rows.length - (row.rowIndex);
27744 	row.spanned = false;
27745 	row.offsetHeight = 0;
27746 
27747 	if (row.fixed_height)
27748 	{
27749 		height = row.iheight;
27750 	}
27751 
27752 //-------------------- set row height --------------------------
27753 
27754 	for (i=0; i &lt; row.cells.length; ++i)
27755 	{
27756 
27757 		cell = row.cells[i];
27758 
27759 		if (cell.rowspan > remain) cell.rowspan = remain;
27760 		
27761 		if (cell.rowspan &lt;= 1)
27762 		{
27763 			if (cell.offsetHeight > height) height = cell.offsetHeight;
27764 		}
27765 		else row.spanned = true;
27766 	}
27767 
27768 	row.offsetHeight = height; // + this.borderTop + this.borderBottom + this.cellspacing;
27769 
27770 	for (i=0; i &lt; row.cells.length; ++i)
27771 	{
27772 		cell = row.cells[i];
27773 		col = this.colWidths[cell.colIndex];
27774 		if (cell.colspan &lt;= 1) cell.offsetWidth = col.width;
27775 	
27776 		height = row.offsetHeight;
27777 		if (cell.rowspan > 1) continue;					
27778 		cell.justifyCell(row,height);
27779 		
27780 		cell.offsetHeight = row.offsetHeight;
27781 		cell.offsetLeft = col.xpos;
27782 	}
27783 }
27784 //=================================================================
27785 //				htmlElement$adjustSpannedRowHeight
27786 //=================================================================
27787 function htmlElement$adjustSpannedRowHeight(row)
27788 {
27789 	var i,k,cell,xrow,n,need,modified;
27790 	var gutter,h;
27791 
27792 	if (! row.spanned) return;
27793 	gutter = this.borderTop + this.cellspacing;
27794 
27795 	for (i=0; i &lt; row.cells.length; ++i)
27796 	{
27797 		cell = row.cells[i];
27798 		if (cell.rowspan &lt;= 1) continue;
27799 
27800 		h = row.offsetHeight;
27801 		for (k = row.rowIndex+1; k &lt; (row.rowIndex + cell.rowspan); ++k)
27802 		{
27803 			xrow = this.rows[k];
27804 			h += xrow.offsetHeight;
27805 		}
27806 
27807 		cell.justifyCell(row,h);
27808 
27809 		if (cell.offsetHeight &lt;= h)
27810 		{
27811 			cell.offsetHeight = h;
27812 		}
27813 		else
27814 		{
27815 			need = h - cell.offsetHeight;
27816 			n = row.rowIndex + (cell.rowspan - 1);
27817 
27818 			xrow = this.rows[n];
27819 			xrow.offsetHeight += need;	
27820 		}			
27821 	}
27822 
27823 }
27824 //============================================================================================
27825 //			htmlElement$placeDone_
27826 //============================================================================================
27827 function htmlElement$placeDone_()
27828 {
27829 	var NODE_TEXT = 3;
27830 	var NODE_TAG  = 1;
27831 
27832 	var c,p,t,r,x,y,baseY,h,used;
27833 	var dx,dy,valign,align;
27834 	var i,j,height,xmax;
27835 	var row,ele,bx,height,ypos;
27836 
27837 	if (this.typeNode == NODE_TEXT) return;
27838 	if (this.active.rows.length == 0) return;
27839 	if (this.tagName == 'DIVIDE') return;
27840 
27841 //	if (this.tagName == 'TD') return;
27842 	if (this.tagName == 'TR') return;
27843 	
27844 	if (this.iheight > this.offsetHeight) this.offsetHeight = this.iheight;
27845 
27846 	if (! ((this.style.float == 'left') || (this.style.float == 'right')))
27847 	{	
27848 		switch (this.tagName)
27849 		{
27850 		case "P":
27851 			this.offsetWidth = this.parentNode.offsetWidth;
27852 		}
27853 	}
27854 			
27855 	t = this;
27856 
27857 //------------------- Align Children ----------
27858 
27859 	align = '' + this.align;
27860 	if (align == undefined) align = '';
27861 	var type = typeof(this.style);
27862 	if (type == 'object' && this.style.textAlign != '') align = this.style.textAlign;
27863 	if (align == 'left') align = '';
27864 
27865 
27866 	if (this.tagName == 'CENTER') align = 'center';
27867 	
27868 	valign = this.valign;
27869 	if (this.style) 
27870 	{
27871 		if (this.style.verticalAlign != '') valign = this.style.verticalAlign;
27872 	}
27873 
27874 	if (valign == undefined) valign = '';
27875 	if (valign == 'top') valign = 'top';
27876 	if (valign == '') valign = 'center';
27877 
27878 //------------------ Adjust Rows --------------
27879 
27880 	for (r = 0; r &lt; this.active.rows.length; ++r)
27881 	{
27882 		row = this.active.rows[r];
27883 
27884 		baseY = 0;
27885 		height = 0;
27886 	
27887 		for (c = 0; c &lt; row.cells.length; ++c)
27888 		{
27889 			ele = row.cells[c];
27890 			y = ele.baseY;
27891 			if (ele.offsetHeight > 0) height = ele.offsetHeight;
27892 			if (ele.nodeType == NODE_TEXT)
27893 			{
27894 				y = Math.round(ele.offsetHeight * 0.75);
27895 //				y = Math.round(ele.offsetHeight * 0.5);
27896 			}
27897 			else
27898 			if (ele.tagName == 'DIVIDE')
27899 			{
27900 				y = ele.baseYpos;
27901 				if (ele.valign == 'center') y = ele.baseYpos;
27902 				if (ele.valign == 'middle') y = ele.baseYpos;
27903 				if (ele.valign ==    'top') y = ele.topYpos;
27904 				if (ele.valign == 'bottom') y = ele.botYpos;			
27905 			}
27906 			else
27907 			if (ele.tagName == 'ROOT')
27908 			{
27909 				y = ele.botYpos;
27910 				if (ele.valign == 'center') y = ele.baseYpos;
27911 				if (ele.valign == 'middle') y = ele.baseYpos;
27912 				if (ele.valign ==    'top') y = ele.topYpos;
27913 				if (ele.valign == 'bottom') y = ele.botYpos;			
27914 			}
27915 			else
27916 			if (ele.tagName == 'SUP')
27917 			{
27918 				y = ele.offsetHeight - ele.baseY;
27919 			}
27920 			else
27921 			{
27922 				y = 0;
27923 				if (ele.valign == 'center') y = ele.offsetHeight / 2;
27924 				if (ele.valign == 'middle') y = ele.offsetHeight / 2;
27925 				if (ele.valign ==    'top') y = 0;
27926 				if (ele.valign == 'bottom') y = ele.offsetHeight;
27927 			}
27928 			if (y > baseY) baseY = y;
27929 		}
27930 
27931 		if (baseY >  0)
27932 		{
27933 			for (c = 0; c &lt; row.cells.length; ++c)
27934 			{
27935 				ele = row.cells[c];
27936 				if (ele.nodeType == NODE_TEXT)
27937 				{
27938 					ele.offsetTop = ele.offsetTop + baseY;
27939 					ele.offsetHeight = height;
27940 				}
27941 				if (ele.tagName == "SUB")
27942 				{
27943 					h = (ele.offsetHeight - baseY) + 2;
27944 					ele.offsetTop = ele.offsetTop + h;
27945 					ele.offsetHeight = height + 2;
27946 				}
27947 				if (ele.tagName == "SUP")
27948 				{
27949 					h = (ele.offsetHeight - baseY) - 2;
27950 					ele.offsetTop = ele.offsetTop - h;
27951 					ele.offsetHeight = height + 2;
27952 				}
27953 			}
27954 		}
27955 
27956 	if ((align == '') && (valign == '')) continue;
27957 
27958 		xmax = this.offsetWidth;
27959 		used = (this.active.maxWidth - row.remain) + (this.paddingLeft + this.paddingRight);
27960 		dx = 0;
27961 		if (align == 'center') dx = Math.floor((xmax - used) / 2);
27962 		if (align == 'right') dx = (xmax - used) - 2;
27963 		if (dx &lt; 0) dx = 0;
27964 
27965 		for (c = 0; c &lt; row.cells.length; ++c)
27966 		{
27967 			ele = row.cells[c];
27968 		    dy =  this.align_dy(valign,ele.offsetHeight,row.height);
27969 //		    dx =  this.align_dx(align,ele.offsetWidth,xmax);
27970 
27971 			ele.xjust = dx;
27972 			ele.yjust = dy;
27973 		}
27974 	}
27975 }
27976 //============================================================================================
27977 //			htmlElement$place_BR
27978 //============================================================================================
27979 function htmlElement$place_BR()
27980 {
27981 	var p,text,t;
27982 	var stype;
27983 	var name;
27984 	var h,w,obj;
27985 
27986 	t = this;
27987 
27988 	h = this.charHeight() * 1.0;
27989 	w = 0;
27990 
27991 	this.width		= w;
27992 	this.height		= h;
27993 	this.fixed_height	= true;
27994 	this.fixed_width	= true;
27995 	this.iheight		= h;
27996 	this.iwidth		= w;
27997 
27998 	this.active.maxWidth	= 0;
27999 	this.offsetHeight	= h;
28000 	this.offsetWidth	= w + this.marginLeft + this.marginRight;
28001 }
28002 //============================================================================================
28003 //			htmlElement$place_INPUT
28004 //============================================================================================
28005 function htmlElement$place_INPUT()
28006 {
28007 	var h,w,height,width,obj;
28008 	var e;
28009 	
28010 	e = this;
28011 
28012 	this.parentElement.font.size = 8;
28013 	
28014 	h = parseFloat(this.height);
28015 	w = parseFloat(this.width);
28016 	if (isNaN(h)) h = 0;
28017 	if (isNaN(w)) w = 0;
28018 	if (h &lt;= 0) h = 0;
28019 	if (w &lt;= 0) w = 0;
28020 
28021 	switch (this.type)
28022 	{
28023 	case 'button': 
28024 				if (this.PDF_onClick == '') this.PDF_onClick= "app.ale" + "rt('No PDF Click Event specified')";
28025 				if (h == 0) h = 16;
28026 				width = this.wordWidth(this.value);
28027 				if (w &lt; (width+20)) w = width + 20;
28028 				break;
28029 	case 'reset': 
28030 				if (h == 0) h = 16;
28031 				width = this.wordWidth(this.value,this);
28032 				if (w &lt; (width+12)) w = width + 12;		
28033 				break;
28034 	case 'submit':	
28035 				if (h == 0) h = 16;
28036 				width = this.wordWidth(this.value,this);
28037 				if (w &lt; (width+12)) w = width + 12;
28038 				break;
28039 	case 'radio': w = 12;
28040 				  h = 12;
28041 				break;
28042 	case 'checkbox': w = 12;
28043 				     h = 12;
28044 				break;
28045 	case 'image':
28046 				this.obj = null;
28047 				if ((h == 0) || (w == 0))
28048 				{
28049 					this.obj = this.html.getImageSize(this.src);
28050 					if (this.obj != null)
28051 					{
28052 						if (h == 0) h = obj.height;
28053 						if (w == 0) w = obj.width;
28054 					}
28055 				}
28056 				if (h == 0) h = 12;
28057 				if (w == 0) w = 12;
28058 				break;
28059 
28060 	default: h = 22;
28061 			 w = 120;
28062 			 if (this.size > 0) w = this.size * 4;
28063 	}
28064 
28065 	if (this.style.marginLeft == '') this.marginLeft = 5;
28066 	if (this.style.marginRight == '') this.marginRight = 5;
28067 
28068 	this.width	= w;
28069 	this.height	= h;
28070 	this.fixed_height = true;
28071 	this.fixed_width = true;
28072 	this.iheight = h;
28073 	this.iwidth = w;
28074 
28075 	this.active.maxWidth = w - (this.marginLeft + this.marginRight);
28076 	this.offsetHeight = h;
28077 	this.offsetWidth = w + this.marginLeft + this.marginRight;
28078 }
28079 //============================================================================================
28080 //			htmlElement$place_TEXTAREA
28081 //============================================================================================
28082 function htmlElement$place_TEXTAREA()
28083 {
28084 }
28085 //============================================================================================
28086 //			htmlElement$place_SELECT
28087 //============================================================================================
28088 function htmlElement$place_SELECT()
28089 {
28090 }
28091 //============================================================================================
28092 //			htmlElement$place_HR
28093 //============================================================================================
28094 function htmlElement$place_HR()
28095 {
28096 	var p,text,t;
28097 	var stype,dx;
28098 	var name;
28099 	var h,obj;
28100 
28101 	t = this;
28102 	p = this.parentNode;
28103 	p.newRow_();
28104 	p.active.ypos += 6;
28105 	p.positionChild_(this);
28106 	p.newRow_();
28107 	p.active.ypos += 6;
28108 
28109 //	this.html.pages[this.html.pages.length] = p.active.ypos;
28110 
28111 	if (this.width == 0) return;
28112 	dx = p.offsetWidth - this.width;
28113 	if (dx &lt;= 0) return;
28114 	
28115 	this.offsetLeft += Math.round(dx / 2);
28116 }
28117 //============================================================================================
28118 //			htmlElement$place_UL
28119 //============================================================================================
28120 function htmlElement$place_UL()
28121 {
28122 	var t,image;
28123 
28124 	t = this;
28125 
28126 	this.parentNode.newRow_();
28127 	if (this.style.marginLeft == '') this.marginLeft = 20;
28128 
28129 	if (this.style.float == 'left') this.offsetWidth = this.marginLeft + this.marginRight;
28130 
28131 	this.active.counter = 0;
28132 	this.fontName = '';
28133 }
28134 //============================================================================================
28135 //			htmlElement$place_BLOCKQUOTE
28136 //============================================================================================
28137 function htmlElement$place_BLOCKQUOTE()
28138 {
28139 	var t;
28140 
28141 	t = this;
28142 
28143 	this.parentNode.newRow_();
28144 	this.marginLeft += 20;	
28145 	this.fontName = '';
28146 }
28147 //============================================================================================
28148 //			htmlElement$place_LI
28149 //============================================================================================
28150 function htmlElement$place_LI()
28151 {
28152 	var p,text,t,x,xp,y;
28153 	var stype,padLeft,padRight;
28154 	var name,dx;
28155 	var h,obj;
28156 	var width,pad,height;
28157 	var image,child;
28158 	var depth,pad;
28159 
28160 	t = this;
28161 	this.imageHeight = 0;
28162 	this.imageWidth = 0;
28163 
28164 	p = this.parentNode;
28165 	p.active.counter += 1;
28166 	this.count = p.active.counter;
28167 
28168 	this.bullet = null;
28169 	
28170 	if (! ((this.style.float == 'left') || (this.style.float == 'right')) )  p.newRow_();
28171 
28172 	stype = p.style.listStyleType;
28173 	if (stype == 'none') return;
28174 
28175 	this.bullet = new Object();
28176 
28177 	this.bullet.src		= '';
28178 	this.bullet.text		= '';
28179 	this.bullet.fontName		= '';
28180 	this.bullet.offsetTop		= 0;
28181 	this.bullet.offsetHeight	= 0;
28182 	this.bullet.offsetWidth		= 0;
28183 	this.bullet.offsetLeft		= 0;
28184 	this.bullet.imageSize		= null;
28185 	this.bullet.size		= this.font.size;
28186 
28187 	if ((stype == '') && (p.tagName != 'OL'))
28188 	{					
28189 		name = this.type;
28190 		this.bullet.text = String.fromCharCode(108);
28191 		if (this.depth == 2) this.bullet.text = String.fromCharCode(109);
28192 		if (this.depth > 2) this.bullet.text = String.fromCharCode(110);
28193 
28194 		if (name ==  'circle') this.bullet.text = String.fromCharCode(109);
28195 		if (name ==     'box') this.bullet.text = String.fromCharCode(110);
28196 		if (name ==   'check') this.bullet.text = String.fromCharCode(51);
28197 		if (name ==    'star') this.bullet.text = String.fromCharCode(72);
28198 		if (name ==   'arrow') this.bullet.text = String.fromCharCode(225);
28199 	
28200 		if (name ==   'heart') this.bullet.text = String.fromCharCode(170);
28201 		if (name ==   'spade') this.bullet.text = String.fromCharCode(171);
28202 		if (name ==    'club') this.bullet.text = String.fromCharCode(168);
28203 		if (name == 'diamond') this.bullet.text = String.fromCharCode(169);
28204 		this.bullet.fontName = 'dingbat';
28205 		
28206 		this.bullet.size = this.bullet.size - 4;
28207 		if (this.bullet.size &lt; 2) this.bullet.size = 1;
28208 		
28209 	}
28210 	else
28211 	{
28212 		this.bullet.text = this.countText_(stype);
28213 		this.bullet.fontName = this.font.fontName;
28214 	}
28215 
28216 	width = Math.round(this.wordWidth(this.bullet.text));
28217 	height = Math.round(this.font.size);
28218 
28219 //	this.baseY = height * 0.75;
28220 	y = height * 1;
28221 	this.bullet.offsetTop  = y;
28222 
28223 	this.bullet.imageSize = null;
28224 	this.bullet.src = '';
28225 
28226 	image = this.style.listStyleImage;
28227 	if (image != '') 
28228 	{
28229 		this.bullet.src = this.html.imageFilename(image);
28230 		this.bullet.imageSize = this.html.getImageSize(this.bullet.src);
28231 		if (this.bullet.imageSize == null) 
28232 		{
28233 			this.bullet = null;
28234 			return;
28235 		}
28236 		
28237 		this.bullet.text = '';
28238 		width = this.bullet.imageSize.width;	
28239 		height = this.bullet.imageSize.height;
28240 		this.bullet.offsetTop = 0;
28241 		this.baseY = height;
28242 	}
28243 
28244 
28245 	if (height > this.offsetHeight) this.offsetHeight = height;
28246 
28247 	padLeft = 0;
28248 	padRight = 10;
28249 //	if ((p.tagName == 'OL') || (p.tagName == "UL")) padLeft = 20;
28250 
28251 	this.bullet.offsetWidth		= width;
28252 	this.bullet.offsetHeight	= height;
28253 	this.bullet.offsetLeft		= padLeft;
28254 
28255 	this.active.width	+= width + padLeft + padRight;
28256 	this.offsetWidth	= this.active.width;
28257 
28258 //---------------- offset child text ---------
28259 
28260 	child = this.firstChild;
28261 	while (child != null)
28262 	{
28263 		child.xjust = width + padLeft + padRight;
28264 		child = child.nextSibling;
28265 	}
28266 	
28267 }
28268 //============================================================================================
28269 //			htmlElement$place_text
28270 //============================================================================================
28271 function htmlElement$place_text()
28272 {
28273 	var align,i,dx,p,h,w,t;
28274 	var pe;
28275 
28276 	t = this;
28277 
28278 	pe = this.parentElement;
28279 	if (pe.style.textTransform == 'uppercase') this.text = this.text.toUpperCase();
28280 	if (pe.style.textTransform == 'lowercase') this.text = this.text.toLowerCase();
28281 
28282 	p = this.parentNode;
28283 	this.html.setFontName(p.font.fontName);
28284 
28285 	this.parts = new Array();
28286 	p.place_text_A(this.text,this.parts,this.parentElement);
28287 
28288 	this.active.xmax = 0;
28289 	this.active.ymax = 0;
28290 	this.offsetHeight = 0;
28291 	this.offsetWidth = 0;
28292 
28293 	for (i=0; i &lt; this.parts.length; ++i)
28294 	{
28295 	
28296 		w = this.parts[i].offsetLeft + this.parts[i].offsetWidth;
28297 		h = this.parts[i].offsetTop + this.parts[i].offsetHeight;
28298 
28299 		if (w > this.active.xmax) this.active.xmax = w;
28300 		if (h > this.offsetHeight) this.offsetHeight = h;
28301 	}
28302 
28303 	h = this.offsetHeight;
28304 	w = this.active.xmax;
28305 
28306 	this.offsetWidth = w;
28307 	this.active.ymax = h;
28308 	
28309 	this.parentNode.updateSize_(h,w);
28310 }
28311 //============================================================================================
28312 //			htmlElement$align_dx
28313 //============================================================================================
28314 function htmlElement$align_dx(align,width,maxWidth)
28315 {
28316 	var dx,s;
28317 
28318 	if (width &lt; 0) return 0;
28319 
28320 	if (width >= maxWidth) return 0;
28321 	if (align == '') return 0;
28322 	if (align == 'left') return 0;
28323 
28324 	dx = maxWidth - width;
28325 	if (align == 'center') return Math.floor(dx / 2);
28326 	if (align == 'right') return dx;
28327 
28328 	return 0;	
28329 }
28330 //============================================================================================
28331 //			htmlElement$align_dy
28332 //============================================================================================
28333 function htmlElement$align_dy(align,height,maxHeight)
28334 {
28335 	var dy,s;
28336 
28337 	s = this.html.style;
28338 
28339 	if (height >= maxHeight) return 0;
28340 	if (align == '') return 0;
28341 	if (align == 'top') return 0;
28342 
28343 	dy = maxHeight - height;
28344 
28345 	if (align == 'center') return Math.floor(dy / 2);
28346 	if (align == 'middle') return Math.floor(dy / 2);
28347 	if (align == 'bottom') return dy;
28348 
28349 	return 0;	
28350 }
28351 //============================================================================================
28352 //			htmlElement$place_text_A
28353 //============================================================================================
28354 function htmlElement$place_text_A(text,parts,parent)
28355 {
28356 	var i,c,w,width,p,k,kwidth,word,x,y,dx,t,dy;
28357 	var height,zwidth,temp,twidth;
28358 	var iwidth;
28359 
28360 	t = this;
28361 
28362 	height = parent.charHeight() * 1.1;
28363 	width  = parent.wordWidth(text);
28364 		
28365 	if (this.width == undefined) this.width = 0;
28366 	if (this.active.maxWidth == 0) this.active.maxWidth = this.width;
28367 	this.active.remain = this.active.maxWidth - (this.padWidth() + this.active.xpos);
28368 
28369 //--------------------- fits ----------------
28370 
28371 	twidth = width;
28372 
28373 	if (width &lt;= this.active.remain)
28374 	{		
28375 		this.place_text_B(parts,text,height,width);
28376 		return;	
28377 	}
28378 
28379 //-------------------- nowrap ---------------
28380 
28381 	if (this.html.nowrap)
28382 	{
28383 		temp = '';
28384 		width = parent.charWidth(46) + 2;
28385 		for (i=0; i &lt; text.length; ++i)
28386 		{
28387 			c = text.charCodeAt(i);
28388 			width += parent.charWidth(c);
28389 
28390 			if (width > this.active.remain)
28391 			{
28392 				if (i == 0) iwidth = width;
28393 				if (i == 0) i = 1;		// always 1 character 
28394 				temp = text.substr(0,i) + '...';
28395 				this.place_text_B(parts,temp,height,iwidth);
28396 				return;	
28397 
28398 			}
28399 			
28400 			iwidth = width;
28401 		}
28402 
28403 		this.place_text_B(parts,text,height,width);
28404 		return;	
28405 	}
28406 
28407 //-------------------- wrap ---------------------------
28408 	
28409 	k = -1;
28410 	kwidth = 0;
28411 	width = 0;
28412 
28413 	for (i=0; i &lt; text.length; ++i)
28414 	{
28415 		c = text.charCodeAt(i);
28416 		if ((c &lt;= 32))
28417 		{
28418 			 k = i;
28419 			 kwidth = width;
28420 		}
28421 
28422 		zwidth = width;
28423 		width += parent.charWidth(c);
28424 
28425 		if ((width &lt;= (this.active.remain-2)) || ((c > 32) && (k &lt; 0)) ) continue;
28426 		
28427 		if (k >= 0)
28428 		{
28429 				word = text.substr(0,k);
28430 				text = text.substr(k+1);
28431 
28432 				this.place_text_B(parts,word,height,kwidth);
28433 				this.newRow_();
28434 				this.place_text_A(text,parts,parent);
28435 				return;
28436 		}
28437 
28438 		if (this.active.columns > 0) 
28439 		{
28440 			this.newRow_(parent);
28441 			continue;
28442 		}
28443 
28444 		word = text.substr(0,i+1);
28445 		text = text.substr(i+1);
28446 		this.place_text_B(parts,word,height,zwidth);
28447 		this.newRow_();
28448 		this.place_text_A(text,parts,parent);
28449 		return;
28450 
28451 	}
28452 
28453 	this.place_text_B(parts,text,height,width);
28454 	return;	
28455 
28456 }
28457 //============================================================================================
28458 //			htmlElement$place_text_B
28459 //============================================================================================
28460 function htmlElement$place_text_B(parts,text,height,width)
28461 {
28462 	var p;
28463 	var NODE_TEXT = 3;
28464 	var NODE_TAG  = 1;
28465 
28466 	p = new Object();
28467 	p.tagName		= '#TEXT';
28468 	p.nodeType		= NODE_TEXT;
28469 	p.offsetTop		= 0;
28470 	p.offsetLeft		= 0;
28471 	p.offsetWidth		= Math.round(width);
28472 	p.offsetHeight		= Math.round(height);
28473 	p.text			= text;
28474 
28475 	p.marginTop		= 0;
28476 	p.marginBottom		= 0;
28477 	p.marginLeft		= 0;
28478 	p.marginRight		= 0;
28479 
28480 	p.paddingTop		= 0;
28481 	p.paddingBottom		= 0;
28482 	p.paddingLeft		= 0;
28483 	p.paddingRight		= 0;
28484 
28485 	p.borderTop		= 0;
28486 	p.borderBottom		= 0;
28487 	p.borderLeft		= 0;
28488 	p.borderRight		= 0;
28489 
28490 	p.xjust			= 0;
28491 	p.yjust			= 0;
28492 
28493 	this.positionChild_(p);
28494 	parts[parts.length] = p;
28495 
28496 }
28497 //============================================================================================
28498 //			htmlElement$place_IMG
28499 //============================================================================================
28500 function htmlElement$place_IMG()
28501 {
28502 	var dx,dy,align,p;
28503 
28504 	this.offsetLeft = 0;
28505 	this.offsetTop  = 0;
28506 	
28507 	this.parentNode.addImage_(this);
28508 }
28509 //============================================================================================
28510 //			htmlElement$place_DIV
28511 //============================================================================================
28512 function htmlElement$place_DIV()
28513 {
28514 	var dx,dy,align,p;
28515 
28516 	this.offsetLeft = 0;
28517 	this.offsetTop  = 0;
28518 }
28519 //============================================================================================
28520 //			htmlElement$place_LABEL
28521 //============================================================================================
28522 function htmlElement$place_LABEL()
28523 {
28524 	var dx,dy,align,p;
28525 
28526 	this.offsetLeft = 0;
28527 	this.offsetTop  = 0;
28528 }
28529 //============================================================================================
28530 //			htmlElement$place_GRAPHIC
28531 //============================================================================================
28532 function htmlElement$place_GRAPHIC()
28533 {
28534 	var dx,dy,align,p,a;
28535 
28536 //	if (this.height > this.parentNode.active.rowHeight) this.parentNode.active.rowHeight = this.height;
28537 //	if (this.height > this.active.rowHeight) this.active.rowHeight = this.height;
28538 //	a = this;
28539 	
28540 //	this.parentNode.addImage_(this);
28541 }
28542 //============================================================================================
28543 //			htmlElement$place_GROUP
28544 //============================================================================================
28545 function htmlElement$place_GROUP()
28546 {
28547 	var dx,dy,align,p,a;
28548 
28549 	this.offsetLeft = 0;
28550 	this.offsetTop  = 0;
28551 
28552 }
28553 //============================================================================================
28554 //			htmlElement$addImage_
28555 //============================================================================================
28556 function htmlElement$addImage_(c)
28557 {
28558 	var size,t,dx,height;
28559 
28560 	if (! this.active.aligned) this.flushRow_();
28561 
28562 	if (c.align == '')
28563 	{
28564 		this.positionChild_(c);
28565 		return;
28566 	}
28567 
28568 
28569 	c.offsetLeft = this.active.xpos + this.padLeft();
28570 	c.offsetTop  = this.active.ypos + this.padTop();
28571 
28572 	height = c.offsetTop + c.offsetHeight;
28573 	if (height > this.offsetHeight) this.offsetHeight = height;
28574 	if (height > this.rowHeight) this.rowHeight = height;
28575 	
28576 	t = this;
28577 	size = c.offsetLeft + c.offsetWidth; 
28578 	if (size > this.offsetWidth) 
28579 	{
28580 		if (size > this.html.maxWidth) size = this.html.maxWidth;
28581 		this.offsetWidth = size;
28582 		this.active.width = this.offsetWidth - (this.active.marginLeft + this.active.marginRight);
28583 	}
28584 		
28585 	if (c.align == 'right')
28586 	{
28587 		this.pushRight_();
28588 		dx = this.offsetWidth - (this.active.marginRight + c.offsetWidth);
28589 		if (dx &lt; 0) dx = 0;
28590 		c.offsetLeft = dx;
28591 		this.active.marginRight += c.offsetWidth + 4;
28592 		if (this.active.marginRight > this.active.width)  this.active.marginRight = this.active.width - this.active.marginLeft;
28593 		this.active.rightBottom = this.active.ypos + c.offsetHeight;
28594 		this.active.width = this.offsetWidth - this.padWidth();
28595 		this.active.remain = this.active.width;
28596 		
28597 		this.active.aligned = true;
28598 		return;
28599 	}
28600 
28601 	if (c.align == 'left')
28602 	{
28603 		this.pushLeft_();
28604 		this.active.xpos = 0;
28605 		this.active.marginLeft = c.offsetLeft + c.offsetWidth + 4;
28606 	
28607 		if ((this.active.marginLeft + this.activemarginRight) > this.active.width)  this.active.marginLeft = this.active.width - this.active.marginLeft;
28608 		this.active.leftBottom = this.active.ypos + c.offsetHeight;
28609 		this.active.width = this.offsetWidth - this.padWidth();
28610 		this.active.remain = this.active.width;
28611 		this.active.aligned = true;
28612 		return;
28613 	}
28614 
28615 	this.flushRow_();
28616 	this.parentNode.positionChild_(this);
28617 }
28618 //============================================================================================
28619 //			htmlElement$pushLeft_
28620 //============================================================================================
28621 function htmlElement$pushLeft_()
28622 {
28623 	var obj;
28624 
28625 	obj = new Object;
28626 	obj.marginLeft  = this.active.marginLeft;
28627 	obj.leftBottom  = this.active.leftBottom;
28628 	this.active.Lstack[this.active.Lcount] = obj;
28629 	this.active.Lcount += 1;
28630 }
28631 //============================================================================================
28632 //			htmlElement$pushRight_
28633 //============================================================================================
28634 function htmlElement$pushRight_()
28635 {
28636 	var obj;
28637 
28638 	obj = new Object;
28639 	obj.marginRight  = this.active.marginRight;
28640 	obj.rightBottom  = this.active.rightBottom;
28641 	this.active.Rstack[this.active.Rcount] = obj;
28642 	this.active.Rcount += 1;
28643 }
28644 //============================================================================================
28645 //			htmlElement$padWidth
28646 //============================================================================================
28647 function htmlElement$padWidth()
28648 {
28649 	var x;
28650 
28651 	x =   this.active.marginLeft + this.active.marginRight + 
28652 			this.marginLeft + this.marginRight + 
28653 			this.paddingLeft + this.paddingRight;
28654 			
28655 	x = html$i4(x);
28656 			
28657 	return x;
28658 }
28659 //============================================================================================
28660 //			htmlElement$padLeft
28661 //============================================================================================
28662 function htmlElement$padLeft()
28663 {
28664 	var x;
28665 
28666 	x =	this.active.marginLeft +  
28667 		this.marginLeft +  
28668 		this.paddingLeft +
28669 		this.borderLeft;
28670 
28671 	x = html$i4(x);
28672 					
28673 	return x;
28674 }
28675 //============================================================================================
28676 //			htmlElement$padRight
28677 //============================================================================================
28678 function htmlElement$padRight()
28679 {
28680 	var x;
28681 
28682 	x =	this.marginRight +  
28683 		this.paddingRight +
28684 		this.borderRight;
28685 
28686 	x = html$i4(x);
28687 		
28688 	return x;
28689 }
28690 //============================================================================================
28691 //			htmlElement$padTop
28692 //============================================================================================
28693 function htmlElement$padTop()
28694 {
28695 	var x;
28696 
28697 	x =	this.marginTop +  
28698 		this.paddingTop + 
28699 		this.borderTop;
28700 
28701 	x = html$i4(x);
28702 	
28703 	return x;
28704 }
28705 //============================================================================================
28706 //			htmlElement$padBottom
28707 //============================================================================================
28708 function htmlElement$padBottom()
28709 {
28710 	var x;
28711 
28712 	x =	this.marginBottom +  
28713 		this.paddingBottom +
28714 		this.borderBottom;
28715 							
28716 	x = html$i4(x);
28717 	return x;
28718 }
28719 //============================================================================================
28720 //			htmlElement$newRow_
28721 //============================================================================================
28722 function htmlElement$newRow_()
28723 {
28724 	var n,p;
28725 
28726 	p = this;
28727 
28728 	if (this.active.colCount == 0) return;			// no data yet;
28729 
28730 	this.active.ypos = this.active.ypos + this.active.rowHeight + 1;
28731 	this.active.xpos = 0;
28732 	this.active.remain = this.active.width;
28733 	this.active.rowHeight = 0;
28734 	this.active.colCount = 0;
28735 
28736 	if (! this.active.aligned) return;
28737 
28738 //------------- left margin ---------
28739 	
28740 	while ((this.active.Lcount > 0) && (this.active.ypos >= this.active.leftBottom))
28741 	{
28742 		this.active.Lcount = this.active.Lcount - 1;
28743 		n = this.active.Lcount;
28744 		this.active.marginLeft = this.active.Lstack[n].marginLeft;
28745 		this.active.leftBottom = this.active.Lstack[n].leftBottom;
28746 		this.active.width = this.offsetWidth - this.padWidth();
28747 		this.active.remain = this.active.width;
28748 	}
28749 
28750 //------------- right margin ---------
28751 	
28752 	while ((this.active.Rcount > 0) && (this.active.ypos >= this.active.rightBottom))
28753 	{
28754 		this.active.Rcount = this.active.Rcount - 1;
28755 		n = this.active.Rcount;
28756 		this.active.marginRight = this.active.Lstack[n].marginRight;
28757 		this.active.rightBottom = this.active.Lstack[n].rightBottom;
28758 		this.active.width = this.offsetWidth - this.padWidth();
28759 		this.active.remain = this.active.width - this.active.xpos;
28760 	}
28761 
28762 	this.updateSize_();
28763 	if ((this.active.Lcount > 0) || (this.active.Rcount > 0)) return;
28764 
28765 	this.active.aligned = false;
28766 	this.active.Rcount = 0;
28767 	this.active.Lcount = 0;
28768 	this.active.Rstack = new Array();
28769 	this.active.Lstack = new Array();
28770 
28771 	this.active.marginRight = 0;
28772 	this.active.rightBottom = 0;
28773 	this.active.marginLeft = 0;
28774 	this.active.leftBottom = 0;
28775 	
28776 	this.active.width  = this.offsetWidth - this.padWidth();
28777 	this.active.remain = this.active.maxWidth - this.padWidth();
28778 
28779 }
28780 //============================================================================================
28781 //			htmlElement$flushRow_
28782 //============================================================================================
28783 function htmlElement$flushRow_()
28784 {
28785 	var n;
28786 	
28787 	if (! this.active.aligned) return;
28788 
28789 	this.active.xpos  = 0;
28790 	this.active.remain = this.active.maxWidth - this.padWidth();
28791 
28792 //------------- left margin ---------
28793 	
28794 	while (this.active.Lcount > 0)
28795 	{
28796 		this.active.Lcount = this.active.Lcount - 1;
28797 		n = this.active.Lcount;
28798 		this.active.marginLeft = this.active.Lstack[n].marginLeft;
28799 		this.active.leftBottom = this.active.Lstack[n].leftBottom;
28800 		this.active.width = this.offsetWidth - this.padWidth();			
28801 		this.active.remain = this.active.width;
28802 	}
28803 
28804 //------------- right margin ---------
28805 	
28806 	while (this.active.Rcount > 0)
28807 	{
28808 		this.active.Rcount = this.active.Rcount - 1;
28809 		n = this.active.Rcount;
28810 		this.active.marginRight = this.active.Lstack[n].marginRight;
28811 		this.active.rightBottom = this.active.Lstack[n].rightBottom;
28812 		this.active.width = this.offsetWidth - this.padWidth();
28813 		this.active.remain = this.active.width;
28814 
28815 	}
28816 
28817 	this.active.aligned = false;
28818 	this.active.Rcount = 0;
28819 	this.active.Lcount = 0;
28820 	this.active.Rstack = new Array();
28821 	this.active.Lstack = new Array();
28822 	this.active.marginLeft = 0;
28823 	this.active.marginRight = 0;
28824 	this.active.leftBottom = 0;
28825 	this.active.rightBottom = 0;
28826 	this.active.width = this.offsetWidth - this.padWidth();
28827 	this.active.remain = this.active.width;
28828 
28829 }
28830 //============================================================================================
28831 //			htmlElement$positionChild_
28832 //============================================================================================
28833 function htmlElement$positionChild_(c)
28834 {
28835 	var remain,h,w,size,t,x,row,height,width,dy;
28836 	var top,left,float,need;
28837 	var offsetLeft,offsetTop;
28838 	
28839 	if (c.tagName == 'TR') return;
28840 	if (this.tagName == 'TR') return;
28841 
28842 	t = this;
28843 
28844 	c.offsetHeight = Math.round(c.offsetHeight);
28845 	c.offsetWidth = Math.round(c.offsetWidth);
28846 
28847 	
28848 
28849 	if (c.style)
28850 	if (c.style.position == 'absolute')
28851 	{
28852 		c.offsetLeft = this.html.getSize(c.style.left,c);
28853 		c.offsetTop  = this.html.getSize(c.style.top,c);
28854 
28855 		w = c.offsetLeft + c.offsetWidth + this.padLeft() + this.padRight();
28856 		h = c.offsetTop + c.offsetHeight + this.padBottom();
28857 		this.updateSize_(h,w);
28858 		return;
28859 	}
28860 
28861 	float = '';
28862 	if (c.style)
28863 	{
28864 		float = c.style.float;
28865 		if (! ((float == 'left') || (float == 'right'))) float = '';
28866 		c.style.float = float;
28867 	}
28868 	
28869 	if (float != '')
28870 	{
28871 		need = this.active.xpos + this.padWidth() + c.offsetWidth;
28872 //		if (this.active.maxWidth &lt; need) this.active.maxWidth = need;
28873 	}
28874 
28875 			
28876 	if (this.active.maxWidth == 0) this.active.maxWidth = this.active.width;
28877 
28878 	this.active.remain = this.active.maxWidth - (this.padWidth() + this.active.xpos + c.offsetWidth);
28879 	if ((this.active.colCount > 0) && (this.active.remain &lt; 0)) this.newRow_();
28880 
28881 	if (float == 'right') this.active.xpos = this.active.maxWidth - c.offsetWidth;
28882 	
28883 	if (this.active.colCount == 0)
28884 	{
28885 		if (c.offsetWidth > this.active.width)
28886 		{
28887 			this.active.width = c.offsetWidth;
28888 			this.active.remain = this.active.width - (this.active.xpos + c.offsetWidth);
28889 		}	
28890 	}
28891 
28892 	offsetLeft = this.active.xpos;
28893 	offsetTop  = this.active.ypos;
28894 
28895 	c.offsetLeft = offsetLeft + this.padLeft();
28896 	c.offsetTop  = offsetTop + this.padTop();
28897 
28898 	this.active.xpos += c.offsetWidth;
28899 
28900 	height = c.offsetHeight;
28901 	if (float != '') height = 0;
28902 	if (height > this.active.rowHeight) this.active.rowHeight = height;
28903 	
28904 	this.active.colCount += 1;
28905 
28906 	if (this.active.colCount == 1)
28907 	{
28908 		this.active.rowCount += 1;
28909 		row = new Object();
28910 		row.cells = new Array();
28911 		this.active.rows[this.active.rowCount-1] = row;
28912 	}
28913 
28914 	this.active.remain = this.active.maxWidth - this.active.xpos; // ccc
28915 
28916 	row = this.active.rows[this.active.rowCount-1];
28917 	row.remain = this.active.remain - (this.padRight() + this.padLeft());
28918 	row.height = this.active.rowHeight;
28919 	row.cells[this.active.colCount-1] = c;
28920 	
28921 	if (this.active.xpos > this.active.xmax) this.active.xmax = this.active.xpos;
28922 
28923 	w = c.offsetLeft + c.offsetWidth + this.padRight();	
28924 	h = c.offsetTop + c.offsetHeight + this.padBottom(); 
28925 
28926 	if (c.tagName == 'TABLE') this.newRow_();
28927 	if (c.tagName == 'P') this.newRow_();
28928 	if (c.tagName == 'BR') this.newRow_();
28929 	if (c.tagName == 'DIV') this.newRow_();
28930 
28931 	this.updateSize_(h,w);
28932 }
28933 
28934 //============================================================================================
28935 //		htmlstorage$
28936 //============================================================================================
28937 function htmlstorage$(html)
28938 {
28939 	this.html = html;
28940 	
28941 	this.find		= htmlstorage$find;	
28942 	this.bins		= new Array();
28943 }
28944 //============================================================================================
28945 //			htmlstorage$find
28946 //============================================================================================
28947 function htmlstorage$find(id)
28948 {
28949 	var bin,i;
28950 	
28951 	id = id.toLowerCase();
28952 	
28953 	for (i=0; i &lt; this.bins.length; ++i)
28954 	{
28955 		bin = this.bins[i];
28956 		if (bin.id == id) return bin;
28957 	}
28958 
28959 	bin = new htmlstorageBin$(this);
28960 	bin.id = id;
28961 	this.bins[this.bins.length] = bin;
28962 
28963 	return bin;
28964 }
28965 //============================================================================================
28966 //		htmlstorageBin$
28967 //============================================================================================
28968 function htmlstorageBin$()
28969 {
28970 	
28971 	this.find		= htmlstorageBin$find;
28972 	this.clear		= htmlstorageBin$clear;
28973 
28974 	this.clear();
28975 
28976 }
28977 //============================================================================================
28978 //			htmlstorageBin$
28979 //============================================================================================
28980 function htmlstorageBin$clear()
28981 {
28982 
28983 	this.list		= new Array();
28984 	this.names		= new Array();
28985 	this.hasValue		= false;
28986 
28987 	this.value		= '';
28988 	this.type		= 'number';
28989 	this.used		= new Array();
28990 	this.ref		= new Array();
28991 	this.last		= '&lt;no previsous reference>';
28992 
28993 	this.refCount		= 0;
28994 	this.cur		= -1;
28995 	this.pos		= 0;
28996 }
28997 //============================================================================================
28998 //			htmlstorageBin$find
28999 //============================================================================================
29000 function htmlstorageBin$find(name)
29001 {
29002 	var i;
29003 		
29004 	name = name.toLowerCase();
29005 
29006 	for (i=0; i &lt; this.names.length; ++i)
29007 	{
29008 		if (this.names[i].toLowerCase() == name.toLowerCase()) return i;
29009 	}
29010 		
29011 	return -1;
29012 }
29013 //============================================================================================
29014 //			htmlmacro$
29015 //============================================================================================
29016 function htmlmacro$(html,tag)
29017 {
29018 	var data;
29019 	var i,a,x,y,value,list;
29020 	var b,text;
29021 
29022 	this.html		= html;
29023 
29024 	this.id		= '' + tag.value("id");
29025 	this.id			= this.id.toLowerCase();
29026 	this.name		= '';
29027 	this.bin		= html.storage.find(this.id);
29028 	this.used		= new Array();
29029 
29030 	this.clear		= tag.bool('clear');
29031 	if (this.clear) this.bin.clear();
29032 
29033 	this.command		= tag.name.toLowerCase();
29034 
29035 //------------------- Methods -------------------------
29036 
29037 	this.execute		= htmlmacro$execute;
29038 	this.excluded		= htmlmacro$excluded;
29039 	this.resolve		= htmlmacro$resolve;
29040 	this.run		= htmlmacro$run;
29041 	this.pie		= htmlmacro$pie;
29042 	this.table		= htmlmacro$table;
29043 
29044 	this.storeValue		= htmlmacro$storeValue;
29045 
29046 	this.random		= random$execute;
29047 	this.randomList		= random$randomList;
29048 	this.randomNumber	= random$randomNumber;
29049 	this.randomIndex	= random$randomIndex;
29050 
29051 	this.rawValue		= tag.rawValue("value");
29052 	this.rawName		= tag.rawValue("name");
29053 
29054 	this.task		= tag.value("command").toLowerCase();
29055 
29056 
29057 //------------------ Store -------------------------------
29058 
29059 	if (this.command == 'store')
29060 	{
29061 		this.bin.cur	= -1;
29062 		this.value	= tag.value("value");
29063 		this.name	= tag.value("name").toLowerCase();
29064 		
29065 		if (tag.exists('point'))
29066 		{
29067 			text = tag.value('point');
29068 			a = text.split(',');
29069 			x = parseFloat(a[0]);
29070 			if (isNaN(x)) x = 0;
29071 			y = parseFloat(a[1]);
29072 			if (isNaN(y)) y = 0;
29073 			this.value = Math.round(x * 10000) / 10000 + ':' + Math.round(y * 10000) / 10000;
29074 		}
29075 					
29076 		return;
29077 	}
29078 
29079 //------------------ Assign -------------------------------
29080 
29081 	if (this.command == 'assign')
29082 	{
29083 		this.value	= tag.value("value");
29084 
29085 		this.sql	= tag.value("sql");
29086 		this.rawSql	= tag.rawValue("sql");
29087 
29088 		if (tag.exists("list"))
29089 		{
29090 			data = tag.value("list");
29091 			this.bin.list	= html.fromCsv(data,',');
29092 			this.type	= 'list';
29093 			this.min	= 0;
29094 			this.max	= this.bin.list.length  - 1;
29095 			return;
29096 		}
29097 
29098 		if (tag.exists('sql')) 
29099 		{
29100 			if (tag.value('all') == 'true')
29101 			{ 
29102 				 this.value = html.sqlValueAll(this.sql);
29103 			}
29104 			else
29105 			{
29106 				 this.value = html.sqlValue(this.sql);
29107 			}
29108 		}
29109 
29110 		if (this.task == '')
29111 		{
29112 			this.bin.value = this.value;
29113 			return;
29114 		}
29115 		
29116 		a = parseFloat(this.bin.value);
29117 		if (isNaN(a)) a = 0;
29118 		b = parseFloat(this.value);
29119 		if (isNaN(b)) b = 0;
29120 		if (this.task == 'increment') b = 1;
29121 		if (this.task == 'decrement') b = -1;
29122 		if (this.task ==       'sub') b = -b;
29123 		if (this.task ==  'subtract') b = -b;
29124 		this.bin.value = a + b;
29125 
29126 	}
29127 
29128 //------------------ Random -------------------------------
29129 
29130 	if (this.command == 'random')
29131 	{
29132 		this.min		= html$i4(tag.value("min"));
29133 		this.max		= html$i4(tag.value("max"));
29134 		this.precision		= html$i4(tag.value("precision"));
29135 		this.decimals		= html$i4(tag.value("decimals"));
29136 		this.divisions		= html$i4(tag.value("divisions"));
29137 		this.modulus		= html$i4(tag.value("modulus"));
29138 	
29139 		this.compare		= tag.keyword('compare');
29140 		
29141 		this.singleValue	= tag.bool('single-value');
29142 		this.hasValue		= false;
29143 	
29144 		if (this.modulus &lt;= 0) this.modulus = 0;
29145 
29146 		if (this.decimals &lt; 0) this.decimals = 0;
29147 		if (this.decimals > 14) this.decimals = 14;
29148 		
29149 		if (this.precision &lt; -10) this.precision = 0;
29150 		if (this.precision >  10) this.precision = 0;
29151 
29152 		this.unique		= tag.bool('unique');
29153 		this.type = 'number';
29154 
29155 		data = tag.value("exclude");
29156 		data = data.toLowerCase();
29157 
29158 		if (data == '')
29159 			 this.excludeList = new Array();
29160 		else this.excludeList = html.fromCsv(data,',');
29161 
29162 		if (tag.exists("list"))
29163 		{
29164 			data = tag.value("list");
29165 			this.list	= html.fromCsv(data,',');
29166 			this.type	= 'list';
29167 			this.min	= 0;
29168 			this.max	= this.list.length  - 1;
29169 			if (this.singleValue) this.execute('');
29170 			return;
29171 		}
29172 	
29173 		if (tag.exists("sql"))
29174 		{
29175 			this.sql	= tag.value("sql");
29176 			this.list	= html.sqlList(this.sql);
29177 			this.type	= 'list';
29178 			this.min	= 0;
29179 			this.max	= this.list.length  - 1;
29180 			if (this.singleValue) this.execute('');
29181 			return;
29182 		}
29183 
29184 		if (this.singleValue) this.execute('');
29185 
29186 	}
29187 }
29188 //============================================================================================
29189 //				htmlmacro$table
29190 //============================================================================================
29191 function htmlmacro$table(columns)
29192 {
29193 	var i,html,count,rows,value,r,c,w, num;
29194 	var pdf;
29195 	
29196 	if (! this.bin) return '';
29197 	if (! this.bin.list) return '';
29198 	if (this.bin.list.length == 0) return '';
29199 
29200 	if (isNaN(columns)) columns = 1;
29201 	if (columns &lt;= 0) columns = 1;
29202 	
29203 	count = this.bin.list.length;
29204 	rows = Math.ceil(count / columns);
29205 
29206 	html = '&lt;table style="width:100%">';
29207 
29208 	pdf = this.html.pdf;
29209 	w = Math.floor((pdf.xmax - pdf.xmin) / 72 * 110);
29210 
29211 	w = w - ((columns*40) + 4);
29212 	if (w &lt; 20) w = 20;
29213 	w = Math.floor(w / columns);
29214 
29215 	for (r=0; r &lt; rows; ++r)
29216 	{
29217 		html += '&lt;tr>';
29218 		for (c=0; c &lt; columns; ++c)
29219 		{
29220 			value = '';
29221 			num = '&nbsp;';
29222 			j = (r * columns) + c;
29223 			if (j &lt; this.bin.list.length) 
29224 			{
29225 				value = this.bin.list[j];
29226 				num = (j + 1) + ')';
29227 			}
29228 			if (value == '') value = '&nbsp;';
29229 			
29230 			html += '&lt;td width=40 align=right>' + num + ' &lt;/td>&lt;td width=' + w + '>' + value + '&lt;/td>';
29231 		}
29232 		html += '&lt;/tr>';
29233 	}
29234 
29235 	html += '&lt;/table>';
29236 
29237 	return html;
29238 
29239 }
29240 //============================================================================================
29241 //				htmlmacro$run
29242 //============================================================================================
29243 function htmlmacro$run(html)
29244 {
29245 	var name,value,n,sql,t,r8,nam;
29246 	var a,b;
29247 
29248 	t = this;
29249 
29250 
29251 	name = html.resolve(this.rawName);
29252 	value = html.resolve(this.rawValue);
29253 
29254 	if (this.clear) this.bin.clear();
29255 
29256 //-------------------------- store --------------------------------------
29257 
29258 	if (this.command == 'store')
29259 	{
29260 		
29261 		if (this.task != '')
29262 		{
29263 			r8 = parseFloat(value);
29264 			if (isNaN(r8)) r8 = 0;
29265 
29266 			n = this.bin.find(name);
29267 			if (n &lt; 0)
29268 			{
29269 				n = this.bin.list.length;
29270 				this.bin.list[n]  = 0;
29271 				this.bin.names[n] = name;
29272 			}
29273 			nam = typeof(this.bin.list[n]);
29274 			if (nam != 'number') this.bin.list[n] = parseFloat(this.bin.list[n]);
29275 			if (isNaN(this.bin.list[n])) this.bin.list[n] = 0;
29276 
29277 			if (this.task == 'increment') this.bin.list[n] += 1;
29278 			if (this.task == 'decrement') this.bin.list[n] -= 1;
29279 			if (this.task == 'count') this.bin.list[n] += 1;
29280 			if (this.task == 'add')   this.bin.list[n] += r8;
29281 			return;
29282 		}
29283 		else
29284 		{
29285 			this.bin.list[this.bin.list.length] = value;		
29286 			this.bin.names[this.bin.names.length] = name;
29287 			return;
29288 		}
29289 	}
29290 
29291 //--------------------- Assign --------------------------------
29292 
29293 	if (this.command == 'assign')
29294 	{
29295 		if (this.rawSql != '') 
29296 		{
29297 			sql	    = html.resolve(this.rawSql);
29298 			if (this.all) 
29299 			{
29300 				 this.bin.value = html.sqlValueAll(sql);
29301 			}
29302 			else
29303 			{
29304 				 this.bin.value = html.sqlValue(sql);
29305 			}
29306 			return;
29307 		}
29308 
29309 
29310 		if (this.task == '')
29311 		{
29312 			this.bin.value = this.value;
29313 			return;
29314 		}
29315 		
29316 		a = parseFloat(this.bin.value);
29317 		if (isNaN(a)) a = 0;
29318 		b = parseFloat(this.value);
29319 		if (isNaN(b)) b = 0;
29320 
29321 		if (this.task == 'increment') b = 1;
29322 		if (this.task == 'decrement') b = -1;
29323 		if (this.task ==       'sub') b = -b;
29324 		if (this.task ==  'subtract') b = -b;
29325 		this.bin.value = a + b;
29326 
29327 		return;
29328 	}
29329 }
29330 //============================================================================================
29331 //				htmlmacro$pie
29332 //============================================================================================
29333 function htmlmacro$pie(args)
29334 {
29335 	var i,text,total,name,labeled;
29336 	var percent,color,list,remain;
29337 
29338 	list = args.split(',');
29339 	color = list[0];
29340 	if (color == '') color = 'lightrandom';
29341 	labeled = true;
29342 
29343 	if (list.length > 1)
29344 	{
29345 		labeled = false;
29346 		if (list[1] == 'true') labeled = true;
29347 	}
29348 
29349 	total = 0;
29350 
29351 	for (i=0; i &lt; this.bin.list.length; ++i)
29352 		total += parseFloat(this.bin.list[i]);
29353 
29354 	if (total == 0) return '';
29355 
29356 	text = '';
29357 	remain = 100;
29358 
29359 	for (i=0; i &lt; this.bin.list.length; ++i)
29360 	{
29361 		name = '';
29362 		color = this.html.colorByCount(i);
29363 		if (i &lt; this.bin.names.length)  name = this.bin.names[i];
29364 
29365 		percent = (parseFloat(this.bin.list[i]) / total) * 100;
29366 		percent = Math.round(percent * 100) / 100;
29367 
29368 		if (i &lt; this.bin.list.length-1) 
29369 			 remain = remain - percent;
29370 		else percent = remain;
29371 
29372 		percent = Math.round(percent * 100) / 100;
29373 	
29374 		if (text != '') text += ',';
29375 		text += percent + ':' + color;
29376 		if ((name != '') && labeled) text += ':' + name;
29377 //		if ((name != '') && labeled) text += ':' + name + ' ' + percent + '%';
29378 	}
29379 
29380 	return text;
29381 }
29382 //============================================================================================
29383 //				htmlmacro$resolve
29384 //============================================================================================
29385 function htmlmacro$resolve(args)
29386 {
29387 	var i,index,name,value,x,n;
29388 
29389 //------------------------ last --------------------------
29390 
29391 	args = args.toLowerCase();
29392 
29393 	if (args == 'last') return this.bin.last;
29394 	if (args == 'join') return this.bin.list.join(',');
29395 	if (args == 'text') return this.bin.list.join('');
29396 
29397 	if (args == 'pie') 
29398 	{
29399 		value = this.pie('');
29400 		return value;
29401 	}
29402 	if (args == 'raw') return this.rawValue;
29403 	if (args == 'length') return this.rawValue.length;
29404 
29405 	if (args == 'radian')
29406 	{
29407 		x = parseFloat(this.bin.value);
29408 		if (isNaN(x)) x = 0;
29409 		x = x / 180 * Math.PI;
29410 		return x;
29411 	}
29412 
29413 //----------------------- table -----------------------------
29414 
29415 	if (args.substr(0,5) == 'table')
29416 	{
29417 		n = 0;
29418 		i = args.indexOf('(');
29419 		if (i &lt; 0) i = args.length;
29420 		value = args.substr(i+1);
29421 		n = parseInt(value);
29422 		if (isNaN(n)) n = 1;	
29423 		return this.table(n);
29424 	}
29425 
29426 //----------------------- used -----------------------------
29427 
29428 	i = args.indexOf('[');
29429 	if (i &lt; 0) return '';
29430 
29431 	name = args.substr(0,i);
29432 	args = args.substr(i+1);
29433 	if (args.substr(args.length-1,1) == ']') args = args.substr(0,args.length-1);
29434 
29435 	index = html$i4(args);
29436 	if (isNaN(index)) return '';
29437 	if ((this.bin.list != null) && (name == 'used') && (index &lt; this.bin.list.length))
29438 	{
29439 		value = this.bin.list[index];
29440 		for (i=0; i &lt; this.bin.used.length; ++i)
29441 		{
29442 			if (this.bin.used[i] == index) return i + 1;
29443 		}
29444 		return value;
29445 	}
29446 
29447 	if ((this.bin.list != null) && (index &lt; this.bin.list.length))
29448 	{
29449 		value = this.bin.list[index];
29450 		return value;
29451 	}
29452 
29453 	return '';
29454 }
29455 //============================================================================================
29456 //				htmlmacro$excluded
29457 //============================================================================================
29458 function htmlmacro$excluded(value)
29459 {
29460 	var i,wholeNumbers,v;
29461 
29462 	value = '' + value;
29463 	value = value.toLowerCase();
29464 
29465 	wholeNumbers = false;
29466 	if (this.compare ==  'whole-number') wholeNumbers = true;
29467 	if (this.compare == 'whole-numbers') wholeNumbers = true;
29468 	if (this.compare ==   'wholenumber') wholeNumbers = true;
29469 	if (this.compare ==  'wholenumbers') wholeNumbers = true;
29470 	
29471 	if (wholeNumbers)
29472 	{
29473 		value = parseFloat(value);
29474 		if (isNaN(value)) value = 0;
29475 		value = Math.floor(value);	
29476 	}
29477 			
29478 	for (i=0; i &lt; this.excludeList.length; ++i)
29479 	{
29480 		if (wholeNumbers)
29481 		{
29482 			v = parseFloat(this.excludeList[i]);
29483 			if (isNaN(v)) v = 0;
29484 			v = Math.floor(v);	
29485 			if (v == value) return true;
29486 			continue;
29487 		}
29488 
29489 		if (this.excludeList[i] == value) return true;
29490 	}
29491 	
29492 	return false;		
29493 
29494 }
29495 //============================================================================================
29496 //				htmlmacro$execute
29497 //============================================================================================
29498 function htmlmacro$execute(args)
29499 {
29500 	var value;
29501 
29502 	value = '';
29503 	if (this.command == 'random') value = this.random(args);
29504 	if (this.command == 'assign') value = this.bin.value;
29505 	if (this.command ==  'store') value = this.storeValue(args);
29506 
29507 	this.bin.last = value;
29508 	this.refCount += 1;
29509 	this.bin.hasValue = true;
29510 	return value;
29511 }
29512 //============================================================================================
29513 //				htmlmacro$storeValue
29514 //============================================================================================
29515 function htmlmacro$storeValue(args)
29516 {
29517 	var value;
29518 	value = '';
29519 
29520 	if (this.bin.cur >= (this.bin.list.length-1)) return value;
29521 	this.bin.cur += 1;
29522 	value = this.bin.list[this.bin.cur];
29523 	return value;	
29524 }
29525 //============================================================================================
29526 //				random$execute
29527 //============================================================================================
29528 function random$execute(args)
29529 {
29530 	var value,count;
29531 
29532 	if (this.singleValue && this.bin.hasValue) return this.bin.last;
29533 	
29534 	value = '';
29535 	if (this.type ==   'list') value = this.randomList(args);
29536 	if (this.type == 'number') value = this.randomNumber(args);
29537 
29538 	return value;
29539 }
29540 //============================================================================================
29541 //				random$randomList
29542 //============================================================================================
29543 function random$randomList(args)
29544 {
29545 	var count,index,value,name;
29546 
29547 	name = this.name;
29548 
29549 	count = 0;	
29550 	while (true)
29551 	{
29552 		index = this.randomIndex();
29553 		value = this.list[index];
29554 
29555 		if (! this.excluded(value)) return value;
29556 		count = count + 1;
29557 		if (count > 20) return value;
29558 	}
29559 }	
29560 //============================================================================================
29561 //				random$randomNumber
29562 //============================================================================================
29563 function random$randomNumber(args)
29564 {
29565 	var count,index,power,value,n,found,dx,i;
29566 
29567 	dx = (this.max - this.min);
29568 	count = 0;
29569 
29570 //	power = Math.pow(10,this.precision);
29571 
29572 	while (true)
29573 	{
29574 		value = Math.floor((Math.random() * dx) % dx) + this.min;				
29575 
29576 		if (this.decimals > 0)
29577 		{
29578 			value += Math.random();
29579 			if (value > this.max) value = this.max;
29580 		}
29581 	
29582 		if (this.modulus > 1) 
29583 		{
29584 			n = Math.round(value / this.modulus);
29585 			value = n * this.modulus;
29586 		}	
29587 		
29588 		power = Math.pow(10,this.decimals);
29589 		value = Math.round(value * power) / power;
29590 
29591 		if (count > 50) return value;
29592 		count = count + 1;
29593 
29594 		if (this.excluded(value)) continue;
29595 		if (! this.unique) return value;
29596 
29597 		found = false;
29598 	
29599 		for (i=0; i &lt; this.used.length; ++i)
29600 		{
29601 			if (this.used[i] == value) 
29602 			{
29603 				found = true;
29604 				break;
29605 			}
29606 		}
29607 
29608 		if (! found) 
29609 		{
29610 			this.used[this.used.length] = value;
29611 			return value;
29612 		}
29613 			
29614 	}
29615 }	
29616 //============================================================================================
29617 //				random$randomIndex
29618 //============================================================================================
29619 function random$randomIndex()
29620 {
29621 	var count,found,i,index;
29622 	var t,dx;
29623 	
29624 	t = this;
29625 	
29626 	dx = (this.max - this.min) + 1;
29627 	
29628 	count = 0;
29629 
29630 	while (true)
29631 	{
29632 		index = (Math.round(Math.random() * dx) % dx) + this.min;				
29633 
29634 
29635 		if (count > 20) return index;
29636 		count = count + 1;
29637 
29638 		if (! this.unique) return index;	
29639 
29640 		found = false;
29641 		for (i=0; i &lt; this.used.length; ++i)
29642 		{
29643 			if (this.used[i] == index) 
29644 			{
29645 				found = true;
29646 				break;
29647 			}
29648 		}
29649 
29650 		if (! found) 
29651 		{
29652 			this.used[this.used.length] = index;
29653 			return index;
29654 		}
29655 			
29656 	}
29657 }
29658 //====================================================================
29659 //		html$fromCsv
29660 //====================================================================
29661 function html$fromCsv(data,sep)
29662 {
29663 	var list;
29664 	
29665 	if (typeof(sep) == 'undefined') sep = ',';
29666 	list = new Array();
29667 	this.fromCsv_A(data,list,sep);
29668 	return list;
29669 }
29670 //====================================================================
29671 //		html$fromCsv_A
29672 //====================================================================
29673 function html$fromCsv_A(data,list,sep)
29674 {
29675 	var c,q,first,value,n,skip,inside,i;
29676 
29677 	data = this.trim(data);	
29678 	if (data == '') 
29679 	{
29680 		list[list.length] = '';
29681 		return;
29682 	}
29683 
29684 	value = '';
29685 	inside = false;
29686 	first = true;
29687 	skip = false;
29688 
29689 	for (i=0; i &lt; data.length; ++i)
29690 	{
29691 		if (skip)
29692 		{
29693 			skip = false;
29694 			continue;
29695 		}
29696 	
29697 		c = data.substr(i,1);
29698 		if (c == sep && (! inside))
29699 		{
29700 			list[list.length] = value;
29701 			data = data.substr(i+1);
29702 			this.fromCsv_A(data,list,sep);
29703 			return;
29704 		}
29705 
29706 //--------------- inside Quotes ----------------
29707 
29708 		if (inside)
29709 		{
29710 			if (c != q)
29711 			{
29712 				value += c;
29713 				continue;
29714 			}
29715 			
29716 			n = '';
29717 			if (i+1 &lt; data.length) n = data.substr(i+1,1);
29718 			if (n == q)
29719 			{
29720 				value += q;
29721 				skip = true;
29722 				continue;
29723 			}
29724 			
29725 			inside = false;
29726 			continue;
29727 		}
29728 
29729 //----------------- outside quotes ------------
29730 
29731 		if (c == '"' || c == "'")
29732 		{
29733 			q = c;
29734 			inside = true;
29735 			continue;			
29736 		}
29737 
29738 		value += c;
29739 	}	
29740 
29741 	list[list.length] = value;
29742 	return;
29743 }
29744 //===========================================================================
29745 //				htmlDocument$
29746 //===========================================================================
29747 function htmlDocument$(html,url)
29748 {
29749 	var list,i;
29750 	
29751 	this.html		= html;
29752 	this.resolve		= htmlDocument$resolve;
29753 	this.resolve_A		= htmlDocument$resolve_A;
29754 	this.read		= htmlDocument$read;
29755 	
29756 //-------------------------------------------------------
29757 
29758 
29759 	url = this.html.trim(url);
29760 	if (url.indexOf('://') &lt; 0) url = 'http://' + url;
29761 
29762 	this.url		= url;
29763 	this.arguments		= '';
29764 	this.root		= '';
29765 	this.href		= '';		// load file read
29766 
29767 	list = url.split('?',2);
29768 	if (list.length == 2)
29769 	{
29770 		this.arguments = list[1];
29771 		url = this.html.trim(list[0]);
29772 	}
29773 	
29774 	this.root = url;
29775 
29776 	list = url.split('://',2);
29777 	this.access = list[0].toLowerCase();
29778 
29779 	url = this.html.trim(list[1]);
29780 
29781 	if (! ( (this.access == 'http') || 
29782 			(this.access == 'https') ||
29783 			(this.access == 'file') ||
29784 			(this.access == 'ftp')))  throw "Invalid URL: " + url;
29785 
29786 
29787 	i = url.lastIndexOf('/');
29788 	if (i &lt; 0) i = url.length;
29789 	
29790 	this.root = url.substr(0,i);
29791 	this.file = url.substr(i+1);
29792 }
29793 //===========================================================================
29794 //			htmlDocument$resolve
29795 //===========================================================================
29796 function htmlDocument$resolve(url)
29797 {
29798 	var test;
29799 	
29800 	url = this.html.trim(url);
29801 	if (url == '') return '';
29802 
29803 	test = url.substr(0,8).toLowerCase();
29804 	if (test.substr(0,7) == 'http://') return url;
29805 	if (test.substr(0,8) == 'https://') return url;
29806 	if (test.substr(0,7) == 'file://') return url;
29807 	if (test.substr(0,6) == 'ftp://') return url;
29808 
29809 	return this.resolve_A(this.root,url);
29810 }
29811 //===========================================================================
29812 //			htmlDocument$resolve_A
29813 //===========================================================================
29814 function htmlDocument$resolve_A(root,url)
29815 {
29816 	var i;
29817 	
29818 	if (url.substr(0,1) == '/')
29819 	{
29820 		i = root.indexOf('/');
29821 		if (i &lt; 0) i = root.length;
29822 		root = root.substr(0,i);
29823 		url = url.substr(1);
29824 		return this.resolve_A(root,url);
29825 	}
29826 
29827 	if (url.substr(0,3) == '../')
29828 	{
29829 		i = root.lastIndexOf('/');
29830 		if (i &lt; 0) return '';
29831 		root = root.substr(0,i);
29832 		url = url.substr(3);
29833 		return this.resolve_A(root,url);
29834 	}
29835 	
29836 	if (url.substr(0,3) == './')
29837 	{
29838 		url = url.substr(2);
29839 		return this.resolve_A(root,url);
29840 	}
29841 	
29842 	
29843 	return this.access + '://' + root + '/' + url;
29844 	
29845 }
29846 //===========================================================================
29847 //			htmlDocument$read
29848 //===========================================================================
29849 function htmlDocument$read(url)
29850 {
29851 	var http;
29852 	var fs,f,text;
29853 
29854 	this.href = '';
29855 	
29856 	if (arguments.length == 0)
29857 	{
29858 		url = this.url;
29859 	}
29860 	else
29861 	{
29862 		url = this.resolve(url);
29863 		if (url == '') return '';
29864 	}
29865 
29866 	return this.html.sys.readUrl(url);
29867 	
29868 }
29869 //=======================================================================
29870 //			htmlGrid$
29871 //=======================================================================
29872 function htmlGrid$(html,out,ele,x,y)
29873 {
29874 	var height,n,width,filler;
29875 
29876 	this.html = html;
29877 	this.ele  = ele;
29878 	this.out  = out;
29879 
29880 	this.pageLength			= (out.ymax - out.ymin) / 72 * 110;
29881 	
29882 	this.columns			= ele.columns;
29883 	if (this.columns &lt; 1) this.columns = 1;
29884 
29885 	this.x				= x;
29886 	this.y				= y;
29887 	this.xpos			= 0;
29888 	this.ypos			= 0;
29889 	this.maxWidth			= ele.active.maxWidth;
29890 	this.maxHeight			= this.pageLength - this.y;
29891 	this.cellspacing		= ele.cellspacing;
29892 	this.columnHeight		= ele.columnHeight;
29893 	this.clipCell			= ele.clipCell;
29894 	this.count			= 0;
29895 	this.maxRowHeight		= 0;
29896 	this.moved			= false;
29897 
29898 	if (ele.fixed_width) this.maxWidth = ele.iwidth;
29899 	if (ele.fixed_height) this.maxHeight = 99999999;
29900 	
29901 	this.offsetHeight		= 0;
29902 	this.offsetWidth		= 0;
29903 	
29904 	this.row			= 1;
29905 	this.col			= 1;
29906 	
29907 	this.columnOrder		= ele.columnOrder;
29908 
29909 	filler = this.cellspacing * (this.columns - 1); 
29910 	width  = this.maxWidth - filler;
29911 	this.columnWidth = Math.floor(width / this.columns);
29912 
29913 	if (ele.columnWidth != '')
29914 	{
29915 		width = parseInt(ele.columnWidth);
29916 		if (isNaN(width)) width = this.columnWidth;
29917 		this.columnWidth = width;
29918 	}
29919 
29920 	this.write			= htmlGrid$write;
29921 	this.write_A			= htmlGrid$write_A;
29922 	this.writeFull			= htmlGrid$writeFull;
29923 	this.fit			= htmlGrid$fit;
29924 
29925 	this.pageBreak			= htmlGrid$pageBreak;
29926 	this.columnBreak		= htmlGrid$columnBreak;
29927 	this.updateSize			= htmlGrid$updateSize;
29928 
29929 	this.pos			= htmlGrid$pos;
29930 	this.reset			= htmlGrid$reset;
29931 
29932 	this.start			= htmlGrid$start;
29933 	this.end			= htmlGrid$end;
29934 	this.done			= htmlGrid$done;
29935 }
29936 //============================================================================================
29937 //			html$pos
29938 //============================================================================================
29939 function htmlGrid$pos(height)
29940 {
29941 	if (! this.moved) return;
29942 
29943 	if ((this.ypos + height) > this.maxHeight) this.columnBreak(height);
29944 	this.moved = false;
29945 }
29946 //============================================================================================
29947 //			html$reset
29948 //============================================================================================
29949 function htmlGrid$reset()
29950 {
29951 	this.col = 1;
29952 	this.row = 1;
29953 
29954 	this.ypos += this.maxRowHeight;
29955 	this.maxRowHeight = 0;
29956 	
29957 	this.y = this.ypos + this.y;
29958 	this.maxHeight		= this.pageLength - this.y;
29959 
29960 	this.ypos	= 0;
29961 	this.xpos	= 0;
29962 	this.count	= 0;
29963 	this.moved	= false;
29964 }
29965 //============================================================================================
29966 //			html$done
29967 //============================================================================================
29968 function htmlGrid$done()
29969 {
29970 
29971 	this.ypos		= 0;
29972 	this.xpos		= 0;
29973 	this.x			= 0;
29974 	this.y		= this.offsetHeight;
29975 	this.maxWidth	= this.ele.active.maxWidth;
29976 	this.maxHeight	= this.pageLength - this.y;
29977 
29978 	this.row		= 1;
29979 	this.col		= 1;
29980 	this.count		= 0;
29981 }
29982 //============================================================================================
29983 //			html$write
29984 //============================================================================================
29985 function htmlGrid$write(data)
29986 {
29987 	var xmin,xmax,ymin,ymax,height;
29988 	var xhtml,width;
29989 	var t,px,py;
29990 	
29991 	t = this;
29992 	if (data == '') return;
29993 
29994 	data = this.html.resolve(data);	
29995 	if (data == '') return;
29996 
29997 	width = this.columnWidth;
29998 	if (this.columnOrder) width = this.ele.active.maxWidth;
29999 
30000 	this.xhtml[0].init(10);
30001 	this.xhtml[0].parse(data);
30002 	this.xhtml[0].resize(width,99999);
30003 
30004 	height = this.xhtml[0].body.offsetHeight;
30005 	width = this.xhtml[0].body.offsetWidth;
30006 	
30007 	height += this.ele.paddingTop + this.ele.paddingBottom + this.ele.borderTop + this.ele.borderBottom;
30008 	width += this.ele.paddingLeft + this.ele.paddingRight + this.ele.borderLeft + this.ele.borderRight;
30009 
30010 	if ((this.ypos + height) > this.maxHeight) this.columnBreak(height);
30011 
30012 	this.start(height);
30013 
30014 	xmin = this.xpos + this.x;
30015 	ymin = this.ypos + this.y;
30016 	xmax = xmin + this.columnWidth;
30017 	ymax = ymin + height + this.ele.paddingTop + this.ele.paddingBottom + this.ele.borderTop + this.ele.borderBottom; 
30018 
30019 	px = this.xpos + this.x + this.ele.borderLeft + this.ele.paddingLeft;
30020 	py = this.ypos + this.y + this.ele.borderTop + this.ele.paddingBottom;
30021 
30022 	this.ele.writeBackground(this.out,xmin,ymin,xmax,ymax);
30023 	this.ele.writeBorder(this.out,xmin,ymin,xmax,ymax);
30024 
30025 	this.xhtml[0].body.write(this.out,px,py);
30026 
30027 	this.updateSize(xmax,ymax);
30028 
30029 	this.end(height);
30030 
30031 }
30032 //============================================================================================
30033 //			htmGridl$write_A
30034 //============================================================================================
30035 function htmlGrid$write_A(data,width)
30036 {
30037 	var xmin,xmax,ymin,ymax,height;
30038 	var xhtml;
30039 	var t;
30040 	
30041 	t = this;
30042 
30043 
30044 	if (data == '') return;
30045 
30046 	data = this.html.resolve(data);	
30047 	if (data == '') return;
30048 
30049 
30050 	this.xhtml[0].init(10);
30051 	this.xhtml[0].parse(data);
30052 	this.xhtml[0].resize(width,99999);
30053 
30054 	height = this.xhtml[0].body.offsetHeight;	
30055 	if ((this.ypos + height) > this.maxHeight) this.columnBreak(height);
30056 
30057 	xmin = this.xpos + this.x;
30058 	ymin = this.ypos + this.y;
30059 	xmax = xmin + this.xhtml[0].body.offsetWidth;
30060 	ymax = ymin + this.xhtml[0].body.offsetHeight; 
30061 
30062 	this.xhtml[0].body.write(this.out,xmin,ymin);
30063 	height = this.xhtml[0].body.offsetHeight;
30064 	this.ypos += height;
30065 	if (height > this.maxRowHeight) this.maxRowHeight = height;
30066 	
30067 	this.updateSize(xmax,ymax);
30068 }
30069 //============================================================================================
30070 //			html$writeFull
30071 //============================================================================================
30072 function htmlGrid$writeFull(data)
30073 {
30074 	if (data == '') return;
30075 
30076 	if (this.ypos > this.maxRowHeight) this.maxRowHeight = this.ypos;
30077 
30078 	this.xpos = 0;
30079 	this.x = 0;
30080 	this.ypos = this.maxRowHeight;
30081 	this.maxRowHeight = 0;
30082 
30083 	this.row = 1;
30084 	this.col = 1;
30085 	
30086 	this.write_A(data,this.maxWidth);
30087 	
30088 	this.y = this.maxRowHeight;
30089 	this.maxRowHeight = 0;
30090 
30091 	this.ypos = 0;
30092 	this.xpos = 0;
30093 	this.row  = 1;
30094 	this.col  = 1;
30095 	this.maxHeight	= this.pageLength - this.y;
30096 
30097 }
30098 //==================================================================================
30099 //			updateSize
30100 //==================================================================================
30101 function htmlGrid$updateSize(width,height)
30102 {
30103 	if (width > this.offsetWidth) this.offsetWidth = width;
30104 	if (height > this.offsetHeight) this.offsetHeight = height;
30105 }
30106 //==================================================================================
30107 //			fit
30108 //==================================================================================
30109 function htmlGrid$fit(height)
30110 {
30111 	var remain;
30112 	
30113 	if (height &lt;= 0) return true;
30114 	if (this.ypos + height > this.maxHeight) return false;
30115 	return true;
30116 }
30117 //==================================================================================
30118 //				pageBreak
30119 //==================================================================================
30120 function htmlGrid$pageBreak()
30121 {
30122 
30123 	this.out.pageBreak(0,true);
30124 
30125 	this.ypos		= 0;
30126 	this.xpos		= 0;
30127 	this.y			= 0;
30128 	this.x			= 0;
30129 	this.count		= 0;
30130 	this.maxHeight	= this.pageLength;
30131 	this.pageHeight		= 0;
30132 
30133 	this.offsetHeight	= 0;
30134 	this.offsetWidth	= 0;
30135 
30136 	this.row		= 1;
30137 	this.col		= 1;
30138 }
30139 //==================================================================================
30140 //			columnBreak
30141 //==================================================================================
30142 function htmlGrid$columnBreak(height)
30143 {
30144 	var height;
30145 
30146 	if (this.ypos + height > this.maxHeight)
30147 	{
30148 		this.pageBreak();
30149 		return;
30150 	}
30151 
30152 	if (this.col >= this.columns) 
30153 	{
30154 		this.col = 1;
30155 		this.row = 1;
30156 		this.xpos = 0;
30157 		if (this.count > 1) this.pageBreak();
30158 	}
30159 	else
30160 	{
30161 		height = this.ypos + this.y;
30162 		if (height > this.pageHeight) this.pageHeight = height;
30163 		this.col	+= 1;
30164 		this.xpos	= (this.col - 1) * (this.columnWidth + this.cellspacing);
30165 	}
30166 
30167 	this.ypos   = 0;
30168 	this.count  = 1;
30169 	this.row	= 1;
30170 	this.atTop	= true;
30171 }
30172 //============================================================================================
30173 //				htmlGrid$end
30174 //============================================================================================
30175 function htmlGrid$end(height)
30176 {
30177 	if (this.clipCell)
30178 	{
30179 		this.out.plot.clipEnd();
30180 		this.out.plot.clip = false;
30181 	}
30182 
30183 	this.moved = true;
30184 	
30185 	if (this.columnOrder)
30186 	{	
30187 
30188 		this.col += 1;
30189 		if (this.col > this.columns) 
30190 		{
30191 			this.row += 1;
30192 			this.col  = 1;
30193 			this.ypos += this.maxRowHeight;
30194 			this.maxRowHeight = 0;
30195 		}
30196 		else
30197 		{
30198 			if (height > this.maxRowHeight)  this.maxRowHeight = height;
30199 		}
30200 
30201 		this.xpos = (this.col-1) * (this.columnWidth + this.cellspacing);
30202 	}
30203 	else
30204 	{
30205 		if (height > this.maxRowHeight)  this.maxRowHeight = height;
30206 		this.ypos += this.maxRowHeight;
30207 		this.maxRowHeight = 0;
30208 		this.row += 1;
30209 	}
30210 }
30211 //============================================================================================
30212 //				htmlGrid$start
30213 //============================================================================================
30214 function htmlGrid$start(height)
30215 {
30216 
30217 	var x1,y1,x2,y2;
30218 
30219 	this.count += 1;
30220 	this.height = height;	
30221 
30222 //----------------- Column order ------------------
30223 	
30224 	if (this.columnOrder)
30225 	{
30226 		if ((this.ypos + height) > this.maxHeight) this.columnBreak(height);
30227 		if (height > this.maxRowHeight) this.maxRowHeight = height;
30228 	}
30229 	
30230 //----------------- Row order ----------------
30231 	else
30232 	{
30233 		if ((this.ypos + height) > this.maxHeight) this.columnBreak(height);
30234 		this.maxRowHeight = height;
30235 	}
30236 	
30237 	if (! this.clipCell) return;
30238 
30239 	x1 = this.html.pixelToInch_x(this.xpos);
30240 	y1 = this.html.pixelToInch_y(this.ypos);
30241 	x2 = this.html.pixelToInch_x(x1 + this.width);
30242 	y2 = this.html.pixelToInch_y(y1 + this.height);
30243 		
30244 	this.out.plot.clip = true;
30245 	this.out.plotclipBegin(x1,y1,x2,y2);
30246 }
30247 //=========================================================================================
30248 //			html$parseXml_
30249 //=========================================================================================
30250 function html$parseXml_(data)
30251 {
30252 	var text,i,tag,tagData;
30253 	var body,a,xml;
30254 
30255 	data = this.trim(data);
30256 
30257 	xml = new Object();
30258 	xml.tagName		= 'XML';
30259 	xml.tag		= null;
30260 	xml.value		= '';
30261 	xml.parentNode		= null;
30262 	
30263 	xml.firstChild		= null;
30264 	xml.nextSibling		= null;
30265 	xml.lastChild		= null;
30266 
30267 	this.activeNode		= xml;
30268 
30269 //--------------- strip comments ----------
30270 
30271 	while (true)
30272 	{
30273 		i = data.indexOf('&lt;' + '!--');
30274 		if (i &lt; 0) break;
30275 		a = data.substr(0,i);
30276 		data = data.substr(i+4);
30277 		i = data.indexOf('-->');
30278 		if (i &lt; 0) i = data.length;
30279 		data = a + data.substr(i+3);
30280 	}
30281 	
30282 	while (data != '')
30283 	{
30284 		i = data.indexOf('&lt;');
30285 		if (i &lt; 0) break;
30286 		
30287 		text = data.substr(0,i);
30288 
30289 		data = data.substr(i+1);
30290 		i = data.indexOf('>');
30291 		if (i &lt; 0) i = data.length;
30292 		
30293 		tagData = data.substr(0,i);
30294 		data = data.substr(i+1);
30295 
30296 		tag = this.parseTag_(tagData);
30297 
30298 		if (tag.start) this.startXml_(tag,text);
30299 		if (tag.end) this.endXml_(tag,text);
30300 	}
30301 
30302 	return xml;
30303 }
30304 //=========================================================================================
30305 //				html$endXml_
30306 //=========================================================================================
30307 function html$endXml_(tag,text)
30308 {
30309 	var p;
30310 
30311 	p = this.activeNode;
30312 
30313 	while (p.parentNode != null)
30314 	{
30315 		if (p.tagName == tag.name)
30316 		{
30317 			this.activeNode.value = escape(text);
30318 			this.activeNode = p.parentNode;
30319 			return;
30320 		}
30321 		p = p.parentNode;
30322 	}
30323 
30324 	this.activeNode = p;
30325 }
30326 //=========================================================================================
30327 //				html$startXml_
30328 //=========================================================================================
30329 function html$startXml_(tag)
30330 {
30331 	var p,e;
30332 
30333 	p = this.activeNode;
30334 
30335 	e = new Object();
30336 	e.tagName = tag.name.toUpperCase();
30337 	e.tag = tag;
30338 	e.value = '';
30339 	e.parentNode = p;
30340 	
30341 	e.firstChild = null;
30342 	e.nextSibling = null;
30343 	e.lastChild = null;
30344 
30345 	if (p.firstChild == null)
30346 	{
30347 		p.firstChild = e;
30348 		p.lastChild = e;
30349 	}
30350 	else
30351 	{
30352 		p.lastChild.nextSibling = e;
30353 		p.lastChild = e;
30354 	}	
30355 	this.activeNode = e;
30356 }	
30357 //=========================================================================================
30358 //				html$mathML
30359 //=========================================================================================
30360 function html$mathML(node,hold)
30361 {
30362 	var text;
30363 	text = '';
30364 
30365 	if (node == null) return text;
30366 
30367 	if (node.tagName == 'XML')
30368 	{
30369 //		text = '&lt;SPAN class=mathml>' + this.mathML(node.firstChild,false) + '&lt;/SPAN>';
30370 
30371 		text = this.mathML(node.firstChild,false);
30372 		return text;
30373 	}
30374 
30375 	switch (node.tagName)
30376 	{
30377 	case       "MI": text = this.mathML_decode(node.value) ; break;
30378 	case       "MO": text = this.mathML_decode(node.value) ; break;
30379 	case       "MN": text = this.mathML_decode(node.value) ; break;
30380 	case    "MTEXT": text = this.mathML_decode(node.value) ; break;
30381 	case     "NONE": text = '' ; break;
30382 	case   "MSTYLE": text = '' ; break;
30383 	case  "MPADDED": text = '' ; break;
30384 
30385 //-------- fixed arguments ---------
30386 
30387 	case    "MFRAC": text = this.mathML_A(node,'&lt;divide>#1&lt;by>#2&lt;/divide>',true); break;
30388 	case  "MSUBSUP": text = this.mathML_A(node,'#1|ss#2,#3|',true); break;
30389 	case     "MSUB": text = this.mathML_A(node,'#1|v#2|',true); break;
30390 	case     "MSUP": 
30391 		if (this.mathML_simpleChildren(node,2))
30392 		{
30393 			 text = this.mathML_A(node,'#1|^#2|',true);
30394 		}
30395 		else
30396 		{	
30397 			text = this.mathML_A(node,'&lt;raise>#1&lt;power>&lt;font size=2>#2&lt;/font>&lt;/raise>',true);
30398 		}
30399 	break;
30400 
30401 	case    "MOVER": text = this.mathML_A(node,'#1&lt;span style="border-top:#2">#3&lt;/span>',true); break;
30402 	case   "MUNDER": text = this.mathML_A(node,'#1&lt;span style="border-bottom:#2">#3&lt;/span>',true); break;
30403 
30404 //--------- variable arguments --------
30405 
30406 	case "MENCLOSE": text = this.mathML_A(node,'&lt;span>#1&lt;/span>\r\n',false); break;
30407 	case "MPHANTOM": text = this.mathML_A(node,'&lt;span style="visibility:hidden">#1&lt;/span>\r\n',false); break;
30408 
30409 	case    "MSQRT": text = this.mathML_A(node,'&lt;root>#1&lt;/root>\r\n',false);  break;
30410 	case     "MROW": text = this.mathML_A(node,'#1',false); break;
30411 
30412 	case   "MTABLE": text = this.mathML_A(node,'&lt;TABLE>#1&lt;/TABLE?',false); break;
30413 	case      "MTR": text = this.mathML_A(node,'&lt;TR>#1&lt;/TR>',false); break;
30414 	case      "MTD": text = this.mathML_A(node,'&lt;TD>#1&lt;/TD>',false); break;
30415 
30416 	case  "MFENCED": text = this.mathML_A(node,'&lt;quantity>#1&lt;/quantity>\r\n',false); break;
30417 
30418 	default: text = node.tagName + ' = ' + node.value + '\r\n';
30419 	}
30420 
30421 	if (hold) return text;
30422 
30423 	if (node.nextSibling != null) text += this.mathML(node.nextSibling,false);
30424 
30425 	return text;
30426 
30427 }
30428 //=========================================================================================
30429 //				html$mathML_A
30430 //=========================================================================================
30431 function html$mathML_A(node,template,hold)
30432 {
30433 	var child,i,n,list;
30434 	
30435 	list = new Array();
30436 	child = node.firstChild;
30437 
30438 	n = 0;
30439 	
30440 	while (true)
30441 	{
30442 		n += 1;
30443 		if (child == null) return template;
30444 		i = template.indexOf('#' + n);
30445 		if (i &lt; 0) return template;
30446 		template = template.substr(0,i) + this.mathML(child,hold) + template.substr(i+2);
30447 		child = child.nextSibling;
30448 	}
30449 
30450 	return template;
30451 }
30452 
30453 //=========================================================================================
30454 //					html$mathML_decode
30455 //=========================================================================================
30456 function html$mathML_simpleChildren(node,count)
30457 {
30458 	var child,count;
30459 	
30460 	if (node.firstChild == null) return false;
30461 	
30462 	child = node.firstChild;
30463 	while (true)
30464 	{
30465 		count = count - 1;
30466 		if (! ((child.tagName == 'MO') ||
30467 			   (child.tagName == 'MI') ||
30468 			   (child.tagName == 'MN') ||
30469 			   (child.tagName == 'MTEXT') ||
30470 			   (child.tagName == 'NONE') ||
30471 			   (child.tagName == 'MI') ||
30472 			   (child.tagName == 'MI'))) return false;
30473 		
30474 		if (count &lt;= 0) return true;
30475 		child = child.nextSibling;
30476 		if (child == null) return false;
30477 	}
30478 			
30479 }
30480 //=========================================================================================
30481 //				html$mathML_decode
30482 //=========================================================================================
30483 function html$mathML_decode(text)
30484 {
30485 	var i,j,a,b,c,unicode,n,value;
30486 
30487 	var unicodes = ['2212','03B4','00B1','2062'];
30488 	var chars    = ['|-|','|lambda|','|+-|',''];
30489 
30490 	var names = ['times','equals','invisibletimes'];
30491 	var nameValues = ['|*|',' = ',''];
30492 	
30493 	text = unescape(text);
30494 	text = this.trim(text);
30495 		
30496 	i = text.indexOf('&');
30497 	if (i &lt; 0) return text;
30498 
30499 	a = text.substr(0,i);
30500 
30501 	b = text.substr(i+1);
30502 	j = b.indexOf(';');
30503 	if (j &lt; 0) return text;
30504 	
30505 	value = b.substr(0,j);
30506 	c = b.substr(j+1);
30507 
30508 	if (value.substr(0,1) == '#')
30509 	{
30510 		value = value.substr(1);
30511 		if (value.substr(0,1).toUpperCase() == 'X')
30512 		{
30513 			value = value.substr(1);
30514 			n = parseInt(value,16);
30515 		}
30516 		else n = parseInt(value);
30517 		
30518 		if (isNaN(n)) 
30519 		{
30520 			return text;
30521 		}	
30522 
30523 		unicode = n.toString(16);
30524 		unicode = unicode.toUpperCase();
30525 		if (unicode.length == 1) unicode = '000' + unicode;
30526 		if (unicode.length == 2) unicode =  '00' + unicode;
30527 		if (unicode.length == 3) unicode =   '0' + unicode;
30528 	
30529 		for (i=0; i &lt; unicodes.length; ++i)
30530 		{
30531 			if (unicode == unicodes[i]) 
30532 			{
30533 				text = a + chars[i] + c;
30534 				return this.mathML_decode(text);
30535 			}
30536 		}
30537 	}
30538 	else
30539 	{
30540 		value = value.toLowerCase();
30541 		for (i=0; i &lt; names.length; ++i)
30542 		{
30543 			if (value == names[i])
30544 			{
30545 				text = a + nameValues[i] + c;
30546 				return this.mathML_decode(text);
30547 			}
30548 		}	
30549 	}
30550 	
30551 	return text;	
30552 }
30553 //=====================================================================
30554 //			 html$initializeForeignOutput
30555 //=====================================================================
30556 function html$initializeForeignOutput(obj)
30557 {
30558 
30559 	this.fake				= html$fake;
30560 		
30561 //----------------- pdf properties used by CollinsHTML ----------------
30562 
30563 	obj.xmin				= 0;				// 8.5 X 11 Inch Page Size (points)
30564 	obj.xmax				= 8.5 * 72;		
30565 	obj.ymin				= 9;
30566 	obj.ymax				= 11 * 72;
30567 	
30568 	obj.xpos				= 0;				// pdf origin is TOP / LEFT
30569 	obj.ypos				= obj.ymax;
30570 
30571 	obj.marginLeft				= 0;
30572 	obj.marginRight				= 0;
30573 	obj.marginTop				= 0;
30574 	obj.marginBottom			= 0;
30575 	obj.drawMargin				= false;
30576 
30577 //-------------------- pdf functions called by CollinsHTML -----------------------
30578 
30579 	obj.setPageSize				= this.fake;		// dummy routines
30580 	obj.setPageBackgroundColor		= this.fake;
30581 	obj.setPageMarginColor			= this.fake;
30582 	obj.setLandscape			= this.fake;
30583 	obj.setmarginLeft			= this.fake;
30584 	obj.setmarginRight			= this.fake;
30585 	obj.setmarginTop			= this.fake;
30586 	obj.setmarginBottom			= this.fake;
30587 	obj.setFontColor			= this.fake;
30588 	obj.setFontSize				= this.fake;
30589 	
30590 	obj.setWatermark			= this.fake;
30591 	obj.setFontName				= this.fake;
30592 	obj.setOpacity				= this.fake;
30593 	
30594 	obj.drawBorder				= this.fake;
30595 	obj.setGraphicFillColor			= this.fake;
30596 	obj.setGraphicColor			= this.fake;
30597 	obj.drawRectangle			= this.fake;
30598 	obj.tileImage				= this.fake;
30599 
30600 	obj.setLetterSpacing			= this.fake;
30601 	obj.setWordSpacing			= this.fake;
30602 	obj.setFontRender			= this.fake;
30603 	obj.setFontSkew				= this.fake;
30604 	obj.setFontScale			= this.fake;
30605 	obj.setFont				= this.fake;
30606 	obj.placeImage				= this.fake;		
30607 
30608 	obj.setFont				= this.fake;
30609 	obj.setClip				= this.fake;
30610 
30611 	obj.pageBreak				= this.fake;
30612 	obj.placeText				= this.fake;
30613 
30614 	obj.clipBegin				= this.fake;
30615 	obj.clipEnd				= this.fake;
30616 	obj.charHeight				= this.fake;
30617 	obj.drawTableBox			= this.fake;
30618 
30619 	obj.placeFormInput			= this.fake;
30620 	obj.placeFormSelect			= this.fake;
30621 	obj.placeFormText			= this.fake;
30622 	
30623 	obj.drawChar				= this.fake;
30624 	obj.setGraphicLineWeight		= this.fake;
30625 	obj.setGraphicLineStyle			= this.fake;
30626 	obj.drawLinestring2			= this.fake;
30627 
30628 	obj.drawLine				= this.fake;
30629 	obj.placeGraphic			= this.fake;
30630 
30631 	obj.placeHotspot			= this.fake;
30632 }
30633 //==================================================================================
30634 //		html$fake
30635 //==================================================================================
30636 function html$fake()
30637 {
30638 	return null;
30639 }
30640 //==================================================================================
30641 //		html$getImageSize
30642 //==================================================================================
30643 function html$getImageSize(filename)
30644 {
30645 	var obj;
30646 
30647 try
30648 {
30649 	obj = this.getImageSize_A(filename);
30650 	if (obj == null) return null;
30651 	
30652 	if (obj.height &lt;= 0) return null;
30653 	if (obj.width  &lt;= 0) return null;
30654 	if (obj.size   &lt;= 0) return null;
30655 
30656 	return obj;
30657 }
30658 catch (e) { return null; }
30659 
30660 }
30661 //==================================================================================
30662 //		html$jpegSize
30663 //==================================================================================
30664 function html$jpegSize(filename)
30665 {	
30666 	var data,obj,a,where;
30667 
30668 	obj = CollinsPDF().jpegsize(filename,where);
30669 	if (obj == null) return null;
30670 
30671 	obj.angle = 0;
30672 	obj.is3D = false;
30673 
30674 	if (isNaN(obj.width) || isNaN(obj.height) || isNaN(obj.size)) obj = null;
30675 	return obj;
30676 }
30677 //==================================================================================
30678 //				html$getImageSize_A
30679 //==================================================================================
30680 function html$getImageSize_A(filename)
30681 {	
30682 	var obj,i,j,list,a,element,data,id,name;
30683 	var temp,list,height,width,ext,value,text;		
30684 
30685 	obj = null;
30686 	if (filename == '') return null;
30687 
30688 	if (filename.substr(0,6).toUpperCase() == 'MACRO:')
30689 	{
30690 		name = filename.substr(6);
30691 		filename = this.resolveTag(name);
30692 	}
30693 
30694 
30695 	if ((filename.substr(0,7).toUpperCase() == 'BASE64,') || (filename.substr(0,4).toUpperCase() == 'HEX,') || (filename.substr(0,8).toUpperCase() == 'ASCII85,')) 
30696 	{
30697 		i = filename.indexOf(':');
30698 		if (i &lt; 0) return null;
30699 			
30700 		temp = filename.substr(0,i);		
30701 		data = filename.substr(i+1);
30702 		
30703 		filename = temp;
30704 		list = temp.split(',');
30705 		if (list.length &lt; 3) return null;
30706 		
30707 		value = list[0];
30708 		id = this.trim(value.toUpperCase());
30709 		
30710 		width = parseInt(list[1]);
30711 		height = parseInt(list[2]);
30712 
30713 		obj = new Object();
30714 		obj.format = 'hex';
30715 		obj.height = height;
30716 		obj.width = width;
30717 		return obj;		
30718 	}
30719 
30720 	if (filename.substr(0,7).toUpperCase() == 'CANVAS:')
30721 	{
30722 		id = filename.substr(7);
30723 		element = document.getElementById(id);
30724 		if (element == null) return null;
30725 	
30726 		data = element.toDataURL("image/jpeg");
30727 		i = data.indexOf(',');
30728 		data = data.substr(i+1);
30729 		
30730 		obj = new Object();
30731 		obj.format = 'hex';
30732 		obj.height = element.offsetHeight;
30733 		obj.width = element.offsetWidth;
30734 		return obj;		
30735 	}
30736 
30737 	if ((filename.substr(0,5).toUpperCase() == 'FILE,'))
30738 	{
30739 		i = filename.indexOf(':');
30740 		if (i &lt; 0) return null;
30741 		
30742 		text = filename.substr(0,i);
30743 		list = text.split(',');
30744 		obj = new Object();
30745 		obj.format = '';
30746 
30747 		obj.height = 0;
30748 		obj.width = 0;
30749 		obj.size = 0;
30750 		obj.is3D = false;
30751 		obj.ext = '.jpg';
30752 		obj.filename = 'inline' + this.images.length;
30753 		obj.isData = false;
30754 
30755 		obj.size  = filename.length - (i+1);
30756 		if (obj.format == 'hex') obj.size += 1;
30757 		if (obj.format == 'hex85') obj.size += 2;		
30758 
30759 		for (i=1; i &lt; list.length; ++i)
30760 		{
30761 			value = list[i];
30762 			if (this.trim(value) == '') continue;
30763 			a = value.split('=');
30764 			if (a.length != 2) continue;
30765 			
30766 			name = a[0];
30767 			name = this.trim(name.toLowerCase());
30768 			value = parseInt(this.trim(a[1]));
30769 			if (name == 'name') obj.filename = value;
30770 			if (name == 'format') obj.format = a[1].toLowerCase();
30771 
30772 			if (isNaN(value)) continue;
30773 			if (name == 'width') obj.width = value;
30774 			if (name == 'height') obj.height = value;
30775 		}
30776 		return obj;
30777 	}		
30778 	
30779 	i = filename.lastIndexOf('.');
30780 	ext = filename.substr(i);
30781 
30782 	ext = ext.toLowerCase();
30783 	if (filename.toLowerCase().indexOf('_jpg8.txt') >= 0) ext = '.jpg8';
30784 	if (filename.toLowerCase().indexOf('_jpgx.txt') >= 0) ext = '.jpgx';
30785 	if (filename.toLowerCase().indexOf('_u3dx.txt') >= 0) ext = '.u3dx';
30786 	if (filename.toLowerCase().indexOf('_u3d8.txt') >= 0) ext = '.u3d8';
30787 	if (filename.toLowerCase().indexOf('_prcx.txt') >= 0) ext = '.prcx';
30788 	if (filename.toLowerCase().indexOf('_prc8.txt') >= 0) ext = '.prc8';
30789 	if (filename.toLowerCase().indexOf('_u3d.txt')  >= 0) ext = '.u3d';
30790 	if (filename.toLowerCase().indexOf('_prc.txt')  >= 0) ext = '.prc';
30791 
30792 	if (ext == '.jpg') 
30793 	{
30794 		obj = this.jpegSize(filename);
30795 		if (obj == null) return null;
30796 		obj.ext = '.jpg';
30797 		obj.is3D = false;
30798 		obj.filename = filename;
30799 		obj.format = '';
30800 		obj.isData = false;
30801 
30802 		return obj;
30803 	}
30804 	
30805 	if ((ext == '.jpgx') || (ext == '.jpg8')) 
30806 	{		
30807 		obj = new Object();
30808 		obj.ext = ext;
30809 		obj.format = 'hex';
30810 		obj.filename = filename;
30811 		obj.is3D = false;
30812 		obj.isData = false;
30813 
30814 		if (ext == '.jpg8') obj.format = 'hex85';
30815 		
30816 		this.filename_size(filename,obj);		
30817 		return obj;
30818 	}
30819 
30820 	if ((ext == '.u3dx') || (ext == '.u3d8') || (ext == '.u3d')) 
30821 	{		
30822 		obj = new Object();
30823 		obj.ext = ext;
30824 		obj.format = 'none';
30825 		obj.filename = filename;
30826 		obj.size = this.sys.fileSize(filename);
30827 		obj.is3D	= true;
30828 		obj.subtype	= 'U3D';
30829 		obj.isData = false;
30830 
30831 		if (ext == '.u3dx') obj.format = 'hex';
30832 		if (ext == '.u3d8') obj.format = 'hex85';
30833 
30834 		if (obj.format != 'none') this.filename_size(filename,obj);		
30835 		obj.height = 8 * 72;
30836 		obj.width  = 8 * 72;
30837 		
30838 		return obj;
30839 	}
30840 
30841 
30842 	if ((ext == '.prcx') || (ext == '.prc8') || (ext == '.prc')) 
30843 	{		
30844 		obj = new Object();
30845 		obj.ext = ext;
30846 		obj.format = 'none';
30847 		obj.filename = filename;
30848 		obj.size = this.sys.fileSize(filename);
30849 		obj.isData = false;
30850 	
30851 		obj.is3D	= true;
30852 		obj.subtype	= 'PRC';
30853 
30854 		if (ext == '.prcx') obj.format = 'hex';
30855 		if (ext == '.prc8') obj.format = 'hex85';
30856 
30857 		if (obj.format != 'none') this.filename_size(filename,obj);		
30858 		obj.height  = 8 * 72;
30859 		obj.width   = 8 * 72;
30860 		
30861 		return obj;
30862 	}
30863 
30864 	return null;
30865 }
30866 //===================================================================================
30867 //				html$filename_size
30868 //===================================================================================
30869 function html$filename_size(filename,obj)
30870 {
30871 		var i,j,text,c,name,value;
30872 		
30873 		obj.size = 0;
30874 		obj.height = 0;
30875 		obj.width = 0;
30876 
30877 		name = filename;
30878 
30879 		i = name.lastIndexOf('/');
30880 		j = name.lastIndexOf('\\');
30881 		if (j > i) i = j;
30882 		if (i >= 0) name = name.substr(i+1);
30883 	
30884 		i = name.indexOf('.');
30885 		text = name.substr(0,i);
30886 		text = text.toLowerCase();
30887 
30888 		i = text.lastIndexOf('_');		// strip type
30889 		if ( i &lt; 0) return;
30890 		text = text.substr(0,i);
30891 
30892 		i = text.lastIndexOf('_');
30893 		if ( i &lt; 0) return;
30894 		text = text.substr(i+1);
30895 		
30896 		value = '';
30897 		for (i=text.length-1; i >= 0; --i)
30898 		{
30899 			c = text.charAt(i).toLowerCase();
30900 			if (c >= '0' && c &lt;= '9') 
30901 			{
30902 				value = c + value;
30903 				continue;
30904 			}
30905 			if (c == 'w') 
30906 			{
30907 				obj.width = parseInt(value);
30908 				value = '';
30909 				continue;
30910 			}
30911 			if (c == 'h') 
30912 			{
30913 				obj.height = parseInt(value);
30914 				value = '';
30915 				continue;
30916 			}
30917 			if (c == 's') 
30918 			{
30919 				obj.size = parseInt(value);
30920 				value = '';
30921 				continue;
30922 			}
30923 			break;
30924 		} 
30925 }
30926 var syslog = '';
30927 //==========================================================================================
30928 //	Author: Clifford L. Collins				Date: Jan 2013
30929 //-----------------------------------------------------------------------------------------
30930 //	Collins Software
30931 //	7710 Janak Drive, Houston Texas 77055
30932 //	http://CollinsSoftware.com
30933 //=========================================================================================
30934 
30935 //==================================================================
30936 //							log
30937 //==================================================================
30938 function log(text)
30939 {
30940 	if (arguments.length == 0) return syslog;
30941 
30942 	if (syslog != '') syslog += '\r\n';
30943 	syslog += text;
30944 }
30945 //==================================================================
30946 //			client$ (client)
30947 //==================================================================
30948 function client$()
30949 {	
30950 	this.name			= 'microsoft';
30951 	this.pdf			= null;
30952 
30953 	this.init			= client$init;
30954 	this.init();
30955 
30956 	this.isServer			= false;
30957 	this.isClient			= true;
30958 
30959 	this.startSend			= client$client_startSend;
30960 	this.endSend			= client$client_endSend;
30961 	this.send			= client$client_send;
30962 	this.sqlRead			= client$sqlRead;
30963 	
30964 	this.email			= client$client_email;
30965 }
30966 //==================================================================
30967 //			client$sqlRead
30968 //==================================================================
30969 function client$sqlRead(sql)
30970 {
30971 	return null;
30972 }
30973 //==================================================================
30974 //			client$init
30975 //==================================================================
30976 function client$init()
30977 {
30978 	this.http			= null;
30979 	this.currentDate		= 1 * new Date();	
30980 
30981 	this.fileRead			= client$fileRead;
30982 	this.fileWrite			= client$fileWrite;
30983 	this.fileSize			= client$fileSize;
30984 	this.fileExists			= client$fileExists;
30985 	this.fileSend			= client$fileSend;
30986 	this.writeToStream		= client$writeToStream;
30987 	this.uploadStream		= client$uploadStream;
30988 	this.uploadFile			= client$uploadFile;
30989 	this.createTextFile		= client$createTextFile;
30990 
30991 	this.readFile			= client$readFile;
30992 	this.readUrl			= client$readUrl;
30993 	this.httpInit_			= client$httpInit_;
30994 	this.isUrl_			= client$isUrl_;
30995 
30996 	this.date_			= client$date_;
30997 		
30998 	this.streamValue		= client$streamValue;
30999 	this.hexEncode			= client$hexEncode;
31000 
31001 	this.copyDate			= 2 * this.currentDate;
31002 }
31003 //==================================================================
31004 //			client$hexEncode
31005 //==================================================================
31006 function client$hexEncode(stream)
31007 {
31008 	var i,value;
31009 	var xlen,a,c,xchr;
31010 	
31011 	value = "";
31012 	xlen = 0;
31013 
31014 	stream.Position = 0;		// set to text mode
31015 	stream.Type = 2;
31016 
31017 	for (i=0; i &lt; stream.size; ++i)
31018 	{
31019 			if (xlen == 128)
31020 			{
31021 				value += "\n";
31022 				xlen = 0;
31023 			}
31024 			xlen += 1;
31025 
31026 			stream.Position = i;
31027 			xchr = stream.readText(1);
31028 			c = xchr.charCodeAt(0);
31029 			c = c & 255;			// unicode to byte
31030 
31031 			a = c.toString(16).toUpperCase();
31032 			
31033 			if (a.length == 0) a = '00';
31034 			if (a.length == 1) a = '0' + a;			
31035 			value += a;	
31036 	}
31037 	value += '>';	
31038 	return value;	
31039 }
31040 //==========================================================================================
31041 //			client$date_
31042 //==========================================================================================
31043 function client$date_()
31044 {
31045 	var y,m,d,h,min,sec,xdate,text;
31046 
31047 	xdate = new Date();
31048 	y = xdate.getFullYear();
31049 	m = xdate.getMonth() + 1;
31050 	d = xdate.getDate();
31051 	h = xdate.getHours();
31052 	min = xdate.getMinutes();
31053 	sec = xdate.getSeconds();
31054 	
31055 	if (m &lt; 10) m = '0' + m;
31056 	if (d &lt; 10) d = '0' + d;
31057 	if (h &lt; 10) h = '0' + h;
31058 	if (min &lt; 10) min = '0' + min;
31059 	if (sec &lt; 10) sec = '0' + sec;
31060 
31061 	text = '' + y + m + d + h + min + sec;
31062 	return text;
31063 }
31064 //==================================================================
31065 //			client$client_startSend
31066 //==================================================================
31067 function client$client_startSend(filename,as,download)
31068 {
31069 
31070 }
31071 //==========================================================================================
31072 //			client$client_send
31073 //==========================================================================================
31074 function client$client_send(text)
31075 {
31076 
31077 }
31078 //==================================================================
31079 //			client$client_endSend
31080 //==================================================================
31081 function client$client_endSend()
31082 {
31083 }
31084 //==================================================================
31085 //			client$createTextFile
31086 //==================================================================
31087 function client$createTextFile(filename)
31088 {
31089 }
31090 //==================================================================
31091 //			client$fileRead
31092 //==================================================================
31093 function client$fileRead(filename)
31094 {
31095 	return this.readUrl(filename);
31096 }
31097 //===========================================================================
31098 //			client$fileWrite
31099 //===========================================================================
31100 function client$fileWrite(data,filename)
31101 {
31102 	var fs,f;
31103 }
31104 //==============================================================================
31105 //                   client$fileSize
31106 //==============================================================================
31107 function client$fileSize(filename)
31108 {	
31109 	var buffer;
31110 
31111 	buffer = CollinsPDF().readBuffer(filename);
31112 	return buffer.length;
31113 
31114 }
31115 //==============================================================================
31116 //                   client$fileExists
31117 //==============================================================================
31118 function client$fileExists(filename)
31119 {	
31120 	var text;
31121 
31122 	text = '' + this.readUrl(filename);
31123 	if (text.length > 0) return true;
31124 	return false;
31125 }
31126 //================================================================
31127 //                   client$fileSend (toClient)
31128 //=================================================================
31129 function client$fileSend(filename)
31130 { 
31131 
31132 }
31133 //====================================================================================
31134 //				client$streamValue
31135 //====================================================================================
31136 function client$streamValue(stream,pos) 
31137 {
31138 	var c;
31139 
31140 	c = stream.charCodeAt(pos);
31141 	c = c & 255;			// unicode to byte
31142 
31143 	return c;
31144 }
31145 //==========================================================================================
31146 //			client$writeToStream
31147 //==========================================================================================
31148 function client$writeToStream()
31149 {
31150 	return null;
31151 }
31152 //====================================================================================
31153 //			client$uploadStream
31154 //====================================================================================
31155 function client$uploadStream(server,stream,filename)
31156 {
31157 }
31158 //====================================================================================
31159 //			client$uploadFile
31160 //====================================================================================
31161 function client$uploadFile(server,filename)
31162 {	
31163 }
31164 //=================================================================
31165 //			client$client_email
31166 //=================================================================
31167 function client$client_email(command)
31168 {
31169 	var cmd;	
31170 
31171 try
31172 {
31173 	return CollinsPDF_Email(this.collinsPDF,command);
31174 }
31175 
31176 catch (e) {}
31177 
31178 	cmd = 'Command=email';
31179 	cmd += '&to=' + escape(command.to);
31180 	cmd += '&from=' + escape(command.from);
31181 	cmd += '&subject=' + escape(command.subject);
31182 	cmd += '&message=' + escape(command.message);
31183 	cmd += '&attachment=' + escape(command.attachment);
31184 	cmd += '&filename=' + encodeURIComponent(command.filename);
31185 	cmd += '&server=' + escape(command.server);
31186 	cmd += '&pdf=' + encodeURIComponent(this.toString());
31187 
31188 try
31189 {
31190 	this.httpInit_();
31191 	this.http.open('POST',this.pdf.emailUrl,false);
31192 	this.http.setRequestHeader('Content-Type','application/x-www-form-urlencoded');
31193 	this.http.send(cmd);
31194 
31195 	return this.http.responseText;	
31196 
31197 }
31198 catch (e) 
31199 	{ 
31200 		alert('EMAIL Failed to ' + command.to + ' ' + e.message); 
31201 		return "EMail Failed -- " + this.emailURL + ' ' + e.message;  
31202 	}
31203 
31204 }
31205 //==================================================================
31206 //			client$readUrl
31207 //==================================================================
31208 function client$readUrl(filename)
31209 { 
31210 
31211 try
31212 {
31213 		this.httpInit_();
31214 		this.http.open("GET",filename,false);
31215 		this.http.send();
31216 		if (this.http.status == 200) return this.http.responseText;
31217 
31218 		return "";
31219 }
31220     catch (e) { alert(e); return (""); }
31221 		
31222 }
31223 //==================================================================
31224 //			client$readFile
31225 //==================================================================
31226 function client$readFile(filename)
31227 { 
31228 
31229 	return this.readUrl(filename);
31230 
31231 }
31232 //==========================================================================================
31233 //                      client$httpInit_
31234 //==========================================================================================
31235 function client$httpInit_()
31236 {
31237 	if (this.http != null) return this.http;
31238 
31239 	try 
31240 	{ 
31241 		this.http = new XMLHttpRequest(); 
31242 		return this.http; 
31243 	} 
31244 		catch (e) {};
31245 	try
31246 	{ 
31247 		this.http = window.createRequest(); 
31248 		return this.http; 
31249 	} 
31250 		catch (e) {};
31251 
31252 	throw new Error( "This browser does not support XMLHttpRequest" );
31253 }
31254 //===================================================
31255 //                   client$isUrl_
31256 //===================================================
31257 function client$isUrl_(filename)
31258 { 
31259 	return true;
31260 }
31261 //==========================================================================================
31262 //	Author: Clifford L. Collins				Date: Jan 2013
31263 //-----------------------------------------------------------------------------------------
31264 //	Collins Software
31265 //	7710 Janak Drive, Houston Texas 77055
31266 //	http://CollinsSoftware.com
31267 //=========================================================================================
31268 
31269 
31270 //========================================================
31271 //					f$
31272 //========================================================
31273 function f$(object,method)
31274 {
31275 	var i,args;
31276 	
31277 	args = new Array();
31278 	args[0] = null;  // save room for the event object
31279 	
31280 	for (i=2; i &lt; arguments.length; ++i) args[i-1] = arguments[i];
31281 
31282 	return function(e)
31283 	{
31284 
31285 		if (!e) e = event;		// windows
31286 		args[0] = e;
31287 		if (e)
31288 		{
31289 			object.srcElement = e.srcElement;
31290 			if (e.target) object.scrElement = e.target;
31291 		}
31292 		
31293 		return method.apply(object,args);
31294 	}
31295 }
31296 //=================================================================
31297 //			canvasPlot.js
31298 //=================================================================
31299 function canvasPlot$(canvasName,graphicView)
31300 {
31301 
31302 	this.graphicView		= graphicView;
31303 		
31304 	this.canvas			= document.getElementById(canvasName);
31305 	this.context			= this.canvas.getContext('2d');
31306 	this.height			= this.canvas.offsetHeight;
31307 	this.width			= this.canvas.offsetWidth;
31308 
31309 	this.context.translate(0.5, 0.5);
31310 	
31311 	this.default_fontSize		= 10;
31312 	this.default_fontName		= 'arial';
31313 
31314 	this.color			= -1;
31315 	this.fillColor			= 0;
31316 	this.grayscale			= 0;
31317 	this.lineWeight			= 1;
31318 	this.lineStyle			= 'solid';
31319 	this.backgroundColor		= 'white';
31320 	this.blur			= '';
31321 
31322 	this.fontSize			= 10;
31323 	this.fontColor			= 'Black';
31324 	this.fontName			= 'arial';
31325 	
31326 	this.clip			= false;	
31327 	this.blur			= '';
31328 
31329 	this.lineCap			= 2;			// Extended Lines;
31330 	this.images			= new Array();
31331 
31332 	this.debug = true;
31333 	
31334 //----------- public methods ----------------------
31335 
31336 	this.line			= canvasPlot$line;
31337 	this.linestring			= canvasPlot$linestring;
31338 	this.rectangle			= canvasPlot$rectangle;
31339 	this.polygon			= canvasPlot$polygon;
31340 
31341 	this.cone			= canvasPlot$cone;
31342 	this.arc			= canvasPlot$arc;
31343 	this.circle			= canvasPlot$circle;
31344 	this.symbol			= canvasPlot$symbol;
31345 	this.marker			= canvasPlot$marker;
31346 	this.text			= canvasPlot$text;
31347 	this.textbox			= canvasPlot$textbox;
31348 	this.image			= canvasPlot$image;
31349 	this.video			= canvasPlot$video;
31350 
31351 	this.setFontColor		= canvasPlot$setFontColor;
31352 	this.setFontSize		= canvasPlot$setFontSize;
31353 	this.setFontName		= canvasPlot$setFontName;
31354 
31355 	this.setBlur			= canvasPlot$setBlur;
31356 	this.setFillColor		= canvasPlot$setFillColor;
31357 	this.setLineColor		= canvasPlot$setLineColor;
31358 	this.setLineStyle		= canvasPlot$setLineStyle;
31359 	this.setLineWeight		= canvasPlot$setLineWeight;
31360 	this.setStyle			= canvasPlot$setStyle;
31361 	this.textWidth			= canvasPlot$textWidth;
31362 
31363 	this.attachEvents		= canvasPlot$attachEvents;
31364 	
31365 //--------- internal methods ---------
31366 
31367 	this.clipBegin			= canvasPlot$clipBegin;
31368 	this.clipEnd			= canvasPlot$clipEnd;
31369 	
31370 	this.shapeStyle			= canvasPlot$shapeStyle;
31371 	this.shapeStyleEnd		= canvasPlot$shapeStyleEnd;
31372 
31373 	this.shape_			= canvasPlot$shape_;
31374 	this.map			= canvasPlot$map;
31375 
31376 	this.clear			= canvasPlot$clear;
31377 	
31378 	this.parseColor_		= canvasPlot$parseColor_;
31379 	this.getColor			= canvasPlot$getColor;
31380 	this.rgba			= canvasPlot$rgba;	
31381 	this.makeFillet			= canvasPlot$makeFillet;
31382 	this.angle_			= canvasPlot$angle_;
31383 	
31384 	this.clear();
31385 }
31386 //======================================================================
31387 //			   plot$angle_
31388 //======================================================================
31389 function canvasPlot$angle_(x1,y1,x2,y2)
31390 {
31391 	var dir,dx,dy,ESP;
31392 	ESP = 0.00001
31393 
31394 	dir = 0;
31395 	dx = x2 - x1;
31396 	dy = y2 - y1;
31397 	if (Math.abs(dx) >= ESP)
31398 	{
31399 	   d = dy / dx;
31400 	   dir = Math.atan(d);
31401 	   if (isNaN(dir)) dir = 0;
31402 	   if (Math.abs(dir) &lt; ESP) dir = 0;
31403 
31404 	   if (dx &lt; 0 && dy &lt; 0) dir = dir + Math.PI;
31405 	   if (dx &lt; 0 && dy >= 0) dir = dir + Math.PI;
31406 	}
31407 	else
31408 	{
31409 		dir = Math.PI / 2 * 3;
31410 		if (y2 > y1) dir = Math.PI / 2;
31411 		if (Math.abs(y2-y1) &lt; ESP) dir = 0;
31412 	}
31413 
31414 	return dir;
31415 }
31416 
31417 //==========================================================================================
31418 //				canvasPlot$map
31419 //==========================================================================================
31420 function canvasPlot$map(x,y)
31421 {
31422 	var p;
31423 	
31424 	p = new Object();
31425 	p.x = Math.floor(x);
31426 	p.y = Math.floor(y);
31427 	
31428 	return p;	
31429 }
31430 //==========================================================================================
31431 //				canvasPlot$textWidth
31432 //==========================================================================================
31433 function canvasPlot$textWidth(text)
31434 {
31435 	var m;
31436 	
31437 	m = this.context.measureText(text);
31438 	return m.width;
31439 }
31440 //==========================================================================================
31441 //				canvasPlot$clear
31442 //==========================================================================================
31443 function canvasPlot$clear(ele)
31444 {
31445 
31446 	if (ele) this.backgroundColor = ele.style.backgroundColor;
31447 	this.setStyle('',0,'solid','white');
31448 //	this.rectangle(0,0,this.width,this.height);
31449 	this.setStyle('black',1,'solid','');
31450 	
31451 }
31452 //==========================================================================================
31453 //				canvasPlot$setStyle
31454 //==========================================================================================
31455 function canvasPlot$setStyle(color,weight,style,fillcolor)
31456 {
31457 	this.setLineColor(color);
31458 
31459 	this.setFillColor(fillcolor);
31460 	this.setLineWeight(weight);
31461 	this.setLineStyle(style);
31462 }
31463 //==========================================================================================
31464 //				canvasPlot$text
31465 //==========================================================================================
31466 function canvasPlot$text(x,y,text,url,angle,just)
31467 {
31468 	var p;
31469 	p = this.map(x,y);
31470 
31471 	p.y += this.fontSize;
31472 	this.setFontColor(this.fontColor);
31473 
31474 	this.context.textAlign = "";
31475 	if (just == 'CC') this.context.textAlign = "center";
31476 	if (just == 'LC') this.context.textAlign = "center";
31477 	if (just == 'UC') this.context.textAlign = "center";
31478 
31479 	if (just == 'CR') this.context.textAlign = "right";
31480 	if (just == 'LR') this.context.textAlign = "right";
31481 	if (just == 'UR') this.context.textAlign = "right";
31482 
31483 	this.context.fillText(text,p.x,p.y); 
31484 }
31485 //==========================================================================================
31486 //				canvasPlot$image
31487 //==========================================================================================
31488 function canvasPlot$image(x,y,filename,width,height,angle,alpha)
31489 {
31490 	var p,img;
31491 	
31492 	p = this.map(x,y);
31493 
31494     img = new Image();    
31495     img.onload	= f$(this,canvasPlotEvent_ImageLoaded);
31496 	img.px		= p.x;
31497 	img.py		= p.y;
31498 	img.width	= width;
31499 	img.height	= height;
31500 	img.angle	= angle;	
31501     img.src	= filename;
31502     img.alpha	= alpha;
31503     
31504 }
31505 //==========================================================================================
31506 //				canvasPlot$video
31507 //==========================================================================================
31508 function canvasPlot$video(x,y,filename,width,height,angle,alpha)
31509 {
31510 	var p,img;
31511 	
31512 	p = this.map(x,y);
31513 
31514 	this.videoElement = document.createElement("video");
31515 	this.videoDiv = document.createElement('div');
31516 	document.body.appendChild(this.videoDiv);
31517 
31518 	this.videoDiv.appendChild(this.videoElement);
31519 	this.videoDiv.setAttribute("style", "display:none;");
31520 	this.videoElement.setAttribute("src", filename);
31521 	this.videoElement.addEventListener("canplaythrough",f$(this,canvasPlotEvent_VideoLoaded),false);
31522 
31523     this.videoElement.onload	= f$(this,canvasPlotEvent_ImageLoaded);
31524 	this.videoElement.px		= p.x;
31525 	this.videoElement.src		= filename;
31526 	this.videoElement.py		= p.y;
31527 	this.videoElement.width	= width;
31528 	this.videoElement.height	= height;
31529 	this.videoElement.angle		= angle;	
31530     this.videoElement.alpha		= alpha;
31531 }
31532 //==========================================================================================
31533 //				canvasPlot$symbol
31534 //==========================================================================================
31535 function canvasPlot$symbol(x,y,char,angle)
31536 {
31537 	var p;
31538 	
31539 	p = this.map(x,y);
31540 
31541 }
31542 //==========================================================================================
31543 //				canvasPlot$marker
31544 //==========================================================================================
31545 function canvasPlot$marker(x,y,name,size)
31546 {
31547 	var p;
31548 	
31549 	p = this.map(x,y);
31550 
31551 }
31552 //==========================================================================================
31553 //				canvasPlot$textbox
31554 //==========================================================================================
31555 function canvasPlot$textbox(tbox)
31556 {
31557 	var x,y,height,width;
31558 	var dx,dy,drop;
31559 	var p;
31560 
31561 	x = tbox.point.x;
31562 	y = tbox.point.y;
31563 	
31564 	height = tbox.height;
31565 	width  = tbox.width;
31566 	
31567 	drop = true;
31568 	dx = parseFloat(tbox.dropx);
31569 	dy = parseFloat(tbox.dropy);
31570 	if (isNaN(dx)) drop = false;
31571 	if (isNaN(dy)) drop = false;
31572 		
31573 	if (drop) 
31574 	{
31575 		this.placeTextbox(x,y,height,width,tbox.text,tbox.align,tbox.valign,tbox.shape,dx,dy);
31576 	}
31577 	else this.placeTextbox(x,y,height,width,tbox.text,tbox.align,tbox.valign);
31578 }
31579 //==========================================================================================
31580 //				canvasPlot$line
31581 //==========================================================================================
31582 function canvasPlot$line(x1,y1,x2,y2)
31583 {
31584 	var p1,p2;
31585 	
31586 	p1 = this.map(x1,y1);
31587 	p2 = this.map(x2,y2);
31588 
31589 	this.shapeStyle(false);
31590 	this.context.moveTo(p1.x,p1.y);
31591 	this.context.lineTo(p2.x,p2.y);
31592 	this.shapeStyleEnd(true);
31593 }
31594 //==========================================================================================
31595 //				canvasPlot$rectangle
31596 //==========================================================================================
31597 function canvasPlot$rectangle(x1, y1, x2, y2)
31598 {
31599 	var p1,p2;
31600 	var xmin,ymin,xmax,ymax,height,width;
31601 	
31602 	p1 = this.map(x1,y1);
31603 	p2 = this.map(x2,y2);
31604 
31605 	xmin = Math.min(p1.x,p2.x);
31606 	ymin = Math.min(p1.y,p2.y);
31607 	xmax = Math.max(p1.x,p2.x);
31608 	ymax = Math.max(p1.y,p2.y);
31609 	
31610 	width =  xmax - xmin;
31611 	height = ymax - ymin;
31612 
31613 	this.shapeStyle(true);
31614 	this.context.rect(xmin,ymin,width,height);
31615 	this.shapeStyleEnd(true);
31616 }
31617 //==========================================================================================
31618 //				canvasPlot$linestring
31619 //==========================================================================================
31620 function canvasPlot$linestring(pnts)
31621 {
31622 	this.shape_(pnts,false);
31623 }
31624 //==========================================================================================
31625 //				canvasPlot$polygon
31626 //==========================================================================================
31627 function canvasPlot$polygon(pnts)
31628 {
31629 	this.shape_(pnts,true);
31630 }
31631 //==========================================================================================
31632 //				canvasPlot$shape_
31633 //==========================================================================================
31634 function canvasPlot$shape_(pnts,closed)
31635 {
31636 	var p,p2,i,x,y,code,hasCode,t,j,k,tpnts;
31637 
31638 	if (pnts.length &lt;= 1) return;
31639 	this.shapeStyle(closed);
31640 
31641 	p = this.map(pnts[0].x,pnts[0].y);
31642 	this.context.moveTo(p.x,p.y);
31643 
31644 	hasCode = false;
31645 	t = typeof(pnts[0].code)
31646 	if (t != 'undefined') hasCode = true;
31647 
31648 	for (i=1; i &lt; pnts.length; ++i)
31649 	{
31650 		p = this.map(pnts[i].x,pnts[i].y);
31651 		x = p.x;
31652 		y = p.y;
31653 		if (hasCode)
31654 		{
31655 			code = pnts[i].code;
31656 			if (code == 'M') 
31657 			{
31658 				this.context.moveTo(x,y);
31659 				continue;
31660 			}
31661 			if (code.substr(0,1) == 'F') 
31662 			{
31663 				j = i-1;
31664 				k = i+1;
31665 				if (j &lt; 0) j = pnts.length-1;
31666 				if (k >= pnts.length) k = 0;
31667 				tpnts = this.makeFillet(pnts[j],pnts[i],pnts[k],code);
31668 				for (j = 0; j &lt; tpnts.length; ++j)
31669 				{
31670 					this.context.lineTo(tpnts[j].x,tpnts[j].y);
31671 				}
31672 				continue;
31673 			}
31674 
31675 		}
31676 		this.context.lineTo(x,y);
31677 	}
31678 
31679 	this.shapeStyleEnd(closed);	
31680 }
31681 //==========================================================================================
31682 //				canvasPlot$makeFillet
31683 //==========================================================================================
31684 function canvasPlot$makeFillet(p1,p2,p3)
31685 {
31686 
31687 	var i,pnts;
31688 	var dx,dy,A,B,C,c;
31689 	var a,cx,cy,a12,x12,y12,x13,y13,p,da,angle;
31690 	var a21,a23,d;
31691 	var tx,ty,radius,dir,x2,y2, Cangle, Aangle;
31692 	
31693 	pnts = new Array();
31694 
31695 	dx = p1.x - p2.x;
31696 	dy = p1.y - p2.y;
31697 	A = Math.sqrt(dx*dx + dy*dy);
31698 
31699 	dx = p2.x - p3.x;
31700 	dy = p2.y - p3.y;
31701 	B = Math.sqrt(dx*dx + dy*dy);
31702 
31703 	dx = p3.x - p1.x;
31704 	dy = p3.y - p1.y;
31705 	C = Math.sqrt(dx*dx + dy*dy);
31706 
31707 	dir = this.angle_(p1.x,p1.y,p2.x,p2.y);
31708 
31709 	x2 = p2.x - p1.x;
31710 	y2 = p2.y - p1.y;
31711 	
31712 	tx = Math.cos(-dir) * x2 - Math.sin(-dir) * y2;
31713 	ty = Math.sin(-dir) * x2 + Math.cos(-dir) * y2;
31714 
31715 	c = (A*A + B*B - C*C) / (2 * A * B);
31716 	c = Math.acos(c);
31717 
31718 	Cangle = c * 180 / Math.PI;
31719 	radius = 10;
31720 	
31721 	if (A &lt; radius) radius = A - 4;
31722 	if (B &lt; A) radius = B - 4;
31723 
31724 	if (radius &lt; 5) 
31725 	{
31726 		pnts[0] = p2;
31727 		return pnts;
31728 	}
31729 
31730 	a21 = this.angle_(p2.x,p2.y,p1.x,p1.y);
31731 	a23 = this.angle_(p2.x,p2.y,p3.x,p3.y);
31732 
31733 	a = a21 + (c / 2);
31734 	Aangle = a * 180 / Math.PI;
31735 
31736 	d = radius / Math.sin(c / 2);
31737 
31738 	cx = Math.cos(-a) * d + p2.x;
31739 	cy = Math.sin(-a) * d + p2.y;
31740 
31741 	ac1 = this.angle_(cx,cy,p1.x,p1.y);
31742 
31743 	da = Math.PI / 14;
31744 	angle = 0;
31745 
31746 	for (i=0; i &lt; 15; ++i)
31747 	{
31748 		p = new Object();
31749 		p.x = Math.cos(ac1) * radius + cx;
31750 		p.y = Math.sin(ac1) * radius + cy;
31751 		pnts[pnts.length] = p;	
31752 		ac1 += da;
31753 	}
31754 		
31755 	return pnts;
31756 	
31757 }
31758 //==========================================================================================
31759 //				canvasPlot$circle
31760 //==========================================================================================
31761 function canvasPlot$circle(cx,cy,radius)
31762 {
31763 	var p;
31764 
31765 	p = this.map(cx,cy);
31766 
31767 
31768 	this.shapeStyle(true);
31769 	this.context.arc(p.x,p.y,radius,0, 2 * Math.PI, false);
31770 	this.shapeStyleEnd(true);
31771 }
31772 //==========================================================================================
31773 //				canvasPlot$arc
31774 //==========================================================================================
31775 function canvasPlot$arc(cx,cy,radius,start,sweep)
31776 {
31777 	var p, end;
31778 	p = this.map(cx,cy);
31779 
31780 	if (sweep &lt; 0)
31781 	{
31782 		start = start + sweep;
31783 		sweep = - sweep;
31784 	}
31785 
31786 	start = (start + 360) % 360;
31787 	if (sweep &lt; 0) sweep = (sweep + 360) % 360;
31788 	
31789 	end = start+sweep;
31790 	
31791 //	start = start / 180 * Math.PI;
31792 //	end = end / 180 * Math.PI;
31793 	
31794 	this.shapeStyle(true);
31795 	this.context.arc(p.x, p.y, radius, start, end, true);
31796 	this.shapeStyleEnd(true);
31797 }
31798 //==========================================================================================
31799 //				canvasPlot$cone
31800 //==========================================================================================
31801 function canvasPlot$cone(cx,cy,radius,start,sweep)
31802 {
31803 	var x1,y1,x2,y2;
31804 	var sdir,edir;	
31805 	var p;
31806 
31807 	p = this.map(cx,cy);
31808 	
31809 	if (sweep &lt; 0)
31810 	{
31811 		start = start + sweep;
31812 		sweep = - sweep;
31813 	}
31814 
31815 	start = (start + 360) % 360;
31816 	if (sweep &lt; 0) sweep = (sweep + 360) % 360;
31817 
31818 	sdir = start / 180 * Math.PI;
31819 	edir = (start + sweep) / 180 * Math.PI;
31820 	
31821 	x1 = p.x + (Math.cos(sdir) * radius);
31822 	y1 = p.y + (Math.sin(sdir) * radius);
31823 
31824 	x2 = p.x + (Math.cos(edir) * radius);
31825 	y2 = p.y + (Math.sin(edir) * radius);
31826 
31827 	this.shapeStyle(true);
31828 
31829 	this.context.moveTo(p.x, p.y);
31830 	this.context.lineTo(x1,y1);
31831 	this.context.arc(p.x, p.y, radius, start, start+sweep, true);
31832 	this.context.moveTo(x2,y2);
31833 	this.context.lineTo(p.x,p.y);
31834 
31835 	this.shapeStyleEnd(true);
31836 }
31837 //==========================================================================================
31838 //				canvasPlot$grid
31839 //==========================================================================================
31840 function canvasPlot$grid(x1, y1, x2, y2, row, cols)
31841 {
31842 	var weight;
31843 	var text,dy,dx,color;
31844 	var dr,dc,r,c,tx,ty;
31845 
31846 	var p1,p2;
31847 	
31848 	p1 = this.map(x1,y1);
31849 	p2 = this.map(x2,y2);
31850 	x1 = p1.x;
31851 	y1 = p1.y;
31852 	x2 = p2.x;
31853 	y2 = p2.y;
31854 	
31855 	x1 = Math.round(x1 * 1000) / 1000;
31856 	y1 = Math.round(y1 * 1000) / 1000;
31857 	
31858 	x1 = Math.round(x1 * 1000) / 1000;
31859 	y1 = Math.round(y1 * 1000) / 1000;
31860 
31861 	x2 = Math.round(x2 * 1000) / 1000;
31862 	y2 = Math.round(y2 * 1000) / 1000;
31863 	
31864 	dx = x2 - x1;
31865 	dy = y2 - y1;
31866 
31867 	this.shapeStyle(true);
31868 	this.rectangle(x1,y1,x2,y2);
31869 
31870 	if (cols &lt; 1) cols = 1;
31871 	if (rows &lt; 1) rows = 1;
31872 
31873 	dr = dy / rows;
31874 	dc = dx / cols;
31875 	
31876 	ty = y1;
31877 	tx = x1;
31878 
31879 	for (r = 0; r &lt; rows; ++r)
31880 	{
31881 		ty += dr;
31882 		this.line(x1,ty,x2,ty);
31883 	}
31884 
31885 	for (c = 0; c &lt; cols; ++c)
31886 	{
31887 		tx += dc;
31888 		this.line(tx,y1,tx,y2);
31889 	}
31890 
31891 	this.shapeStyleEnd(true);
31892 }
31893 //==========================================================================================
31894 //				canvasPlot$shapeStyle
31895 //==========================================================================================
31896 function canvasPlot$shapeStyle(closed)
31897 {
31898 	var pattern, a ,value;
31899 	
31900 	this.context.beginPath();
31901 
31902 
31903 	if (! closed) this.context.fillStyle = '';
31904     if (  closed) this.context.fillStyle = this.getColor(this.fillColor);
31905 	if (this.blur == '')
31906 	{	
31907 		this.context.shadowBlur = 0;
31908 		this.context.shadowColor = '';
31909 	}
31910 	else
31911 	{	
31912 		a = this.blur.split(':');
31913 		value = 10;
31914 		if (a.length > 1) value = parseInt(a[1]);
31915 		if (isNaN(value)) value = 10;
31916 		this.context.shadowBlur = value;
31917 		this.context.shadowColor = a[0];
31918 	}
31919 	
31920 	pattern = [];
31921 	if (this.lineStyle == 'dash') pattern = [5,10];
31922 	if (this.lineStyle == 'dot') pattern = [2,4];
31923 	if (this.lineStyle == 'dashdot') pattern = [6,4,2,4];
31924 
31925 	if ( this.context.setLineDash !== undefined )   this.context.setLineDash(pattern);
31926 	if ( this.context.mozDash !== undefined )       this.context.mozDash = pattern;
31927 
31928 	this.context.lineWidth = this.lineWeight;
31929     this.context.strokeStyle = this.getColor(this.color);
31930 
31931 }
31932 //==========================================================================================
31933 //				canvasPlot$shapeStyleEnd
31934 //==========================================================================================
31935 function canvasPlot$shapeStyleEnd(closed)
31936 {
31937 	if (closed && this.fillColor != '') this.context.fill();
31938 	if (this.lineWeight > 0) this.context.stroke();
31939 }
31940 //==========================================================================================
31941 //				canvasPlot$setLineStyle
31942 //==========================================================================================
31943 function canvasPlot$setLineStyle(value)
31944 {
31945 	this.lineStyle = "" + value;
31946 	this.lineStyle = this.lineStyle.toLowerCase();
31947 }
31948 //==========================================================================================
31949 //				canvasPlot$setBlur
31950 //==========================================================================================
31951 function canvasPlot$setBlur(value)
31952 {
31953 	this.blur = "" + value;
31954 	this.blur = this.blur.toLowerCase();
31955 }
31956 //==========================================================================================
31957 //				canvasPlot$setLineColor
31958 //==========================================================================================
31959 function canvasPlot$setLineColor(value)
31960 {
31961 	this.color = value;
31962 }
31963 //==========================================================================================
31964 //				canvasPlot$setFillColor
31965 //==========================================================================================
31966 function canvasPlot$setFillColor(value)
31967 {
31968 	this.fillColor = value;
31969 }
31970 //==========================================================================================
31971 //				canvasPlot$setLineWeight
31972 //==========================================================================================
31973 function canvasPlot$setLineWeight(value)
31974 {
31975 	if (value == '') value = -1;
31976 	value = parseInt(value);
31977 	if (isNaN(value)) value = -1;
31978 	this.lineWeight = value;
31979 }
31980 //==========================================================================================
31981 //				canvasPlot$clipBegin
31982 //==========================================================================================
31983 function canvasPlot$clipBegin(x1, y1, x2, y2)
31984 {
31985 }
31986 //==========================================================================================
31987 //				canvasPlot$clipEnd
31988 //==========================================================================================
31989 function canvasPlot$clipEnd()
31990 {
31991 }
31992 //==========================================================================================
31993 //				canvasPlot$setFontSize
31994 //==========================================================================================
31995 function canvasPlot$setFontSize(size)
31996 {
31997 	this.fontSize = parseFloat(size);
31998 	if (isNaN(this.fontSize)) this.fontSize = 10;
31999 	
32000 	this.context.font = this.fontSize + 'px ' + this.fontName;
32001 }
32002 //==========================================================================================
32003 //				canvasPlot$setFontColor
32004 //==========================================================================================
32005 function canvasPlot$setFontColor(color)
32006 {
32007 	this.fontColor = color;
32008     this.context.fillStyle = this.getColor(color);
32009 }
32010 //==========================================================================================
32011 //				canvasPlot$setFontName
32012 //==========================================================================================
32013 function canvasPlot$setFontName(name)
32014 {
32015 	this.fontName = name;
32016 	this.context.font = this.fontSize + 'px ' + this.fontName;
32017 }
32018 
32019 //==========================================================================================
32020 //				canvasPlot$parseColor_
32021 //==========================================================================================
32022 function canvasPlot$parseColor_(c)
32023 {
32024 	var color,i,name,colorNames,colorValues,lightValues,R,G,B,A;
32025 	var list,t,c, obj;
32026 	
32027 	colorNames = new Array('AliceBlue','AntiqueWhite','Aqua','Aquamarine','Azure','Beige','Bisque','Black','BlanchedAlmond',
32028 	'Blue','BlueViolet','Brown','BurlyWood','CadetBlue','Chartreuse','Chocolate','Coral','CornflowerBlue','Cornsilk','Crimson',
32029 	'Cyan','DarkBlue','DarkCyan','DarkGoldenRod','DarkGray','DarkGrey','DarkGreen','DarkKhaki','DarkMagenta','DarkOliveGreen',
32030 	'Darkorange','DarkOrchid','DarkRed','DarkSalmon','DarkSeaGreen','DarkSlateBlue','DarkSlateGray','DarkSlateGrey','DarkTurquoise',
32031 	'DarkViolet','DeepPink','DeepSkyBlue','DimGray','DimGrey','DodgerBlue','FireBrick','FloralWhite','ForestGreen','Fuchsia','Gainsboro',
32032 	'GhostWhite','Gold','GoldenRod','Gray','Grey','Green','GreenYellow','HoneyDew','HotPink','IndianRed ','Indigo ','Ivory','Khaki',
32033 	'Lavender','LavenderBlush','LawnGreen','LemonChiffon','LightBlue','LightCoral','LightCyan','LightGoldenRodYellow','LightGray',
32034 	'LightGrey','LightGreen','LightPink','LightSalmon','LightSeaGreen','LightSkyBlue','LightSlateGray','LightSlateGrey','LightSteelBlue',
32035 	'LightYellow','Lime','LimeGreen','Linen','Magenta','Maroon','MediumAquaMarine','MediumBlue','MediumOrchid','MediumPurple',
32036 	'MediumSeaGreen','MediumSlateBlue','MediumSpringGreen','MediumTurquoise','MediumVioletRed','MidnightBlue','MintCream','MistyRose',
32037 	'Moccasin','NavajoWhite','Navy','OldLace','Olive','OliveDrab','Orange','OrangeRed','Orchid','PaleGoldenRod','PaleGreen','PaleTurquoise',
32038 	'PaleVioletRed','PapayaWhip','PeachPuff','Peru','Pink','Plum','PowderBlue','Purple','Red','RosyBrown','RoyalBlue','SaddleBrown','Salmon',
32039 	'SandyBrown','SeaGreen','SeaShell','Sienna','Silver','SkyBlue','SlateBlue','SlateGray','SlateGrey','Snow','SpringGreen','SteelBlue','Tan',
32040 	'Teal','Thistle','Tomato','Turquoise','Violet','Wheat','White','WhiteSmoke','Yellow','YellowGreen');
32041 	
32042 	colorValues = new Array(0xF0F8FF,0xFAEBD7,0x00FFFF,0x7FFFD4,0xF0FFFF,0xF5F5DC,0xFFE4C4,0x000001,0xFFEBCD,0x0000FF,0x8A2BE2,0xA52A2A,
32043 	0xDEB887,0x5F9EA0,0x7FFF00,0xD2691E,0xFF7F50,0x6495ED,0xFFF8DC,0xDC143C,0x00FFFF,0x00008B,0x008B8B,0xB8860B,0xA9A9A9,0xA9A9A9,0x006400,
32044 	0xBDB76B,0x8B008B,0x556B2F,0xFF8C00,0x9932CC,0x8B0000,0xE9967A,0x8FBC8F,0x483D8B,0x2F4F4F,0x2F4F4F,0x00CED1,0x9400D3,0xFF1493,0x00BFFF,
32045 	0x696969,0x696969,0x1E90FF,0xB22222,0xFFFAF0,0x228B22,0xFF00FF,0xDCDCDC,0xF8F8FF,0xFFD700,0xDAA520,0x808080,0x808080,0x008000,0xADFF2F,
32046 	0xF0FFF0,0xFF69B4,0xCD5C5C,0x4B0082,0xFFFFF0,0xF0E68C,0xE6E6FA,0xFFF0F5,0x7CFC00,0xFFFACD,0xADD8E6,0xF08080,0xE0FFFF,0xFAFAD2,0xD3D3D3,
32047 	0xD3D3D3,0x90EE90,0xFFB6C1,0xFFA07A,0x20B2AA,0x87CEFA,0x778899,0x778899,0xB0C4DE,0xFFFFE0,0x00FF00,0x32CD32,0xFAF0E6,0xFF00FF,0x800000,
32048 	0x66CDAA,0x0000CD,0xBA55D3,0x9370D8,0x3CB371,0x7B68EE,0x00FA9A,0x48D1CC,0xC71585,0x191970,0xF5FFFA,0xFFE4E1,0xFFE4B5,0xFFDEAD,0x000080,
32049 	0xFDF5E6,0x808000,0x6B8E23,0xFFA500,0xFF4500,0xDA70D6,0xEEE8AA,0x98FB98,0xAFEEEE,0xD87093,0xFFEFD5,0xFFDAB9,0xCD853F,0xFFC0CB,0xDDA0DD,
32050 	0xB0E0E6,0x800080,0xFF0000,0xBC8F8F,0x4169E1,0x8B4513,0xFA8072,0xF4A460,0x2E8B57,0xFFF5EE,0xA0522D,0xC0C0C0,0x87CEEB,0x6A5ACD,0x708090,
32051 	0x708090,0xFFFAFA,0x00FF7F,0x4682B4,0xD2B48C,0x008080,0xD8BFD8,0xFF6347,0x40E0D0,0xEE82EE,0xF5DEB3,0xFFFFFF,0xF5F5F5,0xFFFF00,0x9ACD32);
32052 
32053 	lightValues = new Array(0xFAEBD7,0x7FFFD4,0xF5F5DC,0xFFE4C4,0xFFEBCD,
32054 	0x7FFF00,0xFFF8DC,
32055 	0xFFFAF0,0xDCDCDC,
32056 	0xDAA520,0xADFF2F,
32057 	0xF0FFF0,0xFF69B4,0xFFFFF0,0xF0E68C,0xE6E6FA,0xFFF0F5,0xFFFACD,0xADD8E6,0xE0FFFF,0xFAFAD2,
32058 	0x90EE90,0xFFB6C1,0xFFA07A,0x87CEFA,
32059 	0xFFFFE0,0xFAF0E6,
32060 	0xF5FFFA,0xFFE4E1,0xFFE4B5,0xFFDEAD,
32061 	0xFDF5E6,
32062 	0xEEE8AA,0x98FB98,0xAFEEEE,0xFFEFD5,0xFFDAB9,
32063 	0xFFC0CB,
32064 	0xF4A460,0xFFF5EE,0x87CEEB,
32065 	0xFFFAFA,0xD2B48C,0xD8BFD8,0xEE82EE,0xF5DEB3,0xF5F5F5,0x9ACD32);
32066 
32067 	c = "" + c;
32068 
32069 	obj = new Object();
32070 	obj.color = 0;
32071 	obj.opaque = 1;
32072 
32073 	i = c.indexOf('.');
32074 	if (i >= 0)
32075 	{
32076 		t = c.substr(i);
32077 		c = c.substr(0,i);
32078 		t = parseFloat(t);
32079 		if (isNaN(t)) t = 1;
32080         obj.opaque = t;
32081 	}
32082 
32083 //----------- Integer --------
32084 
32085 	
32086 	c = c.replace(/^\s+|\s+$/g,'');
32087 	if (c == '') return obj;
32088 
32089 	if (!isNaN(c)) {
32090 	    obj.color = parseInt(c);
32091 	    return obj;
32092 	}
32093 
32094 	c = "" + c;
32095 	color = c.toLowerCase();
32096 	if (color.length == 0) return obj;
32097 
32098 //----------- rgb (r,g,b) ----------
32099 
32100 	i = color.indexOf('(');
32101 
32102 	if (i > 0)
32103 	{
32104 		name = color.substr(0,i);
32105 		color = color.substr(i+1);
32106 		i = color.indexOf(')');
32107 		if (i &lt; 0) i = color.length;
32108 		color = color.substr(0,i);
32109 		list = color.split(',');
32110 		R = 0;
32111 		G = 0;
32112 		B = 0;
32113 		A = 255;
32114 		R = parseInt(list[0]);
32115 		if (list.length > 1) G = parseInt(list[1]);
32116 		if (list.length > 2) B = parseInt(list[2]);
32117 		if (list.length > 2) A = parseInt(list[3]);
32118 		if (isNaN(R)) R = 0;
32119 		if (isNaN(G)) G = 0;
32120 		if (isNaN(B)) B = 0;
32121 		if (isNaN(A)) A = 0;
32122 				
32123 		if (R > 255) R = 255;
32124 		if (G > 255) G = 255;
32125 		if (B > 255) B = 255;
32126 		if (A > 255) A = 255;
32127 
32128 		if (R &lt; 0) R = 255;
32129 		if (G &lt; 0) G = 255;
32130 		if (B &lt; 0) B = 255;
32131 		if (A &lt; 0) A = 255;
32132 				
32133 		color = Math.round((R * 256 * 256) + (G * 256) + B);
32134 		obj.color = color;
32135 		return obj;
32136 		
32137 	}
32138 
32139 //----------- #HEX --------
32140 
32141 	if (color.substr(0,1) == '#') 
32142 	{
32143 		if (color.length == 4)
32144 		{
32145 		color = '#' + color.substr(1,1) + '0' +color.substr(2,1) + '0' + color.substr(3,1) + '0';
32146 		}
32147 		obj.color = parseInt(color.substr(1), 16);
32148 		return obj;
32149 	}
32150 //---------- Random --------
32151 
32152 	if (color == 'random')
32153 	{
32154 		i = Math.floor(Math.random() * colorValues.length);
32155 		obj.color = colorValues[i];
32156 		return obj;
32157 	}
32158 
32159 //---------- LightRandom --------
32160 
32161 	if (color == 'lightrandom')
32162 	{
32163 		i = Math.floor(Math.random() * lightValues.length);
32164 		obj.color =  lightValues[i];
32165 		return obj;
32166 	}
32167 
32168 //---------- Names --------
32169 	for (i=0; i &lt; colorNames.length; ++i)
32170 	{
32171 		name = colorNames[i];
32172 		if (color != name.toLowerCase()) continue;
32173 		obj.color = colorValues[i];
32174 		return obj;
32175 	}
32176 	return obj;
32177 }
32178 //==================================================================================
32179 //								graphicView$getColor
32180 //==================================================================================
32181 function canvasPlot$getColor(color)
32182 {
32183 	var a,list,text,grad,shape,transparent;
32184 	var grad,i,colors,gradient,stop;
32185 	
32186 	color = '' + color;
32187 	color = trim(color);
32188 	if (color == '') return '';
32189 
32190 //----------------------- gradient shape ---------------
32191 
32192 	shape = new Array();
32193 
32194 	i = color.indexOf('(');
32195 	if (i >= 0)
32196 	{
32197 		grad = color.substr(i+1);
32198 	
32199 		color = color.substr(0,i);
32200 		i = grad.indexOf(')');
32201 		if (i &lt; 0) i = grad.length;
32202 		grad = grad.substr(0,i);
32203 		
32204 		shape = grad.split(':');
32205 	}
32206 
32207 
32208 //------------------------ colors -------------------
32209 		
32210 	list = color.split('-');
32211 	if (list.length == 1)
32212 	{
32213 		text = trim(list[0]);
32214 		a = text.split('.');
32215 		transparent = 1;
32216 				
32217 		if (a.length > 1) 
32218 		{
32219 			transparent = parseFloat('.' + a[1]);
32220 			if (isNaN(transparent)) transparent = 1;
32221 		}
32222 	
32223 		text = this.rgba(a[0],transparent);
32224 		return text;		
32225 	}
32226 	
32227 
32228 //--------------------------- gradiant colors -------------------
32229 
32230 	colors = new Array();
32231 
32232 	for (i=0; i &lt; list.length; ++i)
32233 	{
32234 		text = trim(list[i]);
32235 		if (text == '') continue;
32236 		
32237 		a = text.split('.');
32238 		stop = -1;
32239 		transparent = 1;
32240 				
32241 		if (a.length > 1) 
32242 		{
32243 			transparent = parseFloat('.' + a[1]);
32244 			if (isNaN(transparent)) transparent = 1;
32245 		}
32246 
32247 		if (a.length > 2) 
32248 		{
32249 			stop = parseInt(a[2]);
32250 			if (isNaN(stop )) stop = -1;
32251 		}
32252 				
32253 		color = new Object();
32254 		color.value = this.rgba(a[0],transparent);
32255 		color.stop  = stop;
32256 		colors[colors.length] = color;
32257 	}
32258 
32259 	if (shape.length &lt; 1) shape[0] = '0';
32260 	if (shape.length &lt; 2) shape[1] = '0';
32261 	if (shape.length &lt; 3) shape[2] = '0';
32262 	if (shape.length &lt; 4) shape[3] = '200';
32263 	
32264 	if (shape.length &lt; 6)
32265 	{
32266 		gradient = this.context.createLinearGradient(shape[0], shape[1], shape[2], shape[3]);	
32267 	}	
32268 	else
32269 	{
32270 		gradient = this.context.createRadialGradient(shape[0], shape[1], shape[2], shape[3], shape[4], shape[5]);	
32271 	}
32272 
32273 	if (colors.length &lt; 0) return '';
32274 	if (colors.length == 1) return colors[0].value;
32275 
32276 	ds = 1 / (colors.length - 1);
32277 	stop = 0;
32278 	for (i=0; i &lt; colors.length; ++i)
32279 	{
32280 		color = colors[i];
32281 		if (color.stop >= 0) stop = color.stop;
32282 		
32283 		if (stop > 1) stop = 1;
32284 		gradient.addColorStop(stop,colors[i].value);
32285 		stop += ds;
32286 	}
32287 
32288 	return gradient;
32289 }
32290 //==================================================================================
32291 //								canvasPlot$rgba
32292 //==================================================================================
32293 function canvasPlot$rgba(color,transparent)
32294 {
32295 	var r,g,b,text,obj;
32296 	
32297 	obj = this.parseColor_(color);
32298     
32299 	transparent = parseFloat(transparent);
32300 	if (isNaN(transparent)) transparent  = 1;
32301 
32302 	r = (obj.color / 65536) % 256;	
32303 	r = Math.floor(r);
32304 
32305 	g = (obj.color / 256) % 256;
32306 	g = Math.floor(g);
32307 
32308 	b = obj.color % 256;
32309 	b = Math.floor(b);
32310   
32311 	text = 'rgba(' + r + ',' + g + ',' + b + ',' + obj.opaque + ')';
32312 	
32313 	return text; 
32314 }
32315 //==========================================================================================
32316 //				canvasPlotEvent_ImageLoaded
32317 //==========================================================================================
32318 function canvasPlotEvent_ImageLoaded(event)
32319 {
32320 	var img,angle,alpha;	
32321 
32322 	img = this.srcElement;	
32323 
32324 	alpha = parseFloat(img.alpha);
32325 	if (isNaN(alpha)) alpha = 0;
32326 
32327 	angle = parseFloat(img.angle);
32328 	if (isNaN(angle)) angle = 0;
32329 	
32330 	if (angle == 0 && alpha == 0)
32331 	{
32332 		this.context.drawImage(img,img.px,img.py,img.width,img.height);
32333 		return;
32334 	}
32335 	
32336 	angle = angle / 180 * Math.PI;
32337 	
32338 	this.context.save();
32339 	this.shapeStyle(true);
32340 	this.context.rotate(angle);
32341 
32342 //	this.context.setTransform(1, Math.cos(angle), Math.sin(angle), 1, -80, 0);
32343 
32344     this.context.globalAlpha = alpha;
32345 	this.context.drawImage(img,img.px,img.py,img.width,img.height);
32346 	this.context.restore();
32347 }
32348 //==========================================================================================
32349 //				canvasPlotEvent_VideoLoaded
32350 //==========================================================================================
32351 function canvasPlotEvent_VideoLoaded(event)
32352 {
32353 
32354 	this.videoElement.play();
32355 	setInterval(f$(this,canvasPlotEvent_VideoDraw),33);
32356 }
32357 //=========================================================================================
32358 //				canvasPlotEvent_VideoDraw
32359 //=========================================================================================
32360 function  canvasPlotEvent_VideoDraw() 
32361 {
32362 	var video,angle,alpha,task;	
32363 
32364 	
32365 	video = this.srcElement;
32366 	if (video.ended) video.play();
32367 
32368 
32369 	alpha = parseFloat(video.alpha);
32370 	if (isNaN(alpha)) alpha = 0;
32371 
32372 	angle = parseFloat(video.angle);
32373 	if (isNaN(angle)) angle = 0;
32374 	
32375 	angle = angle / 180 * Math.PI;
32376 
32377 	this.context.save();
32378 	this.shapeStyle(true);
32379 //	this.context.rotate(angle);
32380 
32381 //Background
32382     this.context.fillStyle = '#ffffaa';
32383     this.context.fillRect(0, 0, this.width, this.height);
32384 //Box
32385 	this.context.strokeStyle = '#000000';
32386 	this.context.strokeRect(5,  5, this.width-10, this.height-10);
32387 
32388 //video
32389 
32390 	this.context.globalAlpha = alpha;
32391 	this.context.drawImage(video,5,  5, this.width-10, this.height-10);
32392 	this.context.restore();
32393 }
32394 //==================================================================================
32395 //								canvasPlot$attchEvents
32396 //==================================================================================
32397 function canvasPlot$attachEvents()
32398 {
32399 	
32400 	this.mousedown = false;
32401 	this.drawing   = false;
32402 	this.canvas.onmousemove		= f$(this,canvasEvent_onMouseMove);
32403 	this.canvas.onmousedown		= f$(this,canvasEvent_onMouseDown);
32404 	this.canvas.onmouseup		= f$(this,canvasEvent_onMouseUp);
32405 try
32406 {
32407 	this.canvas.addEventListener ("mousewheel", f$(this,canvasEvent_onMouseWheel), true);
32408 }
32409 catch (e) { this.canvas.onmousewheel = f$(this,canvasEvent_onMouseWheel); }
32410 
32411 }
32412 //==================================================================================
32413 //			canvasEvent_onMouseWheel
32414 //==================================================================================
32415 function canvasEvent_onMouseWheel(event)
32416 {
32417 	var rolled,screendistance;
32418 
32419 	event.stopPropagation();
32420     event.preventDefault();
32421     event.cancelBubble = false;
32422 
32423 	if (this.drawing) return false;
32424 	
32425 	rolled = event.wheelDelta;
32426 
32427 	dx = rolled / 100;		
32428 	if (Math.abs(dx) &lt; 1) return false;
32429 	
32430 	this.drawing = true;
32431 	this.graphicView.setScreenDistance(dx);	
32432 	this.drawing = false;
32433 	return false;	
32434 }
32435 //==================================================================================
32436 //			canvasEvent_onMouseMove
32437 //==================================================================================
32438 function canvasEvent_onMouseMove(event)
32439 {
32440 	var dx,dy;
32441 
32442 	if (! this.mouseDown) return;
32443 	if (this.drawing) return;
32444 
32445 	dx = event.clientX - this.clientX;
32446 	dy = event.clientY - this.clientY;
32447 		
32448 	if ((Math.abs(dx) &lt; 5) && (Math.abs(dy) &lt; 5)) return;
32449 	this.drawing = true;
32450 
32451 try
32452 {	
32453 	this.clientX = event.clientX;
32454 	this.clientY = event.clientY;
32455 
32456 	this.graphicView.rotateEye(dy,dx,0);
32457 	this.drawing = false;
32458 	return;	
32459 }
32460 catch (e) { alert(e); this.drawing = false; }
32461 }
32462 //==================================================================================
32463 //			canvasEvent_onMouseDown
32464 //==================================================================================
32465 function canvasEvent_onMouseDown(event)
32466 {		
32467 	this.clientX = event.clientX;
32468 	this.clientY = event.clientY;
32469 	this.drawing  = false;
32470 	this.mouseDown = true;
32471 }
32472 //==================================================================================
32473 //			canvasEvent_onMouseUp
32474 //==================================================================================
32475 function canvasEvent_onMouseUp(event)
32476 {
32477 	this.mouseDown = false;
32478 	this.drawing  = false;
32479 }
32480 //==============================================================
32481 //                     trim
32482 //==============================================================
32483 function trim(value) 
32484 { 
32485 	value = '' + value;
32486 	value = value.replace(/^[\s]+/,"");
32487 	value = value.replace(/[\s]+$/, '');
32488 	return value;
32489 }
32490 //================================================================
32491 //			f2
32492 //================================================================
32493 function f2(value)
32494 {
32495 	value = parseFloat(value);
32496 	if (isNaN(value)) return 0;
32497 	return Math.round(value * 100) / 100;	
32498 }
32499 //================================================================
32500 //			I
32501 //================================================================
32502 function I(value)
32503 {
32504 	value = parseInt(value);
32505 	if (isNaN(value)) return 0;
32506 	return Math.round(value);
32507 }
32508 //==================================================================================
32509 //			graphicCs2$
32510 //==================================================================================
32511 function graphicCg2$(plot,sys)
32512 {
32513 	
32514 	this.plot		= plot;
32515 	this.sys		= sys;
32516 	this.draw		= graphicCg2$draw;
32517 	this.getRange		= graphicCg2$getRange;
32518 	
32519 	this.draw_A		= graphicCg2$draw_A;
32520 		
32521 	this.add		= graphicCg2$add;
32522 	this.clear		= graphicCg2$clear;	
32523 	this.getGraphic		= graphicCg2$getGraphic;
32524 	this.stringToGraphic	= graphicCg2$stringToGraphic;
32525 	this.split		= graphicCg2$split;
32526 		
32527 	this.clear();
32528 }
32529 //==================================================================================
32530 //				graphicCg2$clear
32531 //==================================================================================
32532 function graphicCg2$clear()
32533 {
32534 	this.records = new Array();
32535 }
32536 //==================================================================================
32537 //				graphicCg2$draw
32538 //==================================================================================
32539 function graphicCg2$draw()
32540 {
32541 	var i,rec,text;
32542 	
32543 	for (i=0; i &lt; this.records.length; ++i)
32544 	{
32545 		rec = this.records[i];
32546 		text = rec.graphic.draw(rec);
32547 		if (typeof(text) != 'string') continue;
32548 		{
32549 			this.draw_A(text,0);
32550 		}
32551 	}
32552 }
32553 //==================================================================================
32554 //				graphicCg2$getRange
32555 //==================================================================================
32556 function graphicCg2$getRange()
32557 {
32558 	var i,rec,range,p1,p2,rng;
32559 	
32560 	range = new graphicRange$();
32561 	range.cx = 0;
32562 	range.cy = 0;
32563 	range.cz = 0;
32564 	
32565 	for (i=0; i &lt; this.records.length; ++i)
32566 	{
32567 		rec = this.records[i];
32568 		rng = rec.graphic.getRange();
32569 		range.addRange(rng);
32570 	}
32571 
32572 	if (! range.set) return range;
32573 
32574 	p1 = this.graphicView.map(range.xmin,range.ymin,range.zmin);
32575 	p2 = this.graphicView.map(range.xmax,range.ymax,range.zmax);
32576 	
32577 	range.set = false;
32578 	range.addPoint(p1);
32579 	range.addPoint(p2);
32580 
32581 	range.cx = (range.xmin + range.xmax) / 2;
32582 	range.cy = (range.ymin + range.ymax) / 2;
32583 	range.cz = (range.zmin + range.zmax) / 2;
32584 
32585 	range.radius = Math.max(range.cx,range.cy);
32586 	range.radius = Math.max(range.radius,range.cz) * 2;
32587 
32588 	return range;
32589 }
32590 //==================================================================================
32591 //				graphicCg2$split
32592 //==================================================================================
32593 function graphicCg2$split(data)
32594 {
32595 	var value,i,c,q,inside,pos,list;
32596 	
32597 	list = new Array();
32598 	pos = 0;
32599 	value = '';
32600 	while (pos &lt; data.length)
32601 	{
32602 		c = data.charAt(pos);
32603 		pos = pos + 1;
32604 		if (c &lt;= ' ') c = ' ';
32605 		
32606 		if (inside) 
32607 		{
32608 			if (c == q)
32609 			{
32610 				if (pos+1 >= data.length)
32611 				{
32612 					value += c;
32613 					break;
32614 				}
32615 			
32616 				if (data.charAt(pos) == q)
32617 				{
32618 					value += c + c;
32619 					pos += 1;
32620 					continue;
32621 				}
32622 			}
32623 			
32624 			value += c;
32625 			inside = false;	
32626 			continue;
32627 		}
32628 			
32629 		if (c == '"' || c == "'") 
32630 		{
32631 			inside = true;
32632 			q = c;
32633 			value += c;
32634 			continue;
32635 		}
32636 			
32637 		if (c == ';')
32638 		{
32639 			value = trim(value)
32640 			if (value != '') list[list.length] = value;
32641 			value = '';
32642 			continue;
32643 		}
32644 			
32645 		value += c;
32646 	}
32647 
32648 	value = trim(value);
32649 	if (value != '') list[list.length] = value;
32650 
32651 	return list;
32652 }
32653 
32654 //==================================================================================
32655 //				graphicCg2$draw_A
32656 //==================================================================================
32657 function graphicCg2$draw_A(data,level)
32658 {
32659 	var i,list,rec,text;
32660 	
32661 	if (level > 4) return;
32662 	
32663 	list = this.split(data);
32664 
32665 	for (i=0; i &lt; list.length; ++i)
32666 	{
32667 		text = trim(list[i]);
32668 		if (text == '') continue;
32669 		rec = this.stringToGraphic(text);
32670 		if (rec == null) continue;
32671 		
32672 		text = rec.graphic.draw(this.plot);
32673 		if (typeof(text) != 'string') continue;
32674 		if (text == '') continue;
32675 		this.draw_A(text,level + 1);
32676 	}	
32677 }
32678 //==================================================================================
32679 //				graphicCg2$add
32680 //==================================================================================
32681 function graphicCg2$add(data)
32682 {
32683 	var list,i,text,r;
32684 	var record;
32685 	
32686 	list = this.split(data);
32687 
32688 	record = null;
32689 	for (i=0; i &lt; list.length; ++i)
32690 	{
32691 		r = this.stringToGraphic(list[i]);
32692 		if (r == null)  continue;
32693 		this.records[this.records.length] = r;
32694 		record = r;
32695 	}
32696 
32697 	return record;
32698 }
32699 //==================================================================================
32700 //				graphicCg2$stringToGraphic
32701 //==================================================================================
32702 function graphicCg2$stringToGraphic(data)
32703 {
32704 	var i,j,list,record,name,text,gra;
32705 	
32706 	data = trim(data);
32707 	if (data == '') return null;
32708 
32709 	j = data.indexOf(',');
32710 	if (j &lt; 0) j = data.length;
32711 	name = data.substr(0,j);
32712 	name = trim(name).toLowerCase();
32713 	if (name == '')  return null;
32714 		
32715 	gra = this.getGraphic(name);
32716 	if (gra == null) return null;
32717 
32718 	text = '';
32719 
32720 	if (typeof(gra.schema) == 'string') text = gra.schema;
32721 	if (typeof(gra.schema) == 'function') text = gra.schema();
32722 	if (text == '') text = 'style:name=value,origin:(x:r8+y:r8+z:r8),size:(width:r8,height:r8,depth:r8)';	
32723 
32724 	text = '*define:' + name + ',' + text;
32725 	
32726 	record = new graphicCg2Record$(text);
32727 	record.graphic  = gra;
32728 	gra.record		= record;
32729 
32730 	gra.value		= graphicCg2Proxy$value;
32731 	gra.styleExists		= graphicCg2Proxy$styleExists;
32732 	gra.toString		= graphicCg2Proxy$toString;
32733 	
32734 	gra.setLineStyle	= graphicProxy$setLineStyle;
32735 	gra.setFontStyle	= graphicProxy$setFontStyle;
32736 	gra.arcToPoints		= graphicProxy$arcToPoints;
32737 	gra.rectangleToPoints	= graphicProxy$rectangleToPoints;
32738 	gra.lineToPoints	= graphicProxy$lineToPoints;
32739 	gra.getImageSize	= graphicProxy$getImageSize;
32740 	gra.getTextRange	= graphicProxy$getTextRange;
32741 	gra.mode		= graphicProxy$mode;
32742 	gra.unmap		= graphicProxy$unmap;
32743 	
32744 	gra.setRange		= graphicProxy$setRange;
32745 	gra.drawLine		= graphicProxy$drawLine;
32746 	gra.drawRectangle	= graphicProxy$drawRectangle;
32747 	gra.drawArc		= graphicProxy$drawArc;
32748 	gra.drawCircle		= graphicProxy$drawCircle;	
32749 	gra.drawPolygon		= graphicProxy$drawPolygon;	
32750 	gra.drawCone		= graphicProxy$drawCone;	
32751 	gra.drawText		= graphicProxy$drawText;
32752 	gra.drawSymbol		= graphicProxy$drawSymbol;	
32753 	gra.drawImage		= graphicProxy$drawImage;	
32754 	gra.drawVideo		= graphicProxy$drawVideo;	
32755 	gra.drawTextbox		= graphicProxy$drawTextbox;	
32756 	gra.drawProtractor	= graphicProxy$drawProtractor;
32757 	gra.drawGrid		= graphicProxy$drawGrid;
32758 	gra.graphicCg2		= this;
32759 
32760 	gra.range		= new Object();
32761 	gra.range.set		= false;
32762 
32763 	record.parse(data);	
32764 	return record;
32765 }
32766 //==================================================================================
32767 //			graphicCg2$getGraphic
32768 //==================================================================================
32769 function graphicCg2$getGraphic(name)
32770 {
32771 	var obj,pname,text;
32772 
32773 	pname = name.substr(0,1).toUpperCase() + name.substr(1).toLowerCase();
32774 
32775 	try { 
32776 		obj = eval('new graphic' + pname + '$()');
32777 		return obj;
32778 	} catch (e) { }			
32779 
32780 	try { 
32781 		obj = eval('new ' + name + '()');
32782 		return obj;
32783 	} catch (e) { }			
32784 
32785 	return null;	
32786 
32787 try
32788 {
32789 	eval(text);
32790 }
32791 catch (e) { return null; }
32792 
32793 	try { 
32794 		obj = eval('new graphic' + pname + '$()');
32795 		return obj;
32796 	} catch (e) { }			
32797 
32798 	try { 
32799 		obj = eval('new ' + name + '()');
32800 		return obj;
32801 	} catch (e) { }			
32802 	
32803 	return null;
32804 
32805 }
32806 //==================================================================================
32807 //			graphicCg2Record$
32808 //==================================================================================
32809 function graphicCg2Record$(data,graphicCg2)
32810 {
32811 	var list,i,j,name,fmt,text,field;
32812 
32813 	this.graphicCg2	= graphicCg2;
32814 
32815 	this.toString		= graphicCg2Record$toString;
32816 	this.parse		= graphicCg2Record$parse;
32817 	this.style		= graphicCg2Record$style;
32818 	this.toForm		= graphicCg2Record$toForm;
32819 	this.fromForm		= graphicCg2Record$fromForm;
32820 
32821 //------------------ private methods --------------------------------
32822 
32823 	this.addField		= graphicCg2Record$addField;
32824 	this.getI4		= graphicCg2Record$getI4;
32825 	this.getString		= graphicCg2Record$getString;
32826 	this.getValue		= graphicCg2Record$getValue;
32827 	this.getField		= graphicCg2Record$getField;
32828 
32829 	this.fieldValueToString = graphicCg2Record$fieldValueToString;
32830 	this.fieldToString	= graphicCg2Record$fieldToString;
32831 	this.formatValue	= graphicCg2Record$formatValue;
32832 	
32833 	this.fieldToForm	= graphicCg2Record$fieldToForm;
32834 	this.getEditValue	= graphicCg2Record$getEditValue;
32835 	this.clear		= graphicCg2Record$clear;
32836 	this.clearField		= graphicCg2Record$clearField;
32837 	
32838 //---------------------- parse fields -------------------------------
32839 
32840 	this.fields	= new Array();
32841 	this.styleField = new Object();
32842 	this.styleField.field = null;
32843 
32844 	list = data.split(',');	
32845 
32846 	name = list[0];
32847 	i = name.indexOf(':');
32848 	this.name = name.substr(i+1);
32849 	this.name = trim(this.name).toLowerCase();
32850 
32851 	for (i=1; i &lt; list.length; ++i)
32852 	{
32853 		text = trim(list[i]);
32854 		if (text == '') continue;
32855 		field = this.addField(this.fields,text);
32856 		if (field.name == 'style') this.styleField.field = field;
32857 	}
32858 }
32859 //==================================================================================
32860 //				graphicCg2Record$toForm
32861 //==================================================================================
32862 function graphicCg2Record$fromForm(element)
32863 {
32864 	var element,row,cell,name,ele,i,j;
32865 	var text,field;
32866 	var list,temp,a,b;
32867 
32868 	if (element.tagName != 'TABLE') element = element.firstChild;
32869 	if (element.tagName != 'TABLE') return this.name;
32870 
32871 	text = this.name;	
32872 	table = element;
32873 	for (i=0; i &lt; this.fields.length; ++i)
32874 	{
32875 		field = this.fields[i];
32876 		if (i+1 >= table.rows.length) break;
32877 		row = table.rows[i+1];
32878 		if (row.cells.length != 2) break;
32879 		cell = row.cells[0];
32880 		name = cell.innerText;
32881 		cell = row.cells[1];
32882 		ele  = cell.firstChild;
32883 
32884 		text += ',';
32885 
32886 		if (ele.tagName == 'INPUT')
32887 		{
32888 			text += ele.value;
32889 			continue;
32890 		}
32891 													
32892 		if (ele.tagName == 'TEXTAREA')
32893 		{
32894 			temp = ele.value;
32895 			list = temp.split('\n');
32896 			a = new Array();
32897 			for (j=0; j &lt; list.length; ++j)
32898 			{
32899 				b = trim(list[j]);
32900 				if (b == '') continue;
32901 				a[a.length] = b;
32902 			}
32903 			
32904 			if (field.fmt == 'countArray') 
32905 			{
32906 				text += a.length;
32907 				if (a.length > 0) text += ',';
32908 			}
32909 			
32910 			text += a.join(',');
32911 		}
32912 	}
32913 	
32914 	text += ';';
32915 	return text;
32916 
32917 }
32918 //==================================================================================
32919 //				graphicCg2Record$getField
32920 //==================================================================================
32921 function graphicCg2Record$getField(name)
32922 {
32923 	var i,text,field;
32924 
32925 	name = trim(name).toLowerCase();
32926 	for (i=0; i &lt; this.fields.length; ++i)
32927 	{
32928 		field = this.fields[i];
32929 		if (field.name == name) return field;
32930 	}	
32931 	return null;
32932 }
32933 //==================================================================================
32934 //				graphicCg2Record$toForm
32935 //==================================================================================
32936 function graphicCg2Record$toForm()
32937 {
32938 	var i,text,field;
32939 
32940 	text = '';
32941 	text = '&lt;table border=1>'
32942 
32943 	text += '&lt;tr>&lt;td align="center" valign=middle colspan=2>&lt;b>' + this.name + '&lt;/b>&lt;/td>&lt;/tr>';
32944 
32945 	for (i=0; i &lt; this.fields.length; ++i)
32946 	{
32947 		field = this.fields[i];
32948 		text += this.fieldToForm(field);
32949 	}	
32950 
32951 	text += '&lt;/table>';
32952 	return text;
32953 
32954 }
32955 
32956 //==================================================================================
32957 //				graphicCg2Record$clear
32958 //==================================================================================
32959 function graphicCg2Record$clear()
32960 {
32961 	var i,field;
32962 	
32963 	for (i=0; i &lt; this.fields.length; ++i)
32964 	{
32965 		field = this.fields[i];
32966 		this.clearField(field);
32967 	}	
32968 
32969 }
32970 //==================================================================================
32971 //				graphicCg2Record$clearField
32972 //==================================================================================
32973 function graphicCg2Record$clearField(field)
32974 {
32975 	var i;
32976 	if (field.isArray) field.values = new Array();
32977 	if (field.fmt == 'name=value')
32978 	{
32979 		if (field.value == null) return;
32980 		field.value.names = new Array();
32981 		field.value.values = new Array();
32982 	}
32983 
32984 	field.value = '';
32985 }
32986 
32987 //==================================================================================
32988 //				graphicCg2Record$fieldToForm
32989 //==================================================================================
32990 function graphicCg2Record$fieldToForm(field)
32991 {
32992 	var text, value;
32993 	text = '&lt;tr>&lt;td align="right" valign="top" width=110>' + field.name + '&lt;/td>&lt;td>';
32994 
32995 	value = this.getEditValue(field);	
32996 	if (field.isArray)
32997 	{
32998 		text += '&lt;textarea rows=5 cols=50>' + value + '&lt;/textarea>';
32999 	}
33000 	else
33001 	{
33002 		text += '&lt;input type=text size=50 value="' + value + '">';
33003 	}
33004 
33005 	text += "&lt;/td>&lt;/tr>";
33006 	return text;
33007 }
33008 //==================================================================================
33009 //				graphicCg2Record$getEditValue
33010 //==================================================================================
33011 function graphicCg2Record$getEditValue(field)
33012 {
33013 	var text,i;
33014 	
33015 	text = '';
33016 
33017 	if (field.isArray)
33018 	{
33019 		for (i=0; i &lt; field.values.length; ++i)
33020 		{
33021 			if (text != '') text += '\r\n';
33022 			text += this.fieldValueToString(field.fields,field.values[i]);
33023 		}
33024 		
33025 		return text;
33026 	}
33027 
33028 	text = this.fieldToString(field);
33029 	return text;
33030 }
33031 //==================================================================================
33032 //				graphicCg2Record$style
33033 //==================================================================================
33034 function graphicCg2Record$style(name)
33035 {
33036 	var value,i;
33037 	
33038 	name = '' + name;
33039 	name = trim(name).toLowerCase();
33040 	
33041 	for (i=0; i &lt; this.styleField.field.value.names.length; ++i)
33042 	{
33043 		if (name != this.styleField.field.value.names[i]) continue;
33044 		return '' + this.styleField.field.value.values[i];
33045 	}
33046 
33047 	return '';	
33048 }
33049 //==================================================================================
33050 //				graphicCg2Record$parse
33051 //==================================================================================
33052 function graphicCg2Record$parse(data)
33053 {
33054 	var object,pos,i,j,n, name, field;
33055 	
33056 	this.pos = 0;
33057 	this.data = '' + data;
33058 
33059 	name = this.getString();			// should be same as object name;
33060 
33061 	for (i=0; i &lt; this.fields.length; ++i)
33062 	{
33063 		field = this.fields[i];
33064 		field.value = '';
33065 		field.values = null;
33066 
33067 		if (field.isArray)
33068 		{
33069 			n = field.arraySize;
33070 			if (field.fmt == 'countArray') n = this.getI4();
33071 			field.values = new Array();
33072 			if (field.fmt == 'eolArray') n = 9999999;
33073 
33074 			for (j=0; j &lt; n; ++j)						
33075 			{
33076 				if (field.fmt != 'fixedArray' && this.pos >= this.data.length) break;			
33077 				field.values[j] = this.getValue(field);
33078 			}
33079 			continue;
33080 		}
33081 
33082 		field.value = this.getValue(field);
33083 	}
33084 }
33085 
33086 //==================================================================================
33087 //				graphicCg2Record$toString
33088 //==================================================================================
33089 function graphicCg2Record$toString()
33090 {
33091 	var i,field,text;
33092 
33093 	text = this.name;		
33094 
33095 	for (i=0; i &lt; this.fields.length; ++i)
33096 	{
33097 		field = this.fields[i];
33098 		text += ',' + this.fieldToString(field);
33099 	}
33100 
33101 	text += ';';
33102 	return text;
33103 }
33104 //==================================================================================
33105 //				graphicCg2Record$fieldToString
33106 //==================================================================================
33107 function graphicCg2Record$fieldToString(field)
33108 {
33109 	var i,f, text,value,name;
33110 
33111 	if (field.fmt == 'name=value')
33112 	{
33113 		text = '';
33114 		for (i=0; i &lt; field.value.names.length; ++i)
33115 		{
33116 			name  = field.value.names[i];
33117 			value = field.value.values[i];
33118 			if (text != '') text += ' ';
33119 			text += name;
33120 			if (value != '') text += '=' + value;
33121 		}
33122 		return text;
33123 	}
33124 	
33125 
33126 	if (! field.isArray) return this.fieldValueToString(field.fields,field.value);
33127 	
33128 	text = field.values.length;
33129 	if (field.fmt != 'countArray') text = '';
33130 
33131 	for (i=0; i &lt; field.values.length; ++i)
33132 	{
33133 		if (text += '') text += ',';
33134 		text += this.fieldValueToString(field.fields,field.values[i]);
33135 	}
33136 
33137 	return text;
33138 }
33139 //==================================================================================
33140 //				graphicCg2Record$fieldValueToString
33141 //==================================================================================
33142 function graphicCg2Record$fieldValueToString(fields,value)
33143 {
33144 	var i,text,field;
33145 
33146 	if (fields == null)
33147 	{
33148 		
33149 		if (typeof(value) == 'number') return value;
33150 		if (typeof(value) == 'boolean') return value;
33151 
33152 
33153 		if (value == null) return '';
33154 		if (typeof(value) == 'undefined') return '';
33155 	
33156 		if (value.indexOf(',') >= 0 ||
33157 			value.indexOf("'") >= 0 ||
33158 			value.indexOf('"') >= 0 ||
33159 			value.indexOf(':') >= 0 ||
33160 			value.indexOf(';') >= 0) value = "'" + value.replace(/\'/g,"''") + "'";
33161 
33162 		return value;
33163 
33164 	}
33165 
33166 	text = '';
33167 	for (i=0; i &lt; fields.length; ++i)
33168 	{
33169 		field = fields[i];
33170 		if (i > 0) text += ':';
33171 		text += this.fieldValueToString(null, value[field.name]) ;
33172 	}
33173 	
33174 	return text;
33175 }
33176 //==================================================================================
33177 //				graphicCg2Record$getValue
33178 //==================================================================================
33179 function graphicCg2Record$getValue(field)
33180 {
33181 	var value,i,obj,list,text,f,v,a;
33182 	
33183 	value = this.getString();
33184 
33185 	if (field.fields != null)
33186 	{
33187 		
33188 		list = value.split(':');
33189 		obj = new Object();
33190 		for (i=0; i &lt; field.fields.length; ++i)
33191 		{
33192 			text = '';
33193 			if (i &lt; list.length) text = list[i];
33194 			f = field.fields[i];
33195 			v = this.formatValue(f,text);
33196 			obj[f.name] = eval(v);
33197 		}
33198 		return obj;
33199 	}
33200 
33201 	v = this.formatValue(field,value);
33202 	a = eval('(' + v + ')');
33203 	return a;
33204 	
33205 }
33206 //==================================================================================
33207 //				graphicCg2Record$formatValue
33208 //==================================================================================
33209 function graphicCg2Record$formatValue(field,text)
33210 {
33211 	var value, names,values,i,j,first,list,a,name;
33212 	
33213 	if (field.fmt == 'i4') 
33214 	{
33215 		value = parseInt(text);
33216 		if (isNaN(value)) value = 0;
33217 		return value;
33218 	}
33219 
33220 	if (field.fmt == 'r8') 
33221 	{
33222 		value = parseFloat(text);
33223 		if (isNaN(value)) value = 0;
33224 		return value;
33225 	}
33226 
33227 	first = true;
33228 	if (field.fmt == 'name=value') 
33229 	{
33230 		names = 'names:[';
33231 		values = 'values:[';
33232 		list = text.split(' ');
33233 		for (i=0; i &lt; list.length; ++i)
33234 		{
33235 			a = trim(list[i]);
33236 			if (a == '') continue;
33237 			
33238 			j = a.indexOf('=');
33239 			if (j &lt; 0) j = a.length;
33240 			name = trim(a.substr(0,j));
33241 			if (name == '') continue;
33242 
33243 			value = trim(a.substr(j+1));
33244 			name = name.toLowerCase();
33245 
33246 			if (! first) 
33247 			{
33248 				names += ',';
33249 				values += ',';
33250 			}
33251 
33252 			first = false;
33253 			
33254 			names += "'" + name + "'";
33255 			values += "'" + value + "'";
33256 		}
33257 	
33258 		value = '({' + names + '],' + values + ']})';
33259 		return value;
33260 	}
33261 	
33262 	text = text.replace(/\'/g,"\\'");
33263 	return "'" + text + "'";
33264 
33265 }
33266 //==================================================================================
33267 //				graphicCg2Record$getI4
33268 //==================================================================================
33269 function graphicCg2Record$getI4()
33270 {
33271 	var value;
33272 	
33273 	value = this.getString();
33274 	if (value == '') value = 0;
33275 	value = parseInt(value);
33276 	if (isNaN(value)) value = 0;
33277 	return value;
33278 }
33279 //==================================================================================
33280 //				graphicCg2Record$getString
33281 //==================================================================================
33282 function graphicCg2Record$getString()
33283 {
33284 	var value,c,q,last,n;
33285 	var inside,skip,blank;
33286 	
33287 	value = '';
33288 	
33289 	inside = false;
33290 	skip = false;
33291 	blank = false;
33292 
33293 	c = ' ';
33294 	
33295 	while (true)
33296 	{
33297 		if (this.pos >= this.data.length) return value;
33298 		last = c;
33299 		c = this.data.charAt(this.pos);
33300 		this.pos += 1;
33301 		
33302 		if (inside)
33303 		{
33304 			if (c != q)
33305 			{
33306 				value += c;
33307 				continue;
33308 			}
33309 			
33310 			if (this.pos >= this.data.length) return value;
33311 			c = this.data.charAt(this.pos);
33312 			if (c == q)
33313 			{
33314 				value += c;
33315 				this.pos += 1;
33316 				continue;
33317 			}
33318 	
33319 			inside = false;
33320 			continue;
33321 		}
33322 
33323 		if (c == ',')
33324 		{
33325 			return value;
33326 		}
33327 	
33328 
33329 		if (c == '"' || c == "'")
33330 		{
33331 			blank = false;
33332 			inside = true;
33333 			q = c;
33334 			continue;
33335 		}
33336 		
33337 		n = c.charCodeAt(0);		
33338 		if (n &lt;= 32) c = ' ';	
33339 		if (c == ' ' && value == '') continue;		
33340 		if (c == ' ')
33341 		{
33342 			blank = true;
33343 			continue;
33344 		}
33345 
33346 		if (blank) value += ' ';
33347 		blank = false;		
33348 		value += c;		
33349 	}			
33350 }
33351 //==================================================================================
33352 //				graphicCg2Record$addField
33353 //==================================================================================
33354 function graphicCg2Record$addField(fields,text)
33355 {
33356 	var field,i,name,fmt,list;
33357 
33358 	i = text.indexOf(':');
33359 	if (i &lt; 0) i = text.length;
33360 
33361 	name = trim(text.substr(0,i)).toLowerCase();
33362 	fmt  = trim(text.substr(i+1)).toLowerCase();
33363 	if (fmt == '') fmt = 'a';
33364 
33365 	field = new Object();
33366 	field.name		= name.toLowerCase();
33367 	field.fmt		= fmt;
33368 	field.fields		= null;
33369 	field.isArray		= false;
33370 	field.arraySize		= 0;
33371 
33372 	fields[fields.length] = field;
33373 
33374 	i = name.indexOf('(');
33375 	if (i &lt; 0) i = name.length;
33376 	
33377 	field.name = name.substr(0,i);
33378 	text = name.substr(i+1);
33379 
33380 // --------------------- Array ----------------------
33381 
33382 	i = text.indexOf(')');
33383 	if (i >= 0)
33384 	{
33385 		text = trim(text.substr(0,i)).toLowerCase();
33386 		if (text == 'count') 
33387 		{
33388 			field.isArray = true;
33389 			field.fmt = 'countArray';
33390 		}
33391 		else
33392 		if (text == 'eol' || text == '' || text == '*')
33393 		{
33394 			field.isArray = true;
33395 			field.fmt = 'eolArray';
33396 		}
33397 		else
33398 		{
33399 			field.isArray = true;
33400 			field.arraySize = parseInt(text);
33401 			if (isNaN(field.arraySize)) field.arraySize = 0;
33402 			field.fmt = 'fixedArray';
33403 		}
33404 	}
33405 	
33406 //------------------- Format --------------------------
33407 
33408 	if (fmt.substr(0,1) == '(')
33409 	{
33410 		fmt = fmt.substr(1,fmt.length-2);
33411 		list = fmt.split('+');
33412 		field.fields = new Array();
33413 
33414 		for (i=0; i &lt; list.length; ++i)
33415 		{
33416 			text = trim(list[i]);
33417 			if (text == '') continue;
33418 			this.addField(field.fields,text);			
33419 		}
33420 	}	
33421 
33422 	return field;
33423 }
33424 
33425 //==================================================================================
33426 //graphicProxy$setRange
33427 //==================================================================================
33428 function graphicProxy$setRange(range,p1)
33429 {
33430 	var i,p;
33431 		
33432 	if (typeof(p1) == 'object')
33433 	{
33434 		if (typeof(p1.length) == 'number')
33435 		{
33436 			for (i=0; i &lt; p1.length; ++i)
33437 			{
33438 				p = p1[i];
33439 				this.setRange(range,p);
33440 			}
33441 			return;
33442 		}
33443 	
33444 		if (! range.set)
33445 		{
33446 			range.xmin = p1.x;
33447 			range.ymin = p1.y;
33448 			range.zmin = p1.z;
33449 
33450 			range.xmax = p1.x;
33451 			range.ymax = p1.y;
33452 			range.zmax = p1.z;
33453 			range.set = true;
33454 		}
33455 		else
33456 		{
33457 			if (p1.x &lt; range.xmin) range.xmin = p1.x;
33458 			if (p1.y &lt; range.ymin) range.ymin = p1.y;
33459 			if (p1.x &lt; range.zmin) range.zmin = p1.z;
33460 			
33461 			if (p1.x > range.xmax) range.xmax = p1.x;
33462 			if (p1.y > range.ymax) range.ymax = p1.y;
33463 			if (p1.x > range.zmax) range.zmax = p1.z;
33464 		}
33465 					
33466 	}	
33467 }
33468 //==================================================================================
33469 //graphicProxy$getImageSize
33470 //==================================================================================
33471 function graphicProxy$getImageSize(src,width,height)
33472 {		
33473 	var size;
33474 
33475 	if (width > 0 && height > 0)
33476 	{
33477 		size = new Object();
33478 		size.phywidth = 0;
33479 		size.phyheight = 0;
33480 	
33481 		size.width = width;
33482 		size.height = height;
33483 		size.adjusted = true;
33484 		return size;
33485 	}
33486 	
33487 	size = CollinsPDF().jpegSize(src);
33488 	if (size == null) return null;
33489 	if (size.width &lt;= 0 || size.height &lt;= 0) return null;
33490 
33491 	size.phywidth = size.width;
33492 	size.phyheight = size.height;
33493 	
33494 	if (width &lt;= 0 && height &lt;= 0) return size;
33495 	
33496 	size.adjusted = true;
33497 	if (width > 0)
33498 	{
33499 		height = size.height * (width / size.width);
33500 		size.height = height;
33501 		size.width = width;
33502 		return size;
33503 	}
33504 
33505 	if (height > 0)
33506 	{
33507 		width = size.width * (height / size.height);
33508 		size.width = width;
33509 		size.height = height;
33510 	}
33511 	
33512 	return size;
33513 }
33514 //==================================================================================
33515 //graphicProxy$getTextRange
33516 //==================================================================================
33517 function graphicProxy$getTextRange(origin,text,angle,just)
33518 {		
33519 	var size,width,height,range;
33520 
33521 	size = this.graphicCg2.graphicView.plot2d.fontSize;
33522 	if (size &lt;= 0) size = 12;
33523 	height = size;
33524 
33525 	if (this.mode() == '3D')
33526 	{
33527 		width = this.graphicCg2.graphicView.plot3d.textWidth(text,size);
33528 	}
33529 	else
33530 	{
33531 		width = this.graphicCg2.graphicView.plot2d.textWidth(text);
33532 	}
33533 
33534 	range = new Object();
33535 	range.set = true;
33536 	range.xmin = origin.x;
33537 	range.ymin = origin.y;
33538 	range.xmax = (origin.x + width);
33539 	range.ymax = (origin.y + height);
33540 	return range;
33541 }
33542 //==================================================================================
33543 //graphicProxy$setLineStyle
33544 //==================================================================================
33545 function graphicProxy$setLineStyle(p1)
33546 {		
33547 	var name,style,i,value;
33548 	
33549 	name = 'style';
33550 	if (typeof(p1) == 'string' && p1 != '') name = p1;
33551 
33552 	style = this.value(name);
33553 	
33554 	this.graphicCg2.graphicView.plot2d.setLineStyle('solid');
33555 	this.graphicCg2.graphicView.plot2d.setLineColor('black');
33556 	this.graphicCg2.graphicView.plot2d.setLineWeight('1');
33557 	this.graphicCg2.graphicView.plot2d.setFillColor('');
33558 	this.graphicCg2.graphicView.plot2d.setBlur('');
33559 
33560 	if (typeof(style) != 'object') return;
33561 	
33562 	for (i=0; i &lt; style.names.length; ++i)
33563 	{
33564 		name  = style.names[i];
33565 		value = style.values[i];
33566 
33567 		if (name ==      'style') this.graphicCg2.graphicView.plot2d.setLineStyle(value);
33568 		if (name ==  'linestyle') this.graphicCg2.graphicView.plot2d.setLineStyle(value);
33569 
33570 		if (name ==  'linecolor') this.graphicCg2.graphicView.plot2d.setLineColor(value);
33571 
33572 		if (name ==      'color') this.graphicCg2.graphicView.plot2d.setLineColor(value);
33573 		if (name ==      'color') this.graphicCg2.graphicView.plot2d.setFillColor(value);
33574 		
33575 		if (name ==       'fill') this.graphicCg2.graphicView.plot2d.setFillColor(value);
33576 		if (name ==  'fillcolor') this.graphicCg2.graphicView.plot2d.setFillColor(value);
33577 
33578 		if (name ==     'weight') this.graphicCg2.graphicView.plot2d.setLineWeight(value);
33579 		if (name == 'lineweight') this.graphicCg2.graphicView.plot2d.setLineWeight(value);
33580 		if (name ==      'width') this.graphicCg2.graphicView.plot2d.setLineWeight(value);
33581 
33582 		if (name ==      'blur') this.graphicCg2.graphicView.plot2d.setBlur(value);
33583 	}
33584 }
33585 //==================================================================================
33586 //				graphicProxy$setFontStyle
33587 //==================================================================================
33588 function graphicProxy$setFontStyle(p1)
33589 {		
33590 	var name,style,value,bvalue,i,ivalue;
33591 	
33592 	name = 'style';
33593 	if (typeof(p1) == 'string' && p1 != '') name = p1;
33594 
33595 	style = this.value(name);
33596 
33597 	if (typeof(style) != 'object') return;
33598 
33599 	for (i=0; i &lt; style.names.length; ++i)
33600 	{
33601 		name = style.names[i];
33602 		value = style.values[i];
33603 		bvalue = true;
33604 		
33605 		if ((name == 'size') || (name == 'fontsize')) 
33606 		{
33607 			value = value * this.graphicCg2.graphicView.g.scale;			
33608 		}
33609 		if (value == 'false') bvalue = false;
33610 		if (value ==    'no') bvalue = false;
33611 		if (value ==   'off') bvalue = false;
33612 	
33613 		if (name ==      'font') this.graphicCg2.graphicView.plot2d.setFontName(value);
33614 		if (name ==  'fontname') this.graphicCg2.graphicView.plot2d.setFontName(value);
33615 
33616 		if (name == 'fontcolor') this.graphicCg2.graphicView.plot2d.setFontColor(value);
33617 		if (name ==     'color') this.graphicCg2.graphicView.plot2d.setFontColor(value);
33618 		
33619 		if (name ==       'size') this.graphicCg2.graphicView.plot2d.setFontSize(value);
33620 		if (name ==   'fontsize') this.graphicCg2.graphicView.plot2d.setFontSize(value);
33621 
33622 		if (name ==       'bold') this.graphicCg2.graphicView.plot2d.setBold(bvalue);
33623 		if (name ==     'italic') this.graphicCg2.graphicView.plot2d.setItalic(bvalue);
33624 		if (name ==  'underline') this.graphicCg2.graphicView.plot2d.setUnderline(bvalue);
33625 
33626 		if (name ==      'blur') this.graphicCg2.graphicView.plot2d.setBlur(value);
33627 	}
33628 }
33629 //==================================================================================
33630 //				graphicProxy$mode
33631 //==================================================================================
33632 function graphicProxy$mode()
33633 {		
33634 
33635 	if (this.styleExists('2d')) return '2D';
33636 	if (this.styleExists('3d')) return '3D';
33637 	return this.graphicCg2.graphicView.viewdef.mode;
33638 }
33639 //==================================================================================
33640 //				graphicProxy$rectangleToPoints
33641 //==================================================================================
33642 function graphicProxy$rectangleToPoints(x1, y1, x2, y2) {
33643 	var points, p;
33644 
33645 	points = new Array();
33646 
33647 	p = new Object();
33648 	p.x = x1;
33649 	p.y = y1;
33650 	p.z = 0;
33651 	points[points.length] = p;
33652 
33653 	p = new Object();
33654 	p.x = x1;
33655 	p.y = y2;
33656 	p.z = 0;
33657 	points[points.length] = p;
33658 
33659 	p = new Object();
33660 	p.x = x2;
33661 	p.y = y2;
33662 	p.z = 0;
33663 	points[points.length] = p;
33664 
33665 	p = new Object();
33666 	p.x = x2;
33667 	p.y = y1;
33668 	p.z = 0;
33669 	points[points.length] = p;
33670 
33671 	p = new Object();
33672 	p.x = x1;
33673 	p.y = y1;
33674 	p.z = 0;
33675 	points[points.length] = p;
33676 
33677 	return points;
33678 
33679 }
33680 //==================================================================================
33681 //				graphicProxy$lineToPoints
33682 //==================================================================================
33683 function graphicProxy$lineToPoints(x1, y1, x2, y2)
33684 {
33685 	var points, p;
33686 
33687 	points = new Array();
33688 
33689 	p = new Object();
33690 	p.x = x1;
33691 	p.y = y1;
33692 	p.z = 0;
33693 	points[points.length] = p;
33694 
33695 	p = new Object();
33696 	p.x = x2;
33697 	p.y = y2;
33698 	p.z = 0;
33699 	points[points.length] = p;
33700 
33701 	return points;
33702 }
33703 
33704 //==================================================================================
33705 //				graphicProxy$arcToPoints
33706 //==================================================================================
33707 function graphicProxy$arcToPoints(center,radius,startAngle,sweepAngle,cone)
33708 {		
33709 	var points,angle,sweep,da,i,p,n;
33710 
33711 	points = new Array();
33712 	if (radius &lt;= 0.001) return points;
33713 
33714 	angle = startAngle / 180 * Math.PI;
33715 	sweep = sweepAngle / 180 * Math.PI;
33716 
33717 	n = 40;
33718 
33719 	da  = sweep / (n-1);
33720 
33721 	if (cone)
33722 	{
33723 		p = new Object();
33724 		p.x = center.x
33725 		p.y = center.y
33726 		p.x = center.z
33727 		points[points.length] = p;
33728 	}
33729 	
33730 	for (i=0; i &lt; n; ++i)
33731 	{
33732 		p = new Object();
33733 		p.x = (Math.cos(angle) * radius) + center.x;
33734 		p.y = (Math.sin(angle) * radius) + center.y;
33735 		p.z =  center.z;
33736 
33737 		angle += da;
33738 		
33739 		points[points.length] = p;
33740 	}
33741 
33742 	if (cone)
33743 	{
33744 		p = new Object();
33745 		p.x = center.x
33746 		p.y = center.y
33747 		p.x = center.z
33748 		points[points.length] = p;
33749 	}
33750 	
33751 	return points;	
33752 }
33753 //==================================================================================
33754 //				graphicProxy$drawLine
33755 //==================================================================================
33756 function graphicProxy$drawLine(points)
33757 {		
33758 	
33759 	points = this.graphicCg2.graphicView.map(points);
33760 
33761 	if (this.mode() == '3D')
33762 	{
33763 		points = this.graphicCg2.graphicView.plot3d.to2D(points);
33764 	}
33765 
33766 	this.graphicCg2.graphicView.plot2d.linestring(points);
33767 }
33768 //==================================================================================
33769 //				graphicProxy$drawPolygon
33770 //==================================================================================
33771 function graphicProxy$drawPolygon(points)
33772 {		
33773 	var n,p,dx,dy,dz;
33774 	
33775 	points = this.graphicCg2.graphicView.map(points);
33776 
33777 	if (points.length > 3)
33778 	{
33779 		n = points.length-1;
33780 		dx = points[0].x - points[n].x;
33781 		dy = points[0].y - points[n].y;
33782 		dz = points[0].z - points[n].z;
33783 		if (! (dx == 0 && dy == 0 && dz == 0))
33784 		{
33785 			p = new Object();
33786 			p.x = points[0].x;
33787 			p.y = points[0].y;
33788 			p.z = points[0].z;
33789 			points[points.length] = p;
33790 		}						
33791 	}	
33792 	
33793 
33794 	if (this.mode() == '3D')
33795 	{
33796 		points = this.graphicCg2.graphicView.plot3d.to2D(points);
33797 	}
33798 
33799 	this.graphicCg2.graphicView.plot2d.polygon(points);
33800 }
33801 //==================================================================================
33802 //				graphicProxy$drawCone
33803 //==================================================================================
33804 function graphicProxy$drawCone(center,radius,startAngle,sweepAngle)
33805 {		
33806 	
33807 	var cen,rad,right,p, points;
33808 
33809 	if (this.mode() == '3D')
33810 	{
33811 		points = this.arcToPoints(center,radius,startAngle,sweepAngle,true);
33812 		this.drawPolygon(points);
33813 		return;
33814 	}
33815 
33816 	cen = this.graphicCg2.graphicView.map(center);
33817 
33818 	right = new Object();
33819 	right.x = center.x + radius;
33820 	right.y = center.y;
33821 	right.z = center.z;
33822 
33823 	p = this.graphicCg2.graphicView.map(right);
33824 
33825 	rad = Math.abs(p.x - cen.x);
33826 
33827 	this.graphicCg2.graphicView.plot2d.cone(cen.x,cen.y,rad,startAngle,sweepAngle);
33828 }
33829 
33830 //==================================================================================
33831 //				graphicProxy$drawRectangle
33832 //==================================================================================
33833 function graphicProxy$drawRectangle(origin,size)
33834 {		
33835 	var topRight;
33836 
33837 	topRight= new Object();
33838 	topRight.x = origin.x + size.width;
33839 	topRight.y = origin.y + size.height;
33840 	topRight.z = origin.z + size.depth;
33841 	
33842 	origin = this.graphicCg2.graphicView.map(origin);
33843 	topRight = this.graphicCg2.graphicView.map(topRight);
33844 
33845 	if (this.mode() == '3D')
33846 	{
33847 		origin   = this.graphicCg2.graphicView.plot3d.to2D(origin);
33848 		topRight = this.graphicCg2.graphicView.plot3d.to2D(topRight);
33849 	}
33850 
33851 	this.graphicCg2.graphicView.plot2d.rectangle(origin.x,origin.y,topRight.x,topRight.y);
33852 }
33853 //==========================================================================================
33854 //graphicProxy$drawGrid
33855 //==========================================================================================
33856 function graphicProxy$drawGrid(p1,p2, rows, cols) {
33857 	var weight;
33858 	var text, dy, dx, color;
33859 	var dr, dc, r, c, tx, ty;
33860 	var x1, y1, z1, x2, y2, z2, t1, t2;
33861 	var points;
33862 	
33863 	this.view = this.graphicCg2.graphicView;
33864 	
33865 	this.plot = this.view.plot2d;
33866 	this.plot3d = this.view.plot3d;
33867 	
33868 	x1 = p1.x;
33869 	y1 = p1.y;
33870 	z1 = p1.z;
33871 	
33872 	x2 = p2.x;
33873 	y2 = p2.y;
33874 	z2 = p2.z;
33875 	
33876 	dx = x2 - x1;
33877 	dy = y2 - y1;
33878 	if (cols &lt; 1) cols = 1;
33879 	if (rows &lt; 1) rows = 1;
33880 	
33881 	dr = dy / rows;
33882 	dc = dx / cols;
33883 	
33884 	ty = y1;
33885 	tx = x1;
33886 
33887 
33888 	points = this.rectangleToPoints(x1, y1, x2, y2);
33889 	this.drawPolygon(points);
33890 
33891 //	this.plot.rectangle(x1, y1, x2, y2);
33892 	
33893 	for (r = 0; r &lt;= rows; ++r) {
33894 		points = this.lineToPoints(x1, ty, x2, ty);
33895 		this.drawLine(points);
33896 //	    this.plot.line(x1, ty, x2, ty);
33897 	    ty += dr;
33898 	}
33899 	
33900 	for (c = 0; c &lt;= cols; ++c) {
33901 		points = this.lineToPoints(tx, y1, tx, y2);
33902 		this.drawLine(points);
33903 //		this.plot.line(tx, y1, tx, y2);
33904 	    tx += dc;
33905 	}
33906 }
33907 
33908 //==========================================================================================
33909 //graphicProxy$drawProtractor
33910 //==========================================================================================
33911 function graphicProxy$drawProtractor() {
33912 	var cx, cy, i, j, text, xdir, center, list;
33913 	var cx, cy, x, xcos, xsin, start, sweep, value;
33914 	var d1, d2, d3, d4, tx1, ty1, tx2, ty2;
33915 	var da, ta, a1, a2, rx, ry, d, a, ch, right,p;
33916 	var rx1, ry1, rx2, ry2, angle, tx, ty, dx, dy;
33917 	var dir, ticSize, ticSize2, fontsize, pro, divisions;
33918 	var text_d1, text_d2, radius, tic_d1, tic_d2, radius3;
33919 	var x1, y1, x2, y2, x3, y3, x4, y4, radius2, centerRadius;
33920 	
33921 	this.view = this.graphicCg2.graphicView;
33922 	
33923 	this.plot   = this.view.plot2d;
33924 	this.plot3d = this.view.plot3d;
33925 	
33926 	this.plot.setFontSize(8);
33927 	
33928 	pro = new Object();
33929 	pro.center = this.value('center');
33930 	pro.radius = this.value('radius');
33931 	pro.start  = this.value('startAngle');
33932 	pro.sweep = this.value('sweepAngle');
33933 	pro.divisions = this.value('divisions');
33934 	pro.tics = this.value('ticMarks');
33935 	pro.lineColor = this.value('lineColor');
33936 	pro.labeled = this.value('labeled');
33937 	
33938 	list = this.value('showAngles').split(' ');
33939 	pro.showAngles = new Array();
33940 	
33941 	for (i = 0; i &lt; list.length; ++i)
33942 	{
33943 	    text = trim(list[i]);
33944 	    if (text == '') continue;
33945 	    value = parseInt(text);
33946 	    if (isNaN(value)) continue;
33947 	    pro.showAngles[pro.showAngles.length] = value;
33948 	}
33949 	
33950 	this.plot.setLineColor(pro.lineColor);
33951 	
33952 	right = new Object();
33953 	right.x = pro.center.x + pro.radius;
33954 	right.y = pro.center.y;
33955 	right.z = pro.center.z;
33956 	
33957 	p = this.view.map(right);
33958 	
33959 	center = this.view.map(pro.center);
33960 	cx = center.x;
33961 	cy = center.y;
33962 	
33963 	  pro.radius = Math.abs(p.x - cx);
33964 	
33965 	this.plot.arc(cx, cy, pro.radius, pro.start, pro.sweep);
33966 	
33967 	radius2 = Math.round(pro.radius * 0.5);
33968 	this.plot.arc(cx, cy, radius2, pro.start, pro.sweep);
33969 	
33970 	start = pro.start / 180 * Math.PI;
33971 	sweep = pro.sweep / 180 * Math.PI;
33972 	
33973 	divisions = pro.divisions;
33974 	ticSize = 10;
33975 	ticSize2 = 6;
33976 	
33977 	da = pro.sweep / pro.divisions;
33978 	ta = da / (pro.tics + 1);
33979 	
33980 	a1 = 0;
33981 	a2 = pro.sweep;
33982 	
33983 	d1 = pro.radius;
33984 	d2 = pro.radius - (ticSize / 2);
33985 	d3 = pro.radius - (ticSize * 0.75);
33986 	d4 = pro.radius - (ticSize);
33987 	
33988 	ch = 10;
33989 
33990     //------------------- Draw Inside Bottom Line ----------------
33991 
33992 	if (pro.sweep &lt; 360) {
33993 	    xcos = Math.cos(start);
33994 	    xsin = Math.sin(start);
33995 	    x1 = xcos * radius2 + cx;
33996 	    y1 = xsin * radius2 + cy;
33997 	
33998 	    xcos = Math.cos(start + sweep);
33999 	    xsin = Math.sin(start + sweep);
34000 	    x2 = xcos * radius2 + cx;
34001 	    y2 = xsin * radius2 + cy;
34002 	
34003 	    this.plot.line(cx, cy, x1, y1);
34004 	    this.plot.line(cx, cy, x2, y2);
34005 	}
34006 	
34007 	//------------------- Very Bottom Line ----------------
34008 	
34009 	if (pro.sweep == 180) {
34010 	    xcos = Math.cos(start);
34011 	    xsin = Math.sin(start);
34012 	
34013 	    dx = pro.radius;
34014 	    dy = 0;
34015 	    x1 = ((xcos * dx) - (xsin * dy)) + cx;
34016 	    y1 = ((xsin * dx) + (xcos * dy)) + cy;
34017 	
34018 	    dx = pro.radius;
34019 	    dy = -10;
34020 	    x2 = ((xcos * dx) - (xsin * dy)) + cx;
34021 	    y2 = ((xsin * dx) + (xcos * dy)) + cy;
34022 	
34023 	    dx = -pro.radius;
34024 	    dy = -10;
34025 	    x3 = ((xcos * dx) - (xsin * dy)) + cx;
34026 	    y3 = ((xsin * dx) + (xcos * dy)) + cy;
34027 	
34028 	    dx = -pro.radius;
34029 	    dy = 0;
34030 	    x4 = ((xcos * dx) - (xsin * dy)) + cx;
34031 	    y4 = ((xsin * dx) + (xcos * dy)) + cy;
34032 	
34033 	    this.plot.line(x1, y1, x2, y2);
34034 	    this.plot.line(x2, y2, x3, y3);
34035 	    this.plot.line(x3, y3, x4, y4);
34036 	}
34037 	
34038 	//---------------- Text Seperator Arc -----------------------
34039 	
34040 	this.plot.lineWeight = 1;
34041 	
34042 	text_d1 = pro.radius - (ticSize + ch);
34043 	
34044 	radius = text_d1 - ((ticSize2 / 2) + 4);
34045 	
34046 	tic_d1 = radius + (ticSize2 / 2);
34047 	tic_d2 = radius - (ticSize2 / 2);
34048 	text_d2 = tic_d2 - ch;
34049 	
34050 	if (pro.labeled) this.plot.arc(cx, cy, radius, pro.start, pro.sweep);
34051 	
34052 	//-------------------- Origin -----------------------------
34053 	
34054 	centerRadius = 3;
34055 	this.plot.circle(cx, cy, centerRadius);
34056 	
34057 	//----------------------- Tic Marks -------------------------		
34058 	
34059 	x = pro.radius;
34060 	
34061 	for (i = 0; i &lt;= pro.divisions; ++i) {
34062 	
34063 	    angle = a1 + pro.start;
34064 	
34065 	    dir = angle / 180 * Math.PI;
34066 	    xcos = Math.cos(dir);
34067 	    xsin = Math.sin(dir);
34068 	
34069 	    rx = xcos * pro.radius + cx;
34070 	    ry = xsin * pro.radius + cy;
34071 	
34072 	    rx2 = xcos * d4 + cx;
34073 	    ry2 = xsin * d4 + cy;
34074 	
34075 	    this.plot.line(rx, ry, rx2, ry2);
34076 	
34077 	    x1 = xcos * tic_d1 + cx;
34078 	    y1 = xsin * tic_d1 + cy;
34079 	    x2 = xcos * tic_d2 + cx;
34080 	    y2 = xsin * tic_d2 + cy;
34081 	    if (pro.label) this.plot.line(x1, y1, x2, y2);
34082 	
34083 	    //---------- Draw Tics -----------------------
34084 	
34085 	    if (i &lt; pro.divisions) {
34086 	        for (j = 1; j &lt;= pro.tics; ++j) {
34087 	            d = d2;
34088 	            if ((j % 5) == 0) d = d3;
34089 	
34090 	            a = angle + (ta * j);
34091 	            a = a / 180 * Math.PI;
34092 	
34093 	            tx1 = (Math.cos(a) * d1) + cx;
34094 	            ty1 = (Math.sin(a) * d1) + cy;
34095 	
34096 	            tx2 = (Math.cos(a) * d) + cx;
34097 	            ty2 = (Math.sin(a) * d) + cy;
34098 	            this.plot.line(tx1, ty1, tx2, ty2);
34099 	        }
34100 	    }
34101 	
34102 	    //------------------- Labels ----------------------
34103 	
34104 	    if (pro.labeled && (!((i == pro.divisions) && (pro.sweep == 360)))) {
34105 	        tx = xcos * text_d1 + cx;
34106 	        ty = xsin * text_d1 + cy;
34107 	        text = Math.round(a1);
34108 	        xdir = angle - 90;
34109 	        this.plot.text(tx, ty, text, '', xdir, 'LC');
34110 	
34111 	        tx = xcos * text_d2 + cx;
34112 	        ty = xsin * text_d2 + cy;
34113 	
34114 	        text = Math.round(a2);
34115 	        this.plot.text(tx, ty, text, '', xdir, 'LC');
34116 	    }
34117 	
34118 	    //--------------- Label Angle -------------
34119 	
34120 	    a1 += da;
34121 	    a2 -= da;
34122 	}
34123 
34124     //------------------------------ Marked Angles --------------------
34125 
34126 
34127 //    this.setGraphicColor(pro.markColor);
34128 //    this.setGraphicLineWeight(pro.markWeight);
34129 //    this.setGraphicLineStyle(pro.markStyle);
34130 //    this.setFontColor(pro.markColor);
34131 
34132     this.plot.setFontSize(10);
34133     radius = pro.radius;
34134     radius3 = Math.round(radius * 1.1);
34135 
34136     for (i = 0; i &lt; pro.showAngles.length; ++i) {
34137         angle = pro.showAngles[i] + pro.start;
34138         angle = angle / 180 * Math.PI;
34139         x1 = (Math.cos(angle) * (centerRadius + 1)) + cx;
34140         y1 = (Math.sin(angle) * (centerRadius + 1)) + cy;
34141 
34142         x2 = (Math.cos(angle) * (radius2 - 1)) + cx;
34143         y2 = (Math.sin(angle) * (radius2 - 1)) + cy;
34144         this.plot.line(x1, y1, x2, y2);
34145 
34146         x1 = (Math.cos(angle) * (radius + 1)) + cx;
34147         y1 = (Math.sin(angle) * (radius + 1)) + cy;
34148 
34149         x2 = (Math.cos(angle) * radius3) + cx;
34150         y2 = (Math.sin(angle) * radius3) + cy;
34151         this.plot.line(x1, y1, x2, y2);
34152 
34153         angle = (pro.showAngles[i] + pro.start) - 90;
34154         this.plot.symbol(x2, y2, 'Z163', angle);
34155     }
34156 }
34157 
34158 //==================================================================================
34159 //				graphicProxy$drawText
34160 //==================================================================================
34161 function graphicProxy$drawText(origin,text,angle,just)
34162 {
34163 	var org,range,right,p, points, size, save;
34164 	var dx,dy,a,b,x,y,width,height,url,gsize;
34165 
34166 	save = this.graphicCg2.graphicView.plot2d.fontSize
34167 
34168 	gsize = this.graphicCg2.graphicView.plot2d.fontSize;
34169 	size = this.graphicCg2.graphicView.g.scale * gsize;
34170 	this.graphicCg2.graphicView.plot2d.fontSize = size;
34171 	
34172 	if (this.mode() == '3D')
34173 	{
34174 		points = this.graphicCg2.graphicView.plot3d.textToPoints(origin,text,gsize);
34175 		this.drawLine(points);
34176 		return;
34177 	}
34178 
34179 	org = this.graphicCg2.graphicView.map(origin);
34180 	range = this.getTextRange(org,text,angle,just);
34181 		
34182 	p = new Object();
34183 	p.x = range.xmin;
34184 	p.y = range.ymin;
34185 	p.z = range.zmin;
34186 
34187 	width = range.xmax - range.xmin;
34188 	height = range.ymax - range.ymin;
34189 
34190 	just += 'LL';
34191 	just = just.toUpperCase();
34192 
34193 	a = just.substr(0,1);
34194 	b = just.substr(1,1);
34195 
34196 	dx = 0;
34197 	dy = 0;
34198 	if (a == 'L') dy = 0;
34199 	if (a == 'C') dy = height / 2;
34200 	if (a == 'U') dy = height;
34201 
34202 	if (a == 'L') dx = 0;
34203 	if (a == 'C') dx = width / 2;
34204 	if (a == 'R') dx = width;
34205 	
34206 	if (just == 'LC') dx = width / 2;
34207 	if (just == 'CC') dy = height / 2;
34208 
34209 	if (just == 'UC') dx = width / 2;
34210 	if (just == 'CC') dy = height / 2;
34211 
34212 	x = org.x - dx;
34213 	y = org.y - dy;
34214 
34215 	url = '';
34216 	
34217 	this.graphicCg2.graphicView.plot2d.text(x,y,text,url,angle,'',size);
34218 
34219 	this.graphicCg2.graphicView.plot2d.fontSize = save;
34220 
34221 }
34222 //==================================================================================
34223 //				graphicProxy$drawTextbox
34224 //==================================================================================
34225 function graphicProxy$drawTextbox(origin,size,text,drop)
34226 {
34227 	var org,range,right,p, points, angle,url,just;
34228 	var height,width,dx,dy,tbox;
34229 
34230 	angle = 0;
34231 	url   = '';
34232 	just  = 'LL';
34233 
34234 	isize = this.graphicCg2.graphicView.map(size);
34235 
34236 	if (this.mode() == '3D')
34237 	{
34238 		size = 24;
34239 		points = this.graphicCg2.graphicView.plot3d.textboxToPoints(origin,text,isize,drop);
34240 		this.drawLine(points);
34241 		return;
34242 	}
34243 
34244 	org = this.graphicCg2.graphicView.map(origin);
34245 	range = this.getTextRange(org,text,angle,just);
34246 	
34247 	p = new Object();
34248 	p.x = range.xmin;
34249 	p.y = range.ymin;
34250 	p.z = range.zmin;
34251 
34252 	width = range.xmax - range.xmin;
34253 	height = range.ymax - range.ymin;
34254 
34255 	dx = this.graphicCg2.graphicView.map(drop.x);
34256 	dy = this.graphicCg2.graphicView.map(drop.y);
34257 
34258 }
34259 //==================================================================================
34260 //				graphicProxy$unmap
34261 //==================================================================================
34262 function graphicProxy$unmap(value)
34263 {
34264 	value = this.graphicCg2.graphicView.map(value);
34265 	return value;
34266 }
34267 //==================================================================================
34268 //				graphicProxy$drawImage
34269 //==================================================================================
34270 function graphicProxy$drawImage(origin,size,src,angle)
34271 {
34272 	var org,width,height,alpha,y;
34273 
34274 	org = this.graphicCg2.graphicView.map(origin);
34275 
34276 	size  = this.getImageSize(src,size.width,size.height);
34277 	if (size == null) return;
34278 	
34279 	width = size.width;
34280 	height = size.height;
34281 	
34282 	if (size.adjusted)
34283 	{
34284 		width = this.unmap(width);
34285 		height = this.unmap(height);
34286 	}
34287 
34288 	alpha = this.value('style.opacity');
34289 
34290 	y = org.y + height;
34291 	
34292 	this.graphicCg2.graphicView.plot2d.image(org.x,y,src,width,height,angle,alpha);
34293 }
34294 //==================================================================================
34295 //				graphicProxy$drawVideo
34296 //==================================================================================
34297 function graphicProxy$drawVideo(origin,size,src,angle)
34298 {
34299 	var org,width,height,alpha;
34300 
34301 	org = this.graphicCg2.graphicView.map(origin);
34302 
34303 //	size  = this.getImageSize(src,size.width,size.height);
34304 //	if (size == null) return;
34305 	
34306 	width = parseInt(size.width);
34307 	if (isNaN(width)) width = 100;
34308 	if (width &lt; 1) width = 100;
34309 	height = parseInt(size.height);
34310 	if (isNaN(height)) height = 100;
34311 	if (height &lt; 1) height = 100;
34312 
34313 	alpha = this.value('style.opacity');
34314 	this.graphicCg2.graphicView.plot2d.video(org.x,org.y,src,width,height,angle,alpha);
34315 }
34316 
34317 //==================================================================================
34318 //				graphicProxy$drawSymbol
34319 //==================================================================================
34320 function graphicProxy$drawSymbol(center,name,size,angle,just)
34321 {
34322 	var cen,isize,points;
34323 
34324 	cen  = this.graphicCg2.graphicView.map(center);
34325 	isize = this.graphicCg2.graphicView.g.scale * size;
34326 
34327 	points = this.graphicCg2.graphicView.plot3d.symbolToPoints(cen,name,isize,angle,just);
34328 
34329 	if (this.mode() == '3D')
34330 	{
34331 		points = this.graphicCg2.graphicView.plot3d.to2D(points);
34332 	}
34333 
34334 	this.graphicCg2.graphicView.plot2d.polygon(points);
34335 }
34336 //==================================================================================
34337 //				graphicProxy$drawArc
34338 //==================================================================================
34339 function graphicProxy$drawArc(center,radius,startAngle,sweepAngle)
34340 {
34341 	var cen,rad,right,p, points;
34342 
34343 	if (this.mode() == '3D')
34344 	{
34345 		points = this.arcToPoints(center,radius,startAngle,sweepAngle);
34346 		this.drawLine(points);
34347 		return;
34348 	}
34349 
34350 	cen = this.graphicCg2.graphicView.map(center);
34351 
34352 	right = new Object();
34353 	right.x = center.x + radius;
34354 	right.y = center.y;
34355 	right.z = center.z;
34356 
34357 	p = this.graphicCg2.graphicView.map(right);
34358 
34359 	rad = Math.abs(p.x - cen.x);
34360 
34361 	this.graphicCg2.graphicView.plot2d.arc(cen.x,cen.y,rad,startAngle,sweepAngle);
34362 }
34363 //==================================================================================
34364 //				graphicProxy$drawCircle
34365 //==================================================================================
34366 function graphicProxy$drawCircle(center,radius)
34367 {
34368 	var cen,rad,right,p, points;
34369 
34370 	if (this.mode() == '3D')
34371 	{
34372 		points = this.arcToPoints(center,radius,0,360);
34373 		this.drawLine(points);
34374 		return;
34375 	}
34376 
34377 	cen = this.graphicCg2.graphicView.map(center);
34378 
34379 	right = new Object();
34380 	right.x = center.x + radius;
34381 	right.y = center.y;
34382 	right.z = center.z;
34383 
34384 	p = this.graphicCg2.graphicView.map(right);
34385 
34386 	rad = Math.abs(p.x - cen.x);
34387 	this.graphicCg2.graphicView.plot2d.circle(cen.x,cen.y,rad);
34388 }
34389 
34390 //==================================================================================
34391 //				cs2Proxy$toString
34392 //==================================================================================
34393 function graphicCg2Proxy$toString(name)
34394 {
34395 	var field;
34396 		
34397 	if (arguments.length == 0) return this.graphicCg2.toString();
34398 
34399 	field = this.graphicCg2.getField(name);
34400 	if (field == null) return '';
34401 	return this.graphicCg2.fieldToString(field);
34402 }
34403 //==================================================================================
34404 //			graphicCg2Proxy$styleExists
34405 //==================================================================================
34406 function graphicCg2Proxy$styleExists(name)
34407 {
34408 	var field,list,index,text,temp,nam,value,i;
34409 
34410 	field = this.record.getField('style');
34411 	if (field == null) return false;
34412 
34413 	name = name.toLowerCase();
34414 	value = field.value;
34415 
34416 	for (i=0; i &lt; value.names.length; ++i)
34417 	{
34418 		if (name == value.names[i]) 
34419 		{
34420 			if (value.values[i].toLowerCase() == 'false') return false;
34421 			return true;			
34422 		}
34423 	}
34424 
34425 	return false;
34426 }
34427 
34428 //==================================================================================
34429 //			cs2Proxy$value
34430 //==================================================================================
34431 function graphicCg2Proxy$value(name)
34432 {
34433 	var field,list,index,text,temp,nam,value,i;
34434 
34435 	name = trim(name.toLowerCase());
34436 
34437 	list = name.split('.');
34438 	nam = list[0];
34439 
34440 	index = -1;
34441 	i = name.indexOf('[');
34442 	if (i > 0)
34443 	{
34444 		text = nam.substr(i+1);
34445 		nam  = nam.substr(0,i);
34446 		index = parseInt(text);
34447 		if (isNaN(index)) index = -1;
34448 	}
34449 		
34450 	field = this.record.getField(nam);
34451 	if (field == null) return '';
34452 
34453 	value = field.value;
34454 	if (field.isArray)
34455 	{
34456 		if (index &lt; 0) return field.values;
34457 		value = field.values[index];
34458 
34459 		if (list.length &lt;= 1) return value;
34460 		return value[list[1]];
34461 		
34462 	}
34463 
34464 	if (field.fmt == 'name=value')
34465 	{
34466 		if (list.length > 1)
34467 		{
34468 			name = trim(list[1]).toLowerCase();
34469 			for (i=0; i &lt; value.names.length; ++i)
34470 			{
34471 				if (name == value.names[i])
34472 				{
34473 					 return value.values[i];
34474 				}
34475 			}
34476 			
34477 			return '';			
34478 		}
34479 
34480 		return value;
34481 	}
34482 
34483 	if (list.length > 1) value = value[list[1]];
34484 
34485 	if (field.fmt == 'i4')
34486 	{
34487 		value = parseInt(value);
34488 		if (isNaN(value)) value = 0;
34489 		return value;
34490 	}
34491 
34492 	if (field.fmt == 'r8')
34493 	{
34494 		value = parseFloat(value);
34495 		if (isNaN(value)) value = 0;
34496 		return value;
34497 	}
34498 
34499 	return value;
34500 }
34501 //===========================================================================================
34502 //			graphicLine$
34503 //============================================================================================
34504 function graphicLine$()
34505 {
34506 	this.schema = 'style:name=value,points():(x:r8+y:r8+z:r8+code)';
34507 	this.getRange   = function () { this.range.set = false; this.setRange(this.range, this.value('points')); return this.range; };
34508 	this.draw		= function () { this.setLineStyle(); this.drawLine(this.value('points')); };	
34509 }
34510 //===========================================================================================
34511 //			graphicPolygon$
34512 //============================================================================================
34513 function graphicPolygon$()
34514 {
34515 	this.schema = 'style:name=value,points():(x:r8+y:r8+z:r8+code)';
34516 	this.getRange   = function () { this.range.set = false; this.setRange(this.range, this.value('points')); return this.range; };
34517 	this.draw		= function () { this.setLineStyle(); this.drawPolygon(this.value('points')); };	
34518 }
34519 //===========================================================================================
34520 //			graphicRectangle$
34521 //============================================================================================
34522 function graphicRectangle$()
34523 {
34524 	this.schema = 'style:name=value,origin:(x:r8+y:r8+z:r8),size:(width:r8+height:r8+depth:r8)';
34525 	this.draw		= function () { this.setLineStyle(); this.drawRectangle(this.value('origin'),this.value('size')); };	
34526 	this.getRange   = graphicRectangle$getRange;
34527 }
34528 //===========================================================================================
34529 //			graphicRectangle$getRange
34530 //============================================================================================
34531 function graphicRectangle$getRange()
34532 {
34533 	var origin,size,topRight;
34534 
34535 	origin = this.value('origin');
34536 	size = this.value('size');
34537 
34538 	topRight= new Object();
34539 	topRight.x = origin.x + size.width;
34540 	topRight.y = origin.y + size.height;
34541 	topRight.z = origin.z + size.depth;
34542 
34543 	this.range.set = false; 
34544 	this.setRange(this.range, origin); 
34545 	this.setRange(this.range, topRight);
34546 	return this.range;
34547 }
34548 //===========================================================================================
34549 //			graphicTextbox$
34550 //============================================================================================
34551 function graphicTextbox$()
34552 {
34553 	this.schema = 'style:name=value,origin:(x:r8+y:r8+z:r8),size:(width:r8+height:r8+depth:r8),text:a,drop:(x:r8+y:r8+z:r8)';
34554 	this.draw		= function () { this.setLineStyle(); this.drawTextbox(this.value('origin'),this.value('size'),this.value('text'),this.value('drop') ); };	
34555 
34556 	this.getRange   = graphicTextbox$getRange; 
34557 }
34558 //===========================================================================================
34559 //			graphicTextbox$getRange
34560 //============================================================================================
34561 function graphicTextbox$getRange()
34562 {
34563 	var origin,size,topRight,drop;
34564 
34565 	origin = this.value('origin');
34566 	size = this.value('size');
34567 	drop = this.value('drop');
34568 
34569 	topRight= new Object();
34570 	topRight.x = origin.x + size.width;
34571 	topRight.y = origin.y + size.height;
34572 	topRight.z = origin.z + size.depth;
34573 
34574 	this.range.set = false; 
34575 	this.setRange(this.range, origin); 
34576 	this.setRange(this.range, topRight); 
34577 	this.setRange(this.range, drop);
34578 
34579 	return this.range;
34580 }
34581 //===========================================================================================
34582 //			graphicGrid$
34583 //============================================================================================
34584 function graphicGrid$() {
34585 
34586     this.schema = 'style:name=value,lowerLeft:(x:r8+y:r8+z:r8),upperRight:(x:r8+y:r8+z:r8),rows:i4,columns:i4';
34587     this.draw = function () { this.setLineStyle(); this.drawGrid(this.value('lowerLeft'), this.value('upperRight'), this.value('rows'), this.value('columns')); };
34588 
34589     this.getRange = graphicGrid$getRange;
34590 }
34591 //===========================================================================================
34592 //			graphicGrid$getRange
34593 //============================================================================================
34594 function graphicGrid$getRange() {
34595     var points;
34596     this.range.set = false;
34597     this.setRange(this.range, this.value('p1'));
34598     this.setRange(this.range, this.value('p2'));
34599     return this.range;
34600 }
34601 
34602 //===========================================================================================
34603 //			graphicProtractor$
34604 //============================================================================================
34605 function graphicProtractor$() {
34606 
34607     this.schema = 'style:name=value,center:(x:r8+y:r8+z:r8),radius:r8,startAngle:r8,sweepAngle:r8,divisions:i4,ticMarks:i4,showAngles,lineColor,labeled:bool';
34608     this.draw = function () { this.setLineStyle(); this.setFontStyle(); this.drawProtractor(); };
34609 
34610     this.getRange = graphicProtractor$getRange;
34611 }
34612 //===========================================================================================
34613 //			graphicProtractor$getRange
34614 //============================================================================================
34615 function graphicProtractor$getRange() {
34616     var points;
34617     this.range.set = false;
34618     points = this.arcToPoints(this.value('center'), this.value('radius'), this.value('startAngle'), this.value('sweepAngle'));
34619     this.setRange(this.range, points);
34620     return this.range;
34621 }
34622 //===========================================================================================
34623 //			graphicArc$
34624 //============================================================================================
34625 function graphicArc$()
34626 {
34627 	this.schema = 'style:name=value,center:(x:r8+y:r8+z:r8),radius:r8,startAngle:r8,sweepAngle:r8';
34628 	this.draw  = function () { this.setLineStyle(); this.drawArc(this.value('center'), this.value('radius'), this.value('startAngle'), this.value('sweepAngle')); };	
34629 	this.getRange = graphicArc$getRange;
34630 }
34631 //===========================================================================================
34632 //			graphicArc$getRange
34633 //============================================================================================
34634 function graphicArc$getRange()
34635 {
34636 	var points;
34637 	this.range.set = false;			
34638 	points = this.arcToPoints(this.value('center'), this.value('radius'), this.value('startAngle'), this.value('sweepAngle'));
34639 	this.setRange(this.range, points); 
34640 	return this.range; 
34641 }
34642 //===========================================================================================
34643 //			graphicCone$
34644 //============================================================================================
34645 function graphicCone$()
34646 {
34647 	this.schema = 'style:name=value,center:(x:r8+y:r8+z:r8),radius:r8,startAngle:r8,sweepAngle:r8';
34648 	this.draw  = function () { this.setLineStyle(); this.drawCone(this.value('center'), this.value('radius'), this.value('startAngle'), this.value('sweepAngle')); };	
34649 	this.getRange = graphicCone$getRange;
34650 }
34651 //===========================================================================================
34652 //			graphicCone$getRange
34653 //============================================================================================
34654 function graphicCone$getRange()
34655 {
34656 	var points;
34657 	this.range.set = false;			
34658 	points = this.arcToPoints(this.value('center'), this.value('radius'), this.value('startAngle'), this.value('sweepAngle'), true);
34659 	this.setRange(this.range, points); 
34660 	return this.range; 
34661 }
34662 //===========================================================================================
34663 //			graphicCircle$
34664 //============================================================================================
34665 function graphicCircle$()
34666 {
34667 	this.schema   = 'style:name=value,center:(x:r8+y:r8+z:r8),radius:r8';
34668 	this.draw     = function () { this.setLineStyle(); this.drawCircle(this.value('center'), this.value('radius')); };	
34669 	this.getRange = graphicCircle$getRange;
34670 }
34671 //===========================================================================================
34672 //			graphicCircle$getRange
34673 //============================================================================================
34674 function graphicCircle$getRange()
34675 {
34676 	var center,radius,p;
34677 	this.range.set = false;			
34678 	center = this.value('center');
34679 	radius = this.value('radius');
34680 	p   = new Object();
34681 	p.x = center.x - radius;
34682 	p.y = center.y - radius;
34683 	p.z = center.z;
34684 	this.setRange(this.range, p); 
34685 	p.x = center.x + radius;
34686 	p.y = center.y + radius;
34687 	p.z = center.z;
34688 	this.setRange(this.range, p); 
34689 	return this.range; 
34690 }
34691 //===========================================================================================
34692 //			graphicText$
34693 //============================================================================================
34694 function graphicText$()
34695 {
34696 	var size;
34697 
34698 	this.schema = 'style:name=value,origin:(x:r8+y:r8+z:r8),text,angle:r8,justify';
34699 
34700 	this.draw  = function () { 
34701 		this.setFontStyle(); 
34702 		var origin	= this.value('origin');
34703 		var text	= this.value('text');
34704 		var angle	= this.value('angle');
34705 		var just	= this.value('justify');
34706 		this.drawText(origin , text, angle, just); 
34707 	};	
34708 	
34709 	this.getRange   = graphicText$getRange;
34710 }
34711 //===========================================================================================
34712 //			graphicText$getRange
34713 //============================================================================================
34714 function graphicText$getRange()
34715 {
34716 	var origin,radius,p,angle,just,text;
34717 
34718 	this.setLineStyle(); 
34719 
34720 	this.range.set = false;			
34721 	origin = this.value('origin');
34722 	text   = this.value('text');
34723 	angle  = this.value('angle',0);
34724 	just   = this.value('justify');
34725 	this.range = this.getTextRange(origin,text,angle,just);
34726 
34727 	return this.range; 
34728 }
34729 //===========================================================================================
34730 //			graphicSymbol$
34731 //============================================================================================
34732 function graphicSymbol$()
34733 {
34734 	this.schema = 'style:name=value,origin:(x:r8+y:r8+z:r8),name,size:r8,angle:r8,just:a';
34735 	this.draw  = function () { this.setLineStyle(); this.drawSymbol(this.value('origin'), this.value('name'), this.value('size'), this.value('angle'), this.value('just')); };	
34736 	this.getRange   = graphicSymbol$getRange;
34737 }
34738 //===========================================================================================
34739 //			graphicSymbol$getRange
34740 //============================================================================================
34741 function graphicSymbol$getRange()
34742 {
34743 	var center,radius,p,angle,just,text,origin;
34744 
34745 	this.range.set = false;			
34746 	origin = this.value('origin');
34747 	text   = this.value('text');
34748 	angle  = this.value('angle',0);
34749 	just   = this.value('just');
34750 	this.range = this.getTextRange(origin,text,angle,just);
34751 	return this.range; 
34752 }
34753 //===========================================================================================
34754 //			graphicImage$
34755 //============================================================================================
34756 function graphicImage$()
34757 {
34758 	this.schema = 'style:name=value,origin:(x:r8+y:r8+z:r8),size:(width:r8+height:r8),src,angle:r8';
34759 	this.draw  = function () { this.setLineStyle(); this.drawImage(this.value('origin'), this.value('size'), this.value('src'), this.value('angle')  ); };	
34760 	this.getRange   =  graphicImage$getRange;
34761 }
34762 //===========================================================================================
34763 //			graphicImage$getRange
34764 //============================================================================================
34765 function graphicImage$getRange()
34766 {
34767 	var origin,radius,p,size,s,src;
34768 				
34769 	this.range.set = false;			
34770 	origin = this.value('origin');
34771 	size   = this.value('size');
34772 	src    = this.value('src');
34773 	s   = this.getImageSize(src,size.width,size.height);
34774 	if (s == null) return this.range;
34775 				
34776 	p   = new Object();
34777 	p.x = origin.x + this.unmap(s.width);
34778 	p.y = origin.y + this.unmap(s.height);
34779 	p.z = origin.z;
34780 	this.setRange(this.range, p); 
34781 	return this.range; 
34782 }
34783 //===========================================================================================
34784 //			graphicVideo$
34785 //============================================================================================
34786 function graphicVideo$()
34787 {
34788 	this.schema = 'style:name=value,origin:(x:r8+y:r8+z:r8),size:(width:r8+height:r8),src,angle:r8';
34789 	this.draw  = function () { this.setLineStyle(); this.drawVideo(this.value('origin'), this.value('size'), this.value('src'), this.value('angle')  ); };	
34790 	this.getRange   = graphicVideo$getRange;
34791 }
34792 //===========================================================================================
34793 //			graphicVideo$getRange
34794 //============================================================================================
34795 function graphicVideo$getRange()
34796 {
34797 	var origin,radius,p,size,s,src;
34798 				
34799 	this.range.set = false;			
34800 	origin = this.value('origin');
34801 	size   = this.value('size');
34802 	src    = this.value('src');
34803 	s   = this.getImageSize(src,size.width,size.height);
34804 	if (s == null) return this.range;
34805 				
34806 	p   = new Object();
34807 	p.x = origin.x + this.unmap(s.width);
34808 	p.y = origin.y + this.unmap(s.height);
34809 	p.z = origin.z;
34810 	this.setRange(this.range, p); 
34811 	return this.range; 
34812 }
34813 //==========================================================================================
34814 //			graphicView$
34815 //==========================================================================================
34816 function graphicView$(index,viewdef,plot2d,graphicCg2)
34817 {
34818 	
34819 //------------------------- Public Methods ------------------------------------
34820 
34821 	this.draw		= graphicView$draw;
34822 	this.map		= graphicView$map;
34823 	this.unmap		= graphicView$unmap;
34824 
34825 	this.rotateEye		= graphicView$rotateEye;
34826 	this.setScreenDistance	= graphicView$setScreenDistance;
34827 
34828 //------------------------------- Private Methods --------------------------------
34829 	
34830 	this.defineMap		= graphicView$defineMap;
34831 	this.map_A		= graphicView$map_A;
34832 	this.draw_A		= graphicView$draw_A;
34833 	
34834 //--------------------------------- Properties ------------------------------------
34835 
34836 	this.graphicCg2		= graphicCg2;
34837 	graphicCg2.graphicView	= this;
34838 
34839 	this.index		= index;
34840 	this.viewdef		= viewdef;
34841 	this.plot2d		= plot2d;
34842 	this.plot3d		= new plot3d$(this);
34843 
34844 
34845 	if (viewdef.ele.dynamic) 
34846 	{
34847 try
34848 {
34849 		this.plot2d.attachEvents();
34850 }
34851  catch (e) { }
34852 	}
34853 
34854 	this.plot2d.graphicView = this;	
34855 	this.defineMap();
34856 	
34857 }
34858 //==========================================================================================
34859 //				graphicView$defineMap
34860 //==========================================================================================
34861 function graphicView$defineMap()
34862 {
34863 	var i,obj,x,y,z,dx,dy,dz;
34864 	var h, w, a, b, c, r, mapScale;
34865 	var p1,p2,p,cx,cy,cz;
34866 	var i,list,text;	
34867 	var x2,y2;
34868 	var xmin,ymin,zmin,xmax,ymax,zmax,scale,xscale,yscale,zscale;
34869 	
34870 	if (isNaN(this.viewdef.height)) this.viewdef.height = 500;
34871 	if (isNaN(this.viewdef.width))  this.viewdef.width = 500;
34872 	if (isNaN(this.viewdef.angle))  this.viewdef.angle = 0;
34873 
34874 	if (this.viewdef.height &lt;= 0) this.viewdef.height = 500;
34875 	if (this.viewdef.width &lt;= 0)  this.viewdef.width = 500;
34876 
34877 	this.height = this.viewdef.height;
34878 	this.width  = this.viewdef.width;
34879 
34880 	xmin = 0;
34881 	ymin = 0;
34882 	zmin = 0;
34883 	xmax = this.viewdef.width-1;
34884 	ymax = this.viewdef.height-1;
34885 	zmax = 0;
34886 	scale = 1;
34887 	mapScale = 72 / 110;
34888 
34889 	list = this.viewdef.ele.range.split(',');
34890 	if (list.length >= 2)
34891 	{
34892 		
34893 		if (list.length == 4)
34894 		{
34895 			xmin = parseFloat(list[0]);
34896 			ymin = parseFloat(list[1]);
34897 			xmax = parseFloat(list[2]);
34898 			ymax = parseFloat(list[3]);
34899 		}
34900 		else
34901 		{
34902 			a = list[0].split(':');
34903 			xmin = parseFloat(a[0]);
34904 			if (a.length > 1) ymin = parseFloat(a[1]);
34905 			if (a.length > 2) zmin = parseFloat(a[2]);
34906 
34907 			a = list[1].split(':');
34908 			xmax = parseFloat(a[0]);
34909 			if (a.length > 1) ymax = parseFloat(a[1]);
34910 			if (a.length > 2) zmax = parseFloat(a[2]);
34911 		}
34912 	
34913 
34914 		if (isNaN(xmin)) xmin = 0;
34915 		if (isNaN(ymin)) ymin = 0;
34916 		if (isNaN(zmin)) zmin = 0;
34917 
34918 		if (isNaN(xmax)) xmax = 500;
34919 		if (isNaN(ymax)) ymax = 500;
34920 		if (isNaN(zmax)) zmax = 0;
34921 	
34922 		dx = xmax - xmin;
34923 		dy = ymax - ymin;
34924 		dz = zmax - zmin;
34925 
34926 		xscale = 0;
34927 		yscale = 0;
34928 		zscale = 0;
34929 		if (dy > 0) yscale = this.viewdef.height / dy;	
34930 		if (dx > 0) xscale = this.viewdef.width / dx;	
34931 		scale = xscale;
34932 		if (yscale &lt; xscale) scale = yscale;
34933 		mapScale = 1;
34934 	}
34935 
34936 	this.g = new Object();
34937 	this.g.xorg = xmin;
34938 	this.g.yorg = ymin;
34939 	this.g.zorg = zmin;
34940 	this.g.scale = scale;
34941 
34942 	this.g.xmin = this.viewdef.x;
34943 	this.g.xmax = this.viewdef.x + this.viewdef.width - 1;
34944 	this.g.ymin = this.viewdef.y;
34945 	this.g.ymax = this.viewdef.y + this.viewdef.height - 1;
34946 
34947 	this.g.zmin = zmin;
34948 	this.g.zmax = zmax;
34949 
34950 	this.g.width  = this.viewdef.width;
34951 	this.g.height = this.viewdef.height;
34952 	this.g.depth  = zmax - zmin;
34953 	
34954 	this.viewdef.ele.origin = this.viewdef.ele.origin.toLowerCase();
34955 	this.g.topLeft = false;
34956 	this.g.center  = false;
34957 
34958 	this.g.top = ymax;
34959 	this.g.cx = (xmax + xmin) / 2;
34960 	this.g.cy = (ymax + ymin) / 2;
34961 	this.g.cz = (zmax + zmin) / 2;
34962 	
34963 	if (this.viewdef.ele.origin == 'top-left') this.g.topLeft = true;
34964 	if (this.viewdef.ele.origin ==      'top') this.g.topLeft = true;
34965 	if (this.viewdef.ele.origin ==   'center') this.g.center  = true;
34966 
34967 	list = this.viewdef.ele.origin.split(':');
34968 	if (list.length > 1)
34969 	{
34970 		cx = parseFloat(list[0]);
34971 		if (isNaN(cx)) cx = 0;
34972 		cy = parseFloat(list[1]);
34973 		if (isNaN(cy)) cy = 0;
34974 
34975 		cz = 0;	
34976 		if (list.length > 2) cz = parseFloat(list[2]);
34977 		if (isNaN(cz)) cz = 0;
34978 
34979 		this.g.cx = cx;
34980 		this.g.cy = cy;
34981 		this.g.cz = cz;
34982 		this.g.center  = true;
34983 
34984 	}
34985 
34986 	p1 = this.map(xmin,ymin,zmin);
34987 	p2 = this.map(xmax,ymax,zmax);
34988 
34989 	this.g.scale = this.g.scale * mapScale;
34990 	this.xmin = p1.x;
34991 	this.ymin = p1.y;
34992 	this.zmin = p1.z;
34993 	
34994 	this.xmax = this.xmin + this.viewdef.width - 1;
34995 	this.ymax = this.ymin + this.viewdef.height - 1;
34996 	this.zmax = this.zmin;		
34997 }
34998 //==================================================================================
34999 //				graphicView$rotateEye
35000 //==================================================================================
35001 function graphicView$rotateEye(ax,ay,az)
35002 {
35003 	this.plot3d.rotateEye(ax,ay,az);
35004 	this.plot3d.setEye();
35005 	this.draw_A();
35006 }
35007 //==================================================================================
35008 //				graphicView$setScreenDistance
35009 //==================================================================================
35010 function graphicView$setScreenDistance(dx)
35011 {
35012 	var screendistance;
35013 	
35014 	screendistance = this.plot3d.screenDistance + dx;
35015 	if (screendistance &lt; 1) return;
35016 	
35017 	this.plot3d.screenDistance += dx;
35018 	this.plot3d.setEye();
35019 	this.draw_A();
35020 }
35021 //==========================================================================================
35022 //				graphicView$map
35023 //==========================================================================================
35024 function graphicView$map(p1,p2,p3,p4)
35025 {
35026 	var points,x,y,z,p,i;
35027 	
35028 	if (arguments.length == 1)
35029 	{
35030 		if (typeof(p1) == 'object')
35031 		{
35032 			if (typeof(p1.length) == 'number')
35033 			{
35034 				points = new Array();
35035 				for (i=0; i &lt; p1.length; ++i)
35036 				{
35037 					points[i] = this.map(p1[i]);
35038 				}
35039 				return points;
35040 			}
35041 
35042 			p = this.map_A(p1.x,p1.y,p1.z);
35043 			if (typeof(p1.code) != 'undefined') p.code = p1.code;
35044 			return p;			
35045 		}
35046 		
35047 		x = parseFloat(p1);
35048 		if (isNaN(x)) x = 0;
35049 		y = 0;
35050 		z = 0;
35051 		p = this.map_A(x,y,z);
35052 		return p.x;	
35053 	}
35054 
35055 	if (arguments.length == 2)
35056 	{
35057 		x = parseFloat(p1);
35058 		if (isNaN(x)) x = 0;
35059 		y = parseFloat(p2);
35060 		if (isNaN(y)) y = 0;
35061 		z = 0;
35062 		p = this.map_A(x,y,z);
35063 		return p;		
35064 	}
35065 
35066 	if (arguments.length >= 3)
35067 	{
35068 		x = parseFloat(p1);
35069 		if (isNaN(x)) x = 0;
35070 		y = parseFloat(p2);
35071 		if (isNaN(y)) y = 0;
35072 		z = parseFloat(p3);
35073 		if (isNaN(z)) z = 0;
35074 		p = this.map_A(x,y,z);
35075 		if (arguments.length > 3) p.code = p4;
35076 		return p;		
35077 	}
35078 }
35079 //==========================================================================================
35080 //				graphicView$unmap
35081 //==========================================================================================
35082 function graphicView$unmap(value)
35083 {
35084 
35085 	value = value / this.g.scale;
35086 
35087 	return value;
35088 }
35089 //==========================================================================================
35090 //				graphicView$map_A
35091 //==========================================================================================
35092 function graphicView$map_A(x,y,z)
35093 {
35094 	var point;
35095 	
35096 	point = new Object();	
35097 
35098 	if (!z) z = 0;
35099 
35100 	if (this.g.topLeft) y = this.g.top - (y - this.g.yorg);
35101 	if (this.g.center)
35102 	{
35103 		 x =  x + this.g.cx;
35104 		 y =  y + this.g.cy;
35105 	}
35106 		
35107 	x = (x - this.g.xorg) * this.g.scale;
35108 	y = (y - this.g.yorg) * this.g.scale;
35109 	z = (z - this.g.zorg) * this.g.scale;
35110 	
35111 	point.x = (x + this.g.xmin);
35112 	point.y = (y + this.g.ymin);
35113 	point.z = (z + this.g.zmin);
35114 
35115 	return point;
35116 }
35117 //==========================================================================================
35118 //				graphicView$draw
35119 //==========================================================================================
35120 function graphicView$draw(data)
35121 {	
35122 	var cx, cy, cz, radius, ax, ay, az, fx, fy, fz;
35123 	var tx, ty, tz;
35124 
35125 	this.data = data;
35126 	this.graphicCg2.graphicView = this;
35127 	this.graphicCg2.clear();
35128 	this.graphicCg2.add(this.data);
35129 
35130 	if (true)
35131 	{
35132 		cx = this.width / 2;
35133 		cy = this.height / 2;
35134 		cz = 0;
35135 		this.range = this.graphicCg2.getRange();
35136 		
35137 		radius = this.range.radius;
35138 		if (isNaN(radius)) radius = 40;
35139 		this.plot3d.screenDistance = radius / 3;
35140 
35141 		if (this.viewdef.lookfrom.screenDistance > 0) this.plot3d.screenDistance = this.viewdef.lookfrom.screenDistance;
35142 
35143 		fx = 0;
35144 		fy = 0;
35145 		fz = radius / 2;
35146 
35147 		if (this.viewdef.ele.lookfrom != '')
35148 		{
35149 			fx = this.viewdef.lookfrom.x;
35150 			fy = this.viewdef.lookfrom.y;
35151 			fz = this.viewdef.lookfrom.z;
35152 		}
35153 
35154 		tx = 0;
35155 		ty = 0;
35156 		tz = 0;
35157 
35158 		if (this.viewdef.ele.tilt != '')
35159 		{
35160 			tx = this.viewdef.lookfrom.tiltx;
35161 			ty = this.viewdef.lookfrom.tilty;
35162 			tz = this.viewdef.lookfrom.tiltz;
35163 		}
35164 		
35165 		ax = cx;
35166 		ay = cy;
35167 		az = cz;		
35168 
35169 		if (this.viewdef.ele.lookat != '') {
35170 			ax = this.viewdef.lookat.x;
35171 			ay = this.viewdef.lookat.y;
35172 			az = this.viewdef.lookat.z;
35173 		}
35174 
35175 
35176 		this.plot3d.setLookFrom(fx, fy, fz);
35177 		this.plot3d.setLookAt(ax, ay, az);
35178 		this.plot3d.setTilt(tx, ty, tz);
35179 		this.plot3d.setView(this.width, this.height, radius);
35180 		this.plot3d.setEye();
35181 	}
35182 
35183 	this.draw_A();
35184 	
35185 	if (this.viewdef.ele.animateFunction  && this.viewdef.ele.animateFunction != '')
35186 	{
35187 		var a;
35188 		a = f$(this,eval(this.viewdef.ele.animateFunction));
35189 		this.timer = setInterval(a,this.viewdef.ele.animateEvery );
35190 //		this.timeEvent = setTimeout(this.viewdef.ele.animateFunction,this.viewdef.ele.animateEvery );
35191 	}
35192 	
35193 }
35194 //==========================================================================================
35195 //				graphicView$draw_A
35196 //==========================================================================================
35197 function graphicView$draw_A()
35198 {	
35199 
35200 	this.plot2d.clear();
35201 
35202 	this.plot2d.clip = this.viewdef.clip;
35203 	this.plot2d.clipBegin(this.xmin,this.ymin,this.xmax,this.ymax,this.viewdef.angle);
35204 
35205 	this.graphicCg2.draw();
35206 
35207 	this.plot2d.clipEnd();
35208 }
35209 
35210 //==================================================================================
35211 //								graphicRange$
35212 //==================================================================================
35213 function graphicRange$()
35214 {
35215 	this.set = false;
35216 	this.count =  0;
35217 	this.xmin  =  1.0E128;
35218 	this.ymin  =  1.0E128;
35219 	this.zmin  =  1.0E128;
35220 	this.xmax  = -1.0E128;
35221 	this.ymax  = -1.0E128;
35222 	this.zmax  = -1.0E128;
35223 
35224 	this.addPoint	= graphicRange$addPoint;
35225 	this.addPoints	= graphicRange$addPoints;
35226 	this.addRange	= graphicRange$addRange;
35227 
35228 	this.add	= graphicRange$add;
35229 	this.center	= graphicRange$center;
35230 
35231 }
35232 //==================================================================================
35233 //				graphicRange$addRange
35234 //==================================================================================
35235 function graphicRange$addRange(range)
35236 {
35237 
35238 	if (! range.set) return;
35239 
35240 	this.add(range.xmin,range.ymin,range.zmin);
35241 	this.add(range.xmax,range.ymax,range.zmax);
35242 	
35243 }
35244 //==================================================================================
35245 //				graphicRange$center
35246 //==================================================================================
35247 function graphicRange$center()
35248 {
35249 	var point;
35250 
35251 	point = new Object();
35252 	point.x = 0;
35253 	point.y = 0;
35254 	point.z = 0;
35255 	if (! this.set) return point;
35256 
35257 	point.x = (this.xmax + this.xmin) / 2;
35258 	point.y = (this.ymax + this.ymin) / 2;
35259 	point.z = (this.zmax + this.zmin) / 2;
35260 
35261 	return point;
35262 }
35263 //==================================================================================
35264 //				graphicRange$add
35265 //==================================================================================
35266 function graphicRange$addPoint(point)
35267 {	
35268 	this.add(point.x,point.y,point.z);
35269 }
35270 //==================================================================================
35271 //				graphicRange$add
35272 //==================================================================================
35273 function graphicRange$add(x,y,z)
35274 {
35275 	if (! this.set)
35276 	{
35277 		this.set = true;
35278 		this.count = 1;
35279 		this.xmin = x;
35280 		this.ymin = y;
35281 		this.zmin = z;	
35282 
35283 		this.xmax = x;
35284 		this.ymax = y;
35285 		this.zmax = z;	
35286 		return;
35287 	}
35288 
35289 	this.count += 1;
35290 	
35291 	if (x &lt; this.xmin) this.xmin = x;
35292 	if (x > this.xmax) this.xmax = x;
35293 
35294 	if (y &lt; this.ymin) this.ymin = y;
35295 	if (y > this.ymax) this.ymax = y;
35296 
35297 	if (z &lt; this.zmin) this.zmin = z;
35298 	if (z > this.zmax) this.zmax = z;	
35299 }
35300 //==================================================================================
35301 //				graphicRange$addPoints
35302 //==================================================================================
35303 function graphicRange$addPoints(points)
35304 {
35305 	var i;
35306 
35307 	this.count += 1;
35308 	this.set = true;
35309 	
35310 	for (i=0; i &lt; points.length; ++i)
35311 	{
35312 		this.addPoint(points[i]);
35313 	}
35314 }
35315 
35316 //==========================================================================================
35317 //				viewdef$
35318 //==========================================================================================
35319 function viewdef$(index,x,y,width,height,ele)
35320 {
35321 	var a,b,c,i,name,value;
35322 		
35323 //--------------------------- Methods --------------------------------
35324 
35325 	this.toString		= viewdef$toString;
35326 	this.init		= viewdef$init;
35327 	this.ele		= ele;
35328 
35329 //-------------------------- Properties -------------------------------
35330 
35331 	this.data		= '';
35332 
35333 	this.index		= index;
35334 	this.x			= x;
35335 	this.y			= y;
35336 	this.width		= width;
35337 	this.height		= height;
35338 	
35339 	this.init(ele);
35340 
35341 }
35342 //==========================================================================================
35343 //				viewdef$init
35344 //==========================================================================================
35345 function viewdef$init(ele)
35346 {
35347 	var list,style,i,n,f,text,a,dis;
35348 
35349 	this.mode = '2D';
35350 	if (ele.is3D) this.mode = '3D';
35351 
35352 	this.timeout = 100;
35353 	this.clip	= ele.clip;
35354 
35355 	this.lookat = new Object();
35356 	this.lookat.x = 0;
35357 	this.lookat.y = 0;
35358 	this.lookat.z = 0;
35359 
35360 	this.lookfrom = new Object();
35361 	this.lookfrom.x = 0;
35362 	this.lookfrom.y = 0;
35363 	this.lookfrom.z = 0;
35364 
35365 	this.lookfrom.tiltx = 0;
35366 	this.lookfrom.tilty = 0;
35367 	this.lookfrom.tiltz = 0;
35368 
35369 	if (typeof(ele.lookat) != 'undefined' &&  ele.lookat != '')
35370 	{
35371 		text = ele.lookat;
35372 		a = text.split(',');
35373 		n = parseFloat(a[0]);
35374 		if (! isNaN(n)) this.lookat.x = n;
35375 		if (a.length > 1) n = parseFloat(a[1]);
35376 		if (! isNaN(n)) this.lookat.y = n;
35377 		if (a.length > 2) n = parseFloat(a[2]);
35378 		if (!isNaN(n)) this.lookat.z = n;
35379 	}	
35380 
35381 
35382 	if (typeof(ele.lookfrom) != 'undefined' &&  ele.lookfrom != '')
35383 	{
35384 		text = ele.lookfrom;
35385 		a = text.split(',');
35386 		n = parseFloat(a[0]);
35387 		if (! isNaN(n)) this.lookfrom.x = n;
35388 		if (a.length > 1) n = parseFloat(a[1]);
35389 		if (! isNaN(n)) this.lookfrom.y = n;
35390 		if (a.length > 2) n = parseFloat(a[2]);
35391 		if (!isNaN(n)) this.lookfrom.z = n;
35392 		if (a.length > 3)
35393 		{
35394 			dis = parseFloat(a[3]);
35395 			if (!isNaN(dis)) this.lookfrom.screenDistance = dis;
35396 		}
35397 	}	
35398 
35399 	if (typeof (ele.tilt) != 'undefined' && ele.tilt != '') {
35400 		text = ele.tilt;
35401 		a = text.split(',');
35402 		n = parseFloat(a[0]);
35403 		if (!isNaN(n)) this.lookfrom.tiltx = n;
35404 		if (a.length > 1) n = parseFloat(a[1]);
35405 		if (!isNaN(n)) this.lookfrom.tilty = n;
35406 		if (a.length > 2) n = parseFloat(a[2]);
35407 		if (!isNaN(n)) this.lookfrom.tiltz = n;
35408 	}
35409 
35410 }
35411 //==========================================================================================
35412 //				viewdef$toString
35413 //==========================================================================================
35414 function viewdef$toString(dx,dy)
35415 {
35416 	var text,style,top,left;
35417 	
35418 	if (arguments.length == 0)
35419 	{
35420 		dx = 0;
35421 		dy = 0;
35422 	}
35423 
35424 	left = this.x + dx;
35425 	top = this.y + dy;
35426 	
35427 	style = 'position:absolute;left:' + Math.round(left) + 'px;top:' + Math.round(top) + 'px;';	
35428 	text = '&lt;canvas id="canvas' + this.index + '" height="' + Math.round(this.height) + '" width="' + Math.round(this.width) + '" style="' + style + '">Your Broweser does not support HTML5 Canvas&lt;/canvas>';
35429 	return text; 
35430 }
35431 
35432 //==================================================================================
35433 //				pdf_matrix3D$
35434 //==================================================================================
35435 function pdf_matrix3D$()
35436 {
35437 	var r;
35438 
35439 	this.v	= new Array(4);
35440 
35441 	for (r = 0; r &lt; 4; ++r)
35442 	{
35443 		this.v[r] = new Array(0,0,0,0);
35444 		this.v[r][r] = 1;
35445 	}
35446 
35447 	this.toString   = pdf_matrix3D$toString;
35448 	this.rotate	= pdf_matrix3D$rotate;
35449 	this.scale	= pdf_matrix3D$scale;
35450 	this.move	= pdf_matrix3D$move;
35451 	this.cross	= pdf_matrix3D$cross;
35452 }
35453 //==================================================================================
35454 //				pdf_matrix3D$cross
35455 //==================================================================================
35456 function pdf_matrix3D$cross(b)
35457 {
35458 	var temp,c,i,j,k;
35459 
35460 	c = new pdf_matrix3D$();
35461 	
35462 	temp = new Array();
35463 	for (i = 0; i &lt; 4; ++i)
35464 	{
35465 		for (k=0; k &lt; 4; ++k)
35466 		{
35467 			temp[k] = 0;
35468 			for (j = 0; j &lt; 4; ++j)
35469 				temp[k] = (this.v[i][j] * b.v[j][k]) + temp[k];
35470 		}
35471 		for (j = 0; j &lt; 4; ++j)
35472 			c.v[i][j] = temp[j];
35473 	}
35474 
35475 	for (i = 0; i &lt; 4; ++i)
35476 	{
35477 		for (j=0; j &lt; 4; ++j)
35478 		{
35479 			this.v[i][j] = c.v[i][j];
35480 		}
35481 	}
35482 }
35483 //==================================================================================
35484 //				pdf_matrix3D$move
35485 //==================================================================================
35486 function pdf_matrix3D$move(x,y,z)
35487 {
35488 	var temp,mov;
35489 
35490 	mov = new pdf_matrix3D$();
35491 
35492 	mov.v[3][0] =  x;
35493 	mov.v[3][1] =  y;
35494 	mov.v[3][2] =  z;
35495 
35496 	this.cross(mov);
35497 }
35498 //==================================================================================
35499 //				pdf_matrix3D$rotate
35500 //==================================================================================
35501 function pdf_matrix3D$rotate(angle,axis)
35502 {
35503 	var temp,mov,rot,m,cos,sin,one;
35504 	var leftHanded = false;
35505 
35506 	angle = angle % 360;
35507 //	if (Math.abs(angle) &lt; 0.001) return mat;
35508 
35509 	rot = new pdf_matrix3D$();
35510 	angle = (angle % 360);
35511 	if (leftHanded) angle = -angle		// clock-wise
35512 	
35513 	angle = angle / 180 * Math.PI;
35514 	cos		= Math.cos(angle);
35515 	sin		= Math.sin(angle);
35516 	
35517 	one = 1;
35518 	if (leftHanded) one = -1;
35519 	
35520 	switch (axis.toLowerCase())
35521 	{
35522 	case 'x':
35523 			rot.v[1][1] =  cos;
35524 			rot.v[1][2] = -sin * one;
35525 			rot.v[2][1] =  sin * one;
35526 			rot.v[2][2] =  cos;
35527 			break;
35528 	case 'y': 
35529 			rot.v[0][0] =  cos;
35530 			rot.v[0][2] = -sin * one;
35531 			rot.v[2][0] =  sin * one;
35532 			rot.v[2][2] =  cos;
35533 			break;
35534 	case 'z': 
35535 			rot.v[0][0] =  cos;
35536 			rot.v[0][1] = -sin * one;
35537 			rot.v[1][0] =  sin * one;
35538 			rot.v[1][1] =  cos;
35539 			break;
35540 	}
35541 	this.cross(rot);
35542 }
35543 //==================================================================================
35544 //				pdf_matrix3D$scale
35545 //==================================================================================
35546 function pdf_matrix3D$scale(sx,sy,sz)
35547 {
35548 	var mov,scl,m;
35549 
35550 	scl = new pdf_matrix3D$();
35551 	scl.v[0][0] = sx;
35552 	scl.v[1][1] = sy;
35553 	scl.v[2][2] = sz;
35554 	this.cross(scl);
35555 }
35556 //==================================================================================
35557 //				pdf_matrix3D$toString
35558 //==================================================================================
35559 function pdf_matrix3D$toString()
35560 {
35561 	var text,r,c ;
35562 	
35563 	text = "";
35564 
35565 	for (r=0; r &lt; 4; ++ r)
35566 	{
35567 		for (c=0; c &lt; 3; ++c)
35568 		{	
35569 			if (c > 0) text += ' ';
35570 			text += Math.round(this.v[r][c] * 1000) / 1000;
35571 		}
35572 		
35573 		text += ' ';
35574 	}
35575 	return text;	
35576 }
35577 
35578 //==================================================================================
35579 //					plot3d$
35580 //==================================================================================
35581 function plot3d$(owner)
35582 {
35583 
35584 	this.count = 0;
35585 
35586 	this.lookAt		= new Object();
35587 	this.lookFrom		= new Object();
35588 
35589 	this.lookFrom.x	= 0;
35590 	this.lookFrom.y	= 0;
35591 	this.lookFrom.z	= 10;
35592 	this.lookFrom.tiltx	= 0;
35593 	this.lookFrom.tilty	= 0;
35594 	this.lookFrom.tiltz	= 0;
35595 
35596 	this.view		= new Object();
35597 	this.view.scale		= 1;
35598 	this.view.xorigin	= 0;
35599 	this.view.yorigin	= 0;
35600 
35601 	this.owner		= null;	
35602 	this.font		= null;
35603 	this.symbolFont		= null;
35604 
35605 	if (arguments.length > 0) this.owner = owner;
35606 	
35607 //------------------- Methods (public) -----------------
35608 
35609 	this.to2D		= plot3d$to2D;
35610 	this.setLookAt		= plot3d$setLookAt;
35611 	this.setLookFrom	= plot3d$setLookFrom;
35612 	this.setTilt		= plot3d$setTilt;
35613 	this.rotateEye		= plot3d$rotateEye;
35614 	this.textToPoints	= plot3d$textToPoints;
35615 	this.symbolToPoints	= plot3d$symbolToPoints;
35616 
35617 	this.textWidth		= plot3d$textWidth;
35618 
35619 //------------------Methods (private) ------------------
35620 
35621 	this.cross		= plot3d$cross;
35622 	
35623 	this.move		= plot3d$move;
35624 	this.rotate		= plot3d$rotate;
35625 	
35626 	this.scale		= plot3d$scale;
35627 	this.transform		= plot3d$transform;
35628 
35629 	this.setEye		= plot3d$setEye;
35630 	this.setView		= plot3d$setView;
35631 
35632 	this.point		= plot3d$point;	
35633 	this.clear		= plot3d$clear;
35634 	this.symbols		= plot3d$symbols;
35635 
35636 	this.angle_		= plot3d$angle_;
35637 	this.angleCos_		= plot3d$angleCos_;
35638 	
35639 	this.viewEye		= plot3d$viewEye;	
35640 	
35641 //------------------------------------------------
35642 
35643 	this.screenDistance	= 3;
35644 
35645 	this.clear();
35646 }
35647 //==================================================================================
35648 //				graphic$rotateEye
35649 //==================================================================================
35650 function plot3d$rotateEye(ax,ay,az)
35651 {
35652 	this.tiltx += ax;
35653 	this.tiltx = this.tiltx % 360;
35654 	this.tilty += ay;
35655 	this.tilty = this.tilty % 360;
35656 	this.tiltz += az;
35657 	this.tiltz = this.tiltz % 360;
35658 
35659 	this.setTilt(this.tiltx,this.tilty,this.tiltz);
35660 }
35661 //==================================================================================
35662 //				plot3d$to2D
35663 //==================================================================================
35664 function plot3d$to2D(points)
35665 {
35666 	var i,p1,p2,p;
35667 
35668 //------------------------ 1 point -------------------
35669 
35670 	var a = typeof(points.length);
35671 	
35672 	if (typeof(points.length) != 'number')
35673 	{
35674 		p = this.viewEye(points,this.eye);
35675 		return p;
35676 	}    
35677 
35678 //------------------------- list of points -------------------
35679     
35680     p = new Array();
35681     
35682 	for (i=0; i &lt; points.length; ++i)
35683 	{
35684 		p[i] = this.viewEye(points[i],this.eye);
35685 	}
35686 
35687 	return p;	
35688 }
35689 //==================================================================
35690 //				plot3d$angleCos_
35691 //==================================================================
35692 function plot3d$angleCos_(A,B,C)
35693 {
35694 	if (Math.abs(A) &lt; 0.0001) return 0;
35695 	if (Math.abs(B) &lt; 0.0001) return 0;
35696 	
35697 	acos = (A*A + B*B - C*C) / (2 * A * B);
35698 	
35699 	dir = Math.acos(acos);
35700 	return dir;	
35701 }
35702 
35703 //======================================================================
35704 //			   plot3d$angle_
35705 //======================================================================
35706 function plot3d$angle_(x1,y1,x2,y2)
35707 {
35708 	var dir,dx,dy,ESP,d;
35709 	ESP = 0.00001;
35710 
35711 	dir = 0;
35712 	dx = x2 - x1;
35713 	dy = y2 - y1;
35714 	if (Math.abs(dx) >= ESP)
35715 	{
35716 	   d = dy / dx;
35717 	   dir = Math.atan(d);
35718 	   if (isNaN(dir)) dir = 0;
35719 	   if (Math.abs(dir) &lt; ESP) dir = 0;
35720 
35721 	   if (dx &lt; 0 && dy &lt;  0) dir = dir + Math.PI;
35722 	   if (dx &lt; 0 && dy >= 0) dir = dir + Math.PI;
35723 	}
35724 	else
35725 	{
35726 		dir = Math.PI / 2 * 3;
35727 		if (y2 > y1) dir = Math.PI / 2;
35728 		if (Math.abs(y2-y1) &lt; ESP) dir = 0;
35729 	}
35730 	
35731 	if (dir &lt; 0) dir = dir + (Math.PI * 2);
35732 	
35733 	return dir;
35734 }
35735 //==================================================================================
35736 //				plot3d$clear
35737 //==================================================================================
35738 function plot3d$clear()
35739 {
35740 
35741 	this.cx		= 0;
35742 	this.cy		= 0;
35743 	this.cz		= 0;
35744 	
35745 	this.tiltx	= 0;
35746 	this.tilty	= 0;
35747 	this.tiltz	= 0;
35748 		
35749 	this.mat	= new plot3dMatrix$();
35750 	this.eye	= new plot3dMatrix$();
35751 
35752 	this.setLookAt(0,0,0);
35753 	this.setLookFrom(0, 0, 100);
35754 	this.setTilt(0, 0, 0);
35755 }
35756 //==================================================================================
35757 //				plot3d$point
35758 //==================================================================================
35759 function plot3d$point(x,y,z)
35760 {
35761 	p = new Object();
35762 	p.x = parseFloat(x);
35763 	p.y = parseFloat(y);
35764 	p.z = parseFloat(z);
35765 	return p;
35766 }
35767 //==================================================================================
35768 //				plot3d$view
35769 //==================================================================================
35770 function plot3d$viewEye(point,matrix)
35771 {
35772 	var pnt,typ;
35773 	var i,j,t,value,p;
35774 		
35775 	t = new Array();
35776 	p = new Array();
35777 		
35778 	p[0] = point.x;
35779 	p[1] = point.y;
35780 	p[2] = point.z;
35781 	p[3] = 1;
35782 		
35783 	for (i =0; i &lt; 4; ++i)
35784 	{
35785 		t[i] = 0;
35786 
35787 		for (j=0; j &lt; 4; ++j)
35788 		{				
35789 			t[i] = p[j] * matrix.v[j][i] + t[i];
35790 		}		
35791 	}
35792 
35793 	pnt = this.transform(t[0],t[1],t[2]);
35794 	if (typeof(point.code) != 'undefined') pnt.code = point.code;
35795 	return pnt;
35796 	
35797 }
35798 //==================================================================================
35799 //				plot3d$setTilt
35800 //==================================================================================
35801 function plot3d$setTilt(xangle, yangle, zangle)
35802 {
35803 	this.lookFrom.tiltx = xangle % 360;
35804 	this.lookFrom.tilty = yangle % 360;
35805 	this.lookFrom.tiltz = zangle % 360;
35806 }
35807 
35808 //==================================================================================
35809 //				plot3d$setView
35810 //==================================================================================
35811 function plot3d$setView(width,height, radius)
35812 {
35813 	var scale,xscale,yscale;
35814 
35815 	if (radius &lt; 0.000001) radius = 1;
35816 	xscale = width / radius;
35817 	yscale = height / radius;
35818 	scale = xscale;
35819 	if (yscale &lt; xscale) scale = yscale;
35820  
35821 	this.view.scale = scale * 5;
35822 	this.view.xorigin = width / 2;;
35823 	this.view.yorigin = height / 2;
35824 }
35825 //==================================================================================
35826 //				plot$setEye
35827 //==================================================================================
35828 function plot3d$setEye()
35829 {
35830 	var x,y,z,alpha,beta,angle,dist;
35831 	var lefthanded,atan,btan,dir;
35832 	var ESP = 0.0001;
35833 	
35834 	lefthanded = true;
35835 			
35836 	this.eye = new plot3dMatrix$();
35837 		
35838 //------------------ Tilt -----------------
35839 	
35840 	this.cx = 0;
35841 	this.cy = 0;
35842 	this.cz = 0;
35843 
35844 	this.eye = this.move(this.eye,-this.lookAt.x,-this.lookAt.y,-this.lookAt.z);	
35845 
35846 	this.eye = this.rotate(this.eye,this.lookFrom.tiltx,'x');
35847 	this.eye = this.rotate(this.eye,this.lookFrom.tilty,'y');
35848 	this.eye = this.rotate(this.eye,this.lookFrom.tiltz,'z');
35849 
35850 //----------------------- Eye ------------------------
35851 
35852 	x = this.lookFrom.x;
35853 	y = this.lookFrom.y;
35854 	z = this.lookFrom.z;
35855 	
35856 	this.eye = this.move(this.eye,x,y,z);	
35857 
35858 	this.cx = 0;
35859 	this.cy = 0;
35860 	this.cz = 0;
35861 	
35862 	angle = 90;
35863 	this.eye = this.rotate(this.eye,angle,'x',lefthanded);
35864 
35865 	dir = Math.atan(y / x);	
35866 	if ((Math.abs(x) &lt; 0.0001) && (y >= 0 )) dir = Math.PI / 2;
35867 	if ((Math.abs(x) &lt; 0.0001) && (y &lt; 0 )) dir = Math.PI / 2 * 3;
35868 	
35869 	atan = dir;
35870     if (isNaN(dir)) dir = 0;		
35871 	alpha = dir * 180 / Math.PI;
35872 	this.eye = this.rotate(this.eye, alpha+90,'y',lefthanded);
35873 
35874 	dist = Math.sqrt(x*x + y*y);
35875 	beta = Math.atan(z / dist);
35876 	if ((Math.abs(dist) &lt; 0.0001) && (z >= 0)) dir = Math.PI / 2;
35877 	if ((Math.abs(dist) &lt; 0.0001) && (z &lt;  0)) dir = Math.PI / 2 * 3;
35878 
35879 	btan = beta;
35880 	beta = beta * 180 / Math.PI;
35881 	this.eye = this.rotate(this.eye,-beta,'x',lefthanded);
35882 
35883 	this.eye = this.scale(this.eye,1,1,-1);
35884 	
35885 	dist = this.screenDistance;
35886 	this.eye = this.scale(this.eye,dist,dist,1);
35887 }
35888 //==================================================================================
35889 //				plot3d$setLookAt
35890 //==================================================================================
35891 function plot3d$setLookAt(x,y,z)
35892 {
35893 
35894 	this.lookAt.x = parseFloat(x);
35895 	this.lookAt.y = parseFloat(y);
35896 	this.lookAt.z = parseFloat(z);
35897 
35898 	if (isNaN(this.lookAt.x)) this.lookAt.x = 0;
35899 	if (isNaN(this.lookAt.y)) this.lookAt.y = 0;
35900 	if (isNaN(this.lookAt.z)) this.lookAt.z = 0;
35901 
35902 }
35903 //==================================================================================
35904 //				plot3d$setLookFrom
35905 //==================================================================================
35906 function plot3d$setLookFrom(x,y,z,screenDistance)
35907 {
35908 
35909 	this.lookFrom.x = parseFloat(x);
35910 	this.lookFrom.y = parseFloat(y);
35911 	this.lookFrom.z = parseFloat(z);
35912 	
35913 	if (isNaN(this.lookFrom.x)) this.lookFrom.x = 0;
35914 	if (isNaN(this.lookFrom.y)) this.lookFrom.y = 0;
35915 	if (isNaN(this.lookFrom.z)) this.lookFrom.z = 0;
35916 
35917 	if (arguments.length > 3) this.screenDistance  = parseFloat(screenDistance);
35918 }
35919 //==================================================================================
35920 //				plot3d$setTilt
35921 //==================================================================================
35922 function plot3d$setTilt(x, y, z) {
35923 
35924 	this.lookFrom.tiltx = parseFloat(x);
35925 	this.lookFrom.tilty = parseFloat(y);
35926 	this.lookFrom.tiltz = parseFloat(z);
35927 
35928 	if (isNaN(this.lookFrom.tiltx)) this.lookFrom.tiltx = 0;
35929 	if (isNaN(this.lookFrom.tilty)) this.lookFrom.tilty = 0;
35930 	if (isNaN(this.lookFrom.tiltz)) this.lookFrom.tiltz = 0;
35931 }
35932 
35933 //==================================================================================
35934 //				plot3d$transform
35935 //==================================================================================
35936 function plot3d$transform(x,y,z)
35937 {
35938 	var p;
35939 	
35940 	p = new Object();
35941 	p.x = 0;
35942 	p.y = 0;
35943 	
35944 	if (Math.abs(z) > 0.0000001) 
35945 	{
35946 		p.x = x / z;
35947 		p.y = y / z;
35948 	}
35949 		
35950 	p.x = (p.x * this.view.scale) + this.view.xorigin;
35951 	p.y = (p.y * this.view.scale) + this.view.yorigin;
35952 		
35953 	return p;
35954 }
35955 //==================================================================================
35956 //				plot3d$cross
35957 //==================================================================================
35958 function plot3d$cross(a,b)
35959 {
35960 	var temp,c,i,j,k;
35961 
35962 	c = new plot3dMatrix$();
35963 	
35964 	temp = new Array();
35965 	for (i = 0; i &lt; 4; ++i)
35966 	{
35967 		for (k=0; k &lt; 4; ++k)
35968 		{
35969 			temp[k] = 0;
35970 			for (j = 0; j &lt; 4; ++j)
35971 				temp[k] = (a.v[i][j] * b.v[j][k]) + temp[k];
35972 		}
35973 		for (j = 0; j &lt; 4; ++j)
35974 			c.v[i][j] = temp[j];
35975 	}
35976 	
35977 	return c;
35978 }
35979 //==================================================================================
35980 //				plot3d$move
35981 //==================================================================================
35982 function plot3d$move(mat,x,y,z)
35983 {
35984 	var temp,mov;
35985 
35986 	mov = new plot3dMatrix$();
35987 
35988 	mov.v[3][0] =  x;
35989 	mov.v[3][1] =  y;
35990 	mov.v[3][2] =  z;
35991 
35992 	mov = this.cross(mat,mov);
35993 	return mov
35994 }
35995 //==================================================================================
35996 //				plot3d$rotate
35997 //==================================================================================
35998 function plot3d$rotate(mat,angle,axis,leftHanded)
35999 {
36000 	var temp,mov,rot,m,cos,sin,one;
36001 
36002 	angle = angle % 360;
36003 //	if (Math.abs(angle) &lt; 0.001) return mat;
36004 
36005 	mov = new plot3dMatrix$();
36006 	rot = new plot3dMatrix$();
36007 
36008 	mov.v[3][0] = -this.cx;
36009 	mov.v[3][1] = -this.cy;
36010 	mov.v[3][2] = -this.cz;
36011 
36012 	m = this.cross(mat,mov);
36013 
36014 	angle = (angle % 360);
36015 	
36016 	if (leftHanded) angle = -angle		// clock-wise
36017 	
36018 	angle = angle / 180 * Math.PI;
36019 	cos		= Math.cos(angle);
36020 	sin		= Math.sin(angle);
36021 	
36022 	one = 1;
36023 	if (leftHanded) one = -1;
36024 	
36025 	switch (axis.toLowerCase())
36026 	{
36027 	case 'x':
36028 			rot.v[1][1] =  cos;
36029 			rot.v[1][2] = -sin * one;
36030 			rot.v[2][1] =  sin * one;
36031 			rot.v[2][2] =  cos;
36032 			break;
36033 	case 'y': 
36034 			rot.v[0][0] =  cos;
36035 			rot.v[0][2] = -sin * one;
36036 			rot.v[2][0] =  sin * one;
36037 			rot.v[2][2] =  cos;
36038 			break;
36039 	case 'z': 
36040 			rot.v[0][0] =  cos;
36041 			rot.v[0][1] = -sin * one;
36042 			rot.v[1][0] =  sin * one;
36043 			rot.v[1][1] =  cos;
36044 			break;
36045 	}
36046 	
36047 	m = this.cross(mat,rot);
36048 
36049 
36050 	mov.v[3][0] = this.cx;
36051 	mov.v[3][1] = this.cy;
36052 	mov.v[3][2] = this.cz;
36053 
36054 	m = this.cross(m,mov);
36055 	return m;
36056 }
36057 //==================================================================================
36058 //				plot3d$scale
36059 //==================================================================================
36060 function plot3d$scale(mat,sx,sy,sz)
36061 {
36062 	var mov,scl,m;
36063 
36064 	mov = new plot3dMatrix$();
36065 	scl = new plot3dMatrix$();
36066 
36067 	mov.v[3][0] = -this.cx;
36068 	mov.v[3][1] = -this.cy;
36069 	mov.v[3][2] = -this.cz;
36070 
36071 	m = this.cross(mat,mov);
36072 	
36073 	scl.v[0][0] = sx;
36074 	scl.v[1][1] = sy;
36075 	scl.v[2][2] = sz;
36076 
36077 	m = this.cross(m,scl);
36078 
36079 	mov.v[3][0] = this.cx;
36080 	mov.v[3][1] = this.cy;
36081 	mov.v[3][2] = this.cz;
36082 
36083 	m = this.cross(m,mov);
36084 	return m;
36085 }
36086 
36087 //======================================================================================
36088 //				plot3d$arialFont
36089 //======================================================================================
36090 function plot3d$arialFont()
36091 {
36092 	this.scale   = 0.047619047619047616;
36093 	this.xorigin = 65;
36094 	this.yorigin = 90;
36095 	this.widths  = 'SCIPOSUCHHKSCSCSOFOOPONOONCCQSQMVQOPONNPOAKOMQOQOQOOOOQUOQOHOHQSCMMMMMIMLCGLAWLNMMILILMQLNLFAFS';
36096 	this.heights = 'VVHa^VVGaaMSFACaVVVVVVVVVVJMSGSVVVVVVVVVVVVVVVVVVXVVVVVVVVVaYaOAFOVOVOVVVW^VVOOOVVOOVOOOOVOaaaG';
36097 	this.chars   = [ /* blank */ '',
36098  /* ! */ 'BBBP +BUAVBWCVBU',
36099  /* " */ 'ABAI +IBII',
36100  /* # */ 'I>B^ +O>H^ +BKPK +AQOQ',
36101  /* $ */ 'F>F[ +J>J[ +OEMCJBFBCCAEAGBICJEKKMMNNOOQOTMVJWFWCVAT',
36102  /* % */ 'SBAW +FBHDHFGHEICIAGAEBCDBFBHCKDNDQCSB +OPMQLSLUNWPWRVSTSRQPOP',
36103  /* & */ 'UKUJTISIRJQLOQMTKVIWEWCVBUASAQBOCNJJKILGLEKCIBGCFEFGGJIMNTPVRWUKUJTISIRJQLOQMTKVIWEWCVBUASAQBOCNJJKILGLEKCIBGCFEFGGJIMNTPVRWTWUVUU',
36104  /* ' */ 'BDACBBCCCEBGAH',
36105  /* ( */ 'H>F@DCBGALAPBUDYF\\H^',
36106  /* ) */ 'A>C@ECGGHLHPGUEYC\\A^',
36107  /* * */ 'FHFT +AKKQ +KKAQ',
36108  /* + */ 'JEJW +ANSN',
36109  /* , */ 'CSBTASBRCSCUAW',
36110  /* - */ 'ANSN',
36111  /* . */ 'BRASBTCSBR',
36112  /* / */ 'S>A^',
36113  /* 0 */ 'GBDCBFAKANBSDVGWIWLVNSONOKNFLCIBGB',
36114  /* 1 */ 'AFCEFBFW',
36115  /* 2 */ 'BGBFCDDCFBJBLCMDNFNHMJKMAWOW',
36116  /* 3 */ 'CBNBHJKJMKNLOOOQNTLVIWFWCVBUAS',
36117  /* 4 */ 'KBAPPP +KBKW',
36118  /* 5 */ 'MBCBBKCJFIIILJNLOOOQNTLVIWFWCVBUAS',
36119  /* 6 */ 'MELCIBGBDCBFAKAPBTDVGWHWKVMTNQNPMMKKHJGJDKBMAP',
36120  /* 7 */ 'OBEW +ABOB',
36121  /* 8 */ 'FBCCBEBGCIEJIKLLNNOPOSNUMVJWFWCVBUASAPBNDLGKKJMINGNEMCJBFB',
36122  /* 9 */ 'NIMLKNHOGODNBLAIAHBEDCGBHBKCMENINNMSKVHWFWCVBT',
36123  /* : */ 'BKALBMCLBK +BRASBTCSBR',
36124  /* ; */ 'BKALBMCLBK +CSBTASBRCSCUAW',
36125  /* &lt; */ 'QEANQW',
36126  /* = */ 'AKSK +AQSQ',
36127  /* > */ 'AEQNAW',
36128  /* ? */ 'AGAFBDCCEBIBKCLDMFMHLJKKGMGP +GUFVGWHVGU',
36129  /* @ */ 'PJOHMGJGHHGIFLFOGQIRLRNQOO +JGHIGLGOHQIR +PGOOOQQRSRUPVMVKUHTFPJOHMGJGHHGIFLFOGQIRLRNQOO +JGHIGLGOHQIR +PGOOOQQRSRUPVMVKUHTFRDPCMBJBGCEDCFBHAKANBQCSEUGVJWMWPVRUST +QGPOPQQR',
36130  /* A */ 'IBAW +IBQW +DPNP',
36131  /* B */ 'ABAW +ABJBMCNDOFOHNJMKJL +ALJLMMNNOPOSNUMVJWAW',
36132  /* C */ 'PGOEMCKBGBECCEBGAJAOBRCTEVGWKWMVOTPR',
36133  /* D */ 'ABAW +ABHBKCMENGOJOONRMTKVHWAW',
36134  /* E */ 'ABAW +ABNB +ALIL +AWNW',
36135  /* F */ 'ABAW +ABNB +ALIL',
36136  /* G */ 'PGOEMCKBGBECCEBGAJAOBRCTEVGWKWMVOTPRPO +KOPO',
36137  /* H */ 'ABAW +OBOW +ALOL',
36138  /* I */ 'ABAW',
36139  /* J */ 'KBKRJUIVGWEWCVBUARAP',
36140  /* K */ 'ABAW +OBAP +FKOW',
36141  /* L */ 'ABAW +AWMW',
36142  /* M */ 'ABAW +ABIW +QBIW +QBQW',
36143  /* N */ 'ABAW +ABOW +OBOW',
36144  /* O */ 'GBECCEBGAJAOBRCTEVGWKWMVOTPRQOQJPGOEMCKBGB',
36145  /* P */ 'ABAW +ABJBMCNDOFOINKMLJMAM',
36146  /* Q */ 'GBECCEBGAJAOBRCTEVGWKWMVOTPRQOQJPGOEMCKBGB +JSPY',
36147  /* R */ 'ABAW +ABJBMCNDOFOHNJMKJLAL +HLOW',
36148  /* S */ 'OEMCJBFBCCAEAGBICJEKKMMNNOOQOTMVJWFWCVAT',
36149  /* T */ 'HBHW +ABOB',
36150  /* U */ 'ABAQBTDVGWIWLVNTOQOB',
36151  /* V */ 'ABIW +QBIW',
36152  /* W */ 'ABFW +KBFW +KBPW +UBPW',
36153  /* X */ 'ABOW +OBAW',
36154  /* Y */ 'ABILIW +QBIL',
36155  /* Z */ 'OBAW +ABOB +AWOW',
36156  /* [ */ 'A>A^ +B>B^ +A>H> +A^H^',
36157  /* \ */ 'ABOZ',
36158  /* ] */ 'G>G^ +H>H^ +A>H> +A^H^',
36159  /* ^ */ 'I@AN +I@QN',
36160  /* _ */ 'A^S^',
36161  /* ` */ 'CGAIAKBLCKBJAK',
36162  /* a */ 'MIMW +MLKJIIFIDJBLAOAQBTDVFWIWKVMT',
36163  /* b */ 'ABAW +ALCJEIHIJJLLMOMQLTJVHWEWCVAT',
36164  /* c */ 'MLKJIIFIDJBLAOAQBTDVFWIWKVMT',
36165  /* d */ 'MBMW +MLKJIIFIDJBLAOAQBTDVFWIWKVMT',
36166  /* e */ 'AOMOMMLKKJIIFIDJBLAOAQBTDVFWIWKVMT',
36167  /* f */ 'IBGBECDFDW +AIHI',
36168  /* g */ 'MIMYL\\K]I^F^D] +MLKJIIFIDJBLAOAQBTDVFWIWKVMT',
36169  /* h */ 'ABAW +AMDJFIIIKJLMLW',
36170  /* i */ 'ABBCCBBAAB +BIBW',
36171  /* j */ 'EBFCGBFAEB +FIFZE]C^A^',
36172  /* k */ 'ABAW +KIAS +EOLW',
36173  /* l */ 'ABAW',
36174  /* m */ 'AIAW +AMDJFIIIKJLMLW +LMOJQITIVJWMWW',
36175  /* n */ 'AIAW +AMDJFIIIKJLMLW',
36176  /* o */ 'FIDJBLAOAQBTDVFWIWKVMTNQNOMLKJIIFI',
36177  /* p */ 'AIA^ +ALCJEIHIJJLLMOMQLTJVHWEWCVAT',
36178  /* q */ 'MIM^ +MLKJIIFIDJBLAOAQBTDVFWIWKVMT',
36179  /* r */ 'AIAW +AOBLDJFIII',
36180  /* s */ 'LLKJHIEIBJALBNDOIPKQLSLTKVHWEWBVAT',
36181  /* t */ 'DBDSEVGWIW +AIHI',
36182  /* u */ 'AIASBVDWGWIVLS +LILW',
36183  /* v */ 'AIGW +MIGW',
36184  /* w */ 'AIEW +IIEW +IIMW +QIMW',
36185  /* x */ 'AILW +LIAW',
36186  /* y */ 'BIHW +NIHWF[D]B^A^',
36187  /* z */ 'LIAW +AILI +AWLW',
36188  /* { */ 'F>D?C@BBBDCFDGEIEKCM +D?CACCDEEFFHFJELANEPFRFTEVDWCYC[D] +COEQF>D?C@BBBDCFDGEIEKCM +D?CACCDEEFFHFJELANEPFRFTEVDWCYC[D] +COEQESDUCVBXBZC\\D]F^',
36189  /* | */ 'A>A^',
36190  /* } */ 'A>C?D@EBEDDFCGBIBKDM +C?DADCCEBFAHAJBLFNBPARATBVCWDYD[C] +DOBQA>C?D@EBEDDFCGBIBKDM +C?DADCCEBFAHAJBLFNBPARATBVCWDYD[C] +DOBQBSCUDVEXEZD\\C]A^',
36191  /* ~ */ 'AQAOBLDKFKHLLONPPPROSM +AOBMDLFLHMLPNQPQRPSMSK'];
36192 }
36193 //======================================================================================
36194 //				plot3d$symbols
36195 //======================================================================================
36196 function plot3d$symbols()
36197 {
36198 	var sym;
36199 	
36200 	this.scale   = 1 / 100;
36201 	this.xorigin = 50;
36202 	this.yorigin = 50;
36203 
36204 	this.symbols = new Array();
36205 	
36206 	sym = new Object();
36207 	sym.width = 100;
36208 	sym.height = 100;
36209 	sym.def = "0:0:M,0:100:L,100:100:L,100:0:L,0:0:L";
36210 	this.symbols['box'] = sym;
36211 
36212 	sym = new Object();
36213 	sym.width = 100;
36214 	sym.height = 100;
36215 	sym.def = "0:0:M,50:100:L,100:0:L,0:0:L";
36216 	this.symbols['triangle'] = sym;
36217 	
36218 	sym = new Object();
36219 	sym.width = 100;
36220 	sym.height = 60;
36221 	sym.def = "0:20:M,0:80:L,100:50:L,0:20:L";
36222 	this.symbols['arrow'] = sym;
36223 
36224 }
36225 //======================================================================================
36226 //				plot3d$textWidth
36227 //======================================================================================
36228 function plot3d$textWidth(text,size)
36229 {
36230 	var dx,c,scale,width,move,weight;
36231 	var i,j,cdef,xorg,yorg;
36232 	
36233 	if (this.font == null) this.font = new plot3d$arialFont();
36234 
36235 	scale = this.font.scale * size
36236 	xorg = 0;
36237   
36238 	for (i=0; i &lt; text.length; ++i)
36239 	{
36240 		c = text.charCodeAt(i);
36241 		c = c - 32;
36242 
36243 		if (c &lt; 0) continue;
36244 		if (c >= this.font.chars.length) continue;
36245 
36246 		width = this.font.widths.charCodeAt(c);
36247 		width = (width - this.font.xorigin + 5) * scale;
36248 		
36249 		xorg += width;
36250 	}
36251 	return xorg;
36252 }
36253 //======================================================================================
36254 //				plot3d$textToPoints
36255 //======================================================================================
36256 function plot3d$textToPoints(origin,text,size)
36257 {
36258 	var dx,c,scale,width,move,weight;
36259 	var i,j,cdef,xorg,yorg,points;
36260 	var x,y,p;
36261 	
36262 	xorg = origin.x;
36263 	yorg = origin.y;
36264 
36265 	if (this.font == null) this.font = new plot3d$arialFont();
36266 
36267 	scale = this.font.scale * size;
36268   
36269 	points = new Array();
36270 
36271 	for (i=0; i &lt; text.length; ++i)
36272 	{
36273 		c = text.charCodeAt(i);
36274 		c = c - 32;
36275 
36276 		if (c &lt; 0) continue;
36277 		if (c >= this.font.chars.length) continue;
36278 
36279 		width = this.font.widths.charCodeAt(c);
36280 		width = (width - this.font.xorigin + 5) * scale;
36281 		
36282 		cdef = this.font.chars[c];
36283 		move = true;
36284 		for (j=0; j &lt; cdef.length; j += 2)
36285 		{
36286 			x = cdef.charCodeAt(j);
36287 			y = cdef.charCodeAt(j+1);
36288 
36289 			if (x == 32)
36290 			{
36291 				move = true;
36292 				continue;
36293 			}
36294 			
36295 			p = new Object();
36296 			p.x = ((x - this.font.xorigin) * scale) + xorg;
36297 			p.y = ((this.font.yorigin - y) * scale) + yorg;
36298 			p.z = origin.z;
36299 			p.code = 'L';
36300 			if (move) p.code = "M";
36301 			points[points.length] = p;
36302 			move = false;				
36303 		}
36304 
36305 		xorg += width;
36306 	}
36307 
36308 	return points;
36309 }
36310 //======================================================================================
36311 //				plot3d$symbolToPoints
36312 //======================================================================================
36313 function plot3d$symbolToPoints(origin,name,size,angle,just)
36314 {
36315 	var dx,c,scale,width,move,weight;
36316 	var i,j,cdef,xorg,yorg,points;
36317 	var x,y,dir,cos,sin,tx,ty;
36318 	var list,code,a,b,dx,dy,sym,p;
36319 	
36320 	xorg = origin.x;
36321 	yorg = origin.y;
36322 
36323 	if (this.symbolFont == null) this.symbolFont = new plot3d$symbols();
36324 
36325 	scale = this.symbolFont.scale * size;
36326 
36327 	dx = 0;
36328 
36329 	dir = angle / 180 * Math.PI;
36330 	cos = Math.cos(dir);
36331 	sin = Math.sin(dir);
36332 
36333 	points = new Array();
36334 	
36335 	name = '' + name;
36336 	name =  name.toLowerCase();
36337 	sym = this.symbolFont.symbols[name];
36338 	if (! sym) return points;	
36339 
36340 	dx = 0;
36341 	dy = 0;
36342 	a = just.substr(0,1);
36343 	b = just.substr(1,1);
36344 	if (a == 'L') dy = - sym.height / 2 * scale;
36345 	if (a == 'C') dy = 0;
36346 	if (a == 'U') dy = sym.height / 2 * scale;
36347 
36348 	if (b == 'L') dx = - sym.width / 2 * scale;
36349 	if (b == 'C') dx = 0;
36350 	if (b == 'R') dx = sym.width / 2 * scale;
36351 
36352 	list = sym.def.split(',');
36353 
36354 	for (i=0; i &lt; list.length; ++i)
36355 	{
36356 		a = list[i].split(':');
36357 		if (a.length != 3) continue;
36358 	
36359 		x = parseInt(a[0]);
36360 		y = parseInt(a[1]);
36361 		code = a[2];
36362 
36363 		tx = ((x - this.symbolFont.xorigin) * scale);
36364 		ty = ((y - this.symbolFont.yorigin) * scale);
36365 			
36366 		p = new Object();
36367 		p.x = ((cos * tx) - (sin * ty)) + xorg + dx;
36368 		p.y = ((sin * tx) + (cos * ty)) + yorg + dy;	
36369 		p.z = origin.z;
36370 		p.code = code;
36371 					
36372 		points[points.length] = p;
36373 	}
36374 
36375 	return points;
36376 }
36377 //==================================================================================
36378 //				plot3dMatrix$
36379 //==================================================================================
36380 function plot3dMatrix$()
36381 {
36382 	var r;
36383 
36384 	this.v	= new Array();
36385 
36386 	for (r = 0; r &lt; 4; ++r)
36387 	{
36388 		this.v[r] = new Array(0,0,0,0);
36389 		this.v[r][r] = 1;
36390 	}
36391 
36392 	this.toString = plot3dMatrix$toString;
36393 	
36394 }
36395 //==================================================================================
36396 //				plot3dMatrix$toString
36397 //==================================================================================
36398 function plot3dMatrix$toString()
36399 {
36400 	var text,r,c ;
36401 	
36402 	text = "&lt;matrix>\r\n";
36403 
36404 	for (r=0; r &lt; 4; ++ r)
36405 	{
36406 		for (c=0; c &lt; 4; ++c)
36407 		{	
36408 			if (c > 0) text += ' ';
36409 			text += Math.round(this.v[r][c] * 1000) / 1000;
36410 		}
36411 		
36412 		text += "\r\n";
36413 	}
36414 	
36415 	text += "&lt;/matrix>";
36416 	
36417 	return text;		
36418 }
36419 &lt;/script>
36420 &lt;/html>
36421 </body></html>