<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Create Network Model 3D</title>
<script language=javascript>

var plot;
var cx,cy,cz;
var pipeIndex = 0;
var http = null;

//==================================================================================
//								execute
//==================================================================================
function execute()
{
	var m;

	x1 = 100;
	y1 = 80;
	x2 = 360;
	y2 = 260;

	cx = (x1 + x2) / 2;
	cy = (y1 + y2) / 2;
	cz = -15;
	
	plot = new plot$();
	
	text = '';
//	text += pipe(0,0,0,0,25,25);
//	text += pipe(0,25,25,0,25,50);


	text = '';
	text += manhole(120,100,14,1);
	text += manhole(150,110,16,2);
	text += manhole(300,130,23,3);
	text += manhole(160,150,10,4);
	text += manhole(200,160,8,8);
	text += manhole(240,180,6,6);
	text += manhole(155,200,6,7);
	text += manhole(210,230,6,8);

	text += pipe(100,100,-10,120,100,-12,12);
	text += pipe(120,100,-12,150,110,-14,12);
	text += pipe(150,110,-14,200,110,-20,24);

	text += pipe(150,110,-10,160,150,-8,6);
	text += pipe(160,150,-8,155,200,-7,6);
	text += pipe(155,200,-7,175,230,-5,6);
	text += pipe(155,200,-6,100,260,-5,6);

	text += pipe(200,110,-20,300,130,-23,24);
	text += pipe(300,130,-10,340,160,-11,12);

	text += pipe(160,150,-8,200,160,-5,6);
	text += pipe(200,160,-5,240,180,-4,6);
	text += pipe(240,180,-4,280,170,-3,6);

	text += pipe(200,160,-5,210,230,-4,6);
	text += pipe(210,230,-4,240,240,-4,6);

	text += pipe(120,100,-8,100,160,-14,12);

	
	dx = 10;
	savex = x1;
	
	index = 0;
	
	while (x1 <= x2) 
	{
		index += 1;
		text += line(x1,y1,x1,y2,index);
		x1 += dx;	
	}

	x1 = savex;
	while (y1 <= y2) 
	{
		index += 1;
		text += line(x1,y1,x2,y1,index);
		y1 += dx;	
	}

	template = getTemplate();
	image = template.replace(/\|nodes\|/g,text);

	var ele;
	ele = document.getElementById('myData');
	ele.value = image;
}
//==================================================================
//					readUrl
//==================================================================
function readUrl(filename)
{ 

try
{
		httpInit_();
		http.open("GET",filename,false);
	   	http.send();
		if (http.status == 200) return http.responseText;
		return "";
}
catch (e) { return (""); }
}
//==========================================================================================
//                                   httpInit_
//==========================================================================================
function httpInit_()
{
	if (http != null) return http;

	try 
	{ 
		http = new XMLHttpRequest(); 
		return http; 
	} 
		catch (e) {};

	try
	{ 
		http = new ActiveXObject("Microsoft.XMLHTTP"); 
		return http; 
	} 
		catch (e) {};
		
	try 
	{ 
		http = new ActiveXObject("Msxml2.XMLHTTP.6.0"); 
		return http; 
		} 
		catch (e) {};
	try 
	{ 
		http = new ActiveXObject("Msxml2.XMLHTTP.3.0"); 
		return http; 
	} 
		catch (e) {};
	try 
	{ 
		http = new ActiveXObject("Msxml2.XMLHTTP"); 
		return http; 
	} 
		catch (e) {};
	try
	{ 
		http = window.createRequest(); 
		return http; 
	} 
		catch (e) {};

	alert("This browser does not support XMLHttpRequest");
}
//==================================================================================
//								viewCode
//==================================================================================
function viewCode()
{
	var ele;
	ele = document.getElementById('myData');
	ele.value = readUrl('Sample_DAE_maker.htm');
}
//==================================================================================
//								manhole
//==================================================================================
function manhole(x,y,depth,index)
{
	var dx,dy,dz,text;
	var len,ydir,zdir;
	
	m = new plotMatrix$();
	m = plot.scale(m,1 / 24,1 / 24,depth / 12);

	m.v[0][3] =  x - cx;
	m.v[1][3] =  y - cy;
	m.v[2][3] =  -(depth + cz) ;

//	window.clipboardData.setData("TEXT",m.toString());

    text = '<node name="manhole' + index + '">\r\n'
	text += m.toString() + '\r\n';
	text += ' <instance_geometry url="#IDB2">\r\n';
	text += ' <bind_material>\r\n';
	text += ' <technique_common>\r\n';
	text += ' <instance_material symbol="Material3" target="#ID3">\r\n';
	text += ' <bind_vertex_input semantic="UVSET0" input_semantic="TEXCOORD" input_set="0" />\r\n';
	text += ' </instance_material>\r\n';
	text += ' </technique_common>\r\n';
	text += ' </bind_material>\r\n';
	text += ' </instance_geometry>\r\n';
	text += '</node>\r\n';

	return text;
}

//==================================================================================
//								pipe
//==================================================================================
function pipe(x1,y1,z1,x2,y2,z2,size)
{
	var dx,dy,dz,text;
	var len,ydir,zdir;
	var A,B,C;
	
	x1 = x1 - cx;
	y1 = y1 - cy;
	z1 = z1 - cz;

	x2 = x2 - cx;
	y2 = y2 - cy;
	z2 = z2 - cz;
	
	
	dx = x2 - x1;
	dy = y2 - y1;
	dz = z2 - z1;
	
	C = Math.abs(dz);
	B = Math.sqrt(dx*dx + dy*dy);
	A = Math.sqrt(dx*dx + dy*dy + dz * dz);

	len = A;
	
	ydir = plot.angle_(x1,y1,x2,y2);			
	zdir = plot.angleCos_(A,B,C);		

	ydir = ydir * 180 / Math.PI;
	zdir = zdir * 180 / Math.PI;
	if (dz > 0) zdir = - zdir;

	scale = 1;
	if (size == 6) scale = 0.5;
	if (size == 10) scale = 0.8;
	if (size == 12) scale = 1;
	if (size == 24) scale = 2;


	m = new plotMatrix$();
	m = plot.rotate(m,ydir,'z');
	m = plot.rotate(m,zdir,'y');	
	m = plot.scale(m,len,scale,scale);

	m.v[0][3] =  x1;
	m.v[1][3] =  y1;
	m.v[2][3] =  z1;

//	window.clipboardData.setData("TEXT",m.toString());

	pipeIndex += 1;
    text = '<node name="pipe' + pipeIndex + '">\r\n'
	text += m.toString() + '\r\n';
	text += ' <instance_geometry url="#IDA2">\r\n';
	text += ' <bind_material>\r\n';
	text += ' <technique_common>\r\n';
	text += ' <instance_material symbol="Material3" target="#ID3">\r\n';
	text += ' <bind_vertex_input semantic="UVSET0" input_semantic="TEXCOORD" input_set="0" />\r\n';
	text += ' </instance_material>\r\n';
	text += ' </technique_common>\r\n';
	text += ' </bind_material>\r\n';
	text += ' </instance_geometry>\r\n';
	text += '</node>\r\n';

	return text;
}
//==================================================================================
//								line
//==================================================================================
function line(x1,y1,x2,y2,index)
{
	var dx,dy,dz,text;
	var len,ydir,zdir,m;

	x1 = x1 - cx;
	y1 = y1 - cy;

	x2 = x2 - cx;
	y2 = y2 - cy;	
	
	dx = x2 - x1;
	dy = y2 - y1;
	len = Math.sqrt(dx*dx + dy*dy);
		
	m = new plotMatrix$();
	if (dx > dy)
		m = plot.scale(m,len,0.2,0.2);
	else m = plot.scale(m,0.2,len,0.2);

	m.v[0][3] =  x1;
	m.v[1][3] =  y1;
	m.v[2][3] =  0-cz;

//	window.clipboardData.setData("TEXT",m.toString());

    text = '<node name="ground' + index + '">\r\n'
	text += m.toString() + '\r\n';
	text += ' <instance_geometry url="#IDA2">\r\n';
	text += ' <bind_material>\r\n';
	text += ' <technique_common>\r\n';
	text += ' <instance_material symbol="Material4" target="#ID3">\r\n';
	text += ' <bind_vertex_input semantic="UVSET0" input_semantic="TEXCOORD" input_set="0" />\r\n';
	text += ' </instance_material>\r\n';
	text += ' </technique_common>\r\n';
	text += ' </bind_material>\r\n';
	text += ' </instance_geometry>\r\n';
	text += '</node>\r\n';

	return text;
}
//==================================================================================
//								plot$
//==================================================================================
function plot$()
{

	this.view			= new Object();
	this.lookAt			= new Object();
	this.lookFrom		= new Object();
	this.range 			= new Object();

	this.view 			= new Object();
	this.view.xscale	= 1;
	this.view.yscale	= 1;
	this.view.xorigin	= 0;
	this.view.yorigin	= 0;
	
//------------------- Methods -----------------------

	this.cross			= plot$cross;
	this.clip			= plot$clip;
	this.code			= plot$code;
	
	this.move			= plot$move;
	this.rotate			= plot$rotate;
	this.scale			= plot$scale;
	this.transform		= plot$transform;

	this.setLookAt		= plot$setLookAt;
	this.setLookFrom	= plot$setLookFrom;
	this.setEye			= plot$setEye;

	this.setRange		= plot$setRange;
	this.setRangePoint	= plot$setRangePoint;

	this.addBox			= plot$addBox;
	this.addLine		= plot$addLine;
	this.point			= plot$point;
	
	this.clear			= plot$clear;
	this.toCsv			= plot$toCsv;
	this.toCsvLine_		= plot$toCsvLine_;

	this.flush			= plot$flush;
	this.flushAdd_		= plot$flushAdd_;
	this.flushLine_		= plot$flushLine_;

	this.angle_			= plot$angle_;
	this.angleCos_			= plot$angleCos_;
		
//------------------------------------------------

	this.clear();

}

//==================================================================
//							plot$angleCos_
//==================================================================
function plot$angleCos_(A,B,C)
{
	if (Math.abs(A) < 0.0001) return 0;
	if (Math.abs(B) < 0.0001) return 0;
	
	acos = (A*A + B*B - C*C) / (2 * A * B);
	
	dir = Math.acos(acos);
	return dir;	
}

//======================================================================
//			   plot$angle_
//======================================================================
function plot$angle_(x1,y1,x2,y2)
{
	var dir,dx,dy,ESP;
	ESP = 0.00001

	dir = 0;
	dx = x2 - x1;
	dy = y2 - y1;
	if (Math.abs(dx) >= ESP)
	{
	   d = dy / dx;
	   dir = Math.atan(d);
	   if (isNaN(dir)) dir = 0;
	   if (Math.abs(dir) < ESP) dir = 0;

	   if (dx < 0 && dy < 0) dir = dir + Math.PI;
	   if (dx < 0 && dy >= 0) dir = dir + Math.PI;
	}
	else
	{
		dir = Math.PI / 2 * 3;
		if (y2 > y1) dir = Math.PI / 2;
		if (Math.abs(y2-y1) < ESP) dir = 0;
	}

	return dir;
}
//==================================================================================
//								plot$toCsv
//==================================================================================
function plot$toCsv()
{
	var cx,cy,cz;
	var i,text;

	if (this.range.count = 0) return "";
	cx = (this.range.xmax + this.range.xmin) / 2;
	cy = (this.range.ymax + this.range.ymin) / 2;
	cz = (this.range.zmax + this.range.zmin) / 2;

	this.setLookAt(cx,cy,cz);
	this.setLookFrom(cx+10,cy+10,cz+10);

	this.flush();

	text = "";
	for (i=0; i < this.data.lines.length; ++i)
	{	
		if (i > 0) text += '\r\n';
		text += this.toCsvLine_(this.data.lines[i]);
	}
	
	return text;
}
//==================================================================================
//								plot$toCsvLine_
//==================================================================================
function plot$toCsvLine_(line)
{
	var text,i;

	text = '';
	for (i=0; i < line.length; ++i)
	{
		if (i > 0) text += ',';
		text += line[i].x + ':' + line[i].y;
	}

	return text;	
}
//==================================================================================
//								plot$clear
//==================================================================================
function plot$clear()
{
	this.points			= new Array();
	this.lines			= new Array();

	this.cx				= 0;
	this.cy				= 0;
	this.cz				= 0;
	
	this.range.count 	= 0;
	this.range.xmin  	= 1.0e128;
	this.range.ymin  	= 1.0e128;
	this.range.zmin  	= 1.0e128;

	this.range.xmax  	= -1.0e128;
	this.range.ymax  	= -1.0e128;
	this.range.zmax  	= -1.0e128;
	
	this.mat			= new plotMatrix$();
	this.eye			= new plotMatrix$();

	this.setLookAt(0,0,0);
	this.setLookFrom(10,10,10);

}
//==================================================================================
//								plot$point
//==================================================================================
function plot$point(x,y,z)
{
	p = new Object();
	p.x = parseFloat(x);
	p.y = parseFloat(y);
	p.z = parseFloat(z);
	return p;
}
//==================================================================================
//								plot$setRange
//==================================================================================
function plot$setRange(points)
{
	if (point.length == 0) return;
	for (i=0; i < points.length; ++i)
	{
		this.setRangePoint(points(i));
	}
}
//==================================================================================
//								plot$setRangePoint
//==================================================================================
function plot$setRangePoint(point)
{
	if (this.range.count == 0)
	{
		this.range.count = 1;
		this.range.xmin = point.x;
		this.range.ymin = point.y;
		this.range.zmin = point.z;

		this.range.xmax = point.x;
		this.range.ymax = point.y;
		this.range.zmax = point.z;
		return;	
	}

	this.range.count = this.range.count + 1;
	if (point.x < this.range.xmin) this.range.xmin = point.x;
	if (point.y < this.range.ymin) this.range.ymin = point.y;
	if (point.z < this.range.zmin) this.range.zmin = point.z;

	if (point.x > this.range.xmax) this.range.xmax = point.x;
	if (point.y > this.range.ymax) this.range.ymax = point.y;
	if (point.z > this.range.zmax) this.range.zmax = point.z;
}
//==================================================================================
//								plot$addBox
//==================================================================================
function plot$addBox(x1,y1,z1,x2,y2,z2)
{
	var points;
	
	points = new Array();
	points[0] = this.point(x1,y1,z1);
	points[1] = this.point(x1,y2,z1);
	points[2] = this.point(x2,y2,z1);
	points[3] = this.point(x2,y1,z1);
	points[4] = this.point(x1,y1,z1);

	points[5] = this.point(x1,y1,z2);
	points[6] = this.point(x1,y2,z2);
	points[7] = this.point(x1,y2,z1);
	points[8] = this.point(x1,y1,z1);
	
	points[9] = this.point(x1,y1,z2);
	points[10] = this.point(x1,y2,z2);
	points[11] = this.point(x1,y2,z1);
	this.addLine(points);

	points = new Array();
	points[0] = this.point(x1,y1,z2);
	points[1] = this.point(x2,y1,z2);
	points[2] = this.point(x2,y2,z2);
	points[3] = this.point(x1,y2,z2);
	this.addLine(points);

	points = new Array();
	points[0] = this.point(x2,y2,z1);
	points[1] = this.point(x2,y2,z2);
	this.addLine(points);

	points = new Array();
	points[0] = this.point(x1,y2,z1);
	points[1] = this.point(x1,y2,z2);
	this.addLine(points);

}
//==================================================================================
//								plot$addLine
//==================================================================================
function plot$addLine(points)
{
	var line,pnt,i;
	
	if (points.length == 0) return;
	line = new Array()

	for (i=0; i < points.length; ++i)
	{
		pnt = new Object();
		pnt.x = points[i].x;
		pnt.y = points[i].y;
		pnt.z = points[i].z;
		this.setRangePoint(pnt);
		line[i] = pnt;
	}

	this.lines[this.lines.length] = line;
}
//==================================================================================
//								plot$flush
//==================================================================================
function plot$flush()
{
	var i;
	
	this.setEye();
	this.data = new Object();
	this.data.lines = new Array();

	
	for (i=0; i < this.lines.length; ++i)
	{
		this.flushLine_(this.lines[i]);
	}
}
//==================================================================================
//								plot$flushLine_
//==================================================================================
function plot$flushLine_(points)
{
	var i,line;
	var p1,p2;


	for (i=0; i < points.length-1; ++i)
	{

		line = this.clip(points[i],points[i+1]);
		if (line != null)
		{
			p1 = new Object();
			p1.x = line[0].x;
			p1.y = line[0].y;
			
			p2 = new Object();
			p2.x = line[1].x;
			p2.y = line[1].y;

			this.flushAdd_(p1,p2);
		}
	}


}
//==================================================================================
//								plot$flushAdd_
//==================================================================================
function plot$flushAdd_(p1,p2)
{
	var line,p,dx,dy;
	
	if (this.data.lines.length == 0)
	{
		line = new Array();
		line[0] = p1;
		line[1] = p2;
		this.data.lines[this.data.lines.length] = line;
		return;
	}

	line = 	this.data.lines[this.data.lines.length-1]
	p = line[line.length-1];
	dx = p1.x - p.x;
	dy = p1.y - p.y;

	
	if ((dx == 0) && (dy == 0))
	{
		line[line.length] = p2;
		return;
	}
	
	line = new Array();
	line[0] = p1;
	line[1] = p2;
	this.data.lines[this.data.lines.length] = line;

}
//==================================================================================
//								plot$setEye
//==================================================================================
function plot$setEye()
{
	var x,y,z,alpha,beta,angle,dist;
	
	this.eye = new plotMatrix$();
	this.cx = this.lookAt.x;
	this.cy = this.lookAt.y;
	this.cz = this.lookAt.z;

	this.view.xorigin = this.lookAt.x;
	this.view.yorigin = this.lookAt.y;

	this.eye = this.move(this.eye,-this.cx,-this.cx,-this.cz);
	
	x = this.lookFrom.x - this.lookAt.x;
	y = this.lookFrom.y - this.lookAt.y;
	z = this.lookFrom.z - this.lookAt.z;

	this.eye = this.move(this.eye,-x,-y,-z);
	this.cx = 0;
	this.cy = 0;
	this.cz = 0;
	angle = -90;
	this.eye = this.rotate(this.eye,angle,'x');

	alpha = Math.atan(y / x);
	alpha = alpha * 180 / Math.PI;
	alpha = -(alpha + 90);
	this.eye = this.rotate(this.eye, alpha,'y');

	dist = Math.sqrt(x*x + y*y);
	if (dist < 0.0001) dist = 1;
	beta = Math.atan(z / dist);
	beta = - (beta * 180 / Math.PI);
	this.eye = this.rotate(this.eye,beta,'x');

	angle = Math.atan(y / x);
	angle = angle * 180 / Math.PI;
	angle = -(angle + 90);
	this.eye = this.rotate(this.eye,angle,'y');
		
	dist = 10;
	this.eye = this.scale(this.eye,dist,dist,1);

	
}
//==================================================================================
//								plot$setLookAt
//==================================================================================
function plot$setLookAt(x,y,z)
{
	this.lookAt.x = parseFloat(x);
	this.lookAt.y = parseFloat(y);
	this.lookAt.z = parseFloat(z);
}
//==================================================================================
//								plot$setLookFrom
//==================================================================================
function plot$setLookFrom(x,y,z)
{
	this.lookFrom.x = parseFloat(x);
	this.lookFrom.y = parseFloat(y);
	this.lookFrom.z = parseFloat(z);
}
//==================================================================================
//								plot$code
//==================================================================================
function plot$code(x,y,z)
{
	var left 	= 1;
	var right 	= 2;
	var top		= 4;
	var bottom	= 8;
	
	var c = 0;
	
	if (x < -z) c += left;
	else if (x >  z) c += right;

	if (y < -z) c += bottom;
	else if (y >  z) c += top;

	return c;	
}
//==================================================================================
//								plot$clip
//==================================================================================
function plot$clip(p1,p2)
{
	var left 	= 1;
	var right 	= 2;
	var top		= 4;
	var bottom	= 8;
	var x,y,z,line;
	var x1,y1,z1;
	var x2,y2,z2,t;
	var c,c1,c2;

	x1 = p1.x;
	y1 = p1.y;
	z1 = p1.z;

	x2 = p2.x;
	y2 = p2.y;
	z2 = p2.z;

	c1 = this.code(x1,y1,z1);
	c2 = this.code(x2,y2,z2);

	while ((c1 != 0) || (c2 != 0))
	{
		if ((c1 & c2) != 0) return null;
		c = c1;
		if (c == 0) c = c2;
		if ((c & left) != 0)
		{
			t = (z1 + x1) / ((x1 - x2) - (z2 - z1))
			z = t * (z2 - z1) + z1;
			x = -z;
			y = t * (y2 - y1) + y1;
		}
		else
		if ((c & right) != 0)
		{
			t = (z1 - x1) / ((x2 - x1) - (z2 - z1))
			z = t * (z2 - z1) + z1;
			x = z;
			y = t * (y2 - y1) + y1;	
		}
		else
		if ((c & bottom) != 0)
		{
			t = (z1 + y1) / ((y1 - y2) - (z2 - z1))
			z = t * (z2 - z1) + z1;
			y = -z;
			x = t * (x2 - x1) + x1;
		}
		else
		if ((c & top) != 0)
		{
			t = (z1 - y1) / ((y2 - y1) - (z2 - z1))
			z = t * (z2 - z1) + z1;
			y = z;
			x = t * (x2 - x1) + x1;	
		}
	
		if (c == c1)
		{
			x1 = x;
			y1 = y;
			z1 = z;
			c1 = this.code(x,y,z);
		}
		else
		{
			x2 = x;
			y2 = y;
			z2 = z;
			c2 = this.code(x,y,z);
		}
	}

	line = new Array();
	line[0] = this.transform(x1,y1,z1);
	line[1] = this.transform(x2,y2,z2);

	return line;	
}
//==================================================================================
//								plot$transform
//==================================================================================
function plot$transform(x,y,z)
{
	var p;
	
	p = new Object();
	p.x = 0;
	p.y = 0;
	
	if (Math.abs(z) > 0.0000001) 
	{
		p.x = x / z;
		p.y = y / z;
	}
	
	p.x = p.x * this.view.xscale + this.view.xorigin;
	p.y = p.y * this.view.yscale + this.view.yorigin;
	
	return p;
}
//==================================================================================
//								plot$cross
//==================================================================================
function plot$cross(a,b)
{
	var temp,c,i,j,k;

	c = new plotMatrix$();
	
	temp = new Array();
	for (i = 0; i < 4; ++i)
	{
		for (k=0; k < 4; ++k)
		{
			temp[k] = 0;
			for (j = 0; j < 4; ++j)
				temp[k] = a.v[i][j] * b.v[j][k] + temp[k];
		}
		for (j = 0; j < 4; ++j)
			c.v[i][j] = temp[j];
	}

	return c;
}
//==================================================================================
//								plot$move
//==================================================================================
function plot$move(mat,x,y,z)
{
	var temp,mov;

	mov = new plotMatrix$();
	
	this.cx = this.cx + x;
	this.cy = this.cy + y;
	this.cz = this.cz + z;

	mov.v[0][3] =  x;
	mov.v[1][3] =  y;
	mov.v[2][3] =  z;

	mov = this.cross(mat,mov);
	return mov
}
//==================================================================================
//								plot$rotate
//==================================================================================
function plot$rotate(mat,angle,axis)
{
	var temp,mov,rot,m,cos,sin;

	mov = new plotMatrix$();
	rot = new plotMatrix$();

	mov.v[3][0] = -this.cx;
	mov.v[3][1] = -this.cy;
	mov.v[3][2] = -this.cz;

	m = this.cross(mat,mov);

	angle = angle / 180 * Math.PI;
	cos		= Math.cos(angle);
	sin		= Math.sin(angle);

	switch (axis)
	{
	case 'y': 
			rot.v[0][0] =  cos;
			rot.v[0][2] =  sin;
			rot.v[2][0] = -sin;
			rot.v[2][2] =  cos;
			break;
	case 'z': 
			rot.v[0][0] =  cos;
			rot.v[0][1] = -sin;
			rot.v[1][0] =  sin;
			rot.v[1][1] =  cos;
			break;
	default:
			rot.v[1][1] =  cos;
			rot.v[1][2] = -sin;
			rot.v[2][1] =  sin;
			rot.v[2][2] =  cos;
			break;
	}
	
	m = this.cross(m,rot);

	mov.v[3][0] = this.cx;
	mov.v[3][1] = this.cy;
	mov.v[3][2] = this.cz;

	m = this.cross(m,mov);
	return m;
}
//==================================================================================
//								plot$scale
//==================================================================================
function plot$scale(mat,sx,sy,sz)
{
	var mov,scl,m;

	mov = new plotMatrix$();
	scl = new plotMatrix$();

	mov.v[3][0] = -this.cx;
	mov.v[3][1] = -this.cy;
	mov.v[3][2] = -this.cz;

	m = this.cross(mat,mov);
	
	scl.v[0][0] = sx;
	scl.v[1][1] = sy;
	scl.v[2][2] = sz;

	m = this.cross(m,scl);

	mov.v[3][0] = this.cx;
	mov.v[3][1] = this.cy;
	mov.v[3][2] = this.cz;

	m = this.cross(m,mov);
	return m;
}
//==================================================================================
//								plot$multiply
//==================================================================================
function plot$multiply(points)
{
	var i,j,list,tmp,mat;
	var tx,ty,tz;

	mat = this.cross(this.mat,this.exe)
	list = new Array();

	for (i=0; i < points.length; ++i)
	{
		tx = 0;
		ty = 0;
		tz = 0;

		tmp = this.data[i,3];
		for (j = 0; j < 4; ++j)
		{
			tx = points[i].x * mat.v[j][0] + tx;
			ty = points[i].y * mat.v[j][1] + ty;
			tz = points[i].z * mat.v[j][2] + tz;
		}

		list[i] = new Array();
		list[i].x = tx;
		list[i].y = ty;
		list[i].z = tz;
		list[i].one = tmp;
	}
	return list;
}
//==================================================================================
//								plotMatrix$
//==================================================================================
function plotMatrix$()
{
	var r;

	this.v	= new Array(4);

	for (r = 0; r < 4; ++r)
	{
		this.v[r] = new Array(0,0,0,0);
		this.v[r][r] = 1;
	}

	this.toString = plotMatrix$toString;
	
}
//==================================================================================
//								plotMatrix$toString
//==================================================================================
function plotMatrix$toString()
{
	var text,r,c ;
	
	text = "<matrix>\r\n";

	for (r=0; r < 4; ++ r)
	{
		for (c=0; c < 4; ++c)
		{	
			if (c > 0) text += ' ';
			text += this.v[r][c];
		}
		
		text += "\r\n";
	}
	
	text += "</matrix>";
	
	return text;	
	
}
</script>
</head>

<body>
<input type=button value="Make 3D Model" onclick=execute()>&nbsp; <i>
<font size="2"><br>
Copy and Paste 
into NotePad, Save as &quot;C:/temp/Sample.dae&quot;;<br>
Import into MeshLab, Export to .u3d format</font></i><font size="2">
(<a nohref onclick="viewCode()" style="cursor:hand;color:blue"><u>View Source Code</u></a>),
<br>
</font><i><font size="2">to create PDF; Adam('utility.pdf open',&quot;&lt;IMG SRC=sample.u3d&gt;&quot;)</font></i><br>
<textarea id=myData style="width:100%" rows=40></textarea>

</body>

<script>
function getTemplate() { var text = 
	'<?xml version="1.0" encoding="UTF-8" standalone="no" ?>\r\n'+
	'<COLLADA xmlns="http://www.collada.org/2005/11/COLLADASchema" version="1.4.1">\r\n'+
	'    <asset>\r\n'+
	'        <created>2011-09-29T16:45:30Z</created>\r\n'+
	'        <modified>2011-09-29T16:45:30Z</modified>\r\n'+
	'        <unit meter="0.304878" name="feet" />\r\n'+
	'        <up_axis>Z_UP</up_axis>\r\n'+
	'    </asset>\r\n'+
	'    <library_visual_scenes>\r\n'+
	'        <visual_scene id="ID1">\r\n'+
	'	|nodes|\r\n'+
	'        </visual_scene>\r\n'+
	'    </library_visual_scenes>\r\n'+
	'    <library_geometries>\r\n'+
	'        <geometry id="IDA2">\r\n'+
	'            <mesh>\r\n'+
	'                <source id="IDA5">\r\n'+
	'                    <float_array id="IDA10" count="144">\r\n'+
	'1 1 0 0 0 0 0 1 0 1 0 0 1 0 0 1 1 0 0 0 0 0 1 0 1 1 0 1 0 1 1 0 0 1 1 1 1 1 1 1 1 0 1 0 1 1 0 0 1 0 1 0 0 0 1 0 0 0 0 1 0 0 1 1 0 1 0 0 0 1 0 0 0 1 1 0 0 0 0 0 1 0 1 0 0 1 0 0 1 1 0 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 1 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 0 1 1 0 0 1 1 1 1 1 1 1 1 0 1 0 1 1 0 0 1\r\n'+
	'</float_array>\r\n'+
	'                    <technique_common>\r\n'+
	'                        <accessor count="48" source="#IDA10" stride="3">\r\n'+
	'                            <param name="X" type="float" />\r\n'+
	'                            <param name="Y" type="float" />\r\n'+
	'                            <param name="Z" type="float" />\r\n'+
	'                        </accessor>\r\n'+
	'                    </technique_common>\r\n'+
	'                </source>\r\n'+
	'                <vertices id="IDA7">\r\n'+
	'                    <input semantic="POSITION" source="#IDA5" />\r\n'+
	'                </vertices>\r\n'+
	'                <triangles count="12" material="Material3">\r\n'+
	'                    <input offset="0" semantic="VERTEX" source="#IDA7" />\r\n'+
	'                    <p>0 1 2 1 0 3 8 9 10 9 8 11 16 17 18 17 16 19 24 25 26 25 24 27 32 33 34 33 32 35 40 41 42 41 40 43</p>\r\n'+
	'                </triangles>\r\n'+
	'                <triangles count="12" material="Material2">\r\n'+
	'                    <input offset="0" semantic="VERTEX" source="#IDA7" />\r\n'+
	'                    <p>4 5 6 7 6 5 12 13 14 15 14 13 20 21 22 23 22 21 28 29 30 31 30 29 36 37 38 39 38 37 44 45 46 47 46 45</p>\r\n'+
	'                </triangles>\r\n'+
	'            </mesh>\r\n'+
	'        </geometry>\r\n'+
	'\r\n'+
	'        <geometry id="IDB2">\r\n'+
	'            <mesh>\r\n'+
	'                <source id="IDB5">\r\n'+
	'                    <float_array id="IDB8" count="432">-31.17691453623978 18.00000000000001 0 -31.62380425493757 -0.3234454632120674 0 -34.77332974640645 9.317485623690775 0 -30.53343069618775 7.958763980068596 0 -25.4558441227157 25.45584412271573 0 -27.33661717603961 15.67655453678793 0 -22.25122125290709 22.30397153475745 0 -17.99999999999999 31.1769145362398 0 -15.62380425493757 27.38936745788997 0 -9.317485623690732 34.77332974640646 0 -7.906013698218239 30.58618097803812 0 4.408728476930472e-015 36 0 0.3761957450624303 31.67655453678793 0 9.317485623690757 34.77332974640645 0 8.658405188343092 30.58618097803812 0 16.37619574506243 27.38936745788997 0 18.00000000000001 31.17691453623979 0 23.00361274303195 22.30397153475746 0 25.45584412271571 25.45584412271571 0 28.08900866616446 15.67655453678794 0 31.17691453623979 17.99999999999999 0 31.28582218631262 7.958763980068605 0 34.77332974640646 9.317485623690743 0 32.37619574506243 -0.3234454632120634 0 34.77332974640645 -9.317485623690754 0 36 -2.204364238465236e-015 0 -34.77332974640646 -9.317485623690731 0 -36 6.613092715395707e-015 0 -31.17691453623981 -17.99999999999998 0 -30.53343069618775 -8.605654906492758 0 -25.45584412271572 -25.4558441227157 0 -27.3366171760396 -16.32344546321208 0 -22.25122125290708 -22.95086246118159 0 -18.00000000000001 -31.17691453623978 0 -15.62380425493755 -28.03625838431412 0 -9.317485623690777 -34.77332974640645 0 -7.906013698218217 -31.23307190446226 0 0 -36 0 0.3761957450624381 -32.32344546321207 0 9.317485623690747 -34.77332974640646 0 8.658405188343121 -31.23307190446225 0 16.37619574506245 -28.0362583843141 0 18 -31.17691453623979 0 23.00361274303197 -22.95086246118158 0 25.45584412271571 -25.45584412271571 0 28.08900866616447 -16.32344546321206 0 31.17691453623979 -18 0 31.28582218631262 -8.605654906492719 0 -34.77332974640646 -9.317485623690731 12 -31.17691453623981 -17.99999999999998 0 -31.17691453623981 -17.99999999999998 12 -34.77332974640646 -9.317485623690731 0 -36 6.613092715395707e-015 12 -36 6.613092715395707e-015 0 -34.77332974640645 9.317485623690775 12 -34.77332974640645 9.317485623690775 0 -31.17691453623978 18.00000000000001 12 -31.17691453623978 18.00000000000001 0 -25.4558441227157 25.45584412271573 12 -25.4558441227157 25.45584412271573 0 -17.99999999999999 31.1769145362398 0 -17.99999999999999 31.1769145362398 12 -9.317485623690732 34.77332974640646 0 -9.317485623690732 34.77332974640646 12 4.408728476930472e-015 36 0 4.408728476930472e-015 36 12 9.317485623690757 34.77332974640645 0 9.317485623690757 34.77332974640645 12 18.00000000000001 31.17691453623979 0 18.00000000000001 31.17691453623979 12 25.45584412271571 25.45584412271571 0 25.45584412271571 25.45584412271571 12 31.17691453623979 17.99999999999999 12 31.17691453623979 17.99999999999999 0 34.77332974640646 9.317485623690743 12 34.77332974640646 9.317485623690743 0 36 -2.204364238465236e-015 12 36 -2.204364238465236e-015 0 34.77332974640645 -9.317485623690754 12 34.77332974640645 -9.317485623690754 0 31.17691453623979 -18 12 31.17691453623979 -18 0 25.45584412271571 -25.45584412271571 12 25.45584412271571 -25.45584412271571 0 18 -31.17691453623979 0 18 -31.17691453623979 12 9.317485623690747 -34.77332974640646 0 9.317485623690747 -34.77332974640646 12 0 -36 0 0 -36 12 -9.317485623690777 -34.77332974640645 0 -9.317485623690777 -34.77332974640645 12 -18.00000000000001 -31.17691453623978 0 -18.00000000000001 -31.17691453623978 12 -25.45584412271572 -25.4558441227157 0 -25.45584412271572 -25.4558441227157 12 -34.77332974640646 -9.317485623690731 12 -34.77332974640645 9.317485623690775 12 -36 6.613092715395707e-015 12 -31.17691453623981 -17.99999999999998 12 -31.62380425493757 -0.3234454632120674 12 -30.53343069618775 -8.605654906492758 12 -25.45584412271572 -25.4558441227157 12 -27.3366171760396 -16.32344546321208 12 -22.25122125290708 -22.95086246118159 12 -18.00000000000001 -31.17691453623978 12 -15.62380425493755 -28.03625838431412 12 -9.317485623690777 -34.77332974640645 12 -7.906013698218217 -31.23307190446226 12 0 -36 12 0.3761957450624381 -32.32344546321207 12 9.317485623690747 -34.77332974640646 12 8.658405188343121 -31.23307190446225 12 16.37619574506245 -28.0362583843141 12 18 -31.17691453623979 12 23.00361274303197 -22.95086246118158 12 25.45584412271571 -25.45584412271571 12 28.08900866616447 -16.32344546321206 12 31.17691453623979 -18 12 31.28582218631262 -8.605654906492719 12 34.77332974640645 -9.317485623690754 12 32.37619574506243 -0.3234454632120634 12 -31.17691453623978 18.00000000000001 12 -30.53343069618775 7.958763980068596 12 -25.4558441227157 25.45584412271573 12 -27.33661717603961 15.67655453678793 12 -22.25122125290709 22.30397153475745 12 -17.99999999999999 31.1769145362398 12 -15.62380425493757 27.38936745788997 12 -9.317485623690732 34.77332974640646 12 -7.906013698218239 30.58618097803812 12 4.408728476930472e-015 36 12 0.3761957450624303 31.67655453678793 12 9.317485623690757 34.77332974640645 12 8.658405188343092 30.58618097803812 12 16.37619574506243 27.38936745788997 12 18.00000000000001 31.17691453623979 12 23.00361274303195 22.30397153475746 12 25.45584412271571 25.45584412271571 12 28.08900866616446 15.67655453678794 12 31.17691453623979 17.99999999999999 12 31.28582218631262 7.958763980068605 12 34.77332974640646 9.317485623690743 12 36 -2.204364238465236e-015 12</float_array>\r\n'+
	'                    <technique_common>\r\n'+
	'                        <accessor count="144" source="#IDB8" stride="3">\r\n'+
	'                            <param name="X" type="float" />\r\n'+
	'                            <param name="Y" type="float" />\r\n'+
	'                            <param name="Z" type="float" />\r\n'+
	'                        </accessor>\r\n'+
	'                    </technique_common>\r\n'+
	'                </source>\r\n'+
	'                <source id="IDB6">\r\n'+
	'                    <float_array id="IDB9" count="432">0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 -0.9659258262890684 -0.2588190451025202 0 -0.866025403784439 -0.4999999999999994 0 -0.866025403784439 -0.4999999999999994 0 -0.9659258262890684 -0.2588190451025202 0 -1 1.693110880172912e-016 0 -1 1.693110880172912e-016 0 -0.965925826289068 0.2588190451025214 0 -0.965925826289068 0.2588190451025214 0 -0.8660254037844384 0.5000000000000007 0 -0.8660254037844384 0.5000000000000007 0 -0.7071067811865475 0.7071067811865477 0 -0.7071067811865475 0.7071067811865477 0 -0.4999999999999997 0.8660254037844389 0 -0.4999999999999997 0.8660254037844389 0 -0.2588190451025204 0.9659258262890684 0 -0.2588190451025204 0.9659258262890684 0 2.584221869737603e-016 1 0 2.584221869737603e-016 1 0 0.258819045102521 0.9659258262890682 0 0.258819045102521 0.9659258262890682 0 0.5 0.8660254037844386 0 0.5 0.8660254037844386 0 0.7071067811865478 0.7071067811865472 0 0.7071067811865478 0.7071067811865472 0 0.8660254037844388 0.4999999999999999 0 0.8660254037844388 0.4999999999999999 0 0.9659258262890683 0.2588190451025208 0 0.9659258262890683 0.2588190451025208 0 1 -3.207999562432885e-016 0 1 -3.207999562432885e-016 0 0.9659258262890683 -0.258819045102521 0 0.9659258262890683 -0.258819045102521 0 0.8660254037844388 -0.4999999999999999 0 0.8660254037844388 -0.4999999999999999 0 0.7071067811865475 -0.7071067811865477 0 0.7071067811865475 -0.7071067811865477 0 0.4999999999999999 -0.8660254037844388 0 0.4999999999999999 -0.8660254037844388 0 0.2588190451025208 -0.9659258262890682 0 0.2588190451025208 -0.9659258262890682 0 -1.603999781216443e-016 -1 0 -1.603999781216443e-016 -1 0 -0.2588190451025214 -0.9659258262890682 0 -0.2588190451025214 -0.9659258262890682 0 -0.5000000000000006 -0.8660254037844384 0 -0.5000000000000006 -0.8660254037844384 0 -0.7071067811865477 -0.7071067811865474 0 -0.7071067811865477 -0.7071067811865474 0 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1 -0 -0 1</float_array>\r\n'+
	'                    <technique_common>\r\n'+
	'                        <accessor count="144" source="#IDB9" stride="3">\r\n'+
	'                            <param name="X" type="float" />\r\n'+
	'                            <param name="Y" type="float" />\r\n'+
	'                            <param name="Z" type="float" />\r\n'+
	'                        </accessor>\r\n'+
	'                    </technique_common>\r\n'+
	'                </source>\r\n'+
	'                <vertices id="IDB7">\r\n'+
	'                    <input semantic="POSITION" source="#IDB5" />\r\n'+
	'                    <input semantic="NORMAL" source="#IDB6" />\r\n'+
	'                </vertices>\r\n'+
	'                <triangles count="144" material="Material2">\r\n'+
	'                    <input offset="0" semantic="VERTEX" source="#IDB7" />\r\n'+
	'                    <p>0 1 2 1 0 3 3 0 4 3 4 5 5 4 6 6 4 7 6 7 8 8 7 9 8 9 10 10 9 11 10 11 12 12 11 13 12 13 14 14 13 15 15 13 16 15 16 17 17 16 18 17 18 19 19 18 20 19 20 21 21 20 22 21 22 23 23 22 24 24 22 25 2 26 27 26 2 28 28 2 1 28 1 29 28 29 30 30 29 31 30 31 32 30 32 33 33 32 34 33 34 35 35 34 36 35 36 37 37 36 38 37 38 39 39 38 40 39 40 41 39 41 42 42 41 43 42 43 44 44 43 45 44 45 46 46 45 47 46 47 24 24 47 23 48 49 50 49 48 51 52 51 48 51 52 53 54 53 52 53 54 55 56 55 54 55 56 57 58 57 56 57 58 59 58 60 59 60 58 61 61 62 60 62 61 63 63 64 62 64 63 65 65 66 64 66 65 67 67 68 66 68 67 69 69 70 68 70 69 71 70 72 73 72 70 71 73 74 75 74 73 72 75 76 77 76 75 74 77 78 79 78 77 76 79 80 81 80 79 78 81 82 83 82 81 80 82 84 83 84 82 85 85 86 84 86 85 87 87 88 86 88 87 89 89 90 88 90 89 91 91 92 90 92 91 93 93 94 92 94 93 95 50 94 95 94 50 49 96 97 98 97 96 99 97 99 100 100 99 101 101 99 102 101 102 103 103 102 104 104 102 105 104 105 106 106 105 107 106 107 108 108 107 109 108 109 110 110 109 111 110 111 112 112 111 113 113 111 114 113 114 115 115 114 116 115 116 117 117 116 118 117 118 119 119 118 120 119 120 121 100 122 97 122 100 123 122 123 124 124 123 125 124 125 126 124 126 127 127 126 128 127 128 129 129 128 130 129 130 131 131 130 132 131 132 133 133 132 134 133 134 135 133 135 136 136 135 137 136 137 138 138 137 139 138 139 140 140 139 141 140 141 142 142 141 121 142 121 120 142 120 143</p>\r\n'+
	'                </triangles>\r\n'+
	'            </mesh>\r\n'+
	'        </geometry>\r\n'+
	'\r\n'+
	'        <geometry id="IDB10">\r\n'+
	'            <mesh>\r\n'+
	'                <source id="IDB11">\r\n'+
	'                    <float_array id="IDB14" count="216">-30.53343069618775 7.958763980068596 0 -30.53343069618775 -8.605654906492758 0 -31.62380425493757 -0.3234454632120674 0 -27.33661717603961 15.67655453678793 0 -27.3366171760396 -16.32344546321208 0 -22.25122125290709 22.30397153475745 0 -22.25122125290708 -22.95086246118159 0 -15.62380425493757 27.38936745788997 0 -15.62380425493755 -28.03625838431412 0 -7.906013698218239 30.58618097803812 0 -7.906013698218217 -31.23307190446226 0 0.3761957450624303 31.67655453678793 0 0.3761957450624381 -32.32344546321207 0 8.658405188343092 30.58618097803812 0 8.658405188343121 -31.23307190446225 0 16.37619574506243 27.38936745788997 0 16.37619574506245 -28.0362583843141 0 23.00361274303195 22.30397153475746 0 23.00361274303197 -22.95086246118158 0 28.08900866616446 15.67655453678794 0 28.08900866616447 -16.32344546321206 0 31.28582218631262 7.958763980068605 0 31.28582218631262 -8.605654906492719 0 32.37619574506243 -0.3234454632120634 0 28.08900866616446 15.67655453678794 12 31.28582218631262 7.958763980068605 0 31.28582218631262 7.958763980068605 12 28.08900866616446 15.67655453678794 0 32.37619574506243 -0.3234454632120634 0 32.37619574506243 -0.3234454632120634 12 31.28582218631262 -8.605654906492719 0 31.28582218631262 -8.605654906492719 12 28.08900866616447 -16.32344546321206 0 28.08900866616447 -16.32344546321206 12 23.00361274303197 -22.95086246118158 0 23.00361274303197 -22.95086246118158 12 16.37619574506245 -28.0362583843141 12 16.37619574506245 -28.0362583843141 0 8.658405188343121 -31.23307190446225 12 8.658405188343121 -31.23307190446225 0 0.3761957450624381 -32.32344546321207 12 0.3761957450624381 -32.32344546321207 0 -7.906013698218217 -31.23307190446226 12 -7.906013698218217 -31.23307190446226 0 -15.62380425493755 -28.03625838431412 12 -15.62380425493755 -28.03625838431412 0 -22.25122125290708 -22.95086246118159 12 -22.25122125290708 -22.95086246118159 0 -27.3366171760396 -16.32344546321208 0 -27.3366171760396 -16.32344546321208 12 -30.53343069618775 -8.605654906492758 0 -30.53343069618775 -8.605654906492758 12 -31.62380425493757 -0.3234454632120674 0 -31.62380425493757 -0.3234454632120674 12 -30.53343069618775 7.958763980068596 0 -30.53343069618775 7.958763980068596 12 -27.33661717603961 15.67655453678793 0 -27.33661717603961 15.67655453678793 12 -22.25122125290709 22.30397153475745 0 -22.25122125290709 22.30397153475745 12 -15.62380425493757 27.38936745788997 12 -15.62380425493757 27.38936745788997 0 -7.906013698218239 30.58618097803812 12 -7.906013698218239 30.58618097803812 0 0.3761957450624303 31.67655453678793 12 0.3761957450624303 31.67655453678793 0 8.658405188343092 30.58618097803812 12 8.658405188343092 30.58618097803812 0 16.37619574506243 27.38936745788997 12 16.37619574506243 27.38936745788997 0 23.00361274303195 22.30397153475746 12 23.00361274303195 22.30397153475746 0</float_array>\r\n'+
	'                    <technique_common>\r\n'+
	'                        <accessor count="72" source="#IDB14" stride="3">\r\n'+
	'                            <param name="X" type="float" />\r\n'+
	'                            <param name="Y" type="float" />\r\n'+
	'                            <param name="Z" type="float" />\r\n'+
	'                        </accessor>\r\n'+
	'                    </technique_common>\r\n'+
	'                </source>\r\n'+
	'                <source id="IDB12">\r\n'+
	'                    <float_array id="IDB15" count="216">0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 0 0 -1 -0.8660254037844386 -0.5000000000000002 0 -0.9659258262890682 -0.2588190451025209 0 -0.9659258262890682 -0.2588190451025209 0 -0.8660254037844386 -0.5000000000000002 0 -1 -3.029777364519948e-016 0 -1 -3.029777364519948e-016 0 -0.9659258262890684 0.2588190451025205 0 -0.9659258262890684 0.2588190451025205 0 -0.8660254037844388 0.4999999999999997 0 -0.8660254037844388 0.4999999999999997 0 -0.7071067811865478 0.7071067811865472 0 -0.7071067811865478 0.7071067811865472 0 -0.5000000000000004 0.8660254037844384 0 -0.5000000000000004 0.8660254037844384 0 -0.2588190451025214 0.9659258262890682 0 -0.2588190451025214 0.9659258262890682 0 -4.455554947823453e-016 1 0 -4.455554947823453e-016 1 0 0.2588190451025202 0.9659258262890684 0 0.2588190451025202 0.9659258262890684 0 0.4999999999999994 0.8660254037844389 0 0.4999999999999994 0.8660254037844389 0 0.7071067811865471 0.7071067811865479 0 0.7071067811865471 0.7071067811865479 0 0.8660254037844384 0.5000000000000004 0 0.8660254037844384 0.5000000000000004 0 0.9659258262890682 0.2588190451025213 0 0.9659258262890682 0.2588190451025213 0 1 2.138666374955257e-016 0 1 2.138666374955257e-016 0 0.9659258262890683 -0.2588190451025207 0 0.9659258262890683 -0.2588190451025207 0 0.8660254037844387 -0.5 0 0.8660254037844387 -0.5 0 0.7071067811865476 -0.7071067811865475 0 0.7071067811865476 -0.7071067811865475 0 0.5 -0.8660254037844386 0 0.5 -0.8660254037844386 0 0.2588190451025208 -0.9659258262890682 0 0.2588190451025208 -0.9659258262890682 0 1.514888682259974e-016 -1 0 1.514888682259974e-016 -1 0 -0.2588190451025207 -0.9659258262890682 0 -0.2588190451025207 -0.9659258262890682 0 -0.4999999999999998 -0.8660254037844388 0 -0.4999999999999998 -0.8660254037844388 0 -0.7071067811865472 -0.7071067811865478 0 -0.7071067811865472 -0.7071067811865478 0</float_array>\r\n'+
	'                    <technique_common>\r\n'+
	'                        <accessor count="72" source="#IDB15" stride="3">\r\n'+
	'                            <param name="X" type="float" />\r\n'+
	'                            <param name="Y" type="float" />\r\n'+
	'                            <param name="Z" type="float" />\r\n'+
	'                        </accessor>\r\n'+
	'                    </technique_common>\r\n'+
	'                </source>\r\n'+
	'                <vertices id="IDB13">\r\n'+
	'                    <input semantic="POSITION" source="#IDB11" />\r\n'+
	'                    <input semantic="NORMAL" source="#IDB12" />\r\n'+
	'                </vertices>\r\n'+
	'                <triangles count="70" material="Material2">\r\n'+
	'                    <input offset="0" semantic="VERTEX" source="#IDB13" />\r\n'+
	'                    <p>0 1 2 1 0 3 1 3 4 4 3 5 4 5 6 6 5 7 6 7 8 8 7 9 8 9 10 10 9 11 10 11 12 12 11 13 12 13 14 14 13 15 14 15 16 16 15 17 16 17 18 18 17 19 18 19 20 20 19 21 20 21 22 22 21 23 24 25 26 25 24 27 26 28 29 28 26 25 29 30 31 30 29 28 31 32 33 32 31 30 33 34 35 34 33 32 36 34 37 34 36 35 38 37 39 37 38 36 40 39 41 39 40 38 42 41 43 41 42 40 44 43 45 43 44 42 46 45 47 45 46 44 48 46 47 46 48 49 50 49 48 49 50 51 52 51 50 51 52 53 54 53 52 53 54 55 56 55 54 55 56 57 58 57 56 57 58 59 60 58 61 58 60 59 62 61 63 61 62 60 64 63 65 63 64 62 66 65 67 65 66 64 68 67 69 67 68 66 70 69 71 69 70 68 70 27 24 27 70 71</p>\r\n'+
	'                </triangles>\r\n'+
	'            </mesh>\r\n'+
	'        </geometry>\r\n'+
	'\r\n'+
	'    </library_geometries>\r\n'+
	'    <library_materials>\r\n'+
	'        <material id="ID3" name="material_0">\r\n'+
	'            <instance_effect url="#ID4" />\r\n'+
	'        </material>\r\n'+
	'        <material id="ID8" name="material_1">\r\n'+
	'            <instance_effect url="#ID9" />\r\n'+
	'        </material>\r\n'+
	'    </library_materials>\r\n'+
	'    <library_effects>\r\n'+
	'        <effect id="ID4">\r\n'+
	'            <profile_COMMON>\r\n'+
	'                <technique sid="COMMON">\r\n'+
	'                    <lambert>\r\n'+
	'                        <diffuse>\r\n'+
	'                            <color>1 0 0 1</color>\r\n'+
	'                        </diffuse>\r\n'+
	'                    </lambert>\r\n'+
	'                </technique>\r\n'+
	'            </profile_COMMON>\r\n'+
	'        </effect>\r\n'+
	'        <effect id="ID9">\r\n'+
	'            <profile_COMMON>\r\n'+
	'                <technique sid="COMMON">\r\n'+
	'                    <lambert>\r\n'+
	'                        <diffuse>\r\n'+
	'                            <color>0 1 1 1</color>\r\n'+
	'                        </diffuse>\r\n'+
	'                    </lambert>\r\n'+
	'                </technique>\r\n'+
	'            </profile_COMMON>\r\n'+
	'        </effect>\r\n'+
	'        <effect id="ID91">\r\n'+
	'            <profile_COMMON>\r\n'+
	'                <technique sid="COMMON">\r\n'+
	'                    <lambert>\r\n'+
	'                        <diffuse>\r\n'+
	'                            <color>0 1 0 1</color>\r\n'+
	'                        </diffuse>\r\n'+
	'                    </lambert>\r\n'+
	'                </technique>\r\n'+
	'            </profile_COMMON>\r\n'+
	'        </effect>\r\n'+
	'        <effect id="ID92">\r\n'+
	'            <profile_COMMON>\r\n'+
	'                <technique sid="COMMON">\r\n'+
	'                    <lambert>\r\n'+
	'                        <diffuse>\r\n'+
	'                            <color>1 0 1 1</color>\r\n'+
	'                        </diffuse>\r\n'+
	'                    </lambert>\r\n'+
	'                </technique>\r\n'+
	'            </profile_COMMON>\r\n'+
	'        </effect>\r\n'+
	'    </library_effects>\r\n'+
	'    <scene>\r\n'+
	'        <instance_visual_scene url="#ID1" />\r\n'+
	'    </scene>\r\n'+
	'</COLLADA>\r\n'; return text}
</script>
</html>